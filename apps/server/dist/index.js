var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/depd/index.js
var require_depd = __commonJS({
  "../../node_modules/depd/index.js"(exports, module) {
    "use strict";
    var relative = __require("path").relative;
    module.exports = depd;
    var basePath = process.cwd();
    function containsNamespace(str, namespace) {
      var vals = str.split(/[ ,]+/);
      var ns = String(namespace).toLowerCase();
      for (var i = 0; i < vals.length; i++) {
        var val = vals[i];
        if (val && (val === "*" || val.toLowerCase() === ns)) {
          return true;
        }
      }
      return false;
    }
    function convertDataDescriptorToAccessor(obj, prop, message) {
      var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
      var value = descriptor.value;
      descriptor.get = function getter() {
        return value;
      };
      if (descriptor.writable) {
        descriptor.set = function setter(val) {
          return value = val;
        };
      }
      delete descriptor.value;
      delete descriptor.writable;
      Object.defineProperty(obj, prop, descriptor);
      return descriptor;
    }
    function createArgumentsString(arity) {
      var str = "";
      for (var i = 0; i < arity; i++) {
        str += ", arg" + i;
      }
      return str.substr(2);
    }
    function createStackString(stack) {
      var str = this.name + ": " + this.namespace;
      if (this.message) {
        str += " deprecated " + this.message;
      }
      for (var i = 0; i < stack.length; i++) {
        str += "\n    at " + stack[i].toString();
      }
      return str;
    }
    function depd(namespace) {
      if (!namespace) {
        throw new TypeError("argument namespace is required");
      }
      var stack = getStack();
      var site = callSiteLocation(stack[1]);
      var file = site[0];
      function deprecate(message) {
        log.call(deprecate, message);
      }
      deprecate._file = file;
      deprecate._ignored = isignored(namespace);
      deprecate._namespace = namespace;
      deprecate._traced = istraced(namespace);
      deprecate._warned = /* @__PURE__ */ Object.create(null);
      deprecate.function = wrapfunction;
      deprecate.property = wrapproperty;
      return deprecate;
    }
    function eehaslisteners(emitter, type) {
      var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
      return count > 0;
    }
    function isignored(namespace) {
      if (process.noDeprecation) {
        return true;
      }
      var str = process.env.NO_DEPRECATION || "";
      return containsNamespace(str, namespace);
    }
    function istraced(namespace) {
      if (process.traceDeprecation) {
        return true;
      }
      var str = process.env.TRACE_DEPRECATION || "";
      return containsNamespace(str, namespace);
    }
    function log(message, site) {
      var haslisteners = eehaslisteners(process, "deprecation");
      if (!haslisteners && this._ignored) {
        return;
      }
      var caller;
      var callFile;
      var callSite;
      var depSite;
      var i = 0;
      var seen = false;
      var stack = getStack();
      var file = this._file;
      if (site) {
        depSite = site;
        callSite = callSiteLocation(stack[1]);
        callSite.name = depSite.name;
        file = callSite[0];
      } else {
        i = 2;
        depSite = callSiteLocation(stack[i]);
        callSite = depSite;
      }
      for (; i < stack.length; i++) {
        caller = callSiteLocation(stack[i]);
        callFile = caller[0];
        if (callFile === file) {
          seen = true;
        } else if (callFile === this._file) {
          file = this._file;
        } else if (seen) {
          break;
        }
      }
      var key = caller ? depSite.join(":") + "__" + caller.join(":") : void 0;
      if (key !== void 0 && key in this._warned) {
        return;
      }
      this._warned[key] = true;
      var msg = message;
      if (!msg) {
        msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
      }
      if (haslisteners) {
        var err = DeprecationError(this._namespace, msg, stack.slice(i));
        process.emit("deprecation", err);
        return;
      }
      var format = process.stderr.isTTY ? formatColor : formatPlain;
      var output = format.call(this, msg, caller, stack.slice(i));
      process.stderr.write(output + "\n", "utf8");
    }
    function callSiteLocation(callSite) {
      var file = callSite.getFileName() || "<anonymous>";
      var line = callSite.getLineNumber();
      var colm = callSite.getColumnNumber();
      if (callSite.isEval()) {
        file = callSite.getEvalOrigin() + ", " + file;
      }
      var site = [file, line, colm];
      site.callSite = callSite;
      site.name = callSite.getFunctionName();
      return site;
    }
    function defaultMessage(site) {
      var callSite = site.callSite;
      var funcName = site.name;
      if (!funcName) {
        funcName = "<anonymous@" + formatLocation(site) + ">";
      }
      var context = callSite.getThis();
      var typeName = context && callSite.getTypeName();
      if (typeName === "Object") {
        typeName = void 0;
      }
      if (typeName === "Function") {
        typeName = context.name || typeName;
      }
      return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
    }
    function formatPlain(msg, caller, stack) {
      var timestamp = (/* @__PURE__ */ new Date()).toUTCString();
      var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
      if (this._traced) {
        for (var i = 0; i < stack.length; i++) {
          formatted += "\n    at " + stack[i].toString();
        }
        return formatted;
      }
      if (caller) {
        formatted += " at " + formatLocation(caller);
      }
      return formatted;
    }
    function formatColor(msg, caller, stack) {
      var formatted = "\x1B[36;1m" + this._namespace + "\x1B[22;39m \x1B[33;1mdeprecated\x1B[22;39m \x1B[0m" + msg + "\x1B[39m";
      if (this._traced) {
        for (var i = 0; i < stack.length; i++) {
          formatted += "\n    \x1B[36mat " + stack[i].toString() + "\x1B[39m";
        }
        return formatted;
      }
      if (caller) {
        formatted += " \x1B[36m" + formatLocation(caller) + "\x1B[39m";
      }
      return formatted;
    }
    function formatLocation(callSite) {
      return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
    }
    function getStack() {
      var limit = Error.stackTraceLimit;
      var obj = {};
      var prep = Error.prepareStackTrace;
      Error.prepareStackTrace = prepareObjectStackTrace;
      Error.stackTraceLimit = Math.max(10, limit);
      Error.captureStackTrace(obj);
      var stack = obj.stack.slice(1);
      Error.prepareStackTrace = prep;
      Error.stackTraceLimit = limit;
      return stack;
    }
    function prepareObjectStackTrace(obj, stack) {
      return stack;
    }
    function wrapfunction(fn, message) {
      if (typeof fn !== "function") {
        throw new TypeError("argument fn must be a function");
      }
      var args = createArgumentsString(fn.length);
      var stack = getStack();
      var site = callSiteLocation(stack[1]);
      site.name = fn.name;
      var deprecatedfn = new Function(
        "fn",
        "log",
        "deprecate",
        "message",
        "site",
        '"use strict"\nreturn function (' + args + ") {log.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n}"
      )(fn, log, this, message, site);
      return deprecatedfn;
    }
    function wrapproperty(obj, prop, message) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new TypeError("argument obj must be object");
      }
      var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
      if (!descriptor) {
        throw new TypeError("must call property on owner object");
      }
      if (!descriptor.configurable) {
        throw new TypeError("property must be configurable");
      }
      var deprecate = this;
      var stack = getStack();
      var site = callSiteLocation(stack[1]);
      site.name = prop;
      if ("value" in descriptor) {
        descriptor = convertDataDescriptorToAccessor(obj, prop, message);
      }
      var get = descriptor.get;
      var set = descriptor.set;
      if (typeof get === "function") {
        descriptor.get = function getter() {
          log.call(deprecate, message, site);
          return get.apply(this, arguments);
        };
      }
      if (typeof set === "function") {
        descriptor.set = function setter() {
          log.call(deprecate, message, site);
          return set.apply(this, arguments);
        };
      }
      Object.defineProperty(obj, prop, descriptor);
    }
    function DeprecationError(namespace, message, stack) {
      var error = new Error();
      var stackString;
      Object.defineProperty(error, "constructor", {
        value: DeprecationError
      });
      Object.defineProperty(error, "message", {
        configurable: true,
        enumerable: false,
        value: message,
        writable: true
      });
      Object.defineProperty(error, "name", {
        enumerable: false,
        configurable: true,
        value: "DeprecationError",
        writable: true
      });
      Object.defineProperty(error, "namespace", {
        configurable: true,
        enumerable: false,
        value: namespace,
        writable: true
      });
      Object.defineProperty(error, "stack", {
        configurable: true,
        enumerable: false,
        get: function() {
          if (stackString !== void 0) {
            return stackString;
          }
          return stackString = createStackString.call(this, stack);
        },
        set: function setter(val) {
          stackString = val;
        }
      });
      return error;
    }
  }
});

// ../../node_modules/bytes/index.js
var require_bytes = __commonJS({
  "../../node_modules/bytes/index.js"(exports, module) {
    "use strict";
    module.exports = bytes;
    module.exports.format = format;
    module.exports.parse = parse2;
    var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
    var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
    var map = {
      b: 1,
      kb: 1 << 10,
      mb: 1 << 20,
      gb: 1 << 30,
      tb: Math.pow(1024, 4),
      pb: Math.pow(1024, 5)
    };
    var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
    function bytes(value, options) {
      if (typeof value === "string") {
        return parse2(value);
      }
      if (typeof value === "number") {
        return format(value, options);
      }
      return null;
    }
    function format(value, options) {
      if (!Number.isFinite(value)) {
        return null;
      }
      var mag = Math.abs(value);
      var thousandsSeparator = options && options.thousandsSeparator || "";
      var unitSeparator = options && options.unitSeparator || "";
      var decimalPlaces = options && options.decimalPlaces !== void 0 ? options.decimalPlaces : 2;
      var fixedDecimals = Boolean(options && options.fixedDecimals);
      var unit = options && options.unit || "";
      if (!unit || !map[unit.toLowerCase()]) {
        if (mag >= map.pb) {
          unit = "PB";
        } else if (mag >= map.tb) {
          unit = "TB";
        } else if (mag >= map.gb) {
          unit = "GB";
        } else if (mag >= map.mb) {
          unit = "MB";
        } else if (mag >= map.kb) {
          unit = "KB";
        } else {
          unit = "B";
        }
      }
      var val = value / map[unit.toLowerCase()];
      var str = val.toFixed(decimalPlaces);
      if (!fixedDecimals) {
        str = str.replace(formatDecimalsRegExp, "$1");
      }
      if (thousandsSeparator) {
        str = str.split(".").map(function(s, i) {
          return i === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;
        }).join(".");
      }
      return str + unitSeparator + unit;
    }
    function parse2(val) {
      if (typeof val === "number" && !isNaN(val)) {
        return val;
      }
      if (typeof val !== "string") {
        return null;
      }
      var results = parseRegExp.exec(val);
      var floatValue;
      var unit = "b";
      if (!results) {
        floatValue = parseInt(val, 10);
        unit = "b";
      } else {
        floatValue = parseFloat(results[1]);
        unit = results[4].toLowerCase();
      }
      if (isNaN(floatValue)) {
        return null;
      }
      return Math.floor(map[unit] * floatValue);
    }
  }
});

// ../../node_modules/content-type/index.js
var require_content_type = __commonJS({
  "../../node_modules/content-type/index.js"(exports) {
    "use strict";
    var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
    var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
    var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
    var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
    var QUOTE_REGEXP = /([\\"])/g;
    var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
    exports.format = format;
    exports.parse = parse2;
    function format(obj) {
      if (!obj || typeof obj !== "object") {
        throw new TypeError("argument obj is required");
      }
      var parameters2 = obj.parameters;
      var type = obj.type;
      if (!type || !TYPE_REGEXP.test(type)) {
        throw new TypeError("invalid type");
      }
      var string = type;
      if (parameters2 && typeof parameters2 === "object") {
        var param;
        var params = Object.keys(parameters2).sort();
        for (var i = 0; i < params.length; i++) {
          param = params[i];
          if (!TOKEN_REGEXP.test(param)) {
            throw new TypeError("invalid parameter name");
          }
          string += "; " + param + "=" + qstring(parameters2[param]);
        }
      }
      return string;
    }
    function parse2(string) {
      if (!string) {
        throw new TypeError("argument string is required");
      }
      var header = typeof string === "object" ? getcontenttype(string) : string;
      if (typeof header !== "string") {
        throw new TypeError("argument string is required to be a string");
      }
      var index = header.indexOf(";");
      var type = index !== -1 ? header.slice(0, index).trim() : header.trim();
      if (!TYPE_REGEXP.test(type)) {
        throw new TypeError("invalid media type");
      }
      var obj = new ContentType(type.toLowerCase());
      if (index !== -1) {
        var key;
        var match;
        var value;
        PARAM_REGEXP.lastIndex = index;
        while (match = PARAM_REGEXP.exec(header)) {
          if (match.index !== index) {
            throw new TypeError("invalid parameter format");
          }
          index += match[0].length;
          key = match[1].toLowerCase();
          value = match[2];
          if (value.charCodeAt(0) === 34) {
            value = value.slice(1, -1);
            if (value.indexOf("\\") !== -1) {
              value = value.replace(QESC_REGEXP, "$1");
            }
          }
          obj.parameters[key] = value;
        }
        if (index !== header.length) {
          throw new TypeError("invalid parameter format");
        }
      }
      return obj;
    }
    function getcontenttype(obj) {
      var header;
      if (typeof obj.getHeader === "function") {
        header = obj.getHeader("content-type");
      } else if (typeof obj.headers === "object") {
        header = obj.headers && obj.headers["content-type"];
      }
      if (typeof header !== "string") {
        throw new TypeError("content-type header is missing from object");
      }
      return header;
    }
    function qstring(val) {
      var str = String(val);
      if (TOKEN_REGEXP.test(str)) {
        return str;
      }
      if (str.length > 0 && !TEXT_REGEXP.test(str)) {
        throw new TypeError("invalid parameter value");
      }
      return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
    }
    function ContentType(type) {
      this.parameters = /* @__PURE__ */ Object.create(null);
      this.type = type;
    }
  }
});

// ../../node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS({
  "../../node_modules/setprototypeof/index.js"(exports, module) {
    "use strict";
    module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
    function setProtoOf(obj, proto) {
      obj.__proto__ = proto;
      return obj;
    }
    function mixinProperties(obj, proto) {
      for (var prop in proto) {
        if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
          obj[prop] = proto[prop];
        }
      }
      return obj;
    }
  }
});

// ../../node_modules/statuses/codes.json
var require_codes = __commonJS({
  "../../node_modules/statuses/codes.json"(exports, module) {
    module.exports = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "103": "Early Hints",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a Teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Too Early",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    };
  }
});

// ../../node_modules/statuses/index.js
var require_statuses = __commonJS({
  "../../node_modules/statuses/index.js"(exports, module) {
    "use strict";
    var codes = require_codes();
    module.exports = status;
    status.message = codes;
    status.code = createMessageToStatusCodeMap(codes);
    status.codes = createStatusCodeList(codes);
    status.redirect = {
      300: true,
      301: true,
      302: true,
      303: true,
      305: true,
      307: true,
      308: true
    };
    status.empty = {
      204: true,
      205: true,
      304: true
    };
    status.retry = {
      502: true,
      503: true,
      504: true
    };
    function createMessageToStatusCodeMap(codes2) {
      var map = {};
      Object.keys(codes2).forEach(function forEachCode(code) {
        var message = codes2[code];
        var status2 = Number(code);
        map[message.toLowerCase()] = status2;
      });
      return map;
    }
    function createStatusCodeList(codes2) {
      return Object.keys(codes2).map(function mapCode(code) {
        return Number(code);
      });
    }
    function getStatusCode(message) {
      var msg = message.toLowerCase();
      if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
        throw new Error('invalid status message: "' + message + '"');
      }
      return status.code[msg];
    }
    function getStatusMessage(code) {
      if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
        throw new Error("invalid status code: " + code);
      }
      return status.message[code];
    }
    function status(code) {
      if (typeof code === "number") {
        return getStatusMessage(code);
      }
      if (typeof code !== "string") {
        throw new TypeError("code must be a number or string");
      }
      var n = parseInt(code, 10);
      if (!isNaN(n)) {
        return getStatusMessage(n);
      }
      return getStatusCode(code);
    }
  }
});

// ../../node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../node_modules/inherits/inherits_browser.js"(exports, module) {
    "use strict";
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "../../node_modules/inherits/inherits.js"(exports, module) {
    "use strict";
    try {
      util = __require("util");
      if (typeof util.inherits !== "function") throw "";
      module.exports = util.inherits;
    } catch (e) {
      module.exports = require_inherits_browser();
    }
    var util;
  }
});

// ../../node_modules/toidentifier/index.js
var require_toidentifier = __commonJS({
  "../../node_modules/toidentifier/index.js"(exports, module) {
    "use strict";
    module.exports = toIdentifier;
    function toIdentifier(str) {
      return str.split(" ").map(function(token) {
        return token.slice(0, 1).toUpperCase() + token.slice(1);
      }).join("").replace(/[^ _0-9a-z]/gi, "");
    }
  }
});

// ../../node_modules/http-errors/index.js
var require_http_errors = __commonJS({
  "../../node_modules/http-errors/index.js"(exports, module) {
    "use strict";
    var deprecate = require_depd()("http-errors");
    var setPrototypeOf = require_setprototypeof();
    var statuses = require_statuses();
    var inherits = require_inherits();
    var toIdentifier = require_toidentifier();
    module.exports = createError;
    module.exports.HttpError = createHttpErrorConstructor();
    module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
    populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);
    function codeClass(status) {
      return Number(String(status).charAt(0) + "00");
    }
    function createError() {
      var err;
      var msg;
      var status = 500;
      var props = {};
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var type = typeof arg;
        if (type === "object" && arg instanceof Error) {
          err = arg;
          status = err.status || err.statusCode || status;
        } else if (type === "number" && i === 0) {
          status = arg;
        } else if (type === "string") {
          msg = arg;
        } else if (type === "object") {
          props = arg;
        } else {
          throw new TypeError("argument #" + (i + 1) + " unsupported type " + type);
        }
      }
      if (typeof status === "number" && (status < 400 || status >= 600)) {
        deprecate("non-error status code; use only 4xx or 5xx status codes");
      }
      if (typeof status !== "number" || !statuses.message[status] && (status < 400 || status >= 600)) {
        status = 500;
      }
      var HttpError = createError[status] || createError[codeClass(status)];
      if (!err) {
        err = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);
        Error.captureStackTrace(err, createError);
      }
      if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
        err.expose = status < 500;
        err.status = err.statusCode = status;
      }
      for (var key in props) {
        if (key !== "status" && key !== "statusCode") {
          err[key] = props[key];
        }
      }
      return err;
    }
    function createHttpErrorConstructor() {
      function HttpError() {
        throw new TypeError("cannot construct abstract class");
      }
      inherits(HttpError, Error);
      return HttpError;
    }
    function createClientErrorConstructor(HttpError, name, code) {
      var className = toClassName(name);
      function ClientError(message) {
        var msg = message != null ? message : statuses.message[code];
        var err = new Error(msg);
        Error.captureStackTrace(err, ClientError);
        setPrototypeOf(err, ClientError.prototype);
        Object.defineProperty(err, "message", {
          enumerable: true,
          configurable: true,
          value: msg,
          writable: true
        });
        Object.defineProperty(err, "name", {
          enumerable: false,
          configurable: true,
          value: className,
          writable: true
        });
        return err;
      }
      inherits(ClientError, HttpError);
      nameFunc(ClientError, className);
      ClientError.prototype.status = code;
      ClientError.prototype.statusCode = code;
      ClientError.prototype.expose = true;
      return ClientError;
    }
    function createIsHttpErrorFunction(HttpError) {
      return function isHttpError(val) {
        if (!val || typeof val !== "object") {
          return false;
        }
        if (val instanceof HttpError) {
          return true;
        }
        return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
      };
    }
    function createServerErrorConstructor(HttpError, name, code) {
      var className = toClassName(name);
      function ServerError(message) {
        var msg = message != null ? message : statuses.message[code];
        var err = new Error(msg);
        Error.captureStackTrace(err, ServerError);
        setPrototypeOf(err, ServerError.prototype);
        Object.defineProperty(err, "message", {
          enumerable: true,
          configurable: true,
          value: msg,
          writable: true
        });
        Object.defineProperty(err, "name", {
          enumerable: false,
          configurable: true,
          value: className,
          writable: true
        });
        return err;
      }
      inherits(ServerError, HttpError);
      nameFunc(ServerError, className);
      ServerError.prototype.status = code;
      ServerError.prototype.statusCode = code;
      ServerError.prototype.expose = false;
      return ServerError;
    }
    function nameFunc(func, name) {
      var desc = Object.getOwnPropertyDescriptor(func, "name");
      if (desc && desc.configurable) {
        desc.value = name;
        Object.defineProperty(func, "name", desc);
      }
    }
    function populateConstructorExports(exports2, codes, HttpError) {
      codes.forEach(function forEachCode(code) {
        var CodeError;
        var name = toIdentifier(statuses.message[code]);
        switch (codeClass(code)) {
          case 400:
            CodeError = createClientErrorConstructor(HttpError, name, code);
            break;
          case 500:
            CodeError = createServerErrorConstructor(HttpError, name, code);
            break;
        }
        if (CodeError) {
          exports2[code] = CodeError;
          exports2[name] = CodeError;
        }
      });
    }
    function toClassName(name) {
      return name.substr(-5) !== "Error" ? name + "Error" : name;
    }
  }
});

// ../../node_modules/body-parser/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/body-parser/node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + "d";
      }
      if (ms >= h) {
        return Math.round(ms / h) + "h";
      }
      if (ms >= m) {
        return Math.round(ms / m) + "m";
      }
      if (ms >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
    }
    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name;
      }
      return Math.ceil(ms / n) + " " + name + "s";
    }
  }
});

// ../../node_modules/body-parser/node_modules/debug/src/debug.js
var require_debug = __commonJS({
  "../../node_modules/body-parser/node_modules/debug/src/debug.js"(exports, module) {
    "use strict";
    exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require_ms();
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    var prevTime;
    function selectColor(namespace) {
      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    function createDebug(namespace) {
      function debug() {
        if (!debug.enabled) return;
        var self2 = debug;
        var curr = +/* @__PURE__ */ new Date();
        var ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ("string" !== typeof args[0]) {
          args.unshift("%O");
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          if (match === "%%") return match;
          index++;
          var formatter = exports.formatters[format];
          if ("function" === typeof formatter) {
            var val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        exports.formatArgs.call(self2, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      if ("function" === typeof exports.init) {
        exports.init(debug);
      }
      return debug;
    }
    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      var len = split.length;
      for (var i = 0; i < len; i++) {
        if (!split[i]) continue;
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          exports.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }
    function disable() {
      exports.enable("");
    }
    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  }
});

// ../../node_modules/body-parser/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/body-parser/node_modules/debug/src/browser.js"(exports, module) {
    "use strict";
    exports = module.exports = require_debug();
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
    exports.colors = [
      "lightseagreen",
      "forestgreen",
      "goldenrod",
      "dodgerblue",
      "darkorchid",
      "crimson"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
        return true;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
      }
    };
    function formatArgs(args) {
      var useColors2 = this.useColors;
      args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
      if (!useColors2) return;
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ("%%" === match) return;
        index++;
        if ("%c" === match) {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem("debug");
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {
      }
    }
    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    exports.enable(load());
    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/body-parser/node_modules/debug/src/node.js
var require_node = __commonJS({
  "../../node_modules/body-parser/node_modules/debug/src/node.js"(exports, module) {
    "use strict";
    var tty = __require("tty");
    var util = __require("util");
    exports = module.exports = require_debug();
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
      else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
      else if (val === "null") val = null;
      else val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
    if (1 !== fd && 2 !== fd) {
      util.deprecate(function() {
      }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
    }
    var stream2 = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
    }
    exports.formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    exports.formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
    function formatArgs(args) {
      var name = this.namespace;
      var useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var prefix = "  \x1B[3" + c + ";1m" + name + " \x1B[0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = (/* @__PURE__ */ new Date()).toUTCString() + " " + name + " " + args[0];
      }
    }
    function log() {
      return stream2.write(util.format.apply(util, arguments) + "\n");
    }
    function save(namespaces) {
      if (null == namespaces) {
        delete process.env.DEBUG;
      } else {
        process.env.DEBUG = namespaces;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function createWritableStdioStream(fd2) {
      var stream3;
      var tty_wrap = process.binding("tty_wrap");
      switch (tty_wrap.guessHandleType(fd2)) {
        case "TTY":
          stream3 = new tty.WriteStream(fd2);
          stream3._type = "tty";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        case "FILE":
          var fs3 = __require("fs");
          stream3 = new fs3.SyncWriteStream(fd2, { autoClose: false });
          stream3._type = "fs";
          break;
        case "PIPE":
        case "TCP":
          var net = __require("net");
          stream3 = new net.Socket({
            fd: fd2,
            readable: false,
            writable: true
          });
          stream3.readable = false;
          stream3.read = null;
          stream3._type = "pipe";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        default:
          throw new Error("Implement me. Unknown stream file type!");
      }
      stream3.fd = fd2;
      stream3._isStdio = true;
      return stream3;
    }
    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    exports.enable(load());
  }
});

// ../../node_modules/body-parser/node_modules/debug/src/index.js
var require_src = __commonJS({
  "../../node_modules/body-parser/node_modules/debug/src/index.js"(exports, module) {
    "use strict";
    if (typeof process !== "undefined" && process.type === "renderer") {
      module.exports = require_browser();
    } else {
      module.exports = require_node();
    }
  }
});

// ../../node_modules/destroy/index.js
var require_destroy = __commonJS({
  "../../node_modules/destroy/index.js"(exports, module) {
    "use strict";
    var EventEmitter2 = __require("events").EventEmitter;
    var ReadStream = __require("fs").ReadStream;
    var Stream = __require("stream");
    var Zlib = __require("zlib");
    module.exports = destroy;
    function destroy(stream2, suppress) {
      if (isFsReadStream(stream2)) {
        destroyReadStream(stream2);
      } else if (isZlibStream(stream2)) {
        destroyZlibStream(stream2);
      } else if (hasDestroy(stream2)) {
        stream2.destroy();
      }
      if (isEventEmitter(stream2) && suppress) {
        stream2.removeAllListeners("error");
        stream2.addListener("error", noop);
      }
      return stream2;
    }
    function destroyReadStream(stream2) {
      stream2.destroy();
      if (typeof stream2.close === "function") {
        stream2.on("open", onOpenClose);
      }
    }
    function closeZlibStream(stream2) {
      if (stream2._hadError === true) {
        var prop = stream2._binding === null ? "_binding" : "_handle";
        stream2[prop] = {
          close: function() {
            this[prop] = null;
          }
        };
      }
      stream2.close();
    }
    function destroyZlibStream(stream2) {
      if (typeof stream2.destroy === "function") {
        if (stream2._binding) {
          stream2.destroy();
          if (stream2._processing) {
            stream2._needDrain = true;
            stream2.once("drain", onDrainClearBinding);
          } else {
            stream2._binding.clear();
          }
        } else if (stream2._destroy && stream2._destroy !== Stream.Transform.prototype._destroy) {
          stream2.destroy();
        } else if (stream2._destroy && typeof stream2.close === "function") {
          stream2.destroyed = true;
          stream2.close();
        } else {
          stream2.destroy();
        }
      } else if (typeof stream2.close === "function") {
        closeZlibStream(stream2);
      }
    }
    function hasDestroy(stream2) {
      return stream2 instanceof Stream && typeof stream2.destroy === "function";
    }
    function isEventEmitter(val) {
      return val instanceof EventEmitter2;
    }
    function isFsReadStream(stream2) {
      return stream2 instanceof ReadStream;
    }
    function isZlibStream(stream2) {
      return stream2 instanceof Zlib.Gzip || stream2 instanceof Zlib.Gunzip || stream2 instanceof Zlib.Deflate || stream2 instanceof Zlib.DeflateRaw || stream2 instanceof Zlib.Inflate || stream2 instanceof Zlib.InflateRaw || stream2 instanceof Zlib.Unzip;
    }
    function noop() {
    }
    function onDrainClearBinding() {
      this._binding.clear();
    }
    function onOpenClose() {
      if (typeof this.fd === "number") {
        this.close();
      }
    }
  }
});

// ../../node_modules/safer-buffer/safer.js
var require_safer = __commonJS({
  "../../node_modules/safer-buffer/safer.js"(exports, module) {
    "use strict";
    var buffer = __require("buffer");
    var Buffer3 = buffer.Buffer;
    var safer = {};
    var key;
    for (key in buffer) {
      if (!buffer.hasOwnProperty(key)) continue;
      if (key === "SlowBuffer" || key === "Buffer") continue;
      safer[key] = buffer[key];
    }
    var Safer = safer.Buffer = {};
    for (key in Buffer3) {
      if (!Buffer3.hasOwnProperty(key)) continue;
      if (key === "allocUnsafe" || key === "allocUnsafeSlow") continue;
      Safer[key] = Buffer3[key];
    }
    safer.Buffer.prototype = Buffer3.prototype;
    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function(value, encodingOrOffset, length) {
        if (typeof value === "number") {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
        }
        if (value && typeof value.length === "undefined") {
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
        }
        return Buffer3(value, encodingOrOffset, length);
      };
    }
    if (!Safer.alloc) {
      Safer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
        var buf = Buffer3(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf;
      };
    }
    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
      } catch (e) {
      }
    }
    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }
    module.exports = safer;
  }
});

// ../../node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS({
  "../../node_modules/iconv-lite/lib/bom-handling.js"(exports) {
    "use strict";
    var BOMChar = "\uFEFF";
    exports.PrependBOM = PrependBOMWrapper;
    function PrependBOMWrapper(encoder, options) {
      this.encoder = encoder;
      this.addBOM = true;
    }
    PrependBOMWrapper.prototype.write = function(str) {
      if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
      }
      return this.encoder.write(str);
    };
    PrependBOMWrapper.prototype.end = function() {
      return this.encoder.end();
    };
    exports.StripBOM = StripBOMWrapper;
    function StripBOMWrapper(decoder, options) {
      this.decoder = decoder;
      this.pass = false;
      this.options = options || {};
    }
    StripBOMWrapper.prototype.write = function(buf) {
      var res = this.decoder.write(buf);
      if (this.pass || !res)
        return res;
      if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === "function")
          this.options.stripBOM();
      }
      this.pass = true;
      return res;
    };
    StripBOMWrapper.prototype.end = function() {
      return this.decoder.end();
    };
  }
});

// ../../node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS({
  "../../node_modules/iconv-lite/encodings/internal.js"(exports, module) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    module.exports = {
      // Encodings
      utf8: { type: "_internal", bomAware: true },
      cesu8: { type: "_internal", bomAware: true },
      unicode11utf8: "utf8",
      ucs2: { type: "_internal", bomAware: true },
      utf16le: "ucs2",
      binary: { type: "_internal" },
      base64: { type: "_internal" },
      hex: { type: "_internal" },
      // Codec.
      _internal: InternalCodec
    };
    function InternalCodec(codecOptions, iconv) {
      this.enc = codecOptions.encodingName;
      this.bomAware = codecOptions.bomAware;
      if (this.enc === "base64")
        this.encoder = InternalEncoderBase64;
      else if (this.enc === "cesu8") {
        this.enc = "utf8";
        this.encoder = InternalEncoderCesu8;
        if (Buffer3.from("eda0bdedb2a9", "hex").toString() !== "\u{1F4A9}") {
          this.decoder = InternalDecoderCesu8;
          this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
      }
    }
    InternalCodec.prototype.encoder = InternalEncoder;
    InternalCodec.prototype.decoder = InternalDecoder;
    var StringDecoder = __require("string_decoder").StringDecoder;
    if (!StringDecoder.prototype.end)
      StringDecoder.prototype.end = function() {
      };
    function InternalDecoder(options, codec) {
      StringDecoder.call(this, codec.enc);
    }
    InternalDecoder.prototype = StringDecoder.prototype;
    function InternalEncoder(options, codec) {
      this.enc = codec.enc;
    }
    InternalEncoder.prototype.write = function(str) {
      return Buffer3.from(str, this.enc);
    };
    InternalEncoder.prototype.end = function() {
    };
    function InternalEncoderBase64(options, codec) {
      this.prevStr = "";
    }
    InternalEncoderBase64.prototype.write = function(str) {
      str = this.prevStr + str;
      var completeQuads = str.length - str.length % 4;
      this.prevStr = str.slice(completeQuads);
      str = str.slice(0, completeQuads);
      return Buffer3.from(str, "base64");
    };
    InternalEncoderBase64.prototype.end = function() {
      return Buffer3.from(this.prevStr, "base64");
    };
    function InternalEncoderCesu8(options, codec) {
    }
    InternalEncoderCesu8.prototype.write = function(str) {
      var buf = Buffer3.alloc(str.length * 3), bufIdx = 0;
      for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        if (charCode < 128)
          buf[bufIdx++] = charCode;
        else if (charCode < 2048) {
          buf[bufIdx++] = 192 + (charCode >>> 6);
          buf[bufIdx++] = 128 + (charCode & 63);
        } else {
          buf[bufIdx++] = 224 + (charCode >>> 12);
          buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
          buf[bufIdx++] = 128 + (charCode & 63);
        }
      }
      return buf.slice(0, bufIdx);
    };
    InternalEncoderCesu8.prototype.end = function() {
    };
    function InternalDecoderCesu8(options, codec) {
      this.acc = 0;
      this.contBytes = 0;
      this.accBytes = 0;
      this.defaultCharUnicode = codec.defaultCharUnicode;
    }
    InternalDecoderCesu8.prototype.write = function(buf) {
      var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
      for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 192) !== 128) {
          if (contBytes > 0) {
            res += this.defaultCharUnicode;
            contBytes = 0;
          }
          if (curByte < 128) {
            res += String.fromCharCode(curByte);
          } else if (curByte < 224) {
            acc = curByte & 31;
            contBytes = 1;
            accBytes = 1;
          } else if (curByte < 240) {
            acc = curByte & 15;
            contBytes = 2;
            accBytes = 1;
          } else {
            res += this.defaultCharUnicode;
          }
        } else {
          if (contBytes > 0) {
            acc = acc << 6 | curByte & 63;
            contBytes--;
            accBytes++;
            if (contBytes === 0) {
              if (accBytes === 2 && acc < 128 && acc > 0)
                res += this.defaultCharUnicode;
              else if (accBytes === 3 && acc < 2048)
                res += this.defaultCharUnicode;
              else
                res += String.fromCharCode(acc);
            }
          } else {
            res += this.defaultCharUnicode;
          }
        }
      }
      this.acc = acc;
      this.contBytes = contBytes;
      this.accBytes = accBytes;
      return res;
    };
    InternalDecoderCesu8.prototype.end = function() {
      var res = 0;
      if (this.contBytes > 0)
        res += this.defaultCharUnicode;
      return res;
    };
  }
});

// ../../node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS({
  "../../node_modules/iconv-lite/encodings/utf16.js"(exports) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    exports.utf16be = Utf16BECodec;
    function Utf16BECodec() {
    }
    Utf16BECodec.prototype.encoder = Utf16BEEncoder;
    Utf16BECodec.prototype.decoder = Utf16BEDecoder;
    Utf16BECodec.prototype.bomAware = true;
    function Utf16BEEncoder() {
    }
    Utf16BEEncoder.prototype.write = function(str) {
      var buf = Buffer3.from(str, "ucs2");
      for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i];
        buf[i] = buf[i + 1];
        buf[i + 1] = tmp;
      }
      return buf;
    };
    Utf16BEEncoder.prototype.end = function() {
    };
    function Utf16BEDecoder() {
      this.overflowByte = -1;
    }
    Utf16BEDecoder.prototype.write = function(buf) {
      if (buf.length == 0)
        return "";
      var buf2 = Buffer3.alloc(buf.length + 1), i = 0, j = 0;
      if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1;
        j = 2;
      }
      for (; i < buf.length - 1; i += 2, j += 2) {
        buf2[j] = buf[i + 1];
        buf2[j + 1] = buf[i];
      }
      this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
      return buf2.slice(0, j).toString("ucs2");
    };
    Utf16BEDecoder.prototype.end = function() {
    };
    exports.utf16 = Utf16Codec;
    function Utf16Codec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf16Codec.prototype.encoder = Utf16Encoder;
    Utf16Codec.prototype.decoder = Utf16Decoder;
    function Utf16Encoder(options, codec) {
      options = options || {};
      if (options.addBOM === void 0)
        options.addBOM = true;
      this.encoder = codec.iconv.getEncoder("utf-16le", options);
    }
    Utf16Encoder.prototype.write = function(str) {
      return this.encoder.write(str);
    };
    Utf16Encoder.prototype.end = function() {
      return this.encoder.end();
    };
    function Utf16Decoder(options, codec) {
      this.decoder = null;
      this.initialBytes = [];
      this.initialBytesLen = 0;
      this.options = options || {};
      this.iconv = codec.iconv;
    }
    Utf16Decoder.prototype.write = function(buf) {
      if (!this.decoder) {
        this.initialBytes.push(buf);
        this.initialBytesLen += buf.length;
        if (this.initialBytesLen < 16)
          return "";
        var buf = Buffer3.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        this.initialBytes.length = this.initialBytesLen = 0;
      }
      return this.decoder.write(buf);
    };
    Utf16Decoder.prototype.end = function() {
      if (!this.decoder) {
        var buf = Buffer3.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        var res = this.decoder.write(buf), trail = this.decoder.end();
        return trail ? res + trail : res;
      }
      return this.decoder.end();
    };
    function detectEncoding(buf, defaultEncoding) {
      var enc = defaultEncoding || "utf-16le";
      if (buf.length >= 2) {
        if (buf[0] == 254 && buf[1] == 255)
          enc = "utf-16be";
        else if (buf[0] == 255 && buf[1] == 254)
          enc = "utf-16le";
        else {
          var asciiCharsLE = 0, asciiCharsBE = 0, _len = Math.min(buf.length - buf.length % 2, 64);
          for (var i = 0; i < _len; i += 2) {
            if (buf[i] === 0 && buf[i + 1] !== 0) asciiCharsBE++;
            if (buf[i] !== 0 && buf[i + 1] === 0) asciiCharsLE++;
          }
          if (asciiCharsBE > asciiCharsLE)
            enc = "utf-16be";
          else if (asciiCharsBE < asciiCharsLE)
            enc = "utf-16le";
        }
      }
      return enc;
    }
  }
});

// ../../node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS({
  "../../node_modules/iconv-lite/encodings/utf7.js"(exports) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    exports.utf7 = Utf7Codec;
    exports.unicode11utf7 = "utf7";
    function Utf7Codec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf7Codec.prototype.encoder = Utf7Encoder;
    Utf7Codec.prototype.decoder = Utf7Decoder;
    Utf7Codec.prototype.bomAware = true;
    var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
    function Utf7Encoder(options, codec) {
      this.iconv = codec.iconv;
    }
    Utf7Encoder.prototype.write = function(str) {
      return Buffer3.from(str.replace(nonDirectChars, function(chunk) {
        return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
      }.bind(this)));
    };
    Utf7Encoder.prototype.end = function() {
    };
    function Utf7Decoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = "";
    }
    var base64Regex = /[A-Za-z0-9\/+]/;
    var base64Chars = [];
    for (i = 0; i < 256; i++)
      base64Chars[i] = base64Regex.test(String.fromCharCode(i));
    var i;
    var plusChar = "+".charCodeAt(0);
    var minusChar = "-".charCodeAt(0);
    var andChar = "&".charCodeAt(0);
    Utf7Decoder.prototype.write = function(buf) {
      var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
      for (var i2 = 0; i2 < buf.length; i2++) {
        if (!inBase64) {
          if (buf[i2] == plusChar) {
            res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
            lastI = i2 + 1;
            inBase64 = true;
          }
        } else {
          if (!base64Chars[buf[i2]]) {
            if (i2 == lastI && buf[i2] == minusChar) {
              res += "+";
            } else {
              var b64str = base64Accum + buf.slice(lastI, i2).toString();
              res += this.iconv.decode(Buffer3.from(b64str, "base64"), "utf16-be");
            }
            if (buf[i2] != minusChar)
              i2--;
            lastI = i2 + 1;
            inBase64 = false;
            base64Accum = "";
          }
        }
      }
      if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii");
      } else {
        var b64str = base64Accum + buf.slice(lastI).toString();
        var canBeDecoded = b64str.length - b64str.length % 8;
        base64Accum = b64str.slice(canBeDecoded);
        b64str = b64str.slice(0, canBeDecoded);
        res += this.iconv.decode(Buffer3.from(b64str, "base64"), "utf16-be");
      }
      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;
      return res;
    };
    Utf7Decoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer3.from(this.base64Accum, "base64"), "utf16-be");
      this.inBase64 = false;
      this.base64Accum = "";
      return res;
    };
    exports.utf7imap = Utf7IMAPCodec;
    function Utf7IMAPCodec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
    Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
    Utf7IMAPCodec.prototype.bomAware = true;
    function Utf7IMAPEncoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = Buffer3.alloc(6);
      this.base64AccumIdx = 0;
    }
    Utf7IMAPEncoder.prototype.write = function(str) {
      var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer3.alloc(str.length * 5 + 10), bufIdx = 0;
      for (var i2 = 0; i2 < str.length; i2++) {
        var uChar = str.charCodeAt(i2);
        if (32 <= uChar && uChar <= 126) {
          if (inBase64) {
            if (base64AccumIdx > 0) {
              bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
              base64AccumIdx = 0;
            }
            buf[bufIdx++] = minusChar;
            inBase64 = false;
          }
          if (!inBase64) {
            buf[bufIdx++] = uChar;
            if (uChar === andChar)
              buf[bufIdx++] = minusChar;
          }
        } else {
          if (!inBase64) {
            buf[bufIdx++] = andChar;
            inBase64 = true;
          }
          if (inBase64) {
            base64Accum[base64AccumIdx++] = uChar >> 8;
            base64Accum[base64AccumIdx++] = uChar & 255;
            if (base64AccumIdx == base64Accum.length) {
              bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
              base64AccumIdx = 0;
            }
          }
        }
      }
      this.inBase64 = inBase64;
      this.base64AccumIdx = base64AccumIdx;
      return buf.slice(0, bufIdx);
    };
    Utf7IMAPEncoder.prototype.end = function() {
      var buf = Buffer3.alloc(10), bufIdx = 0;
      if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
          bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
          this.base64AccumIdx = 0;
        }
        buf[bufIdx++] = minusChar;
        this.inBase64 = false;
      }
      return buf.slice(0, bufIdx);
    };
    function Utf7IMAPDecoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = "";
    }
    var base64IMAPChars = base64Chars.slice();
    base64IMAPChars[",".charCodeAt(0)] = true;
    Utf7IMAPDecoder.prototype.write = function(buf) {
      var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
      for (var i2 = 0; i2 < buf.length; i2++) {
        if (!inBase64) {
          if (buf[i2] == andChar) {
            res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
            lastI = i2 + 1;
            inBase64 = true;
          }
        } else {
          if (!base64IMAPChars[buf[i2]]) {
            if (i2 == lastI && buf[i2] == minusChar) {
              res += "&";
            } else {
              var b64str = base64Accum + buf.slice(lastI, i2).toString().replace(/,/g, "/");
              res += this.iconv.decode(Buffer3.from(b64str, "base64"), "utf16-be");
            }
            if (buf[i2] != minusChar)
              i2--;
            lastI = i2 + 1;
            inBase64 = false;
            base64Accum = "";
          }
        }
      }
      if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii");
      } else {
        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, "/");
        var canBeDecoded = b64str.length - b64str.length % 8;
        base64Accum = b64str.slice(canBeDecoded);
        b64str = b64str.slice(0, canBeDecoded);
        res += this.iconv.decode(Buffer3.from(b64str, "base64"), "utf16-be");
      }
      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;
      return res;
    };
    Utf7IMAPDecoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer3.from(this.base64Accum, "base64"), "utf16-be");
      this.inBase64 = false;
      this.base64Accum = "";
      return res;
    };
  }
});

// ../../node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS({
  "../../node_modules/iconv-lite/encodings/sbcs-codec.js"(exports) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    exports._sbcs = SBCSCodec;
    function SBCSCodec(codecOptions, iconv) {
      if (!codecOptions)
        throw new Error("SBCS codec is called without the data.");
      if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
        throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
      if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++)
          asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
      }
      this.decodeBuf = Buffer3.from(codecOptions.chars, "ucs2");
      var encodeBuf = Buffer3.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
      for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
      this.encodeBuf = encodeBuf;
    }
    SBCSCodec.prototype.encoder = SBCSEncoder;
    SBCSCodec.prototype.decoder = SBCSDecoder;
    function SBCSEncoder(options, codec) {
      this.encodeBuf = codec.encodeBuf;
    }
    SBCSEncoder.prototype.write = function(str) {
      var buf = Buffer3.alloc(str.length);
      for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];
      return buf;
    };
    SBCSEncoder.prototype.end = function() {
    };
    function SBCSDecoder(options, codec) {
      this.decodeBuf = codec.decodeBuf;
    }
    SBCSDecoder.prototype.write = function(buf) {
      var decodeBuf = this.decodeBuf;
      var newBuf = Buffer3.alloc(buf.length * 2);
      var idx1 = 0, idx2 = 0;
      for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i] * 2;
        idx2 = i * 2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
      }
      return newBuf.toString("ucs2");
    };
    SBCSDecoder.prototype.end = function() {
    };
  }
});

// ../../node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS({
  "../../node_modules/iconv-lite/encodings/sbcs-data.js"(exports, module) {
    "use strict";
    module.exports = {
      // Not supported by iconv, not sure why.
      "10029": "maccenteuro",
      "maccenteuro": {
        "type": "_sbcs",
        "chars": "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7"
      },
      "808": "cp808",
      "ibm808": "cp808",
      "cp808": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0"
      },
      "mik": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2514\u2534\u252C\u251C\u2500\u253C\u2563\u2551\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2510\u2591\u2592\u2593\u2502\u2524\u2116\xA7\u2557\u255D\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      // Aliases of generated encodings.
      "ascii8bit": "ascii",
      "usascii": "ascii",
      "ansix34": "ascii",
      "ansix341968": "ascii",
      "ansix341986": "ascii",
      "csascii": "ascii",
      "cp367": "ascii",
      "ibm367": "ascii",
      "isoir6": "ascii",
      "iso646us": "ascii",
      "iso646irv": "ascii",
      "us": "ascii",
      "latin1": "iso88591",
      "latin2": "iso88592",
      "latin3": "iso88593",
      "latin4": "iso88594",
      "latin5": "iso88599",
      "latin6": "iso885910",
      "latin7": "iso885913",
      "latin8": "iso885914",
      "latin9": "iso885915",
      "latin10": "iso885916",
      "csisolatin1": "iso88591",
      "csisolatin2": "iso88592",
      "csisolatin3": "iso88593",
      "csisolatin4": "iso88594",
      "csisolatincyrillic": "iso88595",
      "csisolatinarabic": "iso88596",
      "csisolatingreek": "iso88597",
      "csisolatinhebrew": "iso88598",
      "csisolatin5": "iso88599",
      "csisolatin6": "iso885910",
      "l1": "iso88591",
      "l2": "iso88592",
      "l3": "iso88593",
      "l4": "iso88594",
      "l5": "iso88599",
      "l6": "iso885910",
      "l7": "iso885913",
      "l8": "iso885914",
      "l9": "iso885915",
      "l10": "iso885916",
      "isoir14": "iso646jp",
      "isoir57": "iso646cn",
      "isoir100": "iso88591",
      "isoir101": "iso88592",
      "isoir109": "iso88593",
      "isoir110": "iso88594",
      "isoir144": "iso88595",
      "isoir127": "iso88596",
      "isoir126": "iso88597",
      "isoir138": "iso88598",
      "isoir148": "iso88599",
      "isoir157": "iso885910",
      "isoir166": "tis620",
      "isoir179": "iso885913",
      "isoir199": "iso885914",
      "isoir203": "iso885915",
      "isoir226": "iso885916",
      "cp819": "iso88591",
      "ibm819": "iso88591",
      "cyrillic": "iso88595",
      "arabic": "iso88596",
      "arabic8": "iso88596",
      "ecma114": "iso88596",
      "asmo708": "iso88596",
      "greek": "iso88597",
      "greek8": "iso88597",
      "ecma118": "iso88597",
      "elot928": "iso88597",
      "hebrew": "iso88598",
      "hebrew8": "iso88598",
      "turkish": "iso88599",
      "turkish8": "iso88599",
      "thai": "iso885911",
      "thai8": "iso885911",
      "celtic": "iso885914",
      "celtic8": "iso885914",
      "isoceltic": "iso885914",
      "tis6200": "tis620",
      "tis62025291": "tis620",
      "tis62025330": "tis620",
      "10000": "macroman",
      "10006": "macgreek",
      "10007": "maccyrillic",
      "10079": "maciceland",
      "10081": "macturkish",
      "cspc8codepage437": "cp437",
      "cspc775baltic": "cp775",
      "cspc850multilingual": "cp850",
      "cspcp852": "cp852",
      "cspc862latinhebrew": "cp862",
      "cpgr": "cp869",
      "msee": "cp1250",
      "mscyrl": "cp1251",
      "msansi": "cp1252",
      "msgreek": "cp1253",
      "msturk": "cp1254",
      "mshebr": "cp1255",
      "msarab": "cp1256",
      "winbaltrim": "cp1257",
      "cp20866": "koi8r",
      "20866": "koi8r",
      "ibm878": "koi8r",
      "cskoi8r": "koi8r",
      "cp21866": "koi8u",
      "21866": "koi8u",
      "ibm1168": "koi8u",
      "strk10482002": "rk1048",
      "tcvn5712": "tcvn",
      "tcvn57121": "tcvn",
      "gb198880": "iso646cn",
      "cn": "iso646cn",
      "csiso14jisc6220ro": "iso646jp",
      "jisc62201969ro": "iso646jp",
      "jp": "iso646jp",
      "cshproman8": "hproman8",
      "r8": "hproman8",
      "roman8": "hproman8",
      "xroman8": "hproman8",
      "ibm1051": "hproman8",
      "mac": "macintosh",
      "csmacintosh": "macintosh"
    };
  }
});

// ../../node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS({
  "../../node_modules/iconv-lite/encodings/sbcs-data-generated.js"(exports, module) {
    "use strict";
    module.exports = {
      "437": "cp437",
      "737": "cp737",
      "775": "cp775",
      "850": "cp850",
      "852": "cp852",
      "855": "cp855",
      "856": "cp856",
      "857": "cp857",
      "858": "cp858",
      "860": "cp860",
      "861": "cp861",
      "862": "cp862",
      "863": "cp863",
      "864": "cp864",
      "865": "cp865",
      "866": "cp866",
      "869": "cp869",
      "874": "windows874",
      "922": "cp922",
      "1046": "cp1046",
      "1124": "cp1124",
      "1125": "cp1125",
      "1129": "cp1129",
      "1133": "cp1133",
      "1161": "cp1161",
      "1162": "cp1162",
      "1163": "cp1163",
      "1250": "windows1250",
      "1251": "windows1251",
      "1252": "windows1252",
      "1253": "windows1253",
      "1254": "windows1254",
      "1255": "windows1255",
      "1256": "windows1256",
      "1257": "windows1257",
      "1258": "windows1258",
      "28591": "iso88591",
      "28592": "iso88592",
      "28593": "iso88593",
      "28594": "iso88594",
      "28595": "iso88595",
      "28596": "iso88596",
      "28597": "iso88597",
      "28598": "iso88598",
      "28599": "iso88599",
      "28600": "iso885910",
      "28601": "iso885911",
      "28603": "iso885913",
      "28604": "iso885914",
      "28605": "iso885915",
      "28606": "iso885916",
      "windows874": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "win874": "windows874",
      "cp874": "windows874",
      "windows1250": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
      },
      "win1250": "windows1250",
      "cp1250": "windows1250",
      "windows1251": {
        "type": "_sbcs",
        "chars": "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
      },
      "win1251": "windows1251",
      "cp1251": "windows1251",
      "windows1252": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
      },
      "win1252": "windows1252",
      "cp1252": "windows1252",
      "windows1253": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
      },
      "win1253": "windows1253",
      "cp1253": "windows1253",
      "windows1254": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
      },
      "win1254": "windows1254",
      "cp1254": "windows1254",
      "windows1255": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
      },
      "win1255": "windows1255",
      "cp1255": "windows1255",
      "windows1256": {
        "type": "_sbcs",
        "chars": "\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2"
      },
      "win1256": "windows1256",
      "cp1256": "windows1256",
      "windows1257": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9"
      },
      "win1257": "windows1257",
      "cp1257": "windows1257",
      "windows1258": {
        "type": "_sbcs",
        "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
      },
      "win1258": "windows1258",
      "cp1258": "windows1258",
      "iso88591": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
      },
      "cp28591": "iso88591",
      "iso88592": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u02D8\u0141\xA4\u013D\u015A\xA7\xA8\u0160\u015E\u0164\u0179\xAD\u017D\u017B\xB0\u0105\u02DB\u0142\xB4\u013E\u015B\u02C7\xB8\u0161\u015F\u0165\u017A\u02DD\u017E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
      },
      "cp28592": "iso88592",
      "iso88593": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0126\u02D8\xA3\xA4\uFFFD\u0124\xA7\xA8\u0130\u015E\u011E\u0134\xAD\uFFFD\u017B\xB0\u0127\xB2\xB3\xB4\xB5\u0125\xB7\xB8\u0131\u015F\u011F\u0135\xBD\uFFFD\u017C\xC0\xC1\xC2\uFFFD\xC4\u010A\u0108\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\uFFFD\xD1\xD2\xD3\xD4\u0120\xD6\xD7\u011C\xD9\xDA\xDB\xDC\u016C\u015C\xDF\xE0\xE1\xE2\uFFFD\xE4\u010B\u0109\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\uFFFD\xF1\xF2\xF3\xF4\u0121\xF6\xF7\u011D\xF9\xFA\xFB\xFC\u016D\u015D\u02D9"
      },
      "cp28593": "iso88593",
      "iso88594": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0138\u0156\xA4\u0128\u013B\xA7\xA8\u0160\u0112\u0122\u0166\xAD\u017D\xAF\xB0\u0105\u02DB\u0157\xB4\u0129\u013C\u02C7\xB8\u0161\u0113\u0123\u0167\u014A\u017E\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\u012A\u0110\u0145\u014C\u0136\xD4\xD5\xD6\xD7\xD8\u0172\xDA\xDB\xDC\u0168\u016A\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\u012B\u0111\u0146\u014D\u0137\xF4\xF5\xF6\xF7\xF8\u0173\xFA\xFB\xFC\u0169\u016B\u02D9"
      },
      "cp28594": "iso88594",
      "iso88595": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
      },
      "cp28595": "iso88595",
      "iso88596": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFD\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "cp28596": "iso88596",
      "iso88597": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9\u037A\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385\u0386\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
      },
      "cp28597": "iso88597",
      "iso88598": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
      },
      "cp28598": "iso88598",
      "iso88599": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
      },
      "cp28599": "iso88599",
      "iso885910": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0112\u0122\u012A\u0128\u0136\xA7\u013B\u0110\u0160\u0166\u017D\xAD\u016A\u014A\xB0\u0105\u0113\u0123\u012B\u0129\u0137\xB7\u013C\u0111\u0161\u0167\u017E\u2015\u016B\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\xCF\xD0\u0145\u014C\xD3\xD4\xD5\xD6\u0168\xD8\u0172\xDA\xDB\xDC\xDD\xDE\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\xEF\xF0\u0146\u014D\xF3\xF4\xF5\xF6\u0169\xF8\u0173\xFA\xFB\xFC\xFD\xFE\u0138"
      },
      "cp28600": "iso885910",
      "iso885911": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "cp28601": "iso885911",
      "iso885913": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\u201C\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u2019"
      },
      "cp28603": "iso885913",
      "iso885914": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u1E02\u1E03\xA3\u010A\u010B\u1E0A\xA7\u1E80\xA9\u1E82\u1E0B\u1EF2\xAD\xAE\u0178\u1E1E\u1E1F\u0120\u0121\u1E40\u1E41\xB6\u1E56\u1E81\u1E57\u1E83\u1E60\u1EF3\u1E84\u1E85\u1E61\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0174\xD1\xD2\xD3\xD4\xD5\xD6\u1E6A\xD8\xD9\xDA\xDB\xDC\xDD\u0176\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0175\xF1\xF2\xF3\xF4\xF5\xF6\u1E6B\xF8\xF9\xFA\xFB\xFC\xFD\u0177\xFF"
      },
      "cp28604": "iso885914",
      "iso885915": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\u0160\xA7\u0161\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u017D\xB5\xB6\xB7\u017E\xB9\xBA\xBB\u0152\u0153\u0178\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
      },
      "cp28605": "iso885915",
      "iso885916": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0105\u0141\u20AC\u201E\u0160\xA7\u0161\xA9\u0218\xAB\u0179\xAD\u017A\u017B\xB0\xB1\u010C\u0142\u017D\u201D\xB6\xB7\u017E\u010D\u0219\xBB\u0152\u0153\u0178\u017C\xC0\xC1\xC2\u0102\xC4\u0106\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0110\u0143\xD2\xD3\xD4\u0150\xD6\u015A\u0170\xD9\xDA\xDB\xDC\u0118\u021A\xDF\xE0\xE1\xE2\u0103\xE4\u0107\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0111\u0144\xF2\xF3\xF4\u0151\xF6\u015B\u0171\xF9\xFA\xFB\xFC\u0119\u021B\xFF"
      },
      "cp28606": "iso885916",
      "cp437": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm437": "cp437",
      "csibm437": "cp437",
      "cp737": {
        "type": "_sbcs",
        "chars": "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm737": "cp737",
      "csibm737": "cp737",
      "cp775": {
        "type": "_sbcs",
        "chars": "\u0106\xFC\xE9\u0101\xE4\u0123\xE5\u0107\u0142\u0113\u0156\u0157\u012B\u0179\xC4\xC5\xC9\xE6\xC6\u014D\xF6\u0122\xA2\u015A\u015B\xD6\xDC\xF8\xA3\xD8\xD7\xA4\u0100\u012A\xF3\u017B\u017C\u017A\u201D\xA6\xA9\xAE\xAC\xBD\xBC\u0141\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0104\u010C\u0118\u0116\u2563\u2551\u2557\u255D\u012E\u0160\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0172\u016A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u017D\u0105\u010D\u0119\u0117\u012F\u0161\u0173\u016B\u017E\u2518\u250C\u2588\u2584\u258C\u2590\u2580\xD3\xDF\u014C\u0143\xF5\xD5\xB5\u0144\u0136\u0137\u013B\u013C\u0146\u0112\u0145\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0"
      },
      "ibm775": "cp775",
      "csibm775": "cp775",
      "cp850": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
      },
      "ibm850": "cp850",
      "csibm850": "cp850",
      "cp852": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0"
      },
      "ibm852": "cp852",
      "csibm852": "cp852",
      "cp855": {
        "type": "_sbcs",
        "chars": "\u0452\u0402\u0453\u0403\u0451\u0401\u0454\u0404\u0455\u0405\u0456\u0406\u0457\u0407\u0458\u0408\u0459\u0409\u045A\u040A\u045B\u040B\u045C\u040C\u045E\u040E\u045F\u040F\u044E\u042E\u044A\u042A\u0430\u0410\u0431\u0411\u0446\u0426\u0434\u0414\u0435\u0415\u0444\u0424\u0433\u0413\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0445\u0425\u0438\u0418\u2563\u2551\u2557\u255D\u0439\u0419\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u043A\u041A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u043B\u041B\u043C\u041C\u043D\u041D\u043E\u041E\u043F\u2518\u250C\u2588\u2584\u041F\u044F\u2580\u042F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0436\u0416\u0432\u0412\u044C\u042C\u2116\xAD\u044B\u042B\u0437\u0417\u0448\u0428\u044D\u042D\u0449\u0429\u0447\u0427\xA7\u25A0\xA0"
      },
      "ibm855": "cp855",
      "csibm855": "cp855",
      "cp856": {
        "type": "_sbcs",
        "chars": "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xB5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
      },
      "ibm856": "cp856",
      "csibm856": "cp856",
      "cp857": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
      },
      "ibm857": "cp857",
      "csibm857": "cp857",
      "cp858": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u20AC\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
      },
      "ibm858": "cp858",
      "csibm858": "cp858",
      "cp860": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE3\xE0\xC1\xE7\xEA\xCA\xE8\xCD\xD4\xEC\xC3\xC2\xC9\xC0\xC8\xF4\xF5\xF2\xDA\xF9\xCC\xD5\xDC\xA2\xA3\xD9\u20A7\xD3\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xD2\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm860": "cp860",
      "csibm860": "cp860",
      "cp861": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm861": "cp861",
      "csibm861": "cp861",
      "cp862": {
        "type": "_sbcs",
        "chars": "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm862": "cp862",
      "csibm862": "cp862",
      "cp863": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xC2\xE0\xB6\xE7\xEA\xEB\xE8\xEF\xEE\u2017\xC0\xA7\xC9\xC8\xCA\xF4\xCB\xCF\xFB\xF9\xA4\xD4\xDC\xA2\xA3\xD9\xDB\u0192\xA6\xB4\xF3\xFA\xA8\xB8\xB3\xAF\xCE\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm863": "cp863",
      "csibm863": "cp863",
      "cp864": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD"
      },
      "ibm864": "cp864",
      "csibm864": "cp864",
      "cp865": {
        "type": "_sbcs",
        "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
      },
      "ibm865": "cp865",
      "csibm865": "cp865",
      "cp866": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0"
      },
      "ibm866": "cp866",
      "csibm866": "cp866",
      "cp869": {
        "type": "_sbcs",
        "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0386\uFFFD\xB7\xAC\xA6\u2018\u2019\u0388\u2015\u0389\u038A\u03AA\u038C\uFFFD\uFFFD\u038E\u03AB\xA9\u038F\xB2\xB3\u03AC\xA3\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03CD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\xBD\u0398\u0399\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u039A\u039B\u039C\u039D\u2563\u2551\u2557\u255D\u039E\u039F\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u03A0\u03A1\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u2518\u250C\u2588\u2584\u03B4\u03B5\u2580\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u0384\xAD\xB1\u03C5\u03C6\u03C7\xA7\u03C8\u0385\xB0\xA8\u03C9\u03CB\u03B0\u03CE\u25A0\xA0"
      },
      "ibm869": "cp869",
      "csibm869": "cp869",
      "cp922": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0160\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\u017D\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0161\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\u017E\xFF"
      },
      "ibm922": "cp922",
      "csibm922": "cp922",
      "cp1046": {
        "type": "_sbcs",
        "chars": "\uFE88\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7\uFE71\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518\uFE79\uFE7B\uFE7D\uFE7F\uFE77\uFE8A\uFEF0\uFEF3\uFEF2\uFECE\uFECF\uFED0\uFEF6\uFEF8\uFEFA\uFEFC\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FB\uFE8B\uFE91\uFE97\uFE9B\uFE9F\uFEA3\u060C\xAD\uFEA7\uFEB3\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFEB7\u061B\uFEBB\uFEBF\uFECA\u061F\uFECB\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\uFEC7\u0639\u063A\uFECC\uFE82\uFE84\uFE8E\uFED3\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFED7\uFEDB\uFEDF\uF8FC\uFEF5\uFEF7\uFEF9\uFEFB\uFEE3\uFEE7\uFEEC\uFEE9\uFFFD"
      },
      "ibm1046": "cp1046",
      "csibm1046": "cp1046",
      "cp1124": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0490\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0491\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
      },
      "ibm1124": "cp1124",
      "csibm1124": "cp1124",
      "cp1125": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457\xB7\u221A\u2116\xA4\u25A0\xA0"
      },
      "ibm1125": "cp1125",
      "csibm1125": "cp1125",
      "cp1129": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
      },
      "ibm1129": "cp1129",
      "csibm1129": "cp1129",
      "cp1133": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E81\u0E82\u0E84\u0E87\u0E88\u0EAA\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAB\u0EAD\u0EAE\uFFFD\uFFFD\uFFFD\u0EAF\u0EB0\u0EB2\u0EB3\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBC\u0EB1\u0EBB\u0EBD\uFFFD\uFFFD\uFFFD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0EC6\uFFFD\u0EDC\u0EDD\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD"
      },
      "ibm1133": "cp1133",
      "csibm1133": "cp1133",
      "cp1161": {
        "type": "_sbcs",
        "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E48\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E49\u0E4A\u0E4B\u20AC\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\xA2\xAC\xA6\xA0"
      },
      "ibm1161": "cp1161",
      "csibm1161": "cp1161",
      "cp1162": {
        "type": "_sbcs",
        "chars": "\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "ibm1162": "cp1162",
      "csibm1162": "cp1162",
      "cp1163": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
      },
      "ibm1163": "cp1163",
      "csibm1163": "cp1163",
      "maccroatian": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u2126\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7"
      },
      "maccyrillic": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
      },
      "macgreek": {
        "type": "_sbcs",
        "chars": "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD"
      },
      "maciceland": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
      },
      "macroman": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
      },
      "macromania": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u015E\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\u0103\u015F\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\u0162\u0163\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
      },
      "macthai": {
        "type": "_sbcs",
        "chars": "\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFEFF\u200B\u2013\u2014\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u2122\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "macturkish": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
      },
      "macukraine": {
        "type": "_sbcs",
        "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
      },
      "koi8r": {
        "type": "_sbcs",
        "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u0401\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
      },
      "koi8u": {
        "type": "_sbcs",
        "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u255D\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
      },
      "koi8ru": {
        "type": "_sbcs",
        "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u045E\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u040E\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
      },
      "koi8t": {
        "type": "_sbcs",
        "chars": "\u049B\u0493\u201A\u0492\u201E\u2026\u2020\u2021\uFFFD\u2030\u04B3\u2039\u04B2\u04B7\u04B6\uFFFD\u049A\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04EF\u04EE\u0451\xA4\u04E3\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2\u0401\uFFFD\u04E2\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
      },
      "armscii8": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\u0587\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055E\u0531\u0561\u0532\u0562\u0533\u0563\u0534\u0564\u0535\u0565\u0536\u0566\u0537\u0567\u0538\u0568\u0539\u0569\u053A\u056A\u053B\u056B\u053C\u056C\u053D\u056D\u053E\u056E\u053F\u056F\u0540\u0570\u0541\u0571\u0542\u0572\u0543\u0573\u0544\u0574\u0545\u0575\u0546\u0576\u0547\u0577\u0548\u0578\u0549\u0579\u054A\u057A\u054B\u057B\u054C\u057C\u054D\u057D\u054E\u057E\u054F\u057F\u0550\u0580\u0551\u0581\u0552\u0582\u0553\u0583\u0554\u0584\u0555\u0585\u0556\u0586\u055A\uFFFD"
      },
      "rk1048": {
        "type": "_sbcs",
        "chars": "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u049A\u04BA\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u049B\u04BB\u045F\xA0\u04B0\u04B1\u04D8\xA4\u04E8\xA6\xA7\u0401\xA9\u0492\xAB\xAC\xAD\xAE\u04AE\xB0\xB1\u0406\u0456\u04E9\xB5\xB6\xB7\u0451\u2116\u0493\xBB\u04D9\u04A2\u04A3\u04AF\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
      },
      "tcvn": {
        "type": "_sbcs",
        "chars": "\0\xDA\u1EE4\u1EEA\u1EEC\u1EEE\x07\b	\n\v\f\r\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0"
      },
      "georgianacademy": {
        "type": "_sbcs",
        "chars": "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
      },
      "georgianps": {
        "type": "_sbcs",
        "chars": "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10F1\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10F2\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10F3\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10F4\u10EF\u10F0\u10F5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
      },
      "pt154": {
        "type": "_sbcs",
        "chars": "\u0496\u0492\u04EE\u0493\u201E\u2026\u04B6\u04AE\u04B2\u04AF\u04A0\u04E2\u04A2\u049A\u04BA\u04B8\u0497\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u04B3\u04B7\u04A1\u04E3\u04A3\u049B\u04BB\u04B9\xA0\u040E\u045E\u0408\u04E8\u0498\u04B0\xA7\u0401\xA9\u04D8\xAB\xAC\u04EF\xAE\u049C\xB0\u04B1\u0406\u0456\u0499\u04E9\xB6\xB7\u0451\u2116\u04D9\xBB\u0458\u04AA\u04AB\u049D\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
      },
      "viscii": {
        "type": "_sbcs",
        "chars": "\0\u1EB2\u1EB4\u1EAA\x07\b	\n\v\f\r\u1EF6\u1EF8\x1B\u1EF4 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE"
      },
      "iso646cn": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "iso646jp": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "hproman8": {
        "type": "_sbcs",
        "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xC0\xC2\xC8\xCA\xCB\xCE\xCF\xB4\u02CB\u02C6\xA8\u02DC\xD9\xDB\u20A4\xAF\xDD\xFD\xB0\xC7\xE7\xD1\xF1\xA1\xBF\xA4\xA3\xA5\xA7\u0192\xA2\xE2\xEA\xF4\xFB\xE1\xE9\xF3\xFA\xE0\xE8\xF2\xF9\xE4\xEB\xF6\xFC\xC5\xEE\xD8\xC6\xE5\xED\xF8\xE6\xC4\xEC\xD6\xDC\xC9\xEF\xDF\xD4\xC1\xC3\xE3\xD0\xF0\xCD\xCC\xD3\xD2\xD5\xF5\u0160\u0161\xDA\u0178\xFF\xDE\xFE\xB7\xB5\xB6\xBE\u2014\xBC\xBD\xAA\xBA\xAB\u25A0\xBB\xB1\uFFFD"
      },
      "macintosh": {
        "type": "_sbcs",
        "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
      },
      "ascii": {
        "type": "_sbcs",
        "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
      },
      "tis620": {
        "type": "_sbcs",
        "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
      }
    };
  }
});

// ../../node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS({
  "../../node_modules/iconv-lite/encodings/dbcs-codec.js"(exports) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    exports._dbcs = DBCSCodec;
    var UNASSIGNED = -1;
    var GB18030_CODE = -2;
    var SEQ_START = -10;
    var NODE_START = -1e3;
    var UNASSIGNED_NODE = new Array(256);
    var DEF_CHAR = -1;
    for (i = 0; i < 256; i++)
      UNASSIGNED_NODE[i] = UNASSIGNED;
    var i;
    function DBCSCodec(codecOptions, iconv) {
      this.encodingName = codecOptions.encodingName;
      if (!codecOptions)
        throw new Error("DBCS codec is called without the data.");
      if (!codecOptions.table)
        throw new Error("Encoding '" + this.encodingName + "' has no data.");
      var mappingTable = codecOptions.table();
      this.decodeTables = [];
      this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
      this.decodeTableSeq = [];
      for (var i2 = 0; i2 < mappingTable.length; i2++)
        this._addDecodeChunk(mappingTable[i2]);
      this.defaultCharUnicode = iconv.defaultCharUnicode;
      this.encodeTable = [];
      this.encodeTableSeq = [];
      var skipEncodeChars = {};
      if (codecOptions.encodeSkipVals)
        for (var i2 = 0; i2 < codecOptions.encodeSkipVals.length; i2++) {
          var val = codecOptions.encodeSkipVals[i2];
          if (typeof val === "number")
            skipEncodeChars[val] = true;
          else
            for (var j = val.from; j <= val.to; j++)
              skipEncodeChars[j] = true;
        }
      this._fillEncodeTable(0, 0, skipEncodeChars);
      if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd)
          if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
            this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
      }
      this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
      if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]["?"];
      if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
      if (typeof codecOptions.gb18030 === "function") {
        this.gb18030 = codecOptions.gb18030();
        var thirdByteNodeIdx = this.decodeTables.length;
        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);
        var fourthByteNodeIdx = this.decodeTables.length;
        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);
        for (var i2 = 129; i2 <= 254; i2++) {
          var secondByteNodeIdx = NODE_START - this.decodeTables[0][i2];
          var secondByteNode = this.decodeTables[secondByteNodeIdx];
          for (var j = 48; j <= 57; j++)
            secondByteNode[j] = NODE_START - thirdByteNodeIdx;
        }
        for (var i2 = 129; i2 <= 254; i2++)
          thirdByteNode[i2] = NODE_START - fourthByteNodeIdx;
        for (var i2 = 48; i2 <= 57; i2++)
          fourthByteNode[i2] = GB18030_CODE;
      }
    }
    DBCSCodec.prototype.encoder = DBCSEncoder;
    DBCSCodec.prototype.decoder = DBCSDecoder;
    DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
      var bytes = [];
      for (; addr > 0; addr >>= 8)
        bytes.push(addr & 255);
      if (bytes.length == 0)
        bytes.push(0);
      var node = this.decodeTables[0];
      for (var i2 = bytes.length - 1; i2 > 0; i2--) {
        var val = node[bytes[i2]];
        if (val == UNASSIGNED) {
          node[bytes[i2]] = NODE_START - this.decodeTables.length;
          this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        } else if (val <= NODE_START) {
          node = this.decodeTables[NODE_START - val];
        } else
          throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
      }
      return node;
    };
    DBCSCodec.prototype._addDecodeChunk = function(chunk) {
      var curAddr = parseInt(chunk[0], 16);
      var writeTable = this._getDecodeTrieNode(curAddr);
      curAddr = curAddr & 255;
      for (var k = 1; k < chunk.length; k++) {
        var part = chunk[k];
        if (typeof part === "string") {
          for (var l = 0; l < part.length; ) {
            var code = part.charCodeAt(l++);
            if (55296 <= code && code < 56320) {
              var codeTrail = part.charCodeAt(l++);
              if (56320 <= codeTrail && codeTrail < 57344)
                writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
              else
                throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
            } else if (4080 < code && code <= 4095) {
              var len = 4095 - code + 2;
              var seq = [];
              for (var m = 0; m < len; m++)
                seq.push(part.charCodeAt(l++));
              writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
              this.decodeTableSeq.push(seq);
            } else
              writeTable[curAddr++] = code;
          }
        } else if (typeof part === "number") {
          var charCode = writeTable[curAddr - 1] + 1;
          for (var l = 0; l < part; l++)
            writeTable[curAddr++] = charCode++;
        } else
          throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
      }
      if (curAddr > 255)
        throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
    };
    DBCSCodec.prototype._getEncodeBucket = function(uCode) {
      var high = uCode >> 8;
      if (this.encodeTable[high] === void 0)
        this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
      return this.encodeTable[high];
    };
    DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 255;
      if (bucket[low] <= SEQ_START)
        this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
      else if (bucket[low] == UNASSIGNED)
        bucket[low] = dbcsCode;
    };
    DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
      var uCode = seq[0];
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 255;
      var node;
      if (bucket[low] <= SEQ_START) {
        node = this.encodeTableSeq[SEQ_START - bucket[low]];
      } else {
        node = {};
        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low];
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
      }
      for (var j = 1; j < seq.length - 1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === "object")
          node = oldVal;
        else {
          node = node[uCode] = {};
          if (oldVal !== void 0)
            node[DEF_CHAR] = oldVal;
        }
      }
      uCode = seq[seq.length - 1];
      node[uCode] = dbcsCode;
    };
    DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
      var node = this.decodeTables[nodeIdx];
      for (var i2 = 0; i2 < 256; i2++) {
        var uCode = node[i2];
        var mbCode = prefix + i2;
        if (skipEncodeChars[mbCode])
          continue;
        if (uCode >= 0)
          this._setEncodeChar(uCode, mbCode);
        else if (uCode <= NODE_START)
          this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
        else if (uCode <= SEQ_START)
          this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
      }
    };
    function DBCSEncoder(options, codec) {
      this.leadSurrogate = -1;
      this.seqObj = void 0;
      this.encodeTable = codec.encodeTable;
      this.encodeTableSeq = codec.encodeTableSeq;
      this.defaultCharSingleByte = codec.defCharSB;
      this.gb18030 = codec.gb18030;
    }
    DBCSEncoder.prototype.write = function(str) {
      var newBuf = Buffer3.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
      while (true) {
        if (nextChar === -1) {
          if (i2 == str.length) break;
          var uCode = str.charCodeAt(i2++);
        } else {
          var uCode = nextChar;
          nextChar = -1;
        }
        if (55296 <= uCode && uCode < 57344) {
          if (uCode < 56320) {
            if (leadSurrogate === -1) {
              leadSurrogate = uCode;
              continue;
            } else {
              leadSurrogate = uCode;
              uCode = UNASSIGNED;
            }
          } else {
            if (leadSurrogate !== -1) {
              uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
              leadSurrogate = -1;
            } else {
              uCode = UNASSIGNED;
            }
          }
        } else if (leadSurrogate !== -1) {
          nextChar = uCode;
          uCode = UNASSIGNED;
          leadSurrogate = -1;
        }
        var dbcsCode = UNASSIGNED;
        if (seqObj !== void 0 && uCode != UNASSIGNED) {
          var resCode = seqObj[uCode];
          if (typeof resCode === "object") {
            seqObj = resCode;
            continue;
          } else if (typeof resCode == "number") {
            dbcsCode = resCode;
          } else if (resCode == void 0) {
            resCode = seqObj[DEF_CHAR];
            if (resCode !== void 0) {
              dbcsCode = resCode;
              nextChar = uCode;
            } else {
            }
          }
          seqObj = void 0;
        } else if (uCode >= 0) {
          var subtable = this.encodeTable[uCode >> 8];
          if (subtable !== void 0)
            dbcsCode = subtable[uCode & 255];
          if (dbcsCode <= SEQ_START) {
            seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
            continue;
          }
          if (dbcsCode == UNASSIGNED && this.gb18030) {
            var idx = findIdx(this.gb18030.uChars, uCode);
            if (idx != -1) {
              var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
              newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
              dbcsCode = dbcsCode % 12600;
              newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
              dbcsCode = dbcsCode % 1260;
              newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
              dbcsCode = dbcsCode % 10;
              newBuf[j++] = 48 + dbcsCode;
              continue;
            }
          }
        }
        if (dbcsCode === UNASSIGNED)
          dbcsCode = this.defaultCharSingleByte;
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else if (dbcsCode < 65536) {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        } else {
          newBuf[j++] = dbcsCode >> 16;
          newBuf[j++] = dbcsCode >> 8 & 255;
          newBuf[j++] = dbcsCode & 255;
        }
      }
      this.seqObj = seqObj;
      this.leadSurrogate = leadSurrogate;
      return newBuf.slice(0, j);
    };
    DBCSEncoder.prototype.end = function() {
      if (this.leadSurrogate === -1 && this.seqObj === void 0)
        return;
      var newBuf = Buffer3.alloc(10), j = 0;
      if (this.seqObj) {
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== void 0) {
          if (dbcsCode < 256) {
            newBuf[j++] = dbcsCode;
          } else {
            newBuf[j++] = dbcsCode >> 8;
            newBuf[j++] = dbcsCode & 255;
          }
        } else {
        }
        this.seqObj = void 0;
      }
      if (this.leadSurrogate !== -1) {
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
      }
      return newBuf.slice(0, j);
    };
    DBCSEncoder.prototype.findIdx = findIdx;
    function DBCSDecoder(options, codec) {
      this.nodeIdx = 0;
      this.prevBuf = Buffer3.alloc(0);
      this.decodeTables = codec.decodeTables;
      this.decodeTableSeq = codec.decodeTableSeq;
      this.defaultCharUnicode = codec.defaultCharUnicode;
      this.gb18030 = codec.gb18030;
    }
    DBCSDecoder.prototype.write = function(buf) {
      var newBuf = Buffer3.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length, seqStart = -this.prevBuf.length, uCode;
      if (prevBufOffset > 0)
        prevBuf = Buffer3.concat([prevBuf, buf.slice(0, 10)]);
      for (var i2 = 0, j = 0; i2 < buf.length; i2++) {
        var curByte = i2 >= 0 ? buf[i2] : prevBuf[i2 + prevBufOffset];
        var uCode = this.decodeTables[nodeIdx][curByte];
        if (uCode >= 0) {
        } else if (uCode === UNASSIGNED) {
          i2 = seqStart;
          uCode = this.defaultCharUnicode.charCodeAt(0);
        } else if (uCode === GB18030_CODE) {
          var curSeq = seqStart >= 0 ? buf.slice(seqStart, i2 + 1) : prevBuf.slice(seqStart + prevBufOffset, i2 + 1 + prevBufOffset);
          var ptr = (curSeq[0] - 129) * 12600 + (curSeq[1] - 48) * 1260 + (curSeq[2] - 129) * 10 + (curSeq[3] - 48);
          var idx = findIdx(this.gb18030.gbChars, ptr);
          uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        } else if (uCode <= NODE_START) {
          nodeIdx = NODE_START - uCode;
          continue;
        } else if (uCode <= SEQ_START) {
          var seq = this.decodeTableSeq[SEQ_START - uCode];
          for (var k = 0; k < seq.length - 1; k++) {
            uCode = seq[k];
            newBuf[j++] = uCode & 255;
            newBuf[j++] = uCode >> 8;
          }
          uCode = seq[seq.length - 1];
        } else
          throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
        if (uCode > 65535) {
          uCode -= 65536;
          var uCodeLead = 55296 + Math.floor(uCode / 1024);
          newBuf[j++] = uCodeLead & 255;
          newBuf[j++] = uCodeLead >> 8;
          uCode = 56320 + uCode % 1024;
        }
        newBuf[j++] = uCode & 255;
        newBuf[j++] = uCode >> 8;
        nodeIdx = 0;
        seqStart = i2 + 1;
      }
      this.nodeIdx = nodeIdx;
      this.prevBuf = seqStart >= 0 ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
      return newBuf.slice(0, j).toString("ucs2");
    };
    DBCSDecoder.prototype.end = function() {
      var ret = "";
      while (this.prevBuf.length > 0) {
        ret += this.defaultCharUnicode;
        var buf = this.prevBuf.slice(1);
        this.prevBuf = Buffer3.alloc(0);
        this.nodeIdx = 0;
        if (buf.length > 0)
          ret += this.write(buf);
      }
      this.nodeIdx = 0;
      return ret;
    };
    function findIdx(table, val) {
      if (table[0] > val)
        return -1;
      var l = 0, r = table.length;
      while (l < r - 1) {
        var mid = l + Math.floor((r - l + 1) / 2);
        if (table[mid] <= val)
          l = mid;
        else
          r = mid;
      }
      return l;
    }
  }
});

// ../../node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/shiftjis.json"(exports, module) {
    module.exports = [
      ["0", "\0", 128],
      ["a1", "\uFF61", 62],
      ["8140", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7"],
      ["8180", "\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
      ["81b8", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
      ["81c8", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
      ["81da", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
      ["81f0", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
      ["81fc", "\u25EF"],
      ["824f", "\uFF10", 9],
      ["8260", "\uFF21", 25],
      ["8281", "\uFF41", 25],
      ["829f", "\u3041", 82],
      ["8340", "\u30A1", 62],
      ["8380", "\u30E0", 22],
      ["839f", "\u0391", 16, "\u03A3", 6],
      ["83bf", "\u03B1", 16, "\u03C3", 6],
      ["8440", "\u0410", 5, "\u0401\u0416", 25],
      ["8470", "\u0430", 5, "\u0451\u0436", 7],
      ["8480", "\u043E", 17],
      ["849f", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
      ["8740", "\u2460", 19, "\u2160", 9],
      ["875f", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
      ["877e", "\u337B"],
      ["8780", "\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
      ["889f", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
      ["8940", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186"],
      ["8980", "\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
      ["8a40", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B"],
      ["8a80", "\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
      ["8b40", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551"],
      ["8b80", "\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
      ["8c40", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8"],
      ["8c80", "\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
      ["8d40", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D"],
      ["8d80", "\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
      ["8e40", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62"],
      ["8e80", "\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
      ["8f40", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3"],
      ["8f80", "\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
      ["9040", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8"],
      ["9080", "\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
      ["9140", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB"],
      ["9180", "\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
      ["9240", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4"],
      ["9280", "\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
      ["9340", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC"],
      ["9380", "\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
      ["9440", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885"],
      ["9480", "\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
      ["9540", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577"],
      ["9580", "\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
      ["9640", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6"],
      ["9680", "\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
      ["9740", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32"],
      ["9780", "\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
      ["9840", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
      ["989f", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
      ["9940", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED"],
      ["9980", "\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
      ["9a40", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638"],
      ["9a80", "\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
      ["9b40", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80"],
      ["9b80", "\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
      ["9c40", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060"],
      ["9c80", "\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
      ["9d40", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B"],
      ["9d80", "\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
      ["9e40", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E"],
      ["9e80", "\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
      ["9f40", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF"],
      ["9f80", "\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
      ["e040", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD"],
      ["e080", "\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
      ["e140", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF"],
      ["e180", "\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
      ["e240", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0"],
      ["e280", "\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
      ["e340", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37"],
      ["e380", "\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
      ["e440", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264"],
      ["e480", "\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
      ["e540", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC"],
      ["e580", "\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
      ["e640", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7"],
      ["e680", "\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
      ["e740", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C"],
      ["e780", "\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
      ["e840", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599"],
      ["e880", "\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
      ["e940", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43"],
      ["e980", "\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
      ["ea40", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF"],
      ["ea80", "\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199"],
      ["ed40", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F"],
      ["ed80", "\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
      ["ee40", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559"],
      ["ee80", "\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
      ["eeef", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
      ["f040", "\uE000", 62],
      ["f080", "\uE03F", 124],
      ["f140", "\uE0BC", 62],
      ["f180", "\uE0FB", 124],
      ["f240", "\uE178", 62],
      ["f280", "\uE1B7", 124],
      ["f340", "\uE234", 62],
      ["f380", "\uE273", 124],
      ["f440", "\uE2F0", 62],
      ["f480", "\uE32F", 124],
      ["f540", "\uE3AC", 62],
      ["f580", "\uE3EB", 124],
      ["f640", "\uE468", 62],
      ["f680", "\uE4A7", 124],
      ["f740", "\uE524", 62],
      ["f780", "\uE563", 124],
      ["f840", "\uE5E0", 62],
      ["f880", "\uE61F", 124],
      ["f940", "\uE69C"],
      ["fa40", "\u2170", 9, "\u2160", 9, "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A"],
      ["fa80", "\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F"],
      ["fb40", "\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19"],
      ["fb80", "\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9"],
      ["fc40", "\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/eucjp.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["8ea1", "\uFF61", 62],
      ["a1a1", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7"],
      ["a2a1", "\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
      ["a2ba", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
      ["a2ca", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
      ["a2dc", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
      ["a2f2", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
      ["a2fe", "\u25EF"],
      ["a3b0", "\uFF10", 9],
      ["a3c1", "\uFF21", 25],
      ["a3e1", "\uFF41", 25],
      ["a4a1", "\u3041", 82],
      ["a5a1", "\u30A1", 85],
      ["a6a1", "\u0391", 16, "\u03A3", 6],
      ["a6c1", "\u03B1", 16, "\u03C3", 6],
      ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
      ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
      ["a8a1", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
      ["ada1", "\u2460", 19, "\u2160", 9],
      ["adc0", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
      ["addf", "\u337B\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
      ["b0a1", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
      ["b1a1", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC"],
      ["b2a1", "\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
      ["b3a1", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431"],
      ["b4a1", "\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
      ["b5a1", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC"],
      ["b6a1", "\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
      ["b7a1", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372"],
      ["b8a1", "\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
      ["b9a1", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC"],
      ["baa1", "\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
      ["bba1", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642"],
      ["bca1", "\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
      ["bda1", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F"],
      ["bea1", "\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
      ["bfa1", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE"],
      ["c0a1", "\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
      ["c1a1", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E"],
      ["c2a1", "\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
      ["c3a1", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5"],
      ["c4a1", "\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
      ["c5a1", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230"],
      ["c6a1", "\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
      ["c7a1", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6"],
      ["c8a1", "\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
      ["c9a1", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D"],
      ["caa1", "\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
      ["cba1", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80"],
      ["cca1", "\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
      ["cda1", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483"],
      ["cea1", "\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
      ["cfa1", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
      ["d0a1", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
      ["d1a1", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8"],
      ["d2a1", "\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
      ["d3a1", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709"],
      ["d4a1", "\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
      ["d5a1", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53"],
      ["d6a1", "\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
      ["d7a1", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A"],
      ["d8a1", "\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
      ["d9a1", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC"],
      ["daa1", "\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
      ["dba1", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD"],
      ["dca1", "\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
      ["dda1", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE"],
      ["dea1", "\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
      ["dfa1", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC"],
      ["e0a1", "\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
      ["e1a1", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670"],
      ["e2a1", "\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
      ["e3a1", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50"],
      ["e4a1", "\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
      ["e5a1", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A"],
      ["e6a1", "\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
      ["e7a1", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9"],
      ["e8a1", "\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
      ["e9a1", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759"],
      ["eaa1", "\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
      ["eba1", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B"],
      ["eca1", "\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
      ["eda1", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8"],
      ["eea1", "\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
      ["efa1", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E"],
      ["f0a1", "\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
      ["f1a1", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7"],
      ["f2a1", "\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
      ["f3a1", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0"],
      ["f4a1", "\u582F\u69C7\u9059\u7464\u51DC\u7199"],
      ["f9a1", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7"],
      ["faa1", "\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
      ["fba1", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA"],
      ["fca1", "\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
      ["fcf1", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
      ["8fa2af", "\u02D8\u02C7\xB8\u02D9\u02DD\xAF\u02DB\u02DA\uFF5E\u0384\u0385"],
      ["8fa2c2", "\xA1\xA6\xBF"],
      ["8fa2eb", "\xBA\xAA\xA9\xAE\u2122\xA4\u2116"],
      ["8fa6e1", "\u0386\u0388\u0389\u038A\u03AA"],
      ["8fa6e7", "\u038C"],
      ["8fa6e9", "\u038E\u03AB"],
      ["8fa6ec", "\u038F"],
      ["8fa6f1", "\u03AC\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03C2\u03CD\u03CB\u03B0\u03CE"],
      ["8fa7c2", "\u0402", 10, "\u040E\u040F"],
      ["8fa7f2", "\u0452", 10, "\u045E\u045F"],
      ["8fa9a1", "\xC6\u0110"],
      ["8fa9a4", "\u0126"],
      ["8fa9a6", "\u0132"],
      ["8fa9a8", "\u0141\u013F"],
      ["8fa9ab", "\u014A\xD8\u0152"],
      ["8fa9af", "\u0166\xDE"],
      ["8fa9c1", "\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0142\u0140\u0149\u014B\xF8\u0153\xDF\u0167\xFE"],
      ["8faaa1", "\xC1\xC0\xC4\xC2\u0102\u01CD\u0100\u0104\xC5\xC3\u0106\u0108\u010C\xC7\u010A\u010E\xC9\xC8\xCB\xCA\u011A\u0116\u0112\u0118"],
      ["8faaba", "\u011C\u011E\u0122\u0120\u0124\xCD\xCC\xCF\xCE\u01CF\u0130\u012A\u012E\u0128\u0134\u0136\u0139\u013D\u013B\u0143\u0147\u0145\xD1\xD3\xD2\xD6\xD4\u01D1\u0150\u014C\xD5\u0154\u0158\u0156\u015A\u015C\u0160\u015E\u0164\u0162\xDA\xD9\xDC\xDB\u016C\u01D3\u0170\u016A\u0172\u016E\u0168\u01D7\u01DB\u01D9\u01D5\u0174\xDD\u0178\u0176\u0179\u017D\u017B"],
      ["8faba1", "\xE1\xE0\xE4\xE2\u0103\u01CE\u0101\u0105\xE5\xE3\u0107\u0109\u010D\xE7\u010B\u010F\xE9\xE8\xEB\xEA\u011B\u0117\u0113\u0119\u01F5\u011D\u011F"],
      ["8fabbd", "\u0121\u0125\xED\xEC\xEF\xEE\u01D0"],
      ["8fabc5", "\u012B\u012F\u0129\u0135\u0137\u013A\u013E\u013C\u0144\u0148\u0146\xF1\xF3\xF2\xF6\xF4\u01D2\u0151\u014D\xF5\u0155\u0159\u0157\u015B\u015D\u0161\u015F\u0165\u0163\xFA\xF9\xFC\xFB\u016D\u01D4\u0171\u016B\u0173\u016F\u0169\u01D8\u01DC\u01DA\u01D6\u0175\xFD\xFF\u0177\u017A\u017E\u017C"],
      ["8fb0a1", "\u4E02\u4E04\u4E05\u4E0C\u4E12\u4E1F\u4E23\u4E24\u4E28\u4E2B\u4E2E\u4E2F\u4E30\u4E35\u4E40\u4E41\u4E44\u4E47\u4E51\u4E5A\u4E5C\u4E63\u4E68\u4E69\u4E74\u4E75\u4E79\u4E7F\u4E8D\u4E96\u4E97\u4E9D\u4EAF\u4EB9\u4EC3\u4ED0\u4EDA\u4EDB\u4EE0\u4EE1\u4EE2\u4EE8\u4EEF\u4EF1\u4EF3\u4EF5\u4EFD\u4EFE\u4EFF\u4F00\u4F02\u4F03\u4F08\u4F0B\u4F0C\u4F12\u4F15\u4F16\u4F17\u4F19\u4F2E\u4F31\u4F60\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F40\u4F42\u4F48\u4F49\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F58\u4F5F\u4F63\u4F6A\u4F6C\u4F6E\u4F71\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F7E\u4F81\u4F82\u4F84"],
      ["8fb1a1", "\u4F85\u4F89\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F94\u4F97\u4F99\u4F9A\u4F9E\u4F9F\u4FB2\u4FB7\u4FB9\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC5\u4FC6\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FCF\u4FD2\u4FDC\u4FE0\u4FE2\u4FF0\u4FF2\u4FFC\u4FFD\u4FFF\u5000\u5001\u5004\u5007\u500A\u500C\u500E\u5010\u5013\u5017\u5018\u501B\u501C\u501D\u501E\u5022\u5027\u502E\u5030\u5032\u5033\u5035\u5040\u5041\u5042\u5045\u5046\u504A\u504C\u504E\u5051\u5052\u5053\u5057\u5059\u505F\u5060\u5062\u5063\u5066\u5067\u506A\u506D\u5070\u5071\u503B\u5081\u5083\u5084\u5086\u508A\u508E\u508F\u5090"],
      ["8fb2a1", "\u5092\u5093\u5094\u5096\u509B\u509C\u509E", 4, "\u50AA\u50AF\u50B0\u50B9\u50BA\u50BD\u50C0\u50C3\u50C4\u50C7\u50CC\u50CE\u50D0\u50D3\u50D4\u50D8\u50DC\u50DD\u50DF\u50E2\u50E4\u50E6\u50E8\u50E9\u50EF\u50F1\u50F6\u50FA\u50FE\u5103\u5106\u5107\u5108\u510B\u510C\u510D\u510E\u50F2\u5110\u5117\u5119\u511B\u511C\u511D\u511E\u5123\u5127\u5128\u512C\u512D\u512F\u5131\u5133\u5134\u5135\u5138\u5139\u5142\u514A\u514F\u5153\u5155\u5157\u5158\u515F\u5164\u5166\u517E\u5183\u5184\u518B\u518E\u5198\u519D\u51A1\u51A3\u51AD\u51B8\u51BA\u51BC\u51BE\u51BF\u51C2"],
      ["8fb3a1", "\u51C8\u51CF\u51D1\u51D2\u51D3\u51D5\u51D8\u51DE\u51E2\u51E5\u51EE\u51F2\u51F3\u51F4\u51F7\u5201\u5202\u5205\u5212\u5213\u5215\u5216\u5218\u5222\u5228\u5231\u5232\u5235\u523C\u5245\u5249\u5255\u5257\u5258\u525A\u525C\u525F\u5260\u5261\u5266\u526E\u5277\u5278\u5279\u5280\u5282\u5285\u528A\u528C\u5293\u5295\u5296\u5297\u5298\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AF\u52B0\u52B6\u52B7\u52B8\u52BA\u52BB\u52BD\u52C0\u52C4\u52C6\u52C8\u52CC\u52CF\u52D1\u52D4\u52D6\u52DB\u52DC\u52E1\u52E5\u52E8\u52E9\u52EA\u52EC\u52F0\u52F1\u52F4\u52F6\u52F7\u5300\u5303\u530A\u530B"],
      ["8fb4a1", "\u530C\u5311\u5313\u5318\u531B\u531C\u531E\u531F\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u5330\u5332\u5335\u533C\u533D\u533E\u5342\u534C\u534B\u5359\u535B\u5361\u5363\u5365\u536C\u536D\u5372\u5379\u537E\u5383\u5387\u5388\u538E\u5393\u5394\u5399\u539D\u53A1\u53A4\u53AA\u53AB\u53AF\u53B2\u53B4\u53B5\u53B7\u53B8\u53BA\u53BD\u53C0\u53C5\u53CF\u53D2\u53D3\u53D5\u53DA\u53DD\u53DE\u53E0\u53E6\u53E7\u53F5\u5402\u5413\u541A\u5421\u5427\u5428\u542A\u542F\u5431\u5434\u5435\u5443\u5444\u5447\u544D\u544F\u545E\u5462\u5464\u5466\u5467\u5469\u546B\u546D\u546E\u5474\u547F"],
      ["8fb5a1", "\u5481\u5483\u5485\u5488\u5489\u548D\u5491\u5495\u5496\u549C\u549F\u54A1\u54A6\u54A7\u54A9\u54AA\u54AD\u54AE\u54B1\u54B7\u54B9\u54BA\u54BB\u54BF\u54C6\u54CA\u54CD\u54CE\u54E0\u54EA\u54EC\u54EF\u54F6\u54FC\u54FE\u54FF\u5500\u5501\u5505\u5508\u5509\u550C\u550D\u550E\u5515\u552A\u552B\u5532\u5535\u5536\u553B\u553C\u553D\u5541\u5547\u5549\u554A\u554D\u5550\u5551\u5558\u555A\u555B\u555E\u5560\u5561\u5564\u5566\u557F\u5581\u5582\u5586\u5588\u558E\u558F\u5591\u5592\u5593\u5594\u5597\u55A3\u55A4\u55AD\u55B2\u55BF\u55C1\u55C3\u55C6\u55C9\u55CB\u55CC\u55CE\u55D1\u55D2"],
      ["8fb6a1", "\u55D3\u55D7\u55D8\u55DB\u55DE\u55E2\u55E9\u55F6\u55FF\u5605\u5608\u560A\u560D", 5, "\u5619\u562C\u5630\u5633\u5635\u5637\u5639\u563B\u563C\u563D\u563F\u5640\u5641\u5643\u5644\u5646\u5649\u564B\u564D\u564F\u5654\u565E\u5660\u5661\u5662\u5663\u5666\u5669\u566D\u566F\u5671\u5672\u5675\u5684\u5685\u5688\u568B\u568C\u5695\u5699\u569A\u569D\u569E\u569F\u56A6\u56A7\u56A8\u56A9\u56AB\u56AC\u56AD\u56B1\u56B3\u56B7\u56BE\u56C5\u56C9\u56CA\u56CB\u56CF\u56D0\u56CC\u56CD\u56D9\u56DC\u56DD\u56DF\u56E1\u56E4", 4, "\u56F1\u56EB\u56ED"],
      ["8fb7a1", "\u56F6\u56F7\u5701\u5702\u5707\u570A\u570C\u5711\u5715\u571A\u571B\u571D\u5720\u5722\u5723\u5724\u5725\u5729\u572A\u572C\u572E\u572F\u5733\u5734\u573D\u573E\u573F\u5745\u5746\u574C\u574D\u5752\u5762\u5765\u5767\u5768\u576B\u576D", 4, "\u5773\u5774\u5775\u5777\u5779\u577A\u577B\u577C\u577E\u5781\u5783\u578C\u5794\u5797\u5799\u579A\u579C\u579D\u579E\u579F\u57A1\u5795\u57A7\u57A8\u57A9\u57AC\u57B8\u57BD\u57C7\u57C8\u57CC\u57CF\u57D5\u57DD\u57DE\u57E4\u57E6\u57E7\u57E9\u57ED\u57F0\u57F5\u57F6\u57F8\u57FD\u57FE\u57FF\u5803\u5804\u5808\u5809\u57E1"],
      ["8fb8a1", "\u580C\u580D\u581B\u581E\u581F\u5820\u5826\u5827\u582D\u5832\u5839\u583F\u5849\u584C\u584D\u584F\u5850\u5855\u585F\u5861\u5864\u5867\u5868\u5878\u587C\u587F\u5880\u5881\u5887\u5888\u5889\u588A\u588C\u588D\u588F\u5890\u5894\u5896\u589D\u58A0\u58A1\u58A2\u58A6\u58A9\u58B1\u58B2\u58C4\u58BC\u58C2\u58C8\u58CD\u58CE\u58D0\u58D2\u58D4\u58D6\u58DA\u58DD\u58E1\u58E2\u58E9\u58F3\u5905\u5906\u590B\u590C\u5912\u5913\u5914\u8641\u591D\u5921\u5923\u5924\u5928\u592F\u5930\u5933\u5935\u5936\u593F\u5943\u5946\u5952\u5953\u5959\u595B\u595D\u595E\u595F\u5961\u5963\u596B\u596D"],
      ["8fb9a1", "\u596F\u5972\u5975\u5976\u5979\u597B\u597C\u598B\u598C\u598E\u5992\u5995\u5997\u599F\u59A4\u59A7\u59AD\u59AE\u59AF\u59B0\u59B3\u59B7\u59BA\u59BC\u59C1\u59C3\u59C4\u59C8\u59CA\u59CD\u59D2\u59DD\u59DE\u59DF\u59E3\u59E4\u59E7\u59EE\u59EF\u59F1\u59F2\u59F4\u59F7\u5A00\u5A04\u5A0C\u5A0D\u5A0E\u5A12\u5A13\u5A1E\u5A23\u5A24\u5A27\u5A28\u5A2A\u5A2D\u5A30\u5A44\u5A45\u5A47\u5A48\u5A4C\u5A50\u5A55\u5A5E\u5A63\u5A65\u5A67\u5A6D\u5A77\u5A7A\u5A7B\u5A7E\u5A8B\u5A90\u5A93\u5A96\u5A99\u5A9C\u5A9E\u5A9F\u5AA0\u5AA2\u5AA7\u5AAC\u5AB1\u5AB2\u5AB3\u5AB5\u5AB8\u5ABA\u5ABB\u5ABF"],
      ["8fbaa1", "\u5AC4\u5AC6\u5AC8\u5ACF\u5ADA\u5ADC\u5AE0\u5AE5\u5AEA\u5AEE\u5AF5\u5AF6\u5AFD\u5B00\u5B01\u5B08\u5B17\u5B34\u5B19\u5B1B\u5B1D\u5B21\u5B25\u5B2D\u5B38\u5B41\u5B4B\u5B4C\u5B52\u5B56\u5B5E\u5B68\u5B6E\u5B6F\u5B7C\u5B7D\u5B7E\u5B7F\u5B81\u5B84\u5B86\u5B8A\u5B8E\u5B90\u5B91\u5B93\u5B94\u5B96\u5BA8\u5BA9\u5BAC\u5BAD\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBC\u5BC0\u5BC1\u5BCD\u5BCF\u5BD6", 4, "\u5BE0\u5BEF\u5BF1\u5BF4\u5BFD\u5C0C\u5C17\u5C1E\u5C1F\u5C23\u5C26\u5C29\u5C2B\u5C2C\u5C2E\u5C30\u5C32\u5C35\u5C36\u5C59\u5C5A\u5C5C\u5C62\u5C63\u5C67\u5C68\u5C69"],
      ["8fbba1", "\u5C6D\u5C70\u5C74\u5C75\u5C7A\u5C7B\u5C7C\u5C7D\u5C87\u5C88\u5C8A\u5C8F\u5C92\u5C9D\u5C9F\u5CA0\u5CA2\u5CA3\u5CA6\u5CAA\u5CB2\u5CB4\u5CB5\u5CBA\u5CC9\u5CCB\u5CD2\u5CDD\u5CD7\u5CEE\u5CF1\u5CF2\u5CF4\u5D01\u5D06\u5D0D\u5D12\u5D2B\u5D23\u5D24\u5D26\u5D27\u5D31\u5D34\u5D39\u5D3D\u5D3F\u5D42\u5D43\u5D46\u5D48\u5D55\u5D51\u5D59\u5D4A\u5D5F\u5D60\u5D61\u5D62\u5D64\u5D6A\u5D6D\u5D70\u5D79\u5D7A\u5D7E\u5D7F\u5D81\u5D83\u5D88\u5D8A\u5D92\u5D93\u5D94\u5D95\u5D99\u5D9B\u5D9F\u5DA0\u5DA7\u5DAB\u5DB0\u5DB4\u5DB8\u5DB9\u5DC3\u5DC7\u5DCB\u5DD0\u5DCE\u5DD8\u5DD9\u5DE0\u5DE4"],
      ["8fbca1", "\u5DE9\u5DF8\u5DF9\u5E00\u5E07\u5E0D\u5E12\u5E14\u5E15\u5E18\u5E1F\u5E20\u5E2E\u5E28\u5E32\u5E35\u5E3E\u5E4B\u5E50\u5E49\u5E51\u5E56\u5E58\u5E5B\u5E5C\u5E5E\u5E68\u5E6A", 4, "\u5E70\u5E80\u5E8B\u5E8E\u5EA2\u5EA4\u5EA5\u5EA8\u5EAA\u5EAC\u5EB1\u5EB3\u5EBD\u5EBE\u5EBF\u5EC6\u5ECC\u5ECB\u5ECE\u5ED1\u5ED2\u5ED4\u5ED5\u5EDC\u5EDE\u5EE5\u5EEB\u5F02\u5F06\u5F07\u5F08\u5F0E\u5F19\u5F1C\u5F1D\u5F21\u5F22\u5F23\u5F24\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F34\u5F36\u5F3B\u5F3D\u5F3F\u5F40\u5F44\u5F45\u5F47\u5F4D\u5F50\u5F54\u5F58\u5F5B\u5F60\u5F63\u5F64\u5F67"],
      ["8fbda1", "\u5F6F\u5F72\u5F74\u5F75\u5F78\u5F7A\u5F7D\u5F7E\u5F89\u5F8D\u5F8F\u5F96\u5F9C\u5F9D\u5FA2\u5FA7\u5FAB\u5FA4\u5FAC\u5FAF\u5FB0\u5FB1\u5FB8\u5FC4\u5FC7\u5FC8\u5FC9\u5FCB\u5FD0", 4, "\u5FDE\u5FE1\u5FE2\u5FE8\u5FE9\u5FEA\u5FEC\u5FED\u5FEE\u5FEF\u5FF2\u5FF3\u5FF6\u5FFA\u5FFC\u6007\u600A\u600D\u6013\u6014\u6017\u6018\u601A\u601F\u6024\u602D\u6033\u6035\u6040\u6047\u6048\u6049\u604C\u6051\u6054\u6056\u6057\u605D\u6061\u6067\u6071\u607E\u607F\u6082\u6086\u6088\u608A\u608E\u6091\u6093\u6095\u6098\u609D\u609E\u60A2\u60A4\u60A5\u60A8\u60B0\u60B1\u60B7"],
      ["8fbea1", "\u60BB\u60BE\u60C2\u60C4\u60C8\u60C9\u60CA\u60CB\u60CE\u60CF\u60D4\u60D5\u60D9\u60DB\u60DD\u60DE\u60E2\u60E5\u60F2\u60F5\u60F8\u60FC\u60FD\u6102\u6107\u610A\u610C\u6110", 4, "\u6116\u6117\u6119\u611C\u611E\u6122\u612A\u612B\u6130\u6131\u6135\u6136\u6137\u6139\u6141\u6145\u6146\u6149\u615E\u6160\u616C\u6172\u6178\u617B\u617C\u617F\u6180\u6181\u6183\u6184\u618B\u618D\u6192\u6193\u6197\u6198\u619C\u619D\u619F\u61A0\u61A5\u61A8\u61AA\u61AD\u61B8\u61B9\u61BC\u61C0\u61C1\u61C2\u61CE\u61CF\u61D5\u61DC\u61DD\u61DE\u61DF\u61E1\u61E2\u61E7\u61E9\u61E5"],
      ["8fbfa1", "\u61EC\u61ED\u61EF\u6201\u6203\u6204\u6207\u6213\u6215\u621C\u6220\u6222\u6223\u6227\u6229\u622B\u6239\u623D\u6242\u6243\u6244\u6246\u624C\u6250\u6251\u6252\u6254\u6256\u625A\u625C\u6264\u626D\u626F\u6273\u627A\u627D\u628D\u628E\u628F\u6290\u62A6\u62A8\u62B3\u62B6\u62B7\u62BA\u62BE\u62BF\u62C4\u62CE\u62D5\u62D6\u62DA\u62EA\u62F2\u62F4\u62FC\u62FD\u6303\u6304\u630A\u630B\u630D\u6310\u6313\u6316\u6318\u6329\u632A\u632D\u6335\u6336\u6339\u633C\u6341\u6342\u6343\u6344\u6346\u634A\u634B\u634E\u6352\u6353\u6354\u6358\u635B\u6365\u6366\u636C\u636D\u6371\u6374\u6375"],
      ["8fc0a1", "\u6378\u637C\u637D\u637F\u6382\u6384\u6387\u638A\u6390\u6394\u6395\u6399\u639A\u639E\u63A4\u63A6\u63AD\u63AE\u63AF\u63BD\u63C1\u63C5\u63C8\u63CE\u63D1\u63D3\u63D4\u63D5\u63DC\u63E0\u63E5\u63EA\u63EC\u63F2\u63F3\u63F5\u63F8\u63F9\u6409\u640A\u6410\u6412\u6414\u6418\u641E\u6420\u6422\u6424\u6425\u6429\u642A\u642F\u6430\u6435\u643D\u643F\u644B\u644F\u6451\u6452\u6453\u6454\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6463\u646D\u6473\u6474\u647B\u647D\u6485\u6487\u648F\u6490\u6491\u6498\u6499\u649B\u649D\u649F\u64A1\u64A3\u64A6\u64A8\u64AC\u64B3\u64BD\u64BE\u64BF"],
      ["8fc1a1", "\u64C4\u64C9\u64CA\u64CB\u64CC\u64CE\u64D0\u64D1\u64D5\u64D7\u64E4\u64E5\u64E9\u64EA\u64ED\u64F0\u64F5\u64F7\u64FB\u64FF\u6501\u6504\u6508\u6509\u650A\u650F\u6513\u6514\u6516\u6519\u651B\u651E\u651F\u6522\u6526\u6529\u652E\u6531\u653A\u653C\u653D\u6543\u6547\u6549\u6550\u6552\u6554\u655F\u6560\u6567\u656B\u657A\u657D\u6581\u6585\u658A\u6592\u6595\u6598\u659D\u65A0\u65A3\u65A6\u65AE\u65B2\u65B3\u65B4\u65BF\u65C2\u65C8\u65C9\u65CE\u65D0\u65D4\u65D6\u65D8\u65DF\u65F0\u65F2\u65F4\u65F5\u65F9\u65FE\u65FF\u6600\u6604\u6608\u6609\u660D\u6611\u6612\u6615\u6616\u661D"],
      ["8fc2a1", "\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6631\u6633\u6639\u6637\u6640\u6645\u6646\u664A\u664C\u6651\u664E\u6657\u6658\u6659\u665B\u665C\u6660\u6661\u66FB\u666A\u666B\u666C\u667E\u6673\u6675\u667F\u6677\u6678\u6679\u667B\u6680\u667C\u668B\u668C\u668D\u6690\u6692\u6699\u669A\u669B\u669C\u669F\u66A0\u66A4\u66AD\u66B1\u66B2\u66B5\u66BB\u66BF\u66C0\u66C2\u66C3\u66C8\u66CC\u66CE\u66CF\u66D4\u66DB\u66DF\u66E8\u66EB\u66EC\u66EE\u66FA\u6705\u6707\u670E\u6713\u6719\u671C\u6720\u6722\u6733\u673E\u6745\u6747\u6748\u674C\u6754\u6755\u675D"],
      ["8fc3a1", "\u6766\u676C\u676E\u6774\u6776\u677B\u6781\u6784\u678E\u678F\u6791\u6793\u6796\u6798\u6799\u679B\u67B0\u67B1\u67B2\u67B5\u67BB\u67BC\u67BD\u67F9\u67C0\u67C2\u67C3\u67C5\u67C8\u67C9\u67D2\u67D7\u67D9\u67DC\u67E1\u67E6\u67F0\u67F2\u67F6\u67F7\u6852\u6814\u6819\u681D\u681F\u6828\u6827\u682C\u682D\u682F\u6830\u6831\u6833\u683B\u683F\u6844\u6845\u684A\u684C\u6855\u6857\u6858\u685B\u686B\u686E", 4, "\u6875\u6879\u687A\u687B\u687C\u6882\u6884\u6886\u6888\u6896\u6898\u689A\u689C\u68A1\u68A3\u68A5\u68A9\u68AA\u68AE\u68B2\u68BB\u68C5\u68C8\u68CC\u68CF"],
      ["8fc4a1", "\u68D0\u68D1\u68D3\u68D6\u68D9\u68DC\u68DD\u68E5\u68E8\u68EA\u68EB\u68EC\u68ED\u68F0\u68F1\u68F5\u68F6\u68FB\u68FC\u68FD\u6906\u6909\u690A\u6910\u6911\u6913\u6916\u6917\u6931\u6933\u6935\u6938\u693B\u6942\u6945\u6949\u694E\u6957\u695B\u6963\u6964\u6965\u6966\u6968\u6969\u696C\u6970\u6971\u6972\u697A\u697B\u697F\u6980\u698D\u6992\u6996\u6998\u69A1\u69A5\u69A6\u69A8\u69AB\u69AD\u69AF\u69B7\u69B8\u69BA\u69BC\u69C5\u69C8\u69D1\u69D6\u69D7\u69E2\u69E5\u69EE\u69EF\u69F1\u69F3\u69F5\u69FE\u6A00\u6A01\u6A03\u6A0F\u6A11\u6A15\u6A1A\u6A1D\u6A20\u6A24\u6A28\u6A30\u6A32"],
      ["8fc5a1", "\u6A34\u6A37\u6A3B\u6A3E\u6A3F\u6A45\u6A46\u6A49\u6A4A\u6A4E\u6A50\u6A51\u6A52\u6A55\u6A56\u6A5B\u6A64\u6A67\u6A6A\u6A71\u6A73\u6A7E\u6A81\u6A83\u6A86\u6A87\u6A89\u6A8B\u6A91\u6A9B\u6A9D\u6A9E\u6A9F\u6AA5\u6AAB\u6AAF\u6AB0\u6AB1\u6AB4\u6ABD\u6ABE\u6ABF\u6AC6\u6AC9\u6AC8\u6ACC\u6AD0\u6AD4\u6AD5\u6AD6\u6ADC\u6ADD\u6AE4\u6AE7\u6AEC\u6AF0\u6AF1\u6AF2\u6AFC\u6AFD\u6B02\u6B03\u6B06\u6B07\u6B09\u6B0F\u6B10\u6B11\u6B17\u6B1B\u6B1E\u6B24\u6B28\u6B2B\u6B2C\u6B2F\u6B35\u6B36\u6B3B\u6B3F\u6B46\u6B4A\u6B4D\u6B52\u6B56\u6B58\u6B5D\u6B60\u6B67\u6B6B\u6B6E\u6B70\u6B75\u6B7D"],
      ["8fc6a1", "\u6B7E\u6B82\u6B85\u6B97\u6B9B\u6B9F\u6BA0\u6BA2\u6BA3\u6BA8\u6BA9\u6BAC\u6BAD\u6BAE\u6BB0\u6BB8\u6BB9\u6BBD\u6BBE\u6BC3\u6BC4\u6BC9\u6BCC\u6BD6\u6BDA\u6BE1\u6BE3\u6BE6\u6BE7\u6BEE\u6BF1\u6BF7\u6BF9\u6BFF\u6C02\u6C04\u6C05\u6C09\u6C0D\u6C0E\u6C10\u6C12\u6C19\u6C1F\u6C26\u6C27\u6C28\u6C2C\u6C2E\u6C33\u6C35\u6C36\u6C3A\u6C3B\u6C3F\u6C4A\u6C4B\u6C4D\u6C4F\u6C52\u6C54\u6C59\u6C5B\u6C5C\u6C6B\u6C6D\u6C6F\u6C74\u6C76\u6C78\u6C79\u6C7B\u6C85\u6C86\u6C87\u6C89\u6C94\u6C95\u6C97\u6C98\u6C9C\u6C9F\u6CB0\u6CB2\u6CB4\u6CC2\u6CC6\u6CCD\u6CCF\u6CD0\u6CD1\u6CD2\u6CD4\u6CD6"],
      ["8fc7a1", "\u6CDA\u6CDC\u6CE0\u6CE7\u6CE9\u6CEB\u6CEC\u6CEE\u6CF2\u6CF4\u6D04\u6D07\u6D0A\u6D0E\u6D0F\u6D11\u6D13\u6D1A\u6D26\u6D27\u6D28\u6C67\u6D2E\u6D2F\u6D31\u6D39\u6D3C\u6D3F\u6D57\u6D5E\u6D5F\u6D61\u6D65\u6D67\u6D6F\u6D70\u6D7C\u6D82\u6D87\u6D91\u6D92\u6D94\u6D96\u6D97\u6D98\u6DAA\u6DAC\u6DB4\u6DB7\u6DB9\u6DBD\u6DBF\u6DC4\u6DC8\u6DCA\u6DCE\u6DCF\u6DD6\u6DDB\u6DDD\u6DDF\u6DE0\u6DE2\u6DE5\u6DE9\u6DEF\u6DF0\u6DF4\u6DF6\u6DFC\u6E00\u6E04\u6E1E\u6E22\u6E27\u6E32\u6E36\u6E39\u6E3B\u6E3C\u6E44\u6E45\u6E48\u6E49\u6E4B\u6E4F\u6E51\u6E52\u6E53\u6E54\u6E57\u6E5C\u6E5D\u6E5E"],
      ["8fc8a1", "\u6E62\u6E63\u6E68\u6E73\u6E7B\u6E7D\u6E8D\u6E93\u6E99\u6EA0\u6EA7\u6EAD\u6EAE\u6EB1\u6EB3\u6EBB\u6EBF\u6EC0\u6EC1\u6EC3\u6EC7\u6EC8\u6ECA\u6ECD\u6ECE\u6ECF\u6EEB\u6EED\u6EEE\u6EF9\u6EFB\u6EFD\u6F04\u6F08\u6F0A\u6F0C\u6F0D\u6F16\u6F18\u6F1A\u6F1B\u6F26\u6F29\u6F2A\u6F2F\u6F30\u6F33\u6F36\u6F3B\u6F3C\u6F2D\u6F4F\u6F51\u6F52\u6F53\u6F57\u6F59\u6F5A\u6F5D\u6F5E\u6F61\u6F62\u6F68\u6F6C\u6F7D\u6F7E\u6F83\u6F87\u6F88\u6F8B\u6F8C\u6F8D\u6F90\u6F92\u6F93\u6F94\u6F96\u6F9A\u6F9F\u6FA0\u6FA5\u6FA6\u6FA7\u6FA8\u6FAE\u6FAF\u6FB0\u6FB5\u6FB6\u6FBC\u6FC5\u6FC7\u6FC8\u6FCA"],
      ["8fc9a1", "\u6FDA\u6FDE\u6FE8\u6FE9\u6FF0\u6FF5\u6FF9\u6FFC\u6FFD\u7000\u7005\u7006\u7007\u700D\u7017\u7020\u7023\u702F\u7034\u7037\u7039\u703C\u7043\u7044\u7048\u7049\u704A\u704B\u7054\u7055\u705D\u705E\u704E\u7064\u7065\u706C\u706E\u7075\u7076\u707E\u7081\u7085\u7086\u7094", 4, "\u709B\u70A4\u70AB\u70B0\u70B1\u70B4\u70B7\u70CA\u70D1\u70D3\u70D4\u70D5\u70D6\u70D8\u70DC\u70E4\u70FA\u7103", 4, "\u710B\u710C\u710F\u711E\u7120\u712B\u712D\u712F\u7130\u7131\u7138\u7141\u7145\u7146\u7147\u714A\u714B\u7150\u7152\u7157\u715A\u715C\u715E\u7160"],
      ["8fcaa1", "\u7168\u7179\u7180\u7185\u7187\u718C\u7192\u719A\u719B\u71A0\u71A2\u71AF\u71B0\u71B2\u71B3\u71BA\u71BF\u71C0\u71C1\u71C4\u71CB\u71CC\u71D3\u71D6\u71D9\u71DA\u71DC\u71F8\u71FE\u7200\u7207\u7208\u7209\u7213\u7217\u721A\u721D\u721F\u7224\u722B\u722F\u7234\u7238\u7239\u7241\u7242\u7243\u7245\u724E\u724F\u7250\u7253\u7255\u7256\u725A\u725C\u725E\u7260\u7263\u7268\u726B\u726E\u726F\u7271\u7277\u7278\u727B\u727C\u727F\u7284\u7289\u728D\u728E\u7293\u729B\u72A8\u72AD\u72AE\u72B1\u72B4\u72BE\u72C1\u72C7\u72C9\u72CC\u72D5\u72D6\u72D8\u72DF\u72E5\u72F3\u72F4\u72FA\u72FB"],
      ["8fcba1", "\u72FE\u7302\u7304\u7305\u7307\u730B\u730D\u7312\u7313\u7318\u7319\u731E\u7322\u7324\u7327\u7328\u732C\u7331\u7332\u7335\u733A\u733B\u733D\u7343\u734D\u7350\u7352\u7356\u7358\u735D\u735E\u735F\u7360\u7366\u7367\u7369\u736B\u736C\u736E\u736F\u7371\u7377\u7379\u737C\u7380\u7381\u7383\u7385\u7386\u738E\u7390\u7393\u7395\u7397\u7398\u739C\u739E\u739F\u73A0\u73A2\u73A5\u73A6\u73AA\u73AB\u73AD\u73B5\u73B7\u73B9\u73BC\u73BD\u73BF\u73C5\u73C6\u73C9\u73CB\u73CC\u73CF\u73D2\u73D3\u73D6\u73D9\u73DD\u73E1\u73E3\u73E6\u73E7\u73E9\u73F4\u73F5\u73F7\u73F9\u73FA\u73FB\u73FD"],
      ["8fcca1", "\u73FF\u7400\u7401\u7404\u7407\u740A\u7411\u741A\u741B\u7424\u7426\u7428", 9, "\u7439\u7440\u7443\u7444\u7446\u7447\u744B\u744D\u7451\u7452\u7457\u745D\u7462\u7466\u7467\u7468\u746B\u746D\u746E\u7471\u7472\u7480\u7481\u7485\u7486\u7487\u7489\u748F\u7490\u7491\u7492\u7498\u7499\u749A\u749C\u749F\u74A0\u74A1\u74A3\u74A6\u74A8\u74A9\u74AA\u74AB\u74AE\u74AF\u74B1\u74B2\u74B5\u74B9\u74BB\u74BF\u74C8\u74C9\u74CC\u74D0\u74D3\u74D8\u74DA\u74DB\u74DE\u74DF\u74E4\u74E8\u74EA\u74EB\u74EF\u74F4\u74FA\u74FB\u74FC\u74FF\u7506"],
      ["8fcda1", "\u7512\u7516\u7517\u7520\u7521\u7524\u7527\u7529\u752A\u752F\u7536\u7539\u753D\u753E\u753F\u7540\u7543\u7547\u7548\u754E\u7550\u7552\u7557\u755E\u755F\u7561\u756F\u7571\u7579", 5, "\u7581\u7585\u7590\u7592\u7593\u7595\u7599\u759C\u75A2\u75A4\u75B4\u75BA\u75BF\u75C0\u75C1\u75C4\u75C6\u75CC\u75CE\u75CF\u75D7\u75DC\u75DF\u75E0\u75E1\u75E4\u75E7\u75EC\u75EE\u75EF\u75F1\u75F9\u7600\u7602\u7603\u7604\u7607\u7608\u760A\u760C\u760F\u7612\u7613\u7615\u7616\u7619\u761B\u761C\u761D\u761E\u7623\u7625\u7626\u7629\u762D\u7632\u7633\u7635\u7638\u7639"],
      ["8fcea1", "\u763A\u763C\u764A\u7640\u7641\u7643\u7644\u7645\u7649\u764B\u7655\u7659\u765F\u7664\u7665\u766D\u766E\u766F\u7671\u7674\u7681\u7685\u768C\u768D\u7695\u769B\u769C\u769D\u769F\u76A0\u76A2", 6, "\u76AA\u76AD\u76BD\u76C1\u76C5\u76C9\u76CB\u76CC\u76CE\u76D4\u76D9\u76E0\u76E6\u76E8\u76EC\u76F0\u76F1\u76F6\u76F9\u76FC\u7700\u7706\u770A\u770E\u7712\u7714\u7715\u7717\u7719\u771A\u771C\u7722\u7728\u772D\u772E\u772F\u7734\u7735\u7736\u7739\u773D\u773E\u7742\u7745\u7746\u774A\u774D\u774E\u774F\u7752\u7756\u7757\u775C\u775E\u775F\u7760\u7762"],
      ["8fcfa1", "\u7764\u7767\u776A\u776C\u7770\u7772\u7773\u7774\u777A\u777D\u7780\u7784\u778C\u778D\u7794\u7795\u7796\u779A\u779F\u77A2\u77A7\u77AA\u77AE\u77AF\u77B1\u77B5\u77BE\u77C3\u77C9\u77D1\u77D2\u77D5\u77D9\u77DE\u77DF\u77E0\u77E4\u77E6\u77EA\u77EC\u77F0\u77F1\u77F4\u77F8\u77FB\u7805\u7806\u7809\u780D\u780E\u7811\u781D\u7821\u7822\u7823\u782D\u782E\u7830\u7835\u7837\u7843\u7844\u7847\u7848\u784C\u784E\u7852\u785C\u785E\u7860\u7861\u7863\u7864\u7868\u786A\u786E\u787A\u787E\u788A\u788F\u7894\u7898\u78A1\u789D\u789E\u789F\u78A4\u78A8\u78AC\u78AD\u78B0\u78B1\u78B2\u78B3"],
      ["8fd0a1", "\u78BB\u78BD\u78BF\u78C7\u78C8\u78C9\u78CC\u78CE\u78D2\u78D3\u78D5\u78D6\u78E4\u78DB\u78DF\u78E0\u78E1\u78E6\u78EA\u78F2\u78F3\u7900\u78F6\u78F7\u78FA\u78FB\u78FF\u7906\u790C\u7910\u791A\u791C\u791E\u791F\u7920\u7925\u7927\u7929\u792D\u7931\u7934\u7935\u793B\u793D\u793F\u7944\u7945\u7946\u794A\u794B\u794F\u7951\u7954\u7958\u795B\u795C\u7967\u7969\u796B\u7972\u7979\u797B\u797C\u797E\u798B\u798C\u7991\u7993\u7994\u7995\u7996\u7998\u799B\u799C\u79A1\u79A8\u79A9\u79AB\u79AF\u79B1\u79B4\u79B8\u79BB\u79C2\u79C4\u79C7\u79C8\u79CA\u79CF\u79D4\u79D6\u79DA\u79DD\u79DE"],
      ["8fd1a1", "\u79E0\u79E2\u79E5\u79EA\u79EB\u79ED\u79F1\u79F8\u79FC\u7A02\u7A03\u7A07\u7A09\u7A0A\u7A0C\u7A11\u7A15\u7A1B\u7A1E\u7A21\u7A27\u7A2B\u7A2D\u7A2F\u7A30\u7A34\u7A35\u7A38\u7A39\u7A3A\u7A44\u7A45\u7A47\u7A48\u7A4C\u7A55\u7A56\u7A59\u7A5C\u7A5D\u7A5F\u7A60\u7A65\u7A67\u7A6A\u7A6D\u7A75\u7A78\u7A7E\u7A80\u7A82\u7A85\u7A86\u7A8A\u7A8B\u7A90\u7A91\u7A94\u7A9E\u7AA0\u7AA3\u7AAC\u7AB3\u7AB5\u7AB9\u7ABB\u7ABC\u7AC6\u7AC9\u7ACC\u7ACE\u7AD1\u7ADB\u7AE8\u7AE9\u7AEB\u7AEC\u7AF1\u7AF4\u7AFB\u7AFD\u7AFE\u7B07\u7B14\u7B1F\u7B23\u7B27\u7B29\u7B2A\u7B2B\u7B2D\u7B2E\u7B2F\u7B30"],
      ["8fd2a1", "\u7B31\u7B34\u7B3D\u7B3F\u7B40\u7B41\u7B47\u7B4E\u7B55\u7B60\u7B64\u7B66\u7B69\u7B6A\u7B6D\u7B6F\u7B72\u7B73\u7B77\u7B84\u7B89\u7B8E\u7B90\u7B91\u7B96\u7B9B\u7B9E\u7BA0\u7BA5\u7BAC\u7BAF\u7BB0\u7BB2\u7BB5\u7BB6\u7BBA\u7BBB\u7BBC\u7BBD\u7BC2\u7BC5\u7BC8\u7BCA\u7BD4\u7BD6\u7BD7\u7BD9\u7BDA\u7BDB\u7BE8\u7BEA\u7BF2\u7BF4\u7BF5\u7BF8\u7BF9\u7BFA\u7BFC\u7BFE\u7C01\u7C02\u7C03\u7C04\u7C06\u7C09\u7C0B\u7C0C\u7C0E\u7C0F\u7C19\u7C1B\u7C20\u7C25\u7C26\u7C28\u7C2C\u7C31\u7C33\u7C34\u7C36\u7C39\u7C3A\u7C46\u7C4A\u7C55\u7C51\u7C52\u7C53\u7C59", 5],
      ["8fd3a1", "\u7C61\u7C63\u7C67\u7C69\u7C6D\u7C6E\u7C70\u7C72\u7C79\u7C7C\u7C7D\u7C86\u7C87\u7C8F\u7C94\u7C9E\u7CA0\u7CA6\u7CB0\u7CB6\u7CB7\u7CBA\u7CBB\u7CBC\u7CBF\u7CC4\u7CC7\u7CC8\u7CC9\u7CCD\u7CCF\u7CD3\u7CD4\u7CD5\u7CD7\u7CD9\u7CDA\u7CDD\u7CE6\u7CE9\u7CEB\u7CF5\u7D03\u7D07\u7D08\u7D09\u7D0F\u7D11\u7D12\u7D13\u7D16\u7D1D\u7D1E\u7D23\u7D26\u7D2A\u7D2D\u7D31\u7D3C\u7D3D\u7D3E\u7D40\u7D41\u7D47\u7D48\u7D4D\u7D51\u7D53\u7D57\u7D59\u7D5A\u7D5C\u7D5D\u7D65\u7D67\u7D6A\u7D70\u7D78\u7D7A\u7D7B\u7D7F\u7D81\u7D82\u7D83\u7D85\u7D86\u7D88\u7D8B\u7D8C\u7D8D\u7D91\u7D96\u7D97\u7D9D"],
      ["8fd4a1", "\u7D9E\u7DA6\u7DA7\u7DAA\u7DB3\u7DB6\u7DB7\u7DB9\u7DC2", 4, "\u7DCC\u7DCD\u7DCE\u7DD7\u7DD9\u7E00\u7DE2\u7DE5\u7DE6\u7DEA\u7DEB\u7DED\u7DF1\u7DF5\u7DF6\u7DF9\u7DFA\u7E08\u7E10\u7E11\u7E15\u7E17\u7E1C\u7E1D\u7E20\u7E27\u7E28\u7E2C\u7E2D\u7E2F\u7E33\u7E36\u7E3F\u7E44\u7E45\u7E47\u7E4E\u7E50\u7E52\u7E58\u7E5F\u7E61\u7E62\u7E65\u7E6B\u7E6E\u7E6F\u7E73\u7E78\u7E7E\u7E81\u7E86\u7E87\u7E8A\u7E8D\u7E91\u7E95\u7E98\u7E9A\u7E9D\u7E9E\u7F3C\u7F3B\u7F3D\u7F3E\u7F3F\u7F43\u7F44\u7F47\u7F4F\u7F52\u7F53\u7F5B\u7F5C\u7F5D\u7F61\u7F63\u7F64\u7F65\u7F66\u7F6D"],
      ["8fd5a1", "\u7F71\u7F7D\u7F7E\u7F7F\u7F80\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F96\u7F97\u7F9C\u7FA1\u7FA2\u7FA6\u7FAA\u7FAD\u7FB4\u7FBC\u7FBF\u7FC0\u7FC3\u7FC8\u7FCE\u7FCF\u7FDB\u7FDF\u7FE3\u7FE5\u7FE8\u7FEC\u7FEE\u7FEF\u7FF2\u7FFA\u7FFD\u7FFE\u7FFF\u8007\u8008\u800A\u800D\u800E\u800F\u8011\u8013\u8014\u8016\u801D\u801E\u801F\u8020\u8024\u8026\u802C\u802E\u8030\u8034\u8035\u8037\u8039\u803A\u803C\u803E\u8040\u8044\u8060\u8064\u8066\u806D\u8071\u8075\u8081\u8088\u808E\u809C\u809E\u80A6\u80A7\u80AB\u80B8\u80B9\u80C8\u80CD\u80CF\u80D2\u80D4\u80D5\u80D7\u80D8\u80E0\u80ED\u80EE"],
      ["8fd6a1", "\u80F0\u80F2\u80F3\u80F6\u80F9\u80FA\u80FE\u8103\u810B\u8116\u8117\u8118\u811C\u811E\u8120\u8124\u8127\u812C\u8130\u8135\u813A\u813C\u8145\u8147\u814A\u814C\u8152\u8157\u8160\u8161\u8167\u8168\u8169\u816D\u816F\u8177\u8181\u8190\u8184\u8185\u8186\u818B\u818E\u8196\u8198\u819B\u819E\u81A2\u81AE\u81B2\u81B4\u81BB\u81CB\u81C3\u81C5\u81CA\u81CE\u81CF\u81D5\u81D7\u81DB\u81DD\u81DE\u81E1\u81E4\u81EB\u81EC\u81F0\u81F1\u81F2\u81F5\u81F6\u81F8\u81F9\u81FD\u81FF\u8200\u8203\u820F\u8213\u8214\u8219\u821A\u821D\u8221\u8222\u8228\u8232\u8234\u823A\u8243\u8244\u8245\u8246"],
      ["8fd7a1", "\u824B\u824E\u824F\u8251\u8256\u825C\u8260\u8263\u8267\u826D\u8274\u827B\u827D\u827F\u8280\u8281\u8283\u8284\u8287\u8289\u828A\u828E\u8291\u8294\u8296\u8298\u829A\u829B\u82A0\u82A1\u82A3\u82A4\u82A7\u82A8\u82A9\u82AA\u82AE\u82B0\u82B2\u82B4\u82B7\u82BA\u82BC\u82BE\u82BF\u82C6\u82D0\u82D5\u82DA\u82E0\u82E2\u82E4\u82E8\u82EA\u82ED\u82EF\u82F6\u82F7\u82FD\u82FE\u8300\u8301\u8307\u8308\u830A\u830B\u8354\u831B\u831D\u831E\u831F\u8321\u8322\u832C\u832D\u832E\u8330\u8333\u8337\u833A\u833C\u833D\u8342\u8343\u8344\u8347\u834D\u834E\u8351\u8355\u8356\u8357\u8370\u8378"],
      ["8fd8a1", "\u837D\u837F\u8380\u8382\u8384\u8386\u838D\u8392\u8394\u8395\u8398\u8399\u839B\u839C\u839D\u83A6\u83A7\u83A9\u83AC\u83BE\u83BF\u83C0\u83C7\u83C9\u83CF\u83D0\u83D1\u83D4\u83DD\u8353\u83E8\u83EA\u83F6\u83F8\u83F9\u83FC\u8401\u8406\u840A\u840F\u8411\u8415\u8419\u83AD\u842F\u8439\u8445\u8447\u8448\u844A\u844D\u844F\u8451\u8452\u8456\u8458\u8459\u845A\u845C\u8460\u8464\u8465\u8467\u846A\u8470\u8473\u8474\u8476\u8478\u847C\u847D\u8481\u8485\u8492\u8493\u8495\u849E\u84A6\u84A8\u84A9\u84AA\u84AF\u84B1\u84B4\u84BA\u84BD\u84BE\u84C0\u84C2\u84C7\u84C8\u84CC\u84CF\u84D3"],
      ["8fd9a1", "\u84DC\u84E7\u84EA\u84EF\u84F0\u84F1\u84F2\u84F7\u8532\u84FA\u84FB\u84FD\u8502\u8503\u8507\u850C\u850E\u8510\u851C\u851E\u8522\u8523\u8524\u8525\u8527\u852A\u852B\u852F\u8533\u8534\u8536\u853F\u8546\u854F", 4, "\u8556\u8559\u855C", 6, "\u8564\u856B\u856F\u8579\u857A\u857B\u857D\u857F\u8581\u8585\u8586\u8589\u858B\u858C\u858F\u8593\u8598\u859D\u859F\u85A0\u85A2\u85A5\u85A7\u85B4\u85B6\u85B7\u85B8\u85BC\u85BD\u85BE\u85BF\u85C2\u85C7\u85CA\u85CB\u85CE\u85AD\u85D8\u85DA\u85DF\u85E0\u85E6\u85E8\u85ED\u85F3\u85F6\u85FC"],
      ["8fdaa1", "\u85FF\u8600\u8604\u8605\u860D\u860E\u8610\u8611\u8612\u8618\u8619\u861B\u861E\u8621\u8627\u8629\u8636\u8638\u863A\u863C\u863D\u8640\u8642\u8646\u8652\u8653\u8656\u8657\u8658\u8659\u865D\u8660", 4, "\u8669\u866C\u866F\u8675\u8676\u8677\u867A\u868D\u8691\u8696\u8698\u869A\u869C\u86A1\u86A6\u86A7\u86A8\u86AD\u86B1\u86B3\u86B4\u86B5\u86B7\u86B8\u86B9\u86BF\u86C0\u86C1\u86C3\u86C5\u86D1\u86D2\u86D5\u86D7\u86DA\u86DC\u86E0\u86E3\u86E5\u86E7\u8688\u86FA\u86FC\u86FD\u8704\u8705\u8707\u870B\u870E\u870F\u8710\u8713\u8714\u8719\u871E\u871F\u8721\u8723"],
      ["8fdba1", "\u8728\u872E\u872F\u8731\u8732\u8739\u873A\u873C\u873D\u873E\u8740\u8743\u8745\u874D\u8758\u875D\u8761\u8764\u8765\u876F\u8771\u8772\u877B\u8783", 6, "\u878B\u878C\u8790\u8793\u8795\u8797\u8798\u8799\u879E\u87A0\u87A3\u87A7\u87AC\u87AD\u87AE\u87B1\u87B5\u87BE\u87BF\u87C1\u87C8\u87C9\u87CA\u87CE\u87D5\u87D6\u87D9\u87DA\u87DC\u87DF\u87E2\u87E3\u87E4\u87EA\u87EB\u87ED\u87F1\u87F3\u87F8\u87FA\u87FF\u8801\u8803\u8806\u8809\u880A\u880B\u8810\u8819\u8812\u8813\u8814\u8818\u881A\u881B\u881C\u881E\u881F\u8828\u882D\u882E\u8830\u8832\u8835"],
      ["8fdca1", "\u883A\u883C\u8841\u8843\u8845\u8848\u8849\u884A\u884B\u884E\u8851\u8855\u8856\u8858\u885A\u885C\u885F\u8860\u8864\u8869\u8871\u8879\u887B\u8880\u8898\u889A\u889B\u889C\u889F\u88A0\u88A8\u88AA\u88BA\u88BD\u88BE\u88C0\u88CA", 4, "\u88D1\u88D2\u88D3\u88DB\u88DE\u88E7\u88EF\u88F0\u88F1\u88F5\u88F7\u8901\u8906\u890D\u890E\u890F\u8915\u8916\u8918\u8919\u891A\u891C\u8920\u8926\u8927\u8928\u8930\u8931\u8932\u8935\u8939\u893A\u893E\u8940\u8942\u8945\u8946\u8949\u894F\u8952\u8957\u895A\u895B\u895C\u8961\u8962\u8963\u896B\u896E\u8970\u8973\u8975\u897A"],
      ["8fdda1", "\u897B\u897C\u897D\u8989\u898D\u8990\u8994\u8995\u899B\u899C\u899F\u89A0\u89A5\u89B0\u89B4\u89B5\u89B6\u89B7\u89BC\u89D4", 4, "\u89E5\u89E9\u89EB\u89ED\u89F1\u89F3\u89F6\u89F9\u89FD\u89FF\u8A04\u8A05\u8A07\u8A0F\u8A11\u8A12\u8A14\u8A15\u8A1E\u8A20\u8A22\u8A24\u8A26\u8A2B\u8A2C\u8A2F\u8A35\u8A37\u8A3D\u8A3E\u8A40\u8A43\u8A45\u8A47\u8A49\u8A4D\u8A4E\u8A53\u8A56\u8A57\u8A58\u8A5C\u8A5D\u8A61\u8A65\u8A67\u8A75\u8A76\u8A77\u8A79\u8A7A\u8A7B\u8A7E\u8A7F\u8A80\u8A83\u8A86\u8A8B\u8A8F\u8A90\u8A92\u8A96\u8A97\u8A99\u8A9F\u8AA7\u8AA9\u8AAE\u8AAF\u8AB3"],
      ["8fdea1", "\u8AB6\u8AB7\u8ABB\u8ABE\u8AC3\u8AC6\u8AC8\u8AC9\u8ACA\u8AD1\u8AD3\u8AD4\u8AD5\u8AD7\u8ADD\u8ADF\u8AEC\u8AF0\u8AF4\u8AF5\u8AF6\u8AFC\u8AFF\u8B05\u8B06\u8B0B\u8B11\u8B1C\u8B1E\u8B1F\u8B0A\u8B2D\u8B30\u8B37\u8B3C\u8B42", 4, "\u8B48\u8B52\u8B53\u8B54\u8B59\u8B4D\u8B5E\u8B63\u8B6D\u8B76\u8B78\u8B79\u8B7C\u8B7E\u8B81\u8B84\u8B85\u8B8B\u8B8D\u8B8F\u8B94\u8B95\u8B9C\u8B9E\u8B9F\u8C38\u8C39\u8C3D\u8C3E\u8C45\u8C47\u8C49\u8C4B\u8C4F\u8C51\u8C53\u8C54\u8C57\u8C58\u8C5B\u8C5D\u8C59\u8C63\u8C64\u8C66\u8C68\u8C69\u8C6D\u8C73\u8C75\u8C76\u8C7B\u8C7E\u8C86"],
      ["8fdfa1", "\u8C87\u8C8B\u8C90\u8C92\u8C93\u8C99\u8C9B\u8C9C\u8CA4\u8CB9\u8CBA\u8CC5\u8CC6\u8CC9\u8CCB\u8CCF\u8CD6\u8CD5\u8CD9\u8CDD\u8CE1\u8CE8\u8CEC\u8CEF\u8CF0\u8CF2\u8CF5\u8CF7\u8CF8\u8CFE\u8CFF\u8D01\u8D03\u8D09\u8D12\u8D17\u8D1B\u8D65\u8D69\u8D6C\u8D6E\u8D7F\u8D82\u8D84\u8D88\u8D8D\u8D90\u8D91\u8D95\u8D9E\u8D9F\u8DA0\u8DA6\u8DAB\u8DAC\u8DAF\u8DB2\u8DB5\u8DB7\u8DB9\u8DBB\u8DC0\u8DC5\u8DC6\u8DC7\u8DC8\u8DCA\u8DCE\u8DD1\u8DD4\u8DD5\u8DD7\u8DD9\u8DE4\u8DE5\u8DE7\u8DEC\u8DF0\u8DBC\u8DF1\u8DF2\u8DF4\u8DFD\u8E01\u8E04\u8E05\u8E06\u8E0B\u8E11\u8E14\u8E16\u8E20\u8E21\u8E22"],
      ["8fe0a1", "\u8E23\u8E26\u8E27\u8E31\u8E33\u8E36\u8E37\u8E38\u8E39\u8E3D\u8E40\u8E41\u8E4B\u8E4D\u8E4E\u8E4F\u8E54\u8E5B\u8E5C\u8E5D\u8E5E\u8E61\u8E62\u8E69\u8E6C\u8E6D\u8E6F\u8E70\u8E71\u8E79\u8E7A\u8E7B\u8E82\u8E83\u8E89\u8E90\u8E92\u8E95\u8E9A\u8E9B\u8E9D\u8E9E\u8EA2\u8EA7\u8EA9\u8EAD\u8EAE\u8EB3\u8EB5\u8EBA\u8EBB\u8EC0\u8EC1\u8EC3\u8EC4\u8EC7\u8ECF\u8ED1\u8ED4\u8EDC\u8EE8\u8EEE\u8EF0\u8EF1\u8EF7\u8EF9\u8EFA\u8EED\u8F00\u8F02\u8F07\u8F08\u8F0F\u8F10\u8F16\u8F17\u8F18\u8F1E\u8F20\u8F21\u8F23\u8F25\u8F27\u8F28\u8F2C\u8F2D\u8F2E\u8F34\u8F35\u8F36\u8F37\u8F3A\u8F40\u8F41"],
      ["8fe1a1", "\u8F43\u8F47\u8F4F\u8F51", 4, "\u8F58\u8F5D\u8F5E\u8F65\u8F9D\u8FA0\u8FA1\u8FA4\u8FA5\u8FA6\u8FB5\u8FB6\u8FB8\u8FBE\u8FC0\u8FC1\u8FC6\u8FCA\u8FCB\u8FCD\u8FD0\u8FD2\u8FD3\u8FD5\u8FE0\u8FE3\u8FE4\u8FE8\u8FEE\u8FF1\u8FF5\u8FF6\u8FFB\u8FFE\u9002\u9004\u9008\u900C\u9018\u901B\u9028\u9029\u902F\u902A\u902C\u902D\u9033\u9034\u9037\u903F\u9043\u9044\u904C\u905B\u905D\u9062\u9066\u9067\u906C\u9070\u9074\u9079\u9085\u9088\u908B\u908C\u908E\u9090\u9095\u9097\u9098\u9099\u909B\u90A0\u90A1\u90A2\u90A5\u90B0\u90B2\u90B3\u90B4\u90B6\u90BD\u90CC\u90BE\u90C3"],
      ["8fe2a1", "\u90C4\u90C5\u90C7\u90C8\u90D5\u90D7\u90D8\u90D9\u90DC\u90DD\u90DF\u90E5\u90D2\u90F6\u90EB\u90EF\u90F0\u90F4\u90FE\u90FF\u9100\u9104\u9105\u9106\u9108\u910D\u9110\u9114\u9116\u9117\u9118\u911A\u911C\u911E\u9120\u9125\u9122\u9123\u9127\u9129\u912E\u912F\u9131\u9134\u9136\u9137\u9139\u913A\u913C\u913D\u9143\u9147\u9148\u914F\u9153\u9157\u9159\u915A\u915B\u9161\u9164\u9167\u916D\u9174\u9179\u917A\u917B\u9181\u9183\u9185\u9186\u918A\u918E\u9191\u9193\u9194\u9195\u9198\u919E\u91A1\u91A6\u91A8\u91AC\u91AD\u91AE\u91B0\u91B1\u91B2\u91B3\u91B6\u91BB\u91BC\u91BD\u91BF"],
      ["8fe3a1", "\u91C2\u91C3\u91C5\u91D3\u91D4\u91D7\u91D9\u91DA\u91DE\u91E4\u91E5\u91E9\u91EA\u91EC", 5, "\u91F7\u91F9\u91FB\u91FD\u9200\u9201\u9204\u9205\u9206\u9207\u9209\u920A\u920C\u9210\u9212\u9213\u9216\u9218\u921C\u921D\u9223\u9224\u9225\u9226\u9228\u922E\u922F\u9230\u9233\u9235\u9236\u9238\u9239\u923A\u923C\u923E\u9240\u9242\u9243\u9246\u9247\u924A\u924D\u924E\u924F\u9251\u9258\u9259\u925C\u925D\u9260\u9261\u9265\u9267\u9268\u9269\u926E\u926F\u9270\u9275", 4, "\u927B\u927C\u927D\u927F\u9288\u9289\u928A\u928D\u928E\u9292\u9297"],
      ["8fe4a1", "\u9299\u929F\u92A0\u92A4\u92A5\u92A7\u92A8\u92AB\u92AF\u92B2\u92B6\u92B8\u92BA\u92BB\u92BC\u92BD\u92BF", 4, "\u92C5\u92C6\u92C7\u92C8\u92CB\u92CC\u92CD\u92CE\u92D0\u92D3\u92D5\u92D7\u92D8\u92D9\u92DC\u92DD\u92DF\u92E0\u92E1\u92E3\u92E5\u92E7\u92E8\u92EC\u92EE\u92F0\u92F9\u92FB\u92FF\u9300\u9302\u9308\u930D\u9311\u9314\u9315\u931C\u931D\u931E\u931F\u9321\u9324\u9325\u9327\u9329\u932A\u9333\u9334\u9336\u9337\u9347\u9348\u9349\u9350\u9351\u9352\u9355\u9357\u9358\u935A\u935E\u9364\u9365\u9367\u9369\u936A\u936D\u936F\u9370\u9371\u9373\u9374\u9376"],
      ["8fe5a1", "\u937A\u937D\u937F\u9380\u9381\u9382\u9388\u938A\u938B\u938D\u938F\u9392\u9395\u9398\u939B\u939E\u93A1\u93A3\u93A4\u93A6\u93A8\u93AB\u93B4\u93B5\u93B6\u93BA\u93A9\u93C1\u93C4\u93C5\u93C6\u93C7\u93C9", 4, "\u93D3\u93D9\u93DC\u93DE\u93DF\u93E2\u93E6\u93E7\u93F9\u93F7\u93F8\u93FA\u93FB\u93FD\u9401\u9402\u9404\u9408\u9409\u940D\u940E\u940F\u9415\u9416\u9417\u941F\u942E\u942F\u9431\u9432\u9433\u9434\u943B\u943F\u943D\u9443\u9445\u9448\u944A\u944C\u9455\u9459\u945C\u945F\u9461\u9463\u9468\u946B\u946D\u946E\u946F\u9471\u9472\u9484\u9483\u9578\u9579"],
      ["8fe6a1", "\u957E\u9584\u9588\u958C\u958D\u958E\u959D\u959E\u959F\u95A1\u95A6\u95A9\u95AB\u95AC\u95B4\u95B6\u95BA\u95BD\u95BF\u95C6\u95C8\u95C9\u95CB\u95D0\u95D1\u95D2\u95D3\u95D9\u95DA\u95DD\u95DE\u95DF\u95E0\u95E4\u95E6\u961D\u961E\u9622\u9624\u9625\u9626\u962C\u9631\u9633\u9637\u9638\u9639\u963A\u963C\u963D\u9641\u9652\u9654\u9656\u9657\u9658\u9661\u966E\u9674\u967B\u967C\u967E\u967F\u9681\u9682\u9683\u9684\u9689\u9691\u9696\u969A\u969D\u969F\u96A4\u96A5\u96A6\u96A9\u96AE\u96AF\u96B3\u96BA\u96CA\u96D2\u5DB2\u96D8\u96DA\u96DD\u96DE\u96DF\u96E9\u96EF\u96F1\u96FA\u9702"],
      ["8fe7a1", "\u9703\u9705\u9709\u971A\u971B\u971D\u9721\u9722\u9723\u9728\u9731\u9733\u9741\u9743\u974A\u974E\u974F\u9755\u9757\u9758\u975A\u975B\u9763\u9767\u976A\u976E\u9773\u9776\u9777\u9778\u977B\u977D\u977F\u9780\u9789\u9795\u9796\u9797\u9799\u979A\u979E\u979F\u97A2\u97AC\u97AE\u97B1\u97B2\u97B5\u97B6\u97B8\u97B9\u97BA\u97BC\u97BE\u97BF\u97C1\u97C4\u97C5\u97C7\u97C9\u97CA\u97CC\u97CD\u97CE\u97D0\u97D1\u97D4\u97D7\u97D8\u97D9\u97DD\u97DE\u97E0\u97DB\u97E1\u97E4\u97EF\u97F1\u97F4\u97F7\u97F8\u97FA\u9807\u980A\u9819\u980D\u980E\u9814\u9816\u981C\u981E\u9820\u9823\u9826"],
      ["8fe8a1", "\u982B\u982E\u982F\u9830\u9832\u9833\u9835\u9825\u983E\u9844\u9847\u984A\u9851\u9852\u9853\u9856\u9857\u9859\u985A\u9862\u9863\u9865\u9866\u986A\u986C\u98AB\u98AD\u98AE\u98B0\u98B4\u98B7\u98B8\u98BA\u98BB\u98BF\u98C2\u98C5\u98C8\u98CC\u98E1\u98E3\u98E5\u98E6\u98E7\u98EA\u98F3\u98F6\u9902\u9907\u9908\u9911\u9915\u9916\u9917\u991A\u991B\u991C\u991F\u9922\u9926\u9927\u992B\u9931", 4, "\u9939\u993A\u993B\u993C\u9940\u9941\u9946\u9947\u9948\u994D\u994E\u9954\u9958\u9959\u995B\u995C\u995E\u995F\u9960\u999B\u999D\u999F\u99A6\u99B0\u99B1\u99B2\u99B5"],
      ["8fe9a1", "\u99B9\u99BA\u99BD\u99BF\u99C3\u99C9\u99D3\u99D4\u99D9\u99DA\u99DC\u99DE\u99E7\u99EA\u99EB\u99EC\u99F0\u99F4\u99F5\u99F9\u99FD\u99FE\u9A02\u9A03\u9A04\u9A0B\u9A0C\u9A10\u9A11\u9A16\u9A1E\u9A20\u9A22\u9A23\u9A24\u9A27\u9A2D\u9A2E\u9A33\u9A35\u9A36\u9A38\u9A47\u9A41\u9A44\u9A4A\u9A4B\u9A4C\u9A4E\u9A51\u9A54\u9A56\u9A5D\u9AAA\u9AAC\u9AAE\u9AAF\u9AB2\u9AB4\u9AB5\u9AB6\u9AB9\u9ABB\u9ABE\u9ABF\u9AC1\u9AC3\u9AC6\u9AC8\u9ACE\u9AD0\u9AD2\u9AD5\u9AD6\u9AD7\u9ADB\u9ADC\u9AE0\u9AE4\u9AE5\u9AE7\u9AE9\u9AEC\u9AF2\u9AF3\u9AF5\u9AF9\u9AFA\u9AFD\u9AFF", 4],
      ["8feaa1", "\u9B04\u9B05\u9B08\u9B09\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B12\u9B16\u9B19\u9B1B\u9B1C\u9B20\u9B26\u9B2B\u9B2D\u9B33\u9B34\u9B35\u9B37\u9B39\u9B3A\u9B3D\u9B48\u9B4B\u9B4C\u9B55\u9B56\u9B57\u9B5B\u9B5E\u9B61\u9B63\u9B65\u9B66\u9B68\u9B6A", 4, "\u9B73\u9B75\u9B77\u9B78\u9B79\u9B7F\u9B80\u9B84\u9B85\u9B86\u9B87\u9B89\u9B8A\u9B8B\u9B8D\u9B8F\u9B90\u9B94\u9B9A\u9B9D\u9B9E\u9BA6\u9BA7\u9BA9\u9BAC\u9BB0\u9BB1\u9BB2\u9BB7\u9BB8\u9BBB\u9BBC\u9BBE\u9BBF\u9BC1\u9BC7\u9BC8\u9BCE\u9BD0\u9BD7\u9BD8\u9BDD\u9BDF\u9BE5\u9BE7\u9BEA\u9BEB\u9BEF\u9BF3\u9BF7\u9BF8"],
      ["8feba1", "\u9BF9\u9BFA\u9BFD\u9BFF\u9C00\u9C02\u9C0B\u9C0F\u9C11\u9C16\u9C18\u9C19\u9C1A\u9C1C\u9C1E\u9C22\u9C23\u9C26", 4, "\u9C31\u9C35\u9C36\u9C37\u9C3D\u9C41\u9C43\u9C44\u9C45\u9C49\u9C4A\u9C4E\u9C4F\u9C50\u9C53\u9C54\u9C56\u9C58\u9C5B\u9C5D\u9C5E\u9C5F\u9C63\u9C69\u9C6A\u9C5C\u9C6B\u9C68\u9C6E\u9C70\u9C72\u9C75\u9C77\u9C7B\u9CE6\u9CF2\u9CF7\u9CF9\u9D0B\u9D02\u9D11\u9D17\u9D18\u9D1C\u9D1D\u9D1E\u9D2F\u9D30\u9D32\u9D33\u9D34\u9D3A\u9D3C\u9D45\u9D3D\u9D42\u9D43\u9D47\u9D4A\u9D53\u9D54\u9D5F\u9D63\u9D62\u9D65\u9D69\u9D6A\u9D6B\u9D70\u9D76\u9D77\u9D7B"],
      ["8feca1", "\u9D7C\u9D7E\u9D83\u9D84\u9D86\u9D8A\u9D8D\u9D8E\u9D92\u9D93\u9D95\u9D96\u9D97\u9D98\u9DA1\u9DAA\u9DAC\u9DAE\u9DB1\u9DB5\u9DB9\u9DBC\u9DBF\u9DC3\u9DC7\u9DC9\u9DCA\u9DD4\u9DD5\u9DD6\u9DD7\u9DDA\u9DDE\u9DDF\u9DE0\u9DE5\u9DE7\u9DE9\u9DEB\u9DEE\u9DF0\u9DF3\u9DF4\u9DFE\u9E0A\u9E02\u9E07\u9E0E\u9E10\u9E11\u9E12\u9E15\u9E16\u9E19\u9E1C\u9E1D\u9E7A\u9E7B\u9E7C\u9E80\u9E82\u9E83\u9E84\u9E85\u9E87\u9E8E\u9E8F\u9E96\u9E98\u9E9B\u9E9E\u9EA4\u9EA8\u9EAC\u9EAE\u9EAF\u9EB0\u9EB3\u9EB4\u9EB5\u9EC6\u9EC8\u9ECB\u9ED5\u9EDF\u9EE4\u9EE7\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF5"],
      ["8feda1", "\u9EF8\u9EFF\u9F02\u9F03\u9F09\u9F0F\u9F10\u9F11\u9F12\u9F14\u9F16\u9F17\u9F19\u9F1A\u9F1B\u9F1F\u9F22\u9F26\u9F2A\u9F2B\u9F2F\u9F31\u9F32\u9F34\u9F37\u9F39\u9F3A\u9F3C\u9F3D\u9F3F\u9F41\u9F43", 4, "\u9F53\u9F55\u9F56\u9F57\u9F58\u9F5A\u9F5D\u9F5E\u9F68\u9F69\u9F6D", 4, "\u9F73\u9F75\u9F7A\u9F7D\u9F8F\u9F90\u9F91\u9F92\u9F94\u9F96\u9F97\u9F9E\u9FA1\u9FA2\u9FA3\u9FA5"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/cp936.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127, "\u20AC"],
      ["8140", "\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A", 5, "\u4E72\u4E74", 9, "\u4E7F", 6, "\u4E87\u4E8A"],
      ["8180", "\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02", 6, "\u4F0B\u4F0C\u4F12", 4, "\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E", 4, "\u4F44\u4F45\u4F47", 5, "\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2"],
      ["8240", "\u4FA4\u4FAB\u4FAD\u4FB0", 4, "\u4FB6", 8, "\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2", 4, "\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF", 11],
      ["8280", "\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F", 10, "\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050", 4, "\u5056\u5057\u5058\u5059\u505B\u505D", 7, "\u5066", 5, "\u506D", 8, "\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E", 20, "\u50A4\u50A6\u50AA\u50AB\u50AD", 4, "\u50B3", 6, "\u50BC"],
      ["8340", "\u50BD", 17, "\u50D0", 5, "\u50D7\u50D8\u50D9\u50DB", 10, "\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6", 4, "\u50FC", 9, "\u5108"],
      ["8380", "\u5109\u510A\u510C", 5, "\u5113", 13, "\u5122", 28, "\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D", 4, "\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6", 4, "\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2", 5],
      ["8440", "\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5", 5, "\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244", 5, "\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258"],
      ["8480", "\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273", 9, "\u527E\u5280\u5283", 4, "\u5289", 6, "\u5291\u5292\u5294", 6, "\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4", 9, "\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9", 5, "\u52E0\u52E1\u52E2\u52E3\u52E5", 10, "\u52F1", 7, "\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E"],
      ["8540", "\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F", 9, "\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F"],
      ["8580", "\u5390", 4, "\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF", 6, "\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3", 4, "\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D", 4, "\u5463\u5465\u5467\u5469", 7, "\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1"],
      ["8640", "\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0", 4, "\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4", 5, "\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A", 4, "\u5512\u5513\u5515", 5, "\u551C\u551D\u551E\u551F\u5521\u5525\u5526"],
      ["8680", "\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B", 4, "\u5551\u5552\u5553\u5554\u5557", 4, "\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F", 5, "\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0", 6, "\u55A8", 8, "\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF", 4, "\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7", 4, "\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8", 4, "\u55FF\u5602\u5603\u5604\u5605"],
      ["8740", "\u5606\u5607\u560A\u560B\u560D\u5610", 7, "\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640", 11, "\u564F", 4, "\u5655\u5656\u565A\u565B\u565D", 4],
      ["8780", "\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D", 7, "\u5687", 6, "\u5690\u5691\u5692\u5694", 14, "\u56A4", 10, "\u56B0", 6, "\u56B8\u56B9\u56BA\u56BB\u56BD", 12, "\u56CB", 8, "\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5", 5, "\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B", 6],
      ["8840", "\u5712", 9, "\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734", 4, "\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752", 4, "\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780"],
      ["8880", "\u5781\u5787\u5788\u5789\u578A\u578D", 4, "\u5794", 6, "\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9", 8, "\u57C4", 6, "\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5", 7, "\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825", 4, "\u582B", 4, "\u5831\u5832\u5833\u5834\u5836", 7],
      ["8940", "\u583E", 5, "\u5845", 6, "\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859", 4, "\u585F", 5, "\u5866", 4, "\u586D", 16, "\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C"],
      ["8980", "\u588D", 4, "\u5894", 4, "\u589B\u589C\u589D\u58A0", 7, "\u58AA", 17, "\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6", 10, "\u58D2\u58D3\u58D4\u58D6", 13, "\u58E5", 5, "\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA", 7, "\u5903\u5905\u5906\u5908", 4, "\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B"],
      ["8a40", "\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B", 4, "\u5961\u5963\u5964\u5966", 12, "\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6"],
      ["8a80", "\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3", 5, "\u59BA\u59BC\u59BD\u59BF", 6, "\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE", 4, "\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED", 11, "\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A", 6, "\u5A33\u5A35\u5A37", 4, "\u5A3D\u5A3E\u5A3F\u5A41", 4, "\u5A47\u5A48\u5A4B", 9, "\u5A56\u5A57\u5A58\u5A59\u5A5B", 5],
      ["8b40", "\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B", 8, "\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80", 17, "\u5A93", 6, "\u5A9C", 13, "\u5AAB\u5AAC"],
      ["8b80", "\u5AAD", 4, "\u5AB4\u5AB6\u5AB7\u5AB9", 4, "\u5ABF\u5AC0\u5AC3", 5, "\u5ACA\u5ACB\u5ACD", 4, "\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC", 4, "\u5AF2", 22, "\u5B0A", 11, "\u5B18", 25, "\u5B33\u5B35\u5B36\u5B38", 7, "\u5B41", 6],
      ["8c40", "\u5B48", 7, "\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF"],
      ["8c80", "\u5BD1\u5BD4", 8, "\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9", 4, "\u5BEF\u5BF1", 6, "\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67", 6, "\u5C70\u5C72", 6, "\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83", 4, "\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D", 4, "\u5CA4", 4],
      ["8d40", "\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5", 5, "\u5CCC", 5, "\u5CD3", 5, "\u5CDA", 6, "\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1", 9, "\u5CFC", 4],
      ["8d80", "\u5D01\u5D04\u5D05\u5D08", 5, "\u5D0F", 4, "\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F", 4, "\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F", 4, "\u5D35", 7, "\u5D3F", 7, "\u5D48\u5D49\u5D4D", 10, "\u5D59\u5D5A\u5D5C\u5D5E", 10, "\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75", 12, "\u5D83", 21, "\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0"],
      ["8e40", "\u5DA1", 21, "\u5DB8", 12, "\u5DC6", 6, "\u5DCE", 12, "\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED"],
      ["8e80", "\u5DF0\u5DF5\u5DF6\u5DF8", 4, "\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E", 7, "\u5E28", 4, "\u5E2F\u5E30\u5E32", 4, "\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46", 5, "\u5E4D", 6, "\u5E56", 4, "\u5E5C\u5E5D\u5E5F\u5E60\u5E63", 14, "\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8", 4, "\u5EAE", 4, "\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF", 6],
      ["8f40", "\u5EC6\u5EC7\u5EC8\u5ECB", 5, "\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC", 11, "\u5EE9\u5EEB", 8, "\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24"],
      ["8f80", "\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32", 6, "\u5F3B\u5F3D\u5F3E\u5F3F\u5F41", 14, "\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2", 5, "\u5FA9\u5FAB\u5FAC\u5FAF", 5, "\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE", 4, "\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007"],
      ["9040", "\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030", 4, "\u6036", 4, "\u603D\u603E\u6040\u6044", 6, "\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080"],
      ["9080", "\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD", 7, "\u60C7\u60C8\u60C9\u60CC", 4, "\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1", 4, "\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB", 4, "\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110", 4, "\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C", 18, "\u6140", 6],
      ["9140", "\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156", 6, "\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169", 6, "\u6171\u6172\u6173\u6174\u6176\u6178", 18, "\u618C\u618D\u618F", 4, "\u6195"],
      ["9180", "\u6196", 6, "\u619E", 8, "\u61AA\u61AB\u61AD", 9, "\u61B8", 5, "\u61BF\u61C0\u61C1\u61C3", 4, "\u61C9\u61CC", 4, "\u61D3\u61D5", 16, "\u61E7", 13, "\u61F6", 8, "\u6200", 5, "\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238", 4, "\u6242\u6244\u6245\u6246\u624A"],
      ["9240", "\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C", 6, "\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B", 5, "\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1"],
      ["9280", "\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333", 5, "\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356", 7, "\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399", 6, "\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0"],
      ["9340", "\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7", 6, "\u63DF\u63E2\u63E4", 4, "\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406", 4, "\u640D\u640E\u6411\u6412\u6415", 5, "\u641D\u641F\u6422\u6423\u6424"],
      ["9380", "\u6425\u6427\u6428\u6429\u642B\u642E", 5, "\u6435", 4, "\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B", 6, "\u6453\u6455\u6456\u6457\u6459", 4, "\u645F", 7, "\u6468\u646A\u646B\u646C\u646E", 9, "\u647B", 6, "\u6483\u6486\u6488", 8, "\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F", 4, "\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6", 6, "\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA"],
      ["9440", "\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7", 24, "\u6501", 7, "\u650A", 7, "\u6513", 4, "\u6519", 8],
      ["9480", "\u6522\u6523\u6524\u6526", 4, "\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540", 4, "\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578", 14, "\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1", 7, "\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8", 7, "\u65E1\u65E3\u65E4\u65EA\u65EB"],
      ["9540", "\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB", 4, "\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637", 4, "\u663D\u663F\u6640\u6642\u6644", 6, "\u664D\u664E\u6650\u6651\u6658"],
      ["9580", "\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669", 4, "\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698", 4, "\u669E", 8, "\u66A9", 4, "\u66AF", 4, "\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF", 25, "\u66DA\u66DE", 7, "\u66E7\u66E8\u66EA", 5, "\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703"],
      ["9640", "\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720", 5, "\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757", 4, "\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776"],
      ["9680", "\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9", 7, "\u67C2\u67C5", 9, "\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5", 7, "\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818", 4, "\u681E\u681F\u6820\u6822", 6, "\u682B", 6, "\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856", 5],
      ["9740", "\u685C\u685D\u685E\u685F\u686A\u686C", 7, "\u6875\u6878", 8, "\u6882\u6884\u6887", 7, "\u6890\u6891\u6892\u6894\u6895\u6896\u6898", 9, "\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8"],
      ["9780", "\u68B9", 6, "\u68C1\u68C3", 5, "\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB", 4, "\u68E1\u68E2\u68E4", 9, "\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906", 4, "\u690C\u690F\u6911\u6913", 11, "\u6921\u6922\u6923\u6925", 7, "\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943", 16, "\u6955\u6956\u6958\u6959\u695B\u695C\u695F"],
      ["9840", "\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972", 4, "\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E", 5, "\u6996\u6997\u6999\u699A\u699D", 9, "\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD"],
      ["9880", "\u69BE\u69BF\u69C0\u69C2", 7, "\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5", 5, "\u69DC\u69DD\u69DE\u69E1", 11, "\u69EE\u69EF\u69F0\u69F1\u69F3", 9, "\u69FE\u6A00", 9, "\u6A0B", 11, "\u6A19", 5, "\u6A20\u6A22", 5, "\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36", 6, "\u6A3F", 4, "\u6A45\u6A46\u6A48", 7, "\u6A51", 6, "\u6A5A"],
      ["9940", "\u6A5C", 4, "\u6A62\u6A63\u6A64\u6A66", 10, "\u6A72", 6, "\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85", 8, "\u6A8F\u6A92", 4, "\u6A98", 7, "\u6AA1", 5],
      ["9980", "\u6AA7\u6AA8\u6AAA\u6AAD", 114, "\u6B25\u6B26\u6B28", 6],
      ["9a40", "\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D", 11, "\u6B5A", 7, "\u6B68\u6B69\u6B6B", 13, "\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88"],
      ["9a80", "\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C", 4, "\u6BA2", 7, "\u6BAB", 7, "\u6BB6\u6BB8", 6, "\u6BC0\u6BC3\u6BC4\u6BC6", 4, "\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC", 4, "\u6BE2", 7, "\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE", 6, "\u6C08", 4, "\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B", 4, "\u6C51\u6C52\u6C53\u6C56\u6C58"],
      ["9b40", "\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B", 4, "\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8"],
      ["9b80", "\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F", 5, "\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D", 4, "\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96", 4, "\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9", 5, "\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA"],
      ["9c40", "\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD", 7, "\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35"],
      ["9c80", "\u6E36\u6E37\u6E39\u6E3B", 7, "\u6E45", 7, "\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60", 10, "\u6E6C\u6E6D\u6E6F", 14, "\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A", 4, "\u6E91", 6, "\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA", 5],
      ["9d40", "\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA", 7, "\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A", 4, "\u6F10\u6F11\u6F12\u6F16", 9, "\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37", 6, "\u6F3F\u6F40\u6F41\u6F42"],
      ["9d80", "\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E", 9, "\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67", 5, "\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D", 6, "\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F", 12, "\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2", 4, "\u6FA8", 10, "\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA", 5, "\u6FC1\u6FC3", 5, "\u6FCA", 6, "\u6FD3", 10, "\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5"],
      ["9e40", "\u6FE6", 7, "\u6FF0", 32, "\u7012", 7, "\u701C", 6, "\u7024", 6],
      ["9e80", "\u702B", 9, "\u7036\u7037\u7038\u703A", 17, "\u704D\u704E\u7050", 13, "\u705F", 11, "\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E", 12, "\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB", 12, "\u70DA"],
      ["9f40", "\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0", 6, "\u70F8\u70FA\u70FB\u70FC\u70FE", 10, "\u710B", 4, "\u7111\u7112\u7114\u7117\u711B", 10, "\u7127", 7, "\u7132\u7133\u7134"],
      ["9f80", "\u7135\u7137", 13, "\u7146\u7147\u7148\u7149\u714B\u714D\u714F", 12, "\u715D\u715F", 4, "\u7165\u7169", 4, "\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E", 5, "\u7185", 4, "\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A", 4, "\u71A1", 6, "\u71A9\u71AA\u71AB\u71AD", 5, "\u71B4\u71B6\u71B7\u71B8\u71BA", 8, "\u71C4", 9, "\u71CF", 4],
      ["a040", "\u71D6", 9, "\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8", 5, "\u71EF", 9, "\u71FA", 11, "\u7207", 19],
      ["a080", "\u721B\u721C\u721E", 9, "\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240", 6, "\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285", 4, "\u728C\u728E\u7290\u7291\u7293", 11, "\u72A0", 11, "\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA", 6, "\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB"],
      ["a1a1", "\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 7, "\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013"],
      ["a2a1", "\u2170", 9],
      ["a2b1", "\u2488", 19, "\u2474", 19, "\u2460", 9],
      ["a2e5", "\u3220", 9],
      ["a2f1", "\u2160", 11],
      ["a3a1", "\uFF01\uFF02\uFF03\uFFE5\uFF05", 88, "\uFFE3"],
      ["a4a1", "\u3041", 82],
      ["a5a1", "\u30A1", 85],
      ["a6a1", "\u0391", 16, "\u03A3", 6],
      ["a6c1", "\u03B1", 16, "\u03C3", 6],
      ["a6e0", "\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44"],
      ["a6ee", "\uFE3B\uFE3C\uFE37\uFE38\uFE31"],
      ["a6f4", "\uFE33\uFE34"],
      ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
      ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
      ["a840", "\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550", 35, "\u2581", 6],
      ["a880", "\u2588", 7, "\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E"],
      ["a8a1", "\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251"],
      ["a8bd", "\u0144\u0148"],
      ["a8c0", "\u0261"],
      ["a8c5", "\u3105", 36],
      ["a940", "\u3021", 8, "\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4"],
      ["a959", "\u2121\u3231"],
      ["a95c", "\u2010"],
      ["a960", "\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49", 9, "\uFE54\uFE55\uFE56\uFE57\uFE59", 8],
      ["a980", "\uFE62", 4, "\uFE68\uFE69\uFE6A\uFE6B"],
      ["a996", "\u3007"],
      ["a9a4", "\u2500", 75],
      ["aa40", "\u72DC\u72DD\u72DF\u72E2", 5, "\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304", 5, "\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340", 8],
      ["aa80", "\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358", 7, "\u7361", 10, "\u736E\u7370\u7371"],
      ["ab40", "\u7372", 11, "\u737F", 4, "\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3", 5, "\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3", 4],
      ["ab80", "\u73CB\u73CC\u73CE\u73D2", 6, "\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3", 4],
      ["ac40", "\u73F8", 10, "\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411", 8, "\u741C", 5, "\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437", 4, "\u743D\u743E\u743F\u7440\u7442", 11],
      ["ac80", "\u744E", 6, "\u7456\u7458\u745D\u7460", 12, "\u746E\u746F\u7471", 4, "\u7478\u7479\u747A"],
      ["ad40", "\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491", 10, "\u749D\u749F", 7, "\u74AA", 15, "\u74BB", 12],
      ["ad80", "\u74C8", 9, "\u74D3", 8, "\u74DD\u74DF\u74E1\u74E5\u74E7", 6, "\u74F0\u74F1\u74F2"],
      ["ae40", "\u74F3\u74F5\u74F8", 6, "\u7500\u7501\u7502\u7503\u7505", 7, "\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520", 4, "\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558"],
      ["ae80", "\u755D", 7, "\u7567\u7568\u7569\u756B", 6, "\u7573\u7575\u7576\u7577\u757A", 4, "\u7580\u7581\u7582\u7584\u7585\u7587"],
      ["af40", "\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6", 4, "\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607"],
      ["af80", "\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644"],
      ["b040", "\u7645", 6, "\u764E", 5, "\u7655\u7657", 4, "\u765D\u765F\u7660\u7661\u7662\u7664", 6, "\u766C\u766D\u766E\u7670", 7, "\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B"],
      ["b080", "\u769C", 7, "\u76A5", 8, "\u76AF\u76B0\u76B3\u76B5", 9, "\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265"],
      ["b140", "\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0", 4, "\u76E6", 7, "\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E", 10, "\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B"],
      ["b180", "\u772C\u772E\u7730", 4, "\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748", 7, "\u7752", 7, "\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3"],
      ["b240", "\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D", 11, "\u777A\u777B\u777C\u7781\u7782\u7783\u7786", 5, "\u778F\u7790\u7793", 11, "\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6", 4],
      ["b280", "\u77BC\u77BE\u77C0", 12, "\u77CE", 8, "\u77D8\u77D9\u77DA\u77DD", 4, "\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316"],
      ["b340", "\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803", 5, "\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A"],
      ["b380", "\u785B\u785C\u785E", 11, "\u786F", 7, "\u7878\u7879\u787A\u787B\u787D", 6, "\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A"],
      ["b440", "\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8", 7, "\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA", 9],
      ["b480", "\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED", 4, "\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB", 5, "\u7902\u7903\u7904\u7906", 6, "\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E"],
      ["b540", "\u790D", 5, "\u7914", 9, "\u791F", 4, "\u7925", 14, "\u7935", 4, "\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A", 8, "\u7954\u7955\u7958\u7959\u7961\u7963"],
      ["b580", "\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970", 6, "\u7979\u797B", 4, "\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0"],
      ["b640", "\u7993", 6, "\u799B", 11, "\u79A8", 10, "\u79B4", 4, "\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9", 5, "\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA"],
      ["b680", "\u79EC\u79EE\u79F1", 6, "\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F", 4, "\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C"],
      ["b740", "\u7A1D\u7A1F\u7A21\u7A22\u7A24", 14, "\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40", 5, "\u7A47", 9, "\u7A52", 4, "\u7A58", 16],
      ["b780", "\u7A69", 6, "\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D"],
      ["b840", "\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE", 4, "\u7AB4", 10, "\u7AC0", 10, "\u7ACC", 9, "\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7", 5, "\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3"],
      ["b880", "\u7AF4", 4, "\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9"],
      ["b940", "\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F", 5, "\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63", 10, "\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86", 6, "\u7B8E\u7B8F"],
      ["b980", "\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9", 7, "\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8"],
      ["ba40", "\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4", 4, "\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2", 4, "\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF", 7, "\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10", 5, "\u7C17\u7C18\u7C19"],
      ["ba80", "\u7C1A", 4, "\u7C20", 5, "\u7C28\u7C29\u7C2B", 12, "\u7C39", 5, "\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56"],
      ["bb40", "\u7C43", 9, "\u7C4E", 36, "\u7C75", 5, "\u7C7E", 9],
      ["bb80", "\u7C88\u7C8A", 6, "\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4", 4, "\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95"],
      ["bc40", "\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE", 6, "\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1", 6, "\u7CE9", 5, "\u7CF0", 7, "\u7CF9\u7CFA\u7CFC", 13, "\u7D0B", 5],
      ["bc80", "\u7D11", 14, "\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30", 6, "\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6"],
      ["bd40", "\u7D37", 54, "\u7D6F", 7],
      ["bd80", "\u7D78", 32, "\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78"],
      ["be40", "\u7D99", 12, "\u7DA7", 6, "\u7DAF", 42],
      ["be80", "\u7DDA", 32, "\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB"],
      ["bf40", "\u7DFB", 62],
      ["bf80", "\u7E3A\u7E3C", 4, "\u7E42", 4, "\u7E48", 21, "\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080"],
      ["c040", "\u7E5E", 35, "\u7E83", 23, "\u7E9C\u7E9D\u7E9E"],
      ["c080", "\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B", 6, "\u7F43\u7F46", 9, "\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0"],
      ["c140", "\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63", 4, "\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82", 7, "\u7F8B\u7F8D\u7F8F", 4, "\u7F95", 4, "\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8", 6, "\u7FB1"],
      ["c180", "\u7FB3", 4, "\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF", 4, "\u7FD6\u7FD7\u7FD9", 5, "\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF"],
      ["c240", "\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4", 6, "\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B", 5, "\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057"],
      ["c280", "\u8059\u805B", 13, "\u806B", 5, "\u8072", 11, "\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B"],
      ["c340", "\u807E\u8081\u8082\u8085\u8088\u808A\u808D", 5, "\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7", 4, "\u80CF", 6, "\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B"],
      ["c380", "\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F", 12, "\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139", 4, "\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478"],
      ["c440", "\u8140", 5, "\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B", 4, "\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183", 4, "\u8189\u818B\u818C\u818D\u818E\u8190\u8192", 5, "\u8199\u819A\u819E", 4, "\u81A4\u81A5"],
      ["c480", "\u81A7\u81A9\u81AB", 7, "\u81B4", 5, "\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD", 6, "\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81"],
      ["c540", "\u81D4", 14, "\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE", 4, "\u81F5", 5, "\u81FD\u81FF\u8203\u8207", 4, "\u820E\u820F\u8211\u8213\u8215", 5, "\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F"],
      ["c580", "\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250", 7, "\u8259\u825B\u825C\u825D\u825E\u8260", 7, "\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7"],
      ["c640", "\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8"],
      ["c680", "\u82FA\u82FC", 4, "\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D", 9, "\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390"],
      ["c740", "\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A", 4, "\u8353\u8355", 4, "\u835D\u8362\u8370", 6, "\u8379\u837A\u837E", 6, "\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1", 6, "\u83AC\u83AD\u83AE"],
      ["c780", "\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20"],
      ["c840", "\u83EE\u83EF\u83F3", 4, "\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412", 5, "\u8419\u841A\u841B\u841E", 5, "\u8429", 7, "\u8432", 5, "\u8439\u843A\u843B\u843E", 7, "\u8447\u8448\u8449"],
      ["c880", "\u844A", 6, "\u8452", 4, "\u8458\u845D\u845E\u845F\u8460\u8462\u8464", 4, "\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1"],
      ["c940", "\u847D", 4, "\u8483\u8484\u8485\u8486\u848A\u848D\u848F", 7, "\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2", 12, "\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7"],
      ["c980", "\u84D8", 4, "\u84DE\u84E1\u84E2\u84E4\u84E7", 4, "\u84ED\u84EE\u84EF\u84F1", 10, "\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3"],
      ["ca40", "\u8503", 8, "\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522", 8, "\u852D", 9, "\u853E", 4, "\u8544\u8545\u8546\u8547\u854B", 10],
      ["ca80", "\u8557\u8558\u855A\u855B\u855C\u855D\u855F", 4, "\u8565\u8566\u8567\u8569", 8, "\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31"],
      ["cb40", "\u8582\u8583\u8586\u8588", 6, "\u8590", 10, "\u859D", 6, "\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1", 5, "\u85B8\u85BA", 6, "\u85C2", 6, "\u85CA", 4, "\u85D1\u85D2"],
      ["cb80", "\u85D4\u85D6", 5, "\u85DD", 6, "\u85E5\u85E6\u85E7\u85E8\u85EA", 14, "\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854"],
      ["cc40", "\u85F9\u85FA\u85FC\u85FD\u85FE\u8600", 4, "\u8606", 10, "\u8612\u8613\u8614\u8615\u8617", 15, "\u8628\u862A", 13, "\u8639\u863A\u863B\u863D\u863E\u863F\u8640"],
      ["cc80", "\u8641", 11, "\u8652\u8653\u8655", 4, "\u865B\u865C\u865D\u865F\u8660\u8661\u8663", 7, "\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3"],
      ["cd40", "\u866D\u866F\u8670\u8672", 6, "\u8683", 6, "\u868E", 4, "\u8694\u8696", 5, "\u869E", 4, "\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB", 4, "\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC"],
      ["cd80", "\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01"],
      ["ce40", "\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740", 6, "\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A", 5, "\u8761\u8762\u8766", 7, "\u876F\u8771\u8772\u8773\u8775"],
      ["ce80", "\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E", 4, "\u8794\u8795\u8796\u8798", 6, "\u87A0", 4, "\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A"],
      ["cf40", "\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1", 4, "\u87C7\u87C8\u87C9\u87CC", 4, "\u87D4", 6, "\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF", 9],
      ["cf80", "\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804", 5, "\u880B", 7, "\u8814\u8817\u8818\u8819\u881A\u881C", 4, "\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653"],
      ["d040", "\u8824", 13, "\u8833", 5, "\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846", 5, "\u884E", 5, "\u8855\u8856\u8858\u885A", 6, "\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A"],
      ["d080", "\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897", 4, "\u889D", 4, "\u88A3\u88A5", 5, "\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384"],
      ["d140", "\u88AC\u88AE\u88AF\u88B0\u88B2", 4, "\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA", 4, "\u88E0\u88E1\u88E6\u88E7\u88E9", 6, "\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903", 5],
      ["d180", "\u8909\u890B", 4, "\u8911\u8914", 4, "\u891C", 4, "\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476"],
      ["d240", "\u8938", 8, "\u8942\u8943\u8945", 24, "\u8960", 5, "\u8967", 19, "\u897C"],
      ["d280", "\u897D\u897E\u8980\u8982\u8984\u8985\u8987", 26, "\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690"],
      ["d340", "\u89A2", 30, "\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4", 6],
      ["d380", "\u89FB", 4, "\u8A01", 5, "\u8A08", 21, "\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89"],
      ["d440", "\u8A1E", 31, "\u8A3F", 8, "\u8A49", 21],
      ["d480", "\u8A5F", 25, "\u8A7A", 6, "\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67"],
      ["d540", "\u8A81", 7, "\u8A8B", 7, "\u8A94", 46],
      ["d580", "\u8AC3", 32, "\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F"],
      ["d640", "\u8AE4", 34, "\u8B08", 27],
      ["d680", "\u8B24\u8B25\u8B27", 30, "\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51"],
      ["d740", "\u8B46", 31, "\u8B67", 4, "\u8B6D", 25],
      ["d780", "\u8B87", 24, "\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7"],
      ["d840", "\u8C38", 8, "\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D", 7, "\u8C56\u8C57\u8C58\u8C59\u8C5B", 5, "\u8C63", 6, "\u8C6C", 6, "\u8C74\u8C75\u8C76\u8C77\u8C7B", 6, "\u8C83\u8C84\u8C86\u8C87"],
      ["d880", "\u8C88\u8C8B\u8C8D", 6, "\u8C95\u8C96\u8C97\u8C99", 20, "\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D"],
      ["d940", "\u8CAE", 62],
      ["d980", "\u8CED", 32, "\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC"],
      ["da40", "\u8D0E", 14, "\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78", 8, "\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C", 4, "\u8D92\u8D93\u8D95", 9, "\u8DA0\u8DA1"],
      ["da80", "\u8DA2\u8DA4", 12, "\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA"],
      ["db40", "\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE", 6, "\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15", 7, "\u8E20\u8E21\u8E24", 4, "\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E"],
      ["db80", "\u8E3F\u8E43\u8E45\u8E46\u8E4C", 4, "\u8E53", 5, "\u8E5A", 11, "\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD"],
      ["dc40", "\u8E73\u8E75\u8E77", 4, "\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88", 6, "\u8E91\u8E92\u8E93\u8E95", 6, "\u8E9D\u8E9F", 11, "\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3", 6, "\u8EBB", 7],
      ["dc80", "\u8EC3", 10, "\u8ECF", 21, "\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365"],
      ["dd40", "\u8EE5", 62],
      ["dd80", "\u8F24", 32, "\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A"],
      ["de40", "\u8F45", 32, "\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6"],
      ["de80", "\u8FC9", 4, "\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496"],
      ["df40", "\u9019\u901C\u9023\u9024\u9025\u9027", 5, "\u9030", 4, "\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048", 4, "\u904E\u9054\u9055\u9056\u9059\u905A\u905C", 5, "\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F", 4, "\u9076", 6, "\u907E\u9081"],
      ["df80", "\u9084\u9085\u9086\u9087\u9089\u908A\u908C", 4, "\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C"],
      ["e040", "\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105", 19, "\u911A\u911B\u911C"],
      ["e080", "\u911D\u911F\u9120\u9121\u9124", 10, "\u9130\u9132", 6, "\u913A", 8, "\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C"],
      ["e140", "\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180", 4, "\u9186\u9188\u918A\u918E\u918F\u9193", 6, "\u919C", 5, "\u91A4", 5, "\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB"],
      ["e180", "\u91BC", 10, "\u91C8\u91CB\u91D0\u91D2", 9, "\u91DD", 8, "\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA"],
      ["e240", "\u91E6", 62],
      ["e280", "\u9225", 32, "\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967", 5, "\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042"],
      ["e340", "\u9246", 45, "\u9275", 16],
      ["e380", "\u9286", 7, "\u928F", 24, "\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE"],
      ["e440", "\u92A8", 5, "\u92AF", 24, "\u92C9", 31],
      ["e480", "\u92E9", 32, "\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1"],
      ["e540", "\u930A", 51, "\u933F", 10],
      ["e580", "\u934A", 31, "\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3"],
      ["e640", "\u936C", 34, "\u9390", 27],
      ["e680", "\u93AC", 29, "\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9"],
      ["e740", "\u93CE", 7, "\u93D7", 54],
      ["e780", "\u940E", 32, "\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21", 6, "\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F", 4, "\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C"],
      ["e840", "\u942F", 14, "\u943F", 43, "\u946C\u946D\u946E\u946F"],
      ["e880", "\u9470", 20, "\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9"],
      ["e940", "\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577", 7, "\u9580", 42],
      ["e980", "\u95AB", 32, "\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B"],
      ["ea40", "\u95CC", 27, "\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623", 6, "\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657"],
      ["ea80", "\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D", 4, "\u9673\u9678", 12, "\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0"],
      ["eb40", "\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D", 9, "\u96A8", 7, "\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6", 9, "\u96E1", 6, "\u96EB"],
      ["eb80", "\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717", 4, "\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB"],
      ["ec40", "\u9721", 8, "\u972B\u972C\u972E\u972F\u9731\u9733", 4, "\u973A\u973B\u973C\u973D\u973F", 18, "\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A", 7],
      ["ec80", "\u9772\u9775\u9777", 4, "\u977D", 7, "\u9786", 4, "\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799", 4, "\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0"],
      ["ed40", "\u979E\u979F\u97A1\u97A2\u97A4", 6, "\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5", 46],
      ["ed80", "\u97E4\u97E5\u97E8\u97EE", 4, "\u97F4\u97F7", 23, "\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768"],
      ["ee40", "\u980F", 62],
      ["ee80", "\u984E", 32, "\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6", 4, "\u94BC\u94BD\u94BF\u94C4\u94C8", 6, "\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA"],
      ["ef40", "\u986F", 5, "\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8", 37, "\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0", 4],
      ["ef80", "\u98E5\u98E6\u98E9", 30, "\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512", 4, "\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564", 8, "\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14"],
      ["f040", "\u9908", 4, "\u990E\u990F\u9911", 28, "\u992F", 26],
      ["f080", "\u994A", 9, "\u9956", 12, "\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28", 4, "\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66", 6, "\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619"],
      ["f140", "\u998C\u998E\u999A", 10, "\u99A6\u99A7\u99A9", 47],
      ["f180", "\u99D9", 32, "\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883"],
      ["f240", "\u99FA", 62],
      ["f280", "\u9A39", 32, "\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2"],
      ["f340", "\u9A5A", 17, "\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9", 6, "\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6", 4, "\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC"],
      ["f380", "\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0", 8, "\u9AFA\u9AFC", 6, "\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B"],
      ["f440", "\u9B07\u9B09", 5, "\u9B10\u9B11\u9B12\u9B14", 10, "\u9B20\u9B21\u9B22\u9B24", 10, "\u9B30\u9B31\u9B33", 7, "\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55", 5],
      ["f480", "\u9B5B", 32, "\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164"],
      ["f540", "\u9B7C", 62],
      ["f580", "\u9BBB", 32, "\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC"],
      ["f640", "\u9BDC", 62],
      ["f680", "\u9C1B", 32, "\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85", 5, "\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E", 5, "\u9CA5", 4, "\u9CAB\u9CAD\u9CAE\u9CB0", 7, "\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB"],
      ["f740", "\u9C3C", 62],
      ["f780", "\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE", 4, "\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC", 4, "\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44"],
      ["f840", "\u9CE3", 62],
      ["f880", "\u9D22", 32],
      ["f940", "\u9D43", 62],
      ["f980", "\u9D82", 32],
      ["fa40", "\u9DA3", 62],
      ["fa80", "\u9DE2", 32],
      ["fb40", "\u9E03", 27, "\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74", 9, "\u9E80"],
      ["fb80", "\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C", 5, "\u9E94", 8, "\u9E9E\u9EA0", 5, "\u9EA7\u9EA8\u9EA9\u9EAA"],
      ["fc40", "\u9EAB", 8, "\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF", 4, "\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0", 8, "\u9EFA\u9EFD\u9EFF", 6],
      ["fc80", "\u9F06", 4, "\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A", 5, "\u9F21\u9F23", 8, "\u9F2D\u9F2E\u9F30\u9F31"],
      ["fd40", "\u9F32", 4, "\u9F38\u9F3A\u9F3C\u9F3F", 4, "\u9F45", 10, "\u9F52", 38],
      ["fd80", "\u9F79", 5, "\u9F81\u9F82\u9F8D", 11, "\u9F9C\u9F9D\u9F9E\u9FA1", 4, "\uF92C\uF979\uF995\uF9E7\uF9F1"],
      ["fe40", "\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/gbk-added.json"(exports, module) {
    module.exports = [
      ["a140", "\uE4C6", 62],
      ["a180", "\uE505", 32],
      ["a240", "\uE526", 62],
      ["a280", "\uE565", 32],
      ["a2ab", "\uE766", 5],
      ["a2e3", "\u20AC\uE76D"],
      ["a2ef", "\uE76E\uE76F"],
      ["a2fd", "\uE770\uE771"],
      ["a340", "\uE586", 62],
      ["a380", "\uE5C5", 31, "\u3000"],
      ["a440", "\uE5E6", 62],
      ["a480", "\uE625", 32],
      ["a4f4", "\uE772", 10],
      ["a540", "\uE646", 62],
      ["a580", "\uE685", 32],
      ["a5f7", "\uE77D", 7],
      ["a640", "\uE6A6", 62],
      ["a680", "\uE6E5", 32],
      ["a6b9", "\uE785", 7],
      ["a6d9", "\uE78D", 6],
      ["a6ec", "\uE794\uE795"],
      ["a6f3", "\uE796"],
      ["a6f6", "\uE797", 8],
      ["a740", "\uE706", 62],
      ["a780", "\uE745", 32],
      ["a7c2", "\uE7A0", 14],
      ["a7f2", "\uE7AF", 12],
      ["a896", "\uE7BC", 10],
      ["a8bc", "\uE7C7"],
      ["a8bf", "\u01F9"],
      ["a8c1", "\uE7C9\uE7CA\uE7CB\uE7CC"],
      ["a8ea", "\uE7CD", 20],
      ["a958", "\uE7E2"],
      ["a95b", "\uE7E3"],
      ["a95d", "\uE7E4\uE7E5\uE7E6"],
      ["a989", "\u303E\u2FF0", 11],
      ["a997", "\uE7F4", 12],
      ["a9f0", "\uE801", 14],
      ["aaa1", "\uE000", 93],
      ["aba1", "\uE05E", 93],
      ["aca1", "\uE0BC", 93],
      ["ada1", "\uE11A", 93],
      ["aea1", "\uE178", 93],
      ["afa1", "\uE1D6", 93],
      ["d7fa", "\uE810", 4],
      ["f8a1", "\uE234", 93],
      ["f9a1", "\uE292", 93],
      ["faa1", "\uE2F0", 93],
      ["fba1", "\uE34E", 93],
      ["fca1", "\uE3AC", 93],
      ["fda1", "\uE40A", 93],
      ["fe50", "\u2E81\uE816\uE817\uE818\u2E84\u3473\u3447\u2E88\u2E8B\uE81E\u359E\u361A\u360E\u2E8C\u2E97\u396E\u3918\uE826\u39CF\u39DF\u3A73\u39D0\uE82B\uE82C\u3B4E\u3C6E\u3CE0\u2EA7\uE831\uE832\u2EAA\u4056\u415F\u2EAE\u4337\u2EB3\u2EB6\u2EB7\uE83B\u43B1\u43AC\u2EBB\u43DD\u44D6\u4661\u464C\uE843"],
      ["fe80", "\u4723\u4729\u477C\u478D\u2ECA\u4947\u497A\u497D\u4982\u4983\u4985\u4986\u499F\u499B\u49B7\u49B6\uE854\uE855\u4CA3\u4C9F\u4CA0\u4CA1\u4C77\u4CA2\u4D13", 6, "\u4DAE\uE864\uE468", 93]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/gb18030-ranges.json"(exports, module) {
    module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189e3] };
  }
});

// ../../node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/cp949.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["8141", "\uAC02\uAC03\uAC05\uAC06\uAC0B", 4, "\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25", 6, "\uAC2E\uAC32\uAC33\uAC34"],
      ["8161", "\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41", 9, "\uAC4C\uAC4E", 5, "\uAC55"],
      ["8181", "\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D", 18, "\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B", 4, "\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95", 6, "\uAC9E\uACA2", 5, "\uACAB\uACAD\uACAE\uACB1", 6, "\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD", 7, "\uACD6\uACD8", 7, "\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7", 4, "\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07", 4, "\uAD0E\uAD10\uAD12\uAD13"],
      ["8241", "\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21", 7, "\uAD2A\uAD2B\uAD2E", 5],
      ["8261", "\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D", 6, "\uAD46\uAD48\uAD4A", 5, "\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57"],
      ["8281", "\uAD59", 7, "\uAD62\uAD64", 7, "\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83", 4, "\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91", 10, "\uAD9E", 5, "\uADA5", 17, "\uADB8", 7, "\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9", 6, "\uADD2\uADD4", 7, "\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5", 18],
      ["8341", "\uADFA\uADFB\uADFD\uADFE\uAE02", 5, "\uAE0A\uAE0C\uAE0E", 5, "\uAE15", 7],
      ["8361", "\uAE1D", 18, "\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C"],
      ["8381", "\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57", 4, "\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71", 6, "\uAE7A\uAE7E", 5, "\uAE86", 5, "\uAE8D", 46, "\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5", 6, "\uAECE\uAED2", 5, "\uAEDA\uAEDB\uAEDD", 8],
      ["8441", "\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE", 5, "\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD", 8],
      ["8461", "\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11", 18],
      ["8481", "\uAF24", 7, "\uAF2E\uAF2F\uAF31\uAF33\uAF35", 6, "\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A", 5, "\uAF51", 10, "\uAF5E", 5, "\uAF66", 18, "\uAF7A", 5, "\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89", 6, "\uAF92\uAF93\uAF94\uAF96", 5, "\uAF9D", 26, "\uAFBA\uAFBB\uAFBD\uAFBE"],
      ["8541", "\uAFBF\uAFC1", 5, "\uAFCA\uAFCC\uAFCF", 4, "\uAFD5", 6, "\uAFDD", 4],
      ["8561", "\uAFE2", 5, "\uAFEA", 5, "\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9", 6, "\uB002\uB003"],
      ["8581", "\uB005", 6, "\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015", 6, "\uB01E", 9, "\uB029", 26, "\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E", 29, "\uB07E\uB07F\uB081\uB082\uB083\uB085", 6, "\uB08E\uB090\uB092", 5, "\uB09B\uB09D\uB09E\uB0A3\uB0A4"],
      ["8641", "\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD", 6, "\uB0C6\uB0CA", 5, "\uB0D2"],
      ["8661", "\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9", 6, "\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6", 10],
      ["8681", "\uB0F1", 22, "\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E", 4, "\uB126\uB127\uB129\uB12A\uB12B\uB12D", 6, "\uB136\uB13A", 5, "\uB142\uB143\uB145\uB146\uB147\uB149", 6, "\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161", 22, "\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183", 4, "\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D"],
      ["8741", "\uB19E", 9, "\uB1A9", 15],
      ["8761", "\uB1B9", 18, "\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5"],
      ["8781", "\uB1D6", 5, "\uB1DE\uB1E0", 7, "\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1", 7, "\uB1FA\uB1FC\uB1FE", 5, "\uB206\uB207\uB209\uB20A\uB20D", 6, "\uB216\uB218\uB21A", 5, "\uB221", 18, "\uB235", 6, "\uB23D", 26, "\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261", 6, "\uB26A", 4],
      ["8841", "\uB26F", 4, "\uB276", 5, "\uB27D", 6, "\uB286\uB287\uB288\uB28A", 4],
      ["8861", "\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B", 4, "\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7"],
      ["8881", "\uB2B8", 15, "\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3", 4, "\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309", 6, "\uB312\uB316", 5, "\uB31D", 54, "\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363"],
      ["8941", "\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379", 6, "\uB382\uB386", 5, "\uB38D"],
      ["8961", "\uB38E\uB38F\uB391\uB392\uB393\uB395", 10, "\uB3A2", 5, "\uB3A9\uB3AA\uB3AB\uB3AD"],
      ["8981", "\uB3AE", 21, "\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9", 18, "\uB3FD", 18, "\uB411", 6, "\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421", 6, "\uB42A\uB42C", 7, "\uB435", 15],
      ["8a41", "\uB445", 10, "\uB452\uB453\uB455\uB456\uB457\uB459", 6, "\uB462\uB464\uB466"],
      ["8a61", "\uB467", 4, "\uB46D", 18, "\uB481\uB482"],
      ["8a81", "\uB483", 4, "\uB489", 19, "\uB49E", 5, "\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD", 7, "\uB4B6\uB4B8\uB4BA", 5, "\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9", 6, "\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6", 5, "\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7", 4, "\uB4EE\uB4F0\uB4F2", 5, "\uB4F9", 26, "\uB516\uB517\uB519\uB51A\uB51D"],
      ["8b41", "\uB51E", 5, "\uB526\uB52B", 4, "\uB532\uB533\uB535\uB536\uB537\uB539", 6, "\uB542\uB546"],
      ["8b61", "\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555", 6, "\uB55E\uB562", 8],
      ["8b81", "\uB56B", 52, "\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6", 4, "\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5", 6, "\uB5CE\uB5D2", 5, "\uB5D9", 18, "\uB5ED", 18],
      ["8c41", "\uB600", 15, "\uB612\uB613\uB615\uB616\uB617\uB619", 4],
      ["8c61", "\uB61E", 6, "\uB626", 5, "\uB62D", 6, "\uB635", 5],
      ["8c81", "\uB63B", 12, "\uB649", 26, "\uB665\uB666\uB667\uB669", 50, "\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5", 5, "\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2", 16],
      ["8d41", "\uB6C3", 16, "\uB6D5", 8],
      ["8d61", "\uB6DE", 17, "\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA"],
      ["8d81", "\uB6FB", 4, "\uB702\uB703\uB704\uB706", 33, "\uB72A\uB72B\uB72D\uB72E\uB731", 6, "\uB73A\uB73C", 7, "\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D", 6, "\uB756", 9, "\uB761\uB762\uB763\uB765\uB766\uB767\uB769", 6, "\uB772\uB774\uB776", 5, "\uB77E\uB77F\uB781\uB782\uB783\uB785", 6, "\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E"],
      ["8e41", "\uB79F\uB7A1", 6, "\uB7AA\uB7AE", 5, "\uB7B6\uB7B7\uB7B9", 8],
      ["8e61", "\uB7C2", 4, "\uB7C8\uB7CA", 19],
      ["8e81", "\uB7DE", 13, "\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5", 6, "\uB7FE\uB802", 4, "\uB80A\uB80B\uB80D\uB80E\uB80F\uB811", 6, "\uB81A\uB81C\uB81E", 5, "\uB826\uB827\uB829\uB82A\uB82B\uB82D", 6, "\uB836\uB83A", 5, "\uB841\uB842\uB843\uB845", 11, "\uB852\uB854", 7, "\uB85E\uB85F\uB861\uB862\uB863\uB865", 6, "\uB86E\uB870\uB872", 5, "\uB879\uB87A\uB87B\uB87D", 7],
      ["8f41", "\uB885", 7, "\uB88E", 17],
      ["8f61", "\uB8A0", 7, "\uB8A9", 6, "\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9", 4],
      ["8f81", "\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6", 5, "\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5", 7, "\uB8DE\uB8E0\uB8E2", 5, "\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1", 6, "\uB8FA\uB8FC\uB8FE", 5, "\uB905", 18, "\uB919", 6, "\uB921", 26, "\uB93E\uB93F\uB941\uB942\uB943\uB945", 6, "\uB94D\uB94E\uB950\uB952", 5],
      ["9041", "\uB95A\uB95B\uB95D\uB95E\uB95F\uB961", 6, "\uB96A\uB96C\uB96E", 5, "\uB976\uB977\uB979\uB97A\uB97B\uB97D"],
      ["9061", "\uB97E", 5, "\uB986\uB988\uB98B\uB98C\uB98F", 15],
      ["9081", "\uB99F", 12, "\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5", 6, "\uB9BE\uB9C0\uB9C2", 5, "\uB9CA\uB9CB\uB9CD\uB9D3", 4, "\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED", 6, "\uB9F6\uB9FB", 4, "\uBA02", 5, "\uBA09", 11, "\uBA16", 33, "\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46"],
      ["9141", "\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D", 6, "\uBA66\uBA6A", 5],
      ["9161", "\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79", 9, "\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D", 5],
      ["9181", "\uBA93", 20, "\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3", 4, "\uBABA\uBABC\uBABE", 5, "\uBAC5\uBAC6\uBAC7\uBAC9", 14, "\uBADA", 33, "\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05", 7, "\uBB0E\uBB10\uBB12", 5, "\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21", 6],
      ["9241", "\uBB28\uBB2A\uBB2C", 7, "\uBB37\uBB39\uBB3A\uBB3F", 4, "\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52"],
      ["9261", "\uBB53\uBB55\uBB56\uBB57\uBB59", 7, "\uBB62\uBB64", 7, "\uBB6D", 4],
      ["9281", "\uBB72", 21, "\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91", 18, "\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD", 6, "\uBBB5\uBBB6\uBBB8", 7, "\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9", 6, "\uBBD1\uBBD2\uBBD4", 35, "\uBBFA\uBBFB\uBBFD\uBBFE\uBC01"],
      ["9341", "\uBC03", 4, "\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35"],
      ["9361", "\uBC36\uBC37\uBC39", 6, "\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51", 8],
      ["9381", "\uBC5A\uBC5B\uBC5C\uBC5E", 37, "\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F", 4, "\uBC96\uBC98\uBC9B", 4, "\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9", 6, "\uBCB2\uBCB6", 5, "\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5", 7, "\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD", 22, "\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD"],
      ["9441", "\uBCFE", 5, "\uBD06\uBD08\uBD0A", 5, "\uBD11\uBD12\uBD13\uBD15", 8],
      ["9461", "\uBD1E", 5, "\uBD25", 6, "\uBD2D", 12],
      ["9481", "\uBD3A", 5, "\uBD41", 6, "\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51", 6, "\uBD5A", 9, "\uBD65\uBD66\uBD67\uBD69", 22, "\uBD82\uBD83\uBD85\uBD86\uBD8B", 4, "\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D", 6, "\uBDA5", 10, "\uBDB1", 6, "\uBDB9", 24],
      ["9541", "\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD", 11, "\uBDEA", 5, "\uBDF1"],
      ["9561", "\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9", 6, "\uBE01\uBE02\uBE04\uBE06", 5, "\uBE0E\uBE0F\uBE11\uBE12\uBE13"],
      ["9581", "\uBE15", 6, "\uBE1E\uBE20", 35, "\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F", 4, "\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B", 4, "\uBE72\uBE76", 4, "\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85", 6, "\uBE8E\uBE92", 5, "\uBE9A", 13, "\uBEA9", 14],
      ["9641", "\uBEB8", 23, "\uBED2\uBED3"],
      ["9661", "\uBED5\uBED6\uBED9", 6, "\uBEE1\uBEE2\uBEE6", 5, "\uBEED", 8],
      ["9681", "\uBEF6", 10, "\uBF02", 5, "\uBF0A", 13, "\uBF1A\uBF1E", 33, "\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49", 6, "\uBF52\uBF53\uBF54\uBF56", 44],
      ["9741", "\uBF83", 16, "\uBF95", 8],
      ["9761", "\uBF9E", 17, "\uBFB1", 7],
      ["9781", "\uBFB9", 11, "\uBFC6", 5, "\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5", 6, "\uBFDD\uBFDE\uBFE0\uBFE2", 89, "\uC03D\uC03E\uC03F"],
      ["9841", "\uC040", 16, "\uC052", 5, "\uC059\uC05A\uC05B"],
      ["9861", "\uC05D\uC05E\uC05F\uC061", 6, "\uC06A", 15],
      ["9881", "\uC07A", 21, "\uC092\uC093\uC095\uC096\uC097\uC099", 6, "\uC0A2\uC0A4\uC0A6", 5, "\uC0AE\uC0B1\uC0B2\uC0B7", 4, "\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1", 6, "\uC0DA\uC0DE", 5, "\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED", 6, "\uC0F6\uC0F8\uC0FA", 5, "\uC101\uC102\uC103\uC105\uC106\uC107\uC109", 6, "\uC111\uC112\uC113\uC114\uC116", 5, "\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E"],
      ["9941", "\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141", 6, "\uC14A\uC14E", 5, "\uC156\uC157"],
      ["9961", "\uC159\uC15A\uC15B\uC15D", 6, "\uC166\uC16A", 5, "\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B"],
      ["9981", "\uC17C", 8, "\uC186", 5, "\uC18F\uC191\uC192\uC193\uC195\uC197", 4, "\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1", 11, "\uC1BE", 5, "\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD", 6, "\uC1D5\uC1D6\uC1D9", 6, "\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9", 6, "\uC1F2\uC1F4", 7, "\uC1FE\uC1FF\uC201\uC202\uC203\uC205", 6, "\uC20E\uC210\uC212", 5, "\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223"],
      ["9a41", "\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235", 16],
      ["9a61", "\uC246\uC247\uC249", 6, "\uC252\uC253\uC255\uC256\uC257\uC259", 6, "\uC261\uC262\uC263\uC264\uC266"],
      ["9a81", "\uC267", 4, "\uC26E\uC26F\uC271\uC272\uC273\uC275", 6, "\uC27E\uC280\uC282", 5, "\uC28A", 5, "\uC291", 6, "\uC299\uC29A\uC29C\uC29E", 5, "\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE", 5, "\uC2B6\uC2B8\uC2BA", 33, "\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5", 5, "\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301", 6, "\uC30A\uC30B\uC30E\uC30F"],
      ["9b41", "\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D", 6, "\uC326\uC327\uC32A", 8],
      ["9b61", "\uC333", 17, "\uC346", 7],
      ["9b81", "\uC34E", 25, "\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373", 4, "\uC37A\uC37B\uC37E", 5, "\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D", 50, "\uC3C1", 22, "\uC3DA"],
      ["9c41", "\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3", 4, "\uC3EA\uC3EB\uC3EC\uC3EE", 5, "\uC3F6\uC3F7\uC3F9", 5],
      ["9c61", "\uC3FF", 8, "\uC409", 6, "\uC411", 9],
      ["9c81", "\uC41B", 8, "\uC425", 6, "\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435", 6, "\uC43E", 9, "\uC449", 26, "\uC466\uC467\uC469\uC46A\uC46B\uC46D", 6, "\uC476\uC477\uC478\uC47A", 5, "\uC481", 18, "\uC495", 6, "\uC49D", 12],
      ["9d41", "\uC4AA", 13, "\uC4B9\uC4BA\uC4BB\uC4BD", 8],
      ["9d61", "\uC4C6", 25],
      ["9d81", "\uC4E0", 8, "\uC4EA", 5, "\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502", 9, "\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515", 6, "\uC51D", 10, "\uC52A\uC52B\uC52D\uC52E\uC52F\uC531", 6, "\uC53A\uC53C\uC53E", 5, "\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569", 6, "\uC572\uC576", 5, "\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594"],
      ["9e41", "\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1", 7, "\uC5AA", 9, "\uC5B6"],
      ["9e61", "\uC5B7\uC5BA\uC5BF", 4, "\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9", 6, "\uC5E2\uC5E4\uC5E6\uC5E7"],
      ["9e81", "\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611", 6, "\uC61A\uC61D", 6, "\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649", 6, "\uC652\uC656", 5, "\uC65E\uC65F\uC661", 10, "\uC66D\uC66E\uC670\uC672", 5, "\uC67A\uC67B\uC67D\uC67E\uC67F\uC681", 6, "\uC68A\uC68C\uC68E", 5, "\uC696\uC697\uC699\uC69A\uC69B\uC69D", 6, "\uC6A6"],
      ["9f41", "\uC6A8\uC6AA", 5, "\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB", 4, "\uC6C2\uC6C4\uC6C6", 5, "\uC6CE"],
      ["9f61", "\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5", 6, "\uC6DE\uC6DF\uC6E2", 5, "\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2"],
      ["9f81", "\uC6F3", 4, "\uC6FA\uC6FB\uC6FC\uC6FE", 5, "\uC706\uC707\uC709\uC70A\uC70B\uC70D", 6, "\uC716\uC718\uC71A", 5, "\uC722\uC723\uC725\uC726\uC727\uC729", 6, "\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745", 4, "\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761", 6, "\uC769\uC76A\uC76C", 7, "\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B", 4, "\uC7A2\uC7A7", 4, "\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7"],
      ["a041", "\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2", 5, "\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1", 6, "\uC7D9\uC7DA\uC7DB\uC7DC"],
      ["a061", "\uC7DE", 5, "\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED", 13],
      ["a081", "\uC7FB", 4, "\uC802\uC803\uC805\uC806\uC807\uC809\uC80B", 4, "\uC812\uC814\uC817", 4, "\uC81E\uC81F\uC821\uC822\uC823\uC825", 6, "\uC82E\uC830\uC832", 5, "\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841", 6, "\uC84A\uC84B\uC84E", 5, "\uC855", 26, "\uC872\uC873\uC875\uC876\uC877\uC879\uC87B", 4, "\uC882\uC884\uC888\uC889\uC88A\uC88E", 5, "\uC895", 7, "\uC89E\uC8A0\uC8A2\uC8A3\uC8A4"],
      ["a141", "\uC8A5\uC8A6\uC8A7\uC8A9", 18, "\uC8BE\uC8BF\uC8C0\uC8C1"],
      ["a161", "\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD", 6, "\uC8D6\uC8D8\uC8DA", 5, "\uC8E2\uC8E3\uC8E5"],
      ["a181", "\uC8E6", 14, "\uC8F6", 5, "\uC8FE\uC8FF\uC901\uC902\uC903\uC907", 4, "\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 9, "\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2"],
      ["a241", "\uC910\uC912", 5, "\uC919", 18],
      ["a261", "\uC92D", 6, "\uC935", 18],
      ["a281", "\uC948", 7, "\uC952\uC953\uC955\uC956\uC957\uC959", 6, "\uC962\uC964", 7, "\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE"],
      ["a341", "\uC971\uC972\uC973\uC975", 6, "\uC97D", 10, "\uC98A\uC98B\uC98D\uC98E\uC98F"],
      ["a361", "\uC991", 6, "\uC99A\uC99C\uC99E", 16],
      ["a381", "\uC9AF", 16, "\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB", 4, "\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01", 58, "\uFFE6\uFF3D", 32, "\uFFE3"],
      ["a441", "\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2", 5, "\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04"],
      ["a461", "\uCA05\uCA06\uCA07\uCA0A\uCA0E", 5, "\uCA15\uCA16\uCA17\uCA19", 12],
      ["a481", "\uCA26\uCA27\uCA28\uCA2A", 28, "\u3131", 93],
      ["a541", "\uCA47", 4, "\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55", 6, "\uCA5E\uCA62", 5, "\uCA69\uCA6A"],
      ["a561", "\uCA6B", 17, "\uCA7E", 5, "\uCA85\uCA86"],
      ["a581", "\uCA87", 16, "\uCA99", 14, "\u2170", 9],
      ["a5b0", "\u2160", 9],
      ["a5c1", "\u0391", 16, "\u03A3", 6],
      ["a5e1", "\u03B1", 16, "\u03C3", 6],
      ["a641", "\uCAA8", 19, "\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5"],
      ["a661", "\uCAC6", 5, "\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA", 5, "\uCAE1", 6],
      ["a681", "\uCAE8\uCAE9\uCAEA\uCAEB\uCAED", 6, "\uCAF5", 18, "\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543", 7],
      ["a741", "\uCB0B", 4, "\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19", 6, "\uCB22", 7],
      ["a761", "\uCB2A", 22, "\uCB42\uCB43\uCB44"],
      ["a781", "\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51", 6, "\uCB5A\uCB5B\uCB5C\uCB5E", 5, "\uCB65", 7, "\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399", 9, "\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0", 9, "\u3380", 4, "\u33BA", 5, "\u3390", 4, "\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6"],
      ["a841", "\uCB6D", 10, "\uCB7A", 14],
      ["a861", "\uCB89", 18, "\uCB9D", 6],
      ["a881", "\uCBA4", 19, "\uCBB9", 11, "\xC6\xD0\xAA\u0126"],
      ["a8a6", "\u0132"],
      ["a8a8", "\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A"],
      ["a8b1", "\u3260", 27, "\u24D0", 25, "\u2460", 14, "\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E"],
      ["a941", "\uCBC5", 14, "\uCBD5", 10],
      ["a961", "\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA", 18],
      ["a981", "\uCBFD", 14, "\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15", 6, "\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200", 27, "\u249C", 25, "\u2474", 14, "\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084"],
      ["aa41", "\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31", 6, "\uCC3A\uCC3F", 4, "\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E"],
      ["aa61", "\uCC4F", 4, "\uCC56\uCC5A", 5, "\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69", 6, "\uCC71\uCC72"],
      ["aa81", "\uCC73\uCC74\uCC76", 29, "\u3041", 82],
      ["ab41", "\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1", 6, "\uCCAA\uCCAE", 5, "\uCCB6\uCCB7\uCCB9"],
      ["ab61", "\uCCBA\uCCBB\uCCBD", 6, "\uCCC6\uCCC8\uCCCA", 5, "\uCCD1\uCCD2\uCCD3\uCCD5", 5],
      ["ab81", "\uCCDB", 8, "\uCCE5", 6, "\uCCED\uCCEE\uCCEF\uCCF1", 12, "\u30A1", 85],
      ["ac41", "\uCCFE\uCCFF\uCD00\uCD02", 5, "\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11", 6, "\uCD1A\uCD1C\uCD1E\uCD1F\uCD20"],
      ["ac61", "\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D", 11, "\uCD3A", 4],
      ["ac81", "\uCD3F", 28, "\uCD5D\uCD5E\uCD5F\u0410", 5, "\u0401\u0416", 25],
      ["acd1", "\u0430", 5, "\u0451\u0436", 25],
      ["ad41", "\uCD61\uCD62\uCD63\uCD65", 6, "\uCD6E\uCD70\uCD72", 5, "\uCD79", 7],
      ["ad61", "\uCD81", 6, "\uCD89", 10, "\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F"],
      ["ad81", "\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA", 5, "\uCDB1", 18, "\uCDC5"],
      ["ae41", "\uCDC6", 5, "\uCDCD\uCDCE\uCDCF\uCDD1", 16],
      ["ae61", "\uCDE2", 5, "\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1", 6, "\uCDFA\uCDFC\uCDFE", 4],
      ["ae81", "\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D", 6, "\uCE15\uCE16\uCE17\uCE18\uCE1A", 5, "\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B"],
      ["af41", "\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36", 19],
      ["af61", "\uCE4A", 13, "\uCE5A\uCE5B\uCE5D\uCE5E\uCE62", 5, "\uCE6A\uCE6C"],
      ["af81", "\uCE6E", 5, "\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D", 6, "\uCE86\uCE88\uCE8A", 5, "\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99"],
      ["b041", "\uCE9A", 5, "\uCEA2\uCEA6", 5, "\uCEAE", 12],
      ["b061", "\uCEBB", 5, "\uCEC2", 19],
      ["b081", "\uCED6", 13, "\uCEE6\uCEE7\uCEE9\uCEEA\uCEED", 6, "\uCEF6\uCEFA", 5, "\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10", 7, "\uAC19", 4, "\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06"],
      ["b141", "\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09", 6, "\uCF12\uCF14\uCF16", 5, "\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23"],
      ["b161", "\uCF25", 6, "\uCF2E\uCF32", 5, "\uCF39", 11],
      ["b181", "\uCF45", 14, "\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D", 6, "\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78"],
      ["b241", "\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79", 6, "\uCF81\uCF82\uCF83\uCF84\uCF86", 5, "\uCF8D"],
      ["b261", "\uCF8E", 18, "\uCFA2", 5, "\uCFA9"],
      ["b281", "\uCFAA", 5, "\uCFB1", 18, "\uCFC5", 6, "\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059"],
      ["b341", "\uCFCC", 19, "\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9"],
      ["b361", "\uCFEA", 5, "\uCFF2\uCFF4\uCFF6", 5, "\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005", 5],
      ["b381", "\uD00B", 5, "\uD012", 5, "\uD019", 19, "\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB", 4, "\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD"],
      ["b441", "\uD02E", 5, "\uD036\uD037\uD039\uD03A\uD03B\uD03D", 6, "\uD046\uD048\uD04A", 5],
      ["b461", "\uD051\uD052\uD053\uD055\uD056\uD057\uD059", 6, "\uD061", 10, "\uD06E\uD06F"],
      ["b481", "\uD071\uD072\uD073\uD075", 6, "\uD07E\uD07F\uD080\uD082", 18, "\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB", 4, "\uB2F3\uB2F4\uB2F5\uB2F7", 4, "\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365"],
      ["b541", "\uD095", 14, "\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD", 5],
      ["b561", "\uD0B3\uD0B6\uD0B8\uD0BA", 5, "\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA", 5, "\uD0D2\uD0D6", 4],
      ["b581", "\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5", 6, "\uD0EE\uD0F2", 5, "\uD0F9", 11, "\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538"],
      ["b641", "\uD105", 7, "\uD10E", 17],
      ["b661", "\uD120", 15, "\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E"],
      ["b681", "\uD13F\uD142\uD146", 5, "\uD14E\uD14F\uD151\uD152\uD153\uD155", 6, "\uD15E\uD160\uD162", 5, "\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797"],
      ["b741", "\uD16E", 13, "\uD17D", 6, "\uD185\uD186\uD187\uD189\uD18A"],
      ["b761", "\uD18B", 20, "\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7"],
      ["b781", "\uD1A9", 6, "\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1", 14, "\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969"],
      ["b841", "\uD1D0", 7, "\uD1D9", 17],
      ["b861", "\uD1EB", 8, "\uD1F5\uD1F6\uD1F7\uD1F9", 13],
      ["b881", "\uD208\uD20A", 5, "\uD211", 24, "\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE", 4, "\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC"],
      ["b941", "\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235", 6, "\uD23E\uD240\uD242", 5, "\uD249\uD24A\uD24B\uD24C"],
      ["b961", "\uD24D", 14, "\uD25D", 6, "\uD265\uD266\uD267\uD268"],
      ["b981", "\uD269", 22, "\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14", 4, "\uBC1B", 4, "\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97"],
      ["ba41", "\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296", 5, "\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5", 6, "\uD2AD"],
      ["ba61", "\uD2AE\uD2AF\uD2B0\uD2B2", 5, "\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3", 4, "\uD2CA\uD2CC", 5],
      ["ba81", "\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD", 6, "\uD2E6", 9, "\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64"],
      ["bb41", "\uD2FB", 4, "\uD302\uD304\uD306", 5, "\uD30F\uD311\uD312\uD313\uD315\uD317", 4, "\uD31E\uD322\uD323"],
      ["bb61", "\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331", 6, "\uD33A\uD33E", 5, "\uD346\uD347\uD348\uD349"],
      ["bb81", "\uD34A", 31, "\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4"],
      ["bc41", "\uD36A", 17, "\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387"],
      ["bc61", "\uD388\uD389\uD38A\uD38B\uD38E\uD392", 5, "\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1", 6, "\uD3AA\uD3AC\uD3AE"],
      ["bc81", "\uD3AF", 4, "\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD", 6, "\uD3C6\uD3C7\uD3CA", 5, "\uD3D1", 5, "\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C", 4, "\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D"],
      ["bd41", "\uD3D7\uD3D9", 7, "\uD3E2\uD3E4", 7, "\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7"],
      ["bd61", "\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402", 5, "\uD409", 13],
      ["bd81", "\uD417", 5, "\uD41E", 25, "\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430"],
      ["be41", "\uD438", 7, "\uD441\uD442\uD443\uD445", 14],
      ["be61", "\uD454", 7, "\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465", 7, "\uD46E\uD470\uD471\uD472"],
      ["be81", "\uD473", 4, "\uD47A\uD47B\uD47D\uD47E\uD481\uD483", 4, "\uD48A\uD48C\uD48E", 5, "\uD495", 8, "\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4", 6, "\uC5CC\uC5CE"],
      ["bf41", "\uD49E", 10, "\uD4AA", 14],
      ["bf61", "\uD4B9", 18, "\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5"],
      ["bf81", "\uD4D6", 5, "\uD4DD\uD4DE\uD4E0", 7, "\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1", 6, "\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC", 5, "\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8"],
      ["c041", "\uD4FE", 5, "\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D", 6, "\uD516\uD518", 5],
      ["c061", "\uD51E", 25],
      ["c081", "\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545", 6, "\uD54E\uD550\uD552", 5, "\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751", 7, "\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A"],
      ["c141", "\uD564\uD566\uD567\uD56A\uD56C\uD56E", 5, "\uD576\uD577\uD579\uD57A\uD57B\uD57D", 6, "\uD586\uD58A\uD58B"],
      ["c161", "\uD58C\uD58D\uD58E\uD58F\uD591", 19, "\uD5A6\uD5A7"],
      ["c181", "\uD5A8", 31, "\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3"],
      ["c241", "\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3", 4, "\uD5DA\uD5DC\uD5DE", 5, "\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE"],
      ["c261", "\uD5EF", 4, "\uD5F6\uD5F8\uD5FA", 5, "\uD602\uD603\uD605\uD606\uD607\uD609", 6, "\uD612"],
      ["c281", "\uD616", 5, "\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625", 7, "\uD62E", 9, "\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B"],
      ["c341", "\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D", 4],
      ["c361", "\uD662", 4, "\uD668\uD66A", 5, "\uD672\uD673\uD675", 11],
      ["c381", "\uD681\uD682\uD684\uD686", 5, "\uD68E\uD68F\uD691\uD692\uD693\uD695", 7, "\uD69E\uD6A0\uD6A2", 5, "\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35"],
      ["c441", "\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1", 7, "\uD6BA\uD6BC", 7, "\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB"],
      ["c461", "\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA", 5, "\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9", 4],
      ["c481", "\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6", 5, "\uD6FE\uD6FF\uD701\uD702\uD703\uD705", 11, "\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C"],
      ["c541", "\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721", 6, "\uD72A\uD72C\uD72E", 5, "\uD736\uD737\uD739"],
      ["c561", "\uD73A\uD73B\uD73D", 6, "\uD745\uD746\uD748\uD74A", 5, "\uD752\uD753\uD755\uD75A", 4],
      ["c581", "\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775", 6, "\uD77E\uD77F\uD780\uD782", 5, "\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C"],
      ["c641", "\uD78D\uD78E\uD78F\uD791", 6, "\uD79A\uD79C\uD79E", 5],
      ["c6a1", "\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401"],
      ["c7a1", "\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620"],
      ["c8a1", "\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D"],
      ["caa1", "\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95"],
      ["cba1", "\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2"],
      ["cca1", "\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0"],
      ["cda1", "\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC"],
      ["cea1", "\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE"],
      ["cfa1", "\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4"],
      ["d0a1", "\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3"],
      ["d1a1", "\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E", 5, "\u90A3\uF914", 4, "\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925"],
      ["d2a1", "\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928", 4, "\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933", 5, "\u99D1\uF939", 10, "\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A", 7, "\u5AE9\u8A25\u677B\u7D10\uF952", 5, "\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336"],
      ["d3a1", "\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843"],
      ["d4a1", "\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85"],
      ["d5a1", "\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23"],
      ["d6a1", "\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC"],
      ["d7a1", "\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C"],
      ["d8a1", "\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5"],
      ["d9a1", "\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587"],
      ["daa1", "\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51"],
      ["dba1", "\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656"],
      ["dca1", "\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66"],
      ["dda1", "\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5"],
      ["dea1", "\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A"],
      ["dfa1", "\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72"],
      ["e0a1", "\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C"],
      ["e1a1", "\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101"],
      ["e2a1", "\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27"],
      ["e3a1", "\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81"],
      ["e4a1", "\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D"],
      ["e5a1", "\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982"],
      ["e6a1", "\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2"],
      ["e7a1", "\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3"],
      ["e8a1", "\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1"],
      ["e9a1", "\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553"],
      ["eaa1", "\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB"],
      ["eba1", "\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC"],
      ["eca1", "\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344"],
      ["eda1", "\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577"],
      ["eea1", "\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1"],
      ["efa1", "\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756"],
      ["f0a1", "\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B"],
      ["f1a1", "\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA"],
      ["f2a1", "\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F"],
      ["f3a1", "\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56"],
      ["f4a1", "\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2"],
      ["f5a1", "\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403"],
      ["f6a1", "\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17"],
      ["f7a1", "\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211"],
      ["f8a1", "\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43"],
      ["f9a1", "\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A"],
      ["faa1", "\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B"],
      ["fba1", "\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575"],
      ["fca1", "\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6"],
      ["fda1", "\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/cp950.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["a140", "\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A"],
      ["a1a1", "\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62", 4, "\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F"],
      ["a240", "\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581", 7, "\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D"],
      ["a2a1", "\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10", 9, "\u2160", 9, "\u3021", 8, "\u5341\u5344\u5345\uFF21", 25, "\uFF41", 21],
      ["a340", "\uFF57\uFF58\uFF59\uFF5A\u0391", 16, "\u03A3", 6, "\u03B1", 16, "\u03C3", 6, "\u3105", 10],
      ["a3a1", "\u3110", 25, "\u02D9\u02C9\u02CA\u02C7\u02CB"],
      ["a3e1", "\u20AC"],
      ["a440", "\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D"],
      ["a4a1", "\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19"],
      ["a540", "\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916"],
      ["a5a1", "\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168"],
      ["a640", "\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74"],
      ["a6a1", "\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63"],
      ["a740", "\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D"],
      ["a7a1", "\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760"],
      ["a840", "\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292"],
      ["a8a1", "\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475"],
      ["a940", "\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45"],
      ["a9a1", "\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A"],
      ["aa40", "\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0"],
      ["aaa1", "\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644"],
      ["ab40", "\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1"],
      ["aba1", "\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7"],
      ["ac40", "\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17"],
      ["aca1", "\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004"],
      ["ad40", "\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5"],
      ["ada1", "\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA"],
      ["ae40", "\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059"],
      ["aea1", "\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93"],
      ["af40", "\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837"],
      ["afa1", "\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343"],
      ["b040", "\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661"],
      ["b0a1", "\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40"],
      ["b140", "\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD"],
      ["b1a1", "\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA"],
      ["b240", "\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6"],
      ["b2a1", "\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C"],
      ["b340", "\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014"],
      ["b3a1", "\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960"],
      ["b440", "\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD"],
      ["b4a1", "\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB"],
      ["b540", "\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98"],
      ["b5a1", "\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41"],
      ["b640", "\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591"],
      ["b6a1", "\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC"],
      ["b740", "\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D"],
      ["b7a1", "\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763"],
      ["b840", "\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B"],
      ["b8a1", "\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A"],
      ["b940", "\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4"],
      ["b9a1", "\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147"],
      ["ba40", "\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22"],
      ["baa1", "\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC"],
      ["bb40", "\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4"],
      ["bba1", "\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC"],
      ["bc40", "\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182"],
      ["bca1", "\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483"],
      ["bd40", "\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF"],
      ["bda1", "\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E"],
      ["be40", "\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09"],
      ["bea1", "\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1"],
      ["bf40", "\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A"],
      ["bfa1", "\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A"],
      ["c040", "\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687"],
      ["c0a1", "\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC"],
      ["c140", "\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA"],
      ["c1a1", "\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01"],
      ["c240", "\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658"],
      ["c2a1", "\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6"],
      ["c340", "\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378"],
      ["c3a1", "\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E"],
      ["c440", "\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C"],
      ["c4a1", "\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74"],
      ["c540", "\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C"],
      ["c5a1", "\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92"],
      ["c640", "\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72"],
      ["c940", "\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15"],
      ["c9a1", "\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B"],
      ["ca40", "\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418"],
      ["caa1", "\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747"],
      ["cb40", "\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293"],
      ["cba1", "\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762"],
      ["cc40", "\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B"],
      ["cca1", "\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2"],
      ["cd40", "\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA"],
      ["cda1", "\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF"],
      ["ce40", "\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB"],
      ["cea1", "\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA"],
      ["cf40", "\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42"],
      ["cfa1", "\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80"],
      ["d040", "\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA"],
      ["d0a1", "\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1"],
      ["d140", "\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067"],
      ["d1a1", "\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4"],
      ["d240", "\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278"],
      ["d2a1", "\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10"],
      ["d340", "\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322"],
      ["d3a1", "\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150"],
      ["d440", "\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545"],
      ["d4a1", "\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F"],
      ["d540", "\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F"],
      ["d5a1", "\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9"],
      ["d640", "\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF"],
      ["d6a1", "\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F"],
      ["d740", "\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7"],
      ["d7a1", "\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA"],
      ["d840", "\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837"],
      ["d8a1", "\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114"],
      ["d940", "\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2"],
      ["d9a1", "\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E"],
      ["da40", "\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416"],
      ["daa1", "\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65"],
      ["db40", "\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3"],
      ["dba1", "\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA"],
      ["dc40", "\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688"],
      ["dca1", "\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6"],
      ["dd40", "\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424"],
      ["dda1", "\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC"],
      ["de40", "\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153"],
      ["dea1", "\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13"],
      ["df40", "\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F"],
      ["dfa1", "\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4"],
      ["e040", "\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F"],
      ["e0a1", "\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0"],
      ["e140", "\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0"],
      ["e1a1", "\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9"],
      ["e240", "\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A"],
      ["e2a1", "\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993"],
      ["e340", "\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE"],
      ["e3a1", "\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB"],
      ["e440", "\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D"],
      ["e4a1", "\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658"],
      ["e540", "\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189"],
      ["e5a1", "\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92"],
      ["e640", "\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359"],
      ["e6a1", "\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F"],
      ["e740", "\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662"],
      ["e7a1", "\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27"],
      ["e840", "\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3"],
      ["e8a1", "\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E"],
      ["e940", "\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA"],
      ["e9a1", "\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8"],
      ["ea40", "\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799"],
      ["eaa1", "\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558"],
      ["eb40", "\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0"],
      ["eba1", "\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C"],
      ["ec40", "\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95"],
      ["eca1", "\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E"],
      ["ed40", "\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6"],
      ["eda1", "\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E"],
      ["ee40", "\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E"],
      ["eea1", "\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C"],
      ["ef40", "\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30"],
      ["efa1", "\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376"],
      ["f040", "\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2"],
      ["f0a1", "\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67"],
      ["f140", "\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA"],
      ["f1a1", "\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70"],
      ["f240", "\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B"],
      ["f2a1", "\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55"],
      ["f340", "\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726"],
      ["f3a1", "\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2"],
      ["f440", "\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929"],
      ["f4a1", "\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF"],
      ["f540", "\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B"],
      ["f5a1", "\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625"],
      ["f640", "\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A"],
      ["f6a1", "\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A"],
      ["f740", "\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A"],
      ["f7a1", "\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE"],
      ["f840", "\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F"],
      ["f8a1", "\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A"],
      ["f940", "\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A"],
      ["f9a1", "\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS({
  "../../node_modules/iconv-lite/encodings/tables/big5-added.json"(exports, module) {
    module.exports = [
      ["8740", "\u43F0\u4C32\u4603\u45A6\u4578\u{27267}\u4D77\u45B3\u{27CB1}\u4CE2\u{27CC5}\u3B95\u4736\u4744\u4C47\u4C40\u{242BF}\u{23617}\u{27352}\u{26E8B}\u{270D2}\u4C57\u{2A351}\u474F\u45DA\u4C85\u{27C6C}\u4D07\u4AA4\u46A1\u{26B23}\u7225\u{25A54}\u{21A63}\u{23E06}\u{23F61}\u664D\u56FB"],
      ["8767", "\u7D95\u591D\u{28BB9}\u3DF4\u9734\u{27BEF}\u5BDB\u{21D5E}\u5AA4\u3625\u{29EB0}\u5AD1\u5BB7\u5CFC\u676E\u8593\u{29945}\u7461\u749D\u3875\u{21D53}\u{2369E}\u{26021}\u3EEC"],
      ["87a1", "\u{258DE}\u3AF5\u7AFC\u9F97\u{24161}\u{2890D}\u{231EA}\u{20A8A}\u{2325E}\u430A\u8484\u9F96\u942F\u4930\u8613\u5896\u974A\u9218\u79D0\u7A32\u6660\u6A29\u889D\u744C\u7BC5\u6782\u7A2C\u524F\u9046\u34E6\u73C4\u{25DB9}\u74C6\u9FC7\u57B3\u492F\u544C\u4131\u{2368E}\u5818\u7A72\u{27B65}\u8B8F\u46AE\u{26E88}\u4181\u{25D99}\u7BAE\u{224BC}\u9FC8\u{224C1}\u{224C9}\u{224CC}\u9FC9\u8504\u{235BB}\u40B4\u9FCA\u44E1\u{2ADFF}\u62C1\u706E\u9FCB"],
      ["8840", "\u31C0", 4, "\u{2010C}\u31C5\u{200D1}\u{200CD}\u31C6\u31C7\u{200CB}\u{21FE8}\u31C8\u{200CA}\u31C9\u31CA\u31CB\u31CC\u{2010E}\u31CD\u31CE\u0100\xC1\u01CD\xC0\u0112\xC9\u011A\xC8\u014C\xD3\u01D1\xD2\u0FFF\xCA\u0304\u1EBE\u0FFF\xCA\u030C\u1EC0\xCA\u0101\xE1\u01CE\xE0\u0251\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA"],
      ["88a1", "\u01DC\xFC\u0FFF\xEA\u0304\u1EBF\u0FFF\xEA\u030C\u1EC1\xEA\u0261\u23DA\u23DB"],
      ["8940", "\u{2A3A9}\u{21145}"],
      ["8943", "\u650A"],
      ["8946", "\u4E3D\u6EDD\u9D4E\u91DF"],
      ["894c", "\u{27735}\u6491\u4F1A\u4F28\u4FA8\u5156\u5174\u519C\u51E4\u52A1\u52A8\u533B\u534E\u53D1\u53D8\u56E2\u58F0\u5904\u5907\u5932\u5934\u5B66\u5B9E\u5B9F\u5C9A\u5E86\u603B\u6589\u67FE\u6804\u6865\u6D4E\u70BC\u7535\u7EA4\u7EAC\u7EBA\u7EC7\u7ECF\u7EDF\u7F06\u7F37\u827A\u82CF\u836F\u89C6\u8BBE\u8BE2\u8F66\u8F67\u8F6E"],
      ["89a1", "\u7411\u7CFC\u7DCD\u6946\u7AC9\u5227"],
      ["89ab", "\u918C\u78B8\u915E\u80BC"],
      ["89b0", "\u8D0B\u80F6\u{209E7}"],
      ["89b5", "\u809F\u9EC7\u4CCD\u9DC9\u9E0C\u4C3E\u{29DF6}\u{2700E}\u9E0A\u{2A133}\u35C1"],
      ["89c1", "\u6E9A\u823E\u7519"],
      ["89c5", "\u4911\u9A6C\u9A8F\u9F99\u7987\u{2846C}\u{21DCA}\u{205D0}\u{22AE6}\u4E24\u4E81\u4E80\u4E87\u4EBF\u4EEB\u4F37\u344C\u4FBD\u3E48\u5003\u5088\u347D\u3493\u34A5\u5186\u5905\u51DB\u51FC\u5205\u4E89\u5279\u5290\u5327\u35C7\u53A9\u3551\u53B0\u3553\u53C2\u5423\u356D\u3572\u3681\u5493\u54A3\u54B4\u54B9\u54D0\u54EF\u5518\u5523\u5528\u3598\u553F\u35A5\u35BF\u55D7\u35C5"],
      ["8a40", "\u{27D84}\u5525"],
      ["8a43", "\u{20C42}\u{20D15}\u{2512B}\u5590\u{22CC6}\u39EC\u{20341}\u8E46\u{24DB8}\u{294E5}\u4053\u{280BE}\u777A\u{22C38}\u3A34\u47D5\u{2815D}\u{269F2}\u{24DEA}\u64DD\u{20D7C}\u{20FB4}\u{20CD5}\u{210F4}\u648D\u8E7E\u{20E96}\u{20C0B}\u{20F64}\u{22CA9}\u{28256}\u{244D3}"],
      ["8a64", "\u{20D46}\u{29A4D}\u{280E9}\u47F4\u{24EA7}\u{22CC2}\u9AB2\u3A67\u{295F4}\u3FED\u3506\u{252C7}\u{297D4}\u{278C8}\u{22D44}\u9D6E\u9815"],
      ["8a76", "\u43D9\u{260A5}\u64B4\u54E3\u{22D4C}\u{22BCA}\u{21077}\u39FB\u{2106F}"],
      ["8aa1", "\u{266DA}\u{26716}\u{279A0}\u64EA\u{25052}\u{20C43}\u8E68\u{221A1}\u{28B4C}\u{20731}"],
      ["8aac", "\u480B\u{201A9}\u3FFA\u5873\u{22D8D}"],
      ["8ab2", "\u{245C8}\u{204FC}\u{26097}\u{20F4C}\u{20D96}\u5579\u40BB\u43BA"],
      ["8abb", "\u4AB4\u{22A66}\u{2109D}\u81AA\u98F5\u{20D9C}\u6379\u39FE\u{22775}\u8DC0\u56A1\u647C\u3E43"],
      ["8ac9", "\u{2A601}\u{20E09}\u{22ACF}\u{22CC9}"],
      ["8ace", "\u{210C8}\u{239C2}\u3992\u3A06\u{2829B}\u3578\u{25E49}\u{220C7}\u5652\u{20F31}\u{22CB2}\u{29720}\u34BC\u6C3D\u{24E3B}"],
      ["8adf", "\u{27574}\u{22E8B}\u{22208}\u{2A65B}\u{28CCD}\u{20E7A}\u{20C34}\u{2681C}\u7F93\u{210CF}\u{22803}\u{22939}\u35FB\u{251E3}\u{20E8C}\u{20F8D}\u{20EAA}\u3F93\u{20F30}\u{20D47}\u{2114F}\u{20E4C}"],
      ["8af6", "\u{20EAB}\u{20BA9}\u{20D48}\u{210C0}\u{2113D}\u3FF9\u{22696}\u6432\u{20FAD}"],
      ["8b40", "\u{233F4}\u{27639}\u{22BCE}\u{20D7E}\u{20D7F}\u{22C51}\u{22C55}\u3A18\u{20E98}\u{210C7}\u{20F2E}\u{2A632}\u{26B50}\u{28CD2}\u{28D99}\u{28CCA}\u95AA\u54CC\u82C4\u55B9"],
      ["8b55", "\u{29EC3}\u9C26\u9AB6\u{2775E}\u{22DEE}\u7140\u816D\u80EC\u5C1C\u{26572}\u8134\u3797\u535F\u{280BD}\u91B6\u{20EFA}\u{20E0F}\u{20E77}\u{20EFB}\u35DD\u{24DEB}\u3609\u{20CD6}\u56AF\u{227B5}\u{210C9}\u{20E10}\u{20E78}\u{21078}\u{21148}\u{28207}\u{21455}\u{20E79}\u{24E50}\u{22DA4}\u5A54\u{2101D}\u{2101E}\u{210F5}\u{210F6}\u579C\u{20E11}"],
      ["8ba1", "\u{27694}\u{282CD}\u{20FB5}\u{20E7B}\u{2517E}\u3703\u{20FB6}\u{21180}\u{252D8}\u{2A2BD}\u{249DA}\u{2183A}\u{24177}\u{2827C}\u5899\u5268\u361A\u{2573D}\u7BB2\u5B68\u4800\u4B2C\u9F27\u49E7\u9C1F\u9B8D\u{25B74}\u{2313D}\u55FB\u35F2\u5689\u4E28\u5902\u{21BC1}\u{2F878}\u9751\u{20086}\u4E5B\u4EBB\u353E\u5C23\u5F51\u5FC4\u38FA\u624C\u6535\u6B7A\u6C35\u6C3A\u706C\u722B\u4E2C\u72AD\u{248E9}\u7F52\u793B\u7CF9\u7F53\u{2626A}\u34C1"],
      ["8bde", "\u{2634B}\u8002\u8080\u{26612}\u{26951}\u535D\u8864\u89C1\u{278B2}\u8BA0\u8D1D\u9485\u9578\u957F\u95E8\u{28E0F}\u97E6\u9875\u98CE\u98DE\u9963\u{29810}\u9C7C\u9E1F\u9EC4\u6B6F\uF907\u4E37\u{20087}\u961D\u6237\u94A2"],
      ["8c40", "\u503B\u6DFE\u{29C73}\u9FA6\u3DC9\u888F\u{2414E}\u7077\u5CF5\u4B20\u{251CD}\u3559\u{25D30}\u6122\u{28A32}\u8FA7\u91F6\u7191\u6719\u73BA\u{23281}\u{2A107}\u3C8B\u{21980}\u4B10\u78E4\u7402\u51AE\u{2870F}\u4009\u6A63\u{2A2BA}\u4223\u860F\u{20A6F}\u7A2A\u{29947}\u{28AEA}\u9755\u704D\u5324\u{2207E}\u93F4\u76D9\u{289E3}\u9FA7\u77DD\u4EA3\u4FF0\u50BC\u4E2F\u4F17\u9FA8\u5434\u7D8B\u5892\u58D0\u{21DB6}\u5E92\u5E99\u5FC2\u{22712}\u658B"],
      ["8ca1", "\u{233F9}\u6919\u6A43\u{23C63}\u6CFF"],
      ["8ca7", "\u7200\u{24505}\u738C\u3EDB\u{24A13}\u5B15\u74B9\u8B83\u{25CA4}\u{25695}\u7A93\u7BEC\u7CC3\u7E6C\u82F8\u8597\u9FA9\u8890\u9FAA\u8EB9\u9FAB\u8FCF\u855F\u99E0\u9221\u9FAC\u{28DB9}\u{2143F}\u4071\u42A2\u5A1A"],
      ["8cc9", "\u9868\u676B\u4276\u573D"],
      ["8cce", "\u85D6\u{2497B}\u82BF\u{2710D}\u4C81\u{26D74}\u5D7B\u{26B15}\u{26FBE}\u9FAD\u9FAE\u5B96\u9FAF\u66E7\u7E5B\u6E57\u79CA\u3D88\u44C3\u{23256}\u{22796}\u439A\u4536"],
      ["8ce6", "\u5CD5\u{23B1A}\u8AF9\u5C78\u3D12\u{23551}\u5D78\u9FB2\u7157\u4558\u{240EC}\u{21E23}\u4C77\u3978\u344A\u{201A4}\u{26C41}\u8ACC\u4FB4\u{20239}\u59BF\u816C\u9856\u{298FA}\u5F3B"],
      ["8d40", "\u{20B9F}"],
      ["8d42", "\u{221C1}\u{2896D}\u4102\u46BB\u{29079}\u3F07\u9FB3\u{2A1B5}\u40F8\u37D6\u46F7\u{26C46}\u417C\u{286B2}\u{273FF}\u456D\u38D4\u{2549A}\u4561\u451B\u4D89\u4C7B\u4D76\u45EA\u3FC8\u{24B0F}\u3661\u44DE\u44BD\u41ED\u5D3E\u5D48\u5D56\u3DFC\u380F\u5DA4\u5DB9\u3820\u3838\u5E42\u5EBD\u5F25\u5F83\u3908\u3914\u393F\u394D\u60D7\u613D\u5CE5\u3989\u61B7\u61B9\u61CF\u39B8\u622C\u6290\u62E5\u6318\u39F8\u56B1"],
      ["8da1", "\u3A03\u63E2\u63FB\u6407\u645A\u3A4B\u64C0\u5D15\u5621\u9F9F\u3A97\u6586\u3ABD\u65FF\u6653\u3AF2\u6692\u3B22\u6716\u3B42\u67A4\u6800\u3B58\u684A\u6884\u3B72\u3B71\u3B7B\u6909\u6943\u725C\u6964\u699F\u6985\u3BBC\u69D6\u3BDD\u6A65\u6A74\u6A71\u6A82\u3BEC\u6A99\u3BF2\u6AAB\u6AB5\u6AD4\u6AF6\u6B81\u6BC1\u6BEA\u6C75\u6CAA\u3CCB\u6D02\u6D06\u6D26\u6D81\u3CEF\u6DA4\u6DB1\u6E15\u6E18\u6E29\u6E86\u{289C0}\u6EBB\u6EE2\u6EDA\u9F7F\u6EE8\u6EE9\u6F24\u6F34\u3D46\u{23F41}\u6F81\u6FBE\u3D6A\u3D75\u71B7\u5C99\u3D8A\u702C\u3D91\u7050\u7054\u706F\u707F\u7089\u{20325}\u43C1\u35F1\u{20ED8}"],
      ["8e40", "\u{23ED7}\u57BE\u{26ED3}\u713E\u{257E0}\u364E\u69A2\u{28BE9}\u5B74\u7A49\u{258E1}\u{294D9}\u7A65\u7A7D\u{259AC}\u7ABB\u7AB0\u7AC2\u7AC3\u71D1\u{2648D}\u41CA\u7ADA\u7ADD\u7AEA\u41EF\u54B2\u{25C01}\u7B0B\u7B55\u7B29\u{2530E}\u{25CFE}\u7BA2\u7B6F\u839C\u{25BB4}\u{26C7F}\u7BD0\u8421\u7B92\u7BB8\u{25D20}\u3DAD\u{25C65}\u8492\u7BFA\u7C06\u7C35\u{25CC1}\u7C44\u7C83\u{24882}\u7CA6\u667D\u{24578}\u7CC9\u7CC7\u7CE6\u7C74\u7CF3\u7CF5\u7CCE"],
      ["8ea1", "\u7E67\u451D\u{26E44}\u7D5D\u{26ED6}\u748D\u7D89\u7DAB\u7135\u7DB3\u7DD2\u{24057}\u{26029}\u7DE4\u3D13\u7DF5\u{217F9}\u7DE5\u{2836D}\u7E1D\u{26121}\u{2615A}\u7E6E\u7E92\u432B\u946C\u7E27\u7F40\u7F41\u7F47\u7936\u{262D0}\u99E1\u7F97\u{26351}\u7FA3\u{21661}\u{20068}\u455C\u{23766}\u4503\u{2833A}\u7FFA\u{26489}\u8005\u8008\u801D\u8028\u802F\u{2A087}\u{26CC3}\u803B\u803C\u8061\u{22714}\u4989\u{26626}\u{23DE3}\u{266E8}\u6725\u80A7\u{28A48}\u8107\u811A\u58B0\u{226F6}\u6C7F\u{26498}\u{24FB8}\u64E7\u{2148A}\u8218\u{2185E}\u6A53\u{24A65}\u{24A95}\u447A\u8229\u{20B0D}\u{26A52}\u{23D7E}\u4FF9\u{214FD}\u84E2\u8362\u{26B0A}\u{249A7}\u{23530}\u{21773}\u{23DF8}\u82AA\u691B\u{2F994}\u41DB"],
      ["8f40", "\u854B\u82D0\u831A\u{20E16}\u{217B4}\u36C1\u{2317D}\u{2355A}\u827B\u82E2\u8318\u{23E8B}\u{26DA3}\u{26B05}\u{26B97}\u{235CE}\u3DBF\u831D\u55EC\u8385\u450B\u{26DA5}\u83AC\u83C1\u83D3\u347E\u{26ED4}\u6A57\u855A\u3496\u{26E42}\u{22EEF}\u8458\u{25BE4}\u8471\u3DD3\u44E4\u6AA7\u844A\u{23CB5}\u7958\u84A8\u{26B96}\u{26E77}\u{26E43}\u84DE\u840F\u8391\u44A0\u8493\u84E4\u{25C91}\u4240\u{25CC0}\u4543\u8534\u5AF2\u{26E99}\u4527\u8573\u4516\u67BF\u8616"],
      ["8fa1", "\u{28625}\u{2863B}\u85C1\u{27088}\u8602\u{21582}\u{270CD}\u{2F9B2}\u456A\u8628\u3648\u{218A2}\u53F7\u{2739A}\u867E\u8771\u{2A0F8}\u87EE\u{22C27}\u87B1\u87DA\u880F\u5661\u866C\u6856\u460F\u8845\u8846\u{275E0}\u{23DB9}\u{275E4}\u885E\u889C\u465B\u88B4\u88B5\u63C1\u88C5\u7777\u{2770F}\u8987\u898A\u89A6\u89A9\u89A7\u89BC\u{28A25}\u89E7\u{27924}\u{27ABD}\u8A9C\u7793\u91FE\u8A90\u{27A59}\u7AE9\u{27B3A}\u{23F8F}\u4713\u{27B38}\u717C\u8B0C\u8B1F\u{25430}\u{25565}\u8B3F\u8B4C\u8B4D\u8AA9\u{24A7A}\u8B90\u8B9B\u8AAF\u{216DF}\u4615\u884F\u8C9B\u{27D54}\u{27D8F}\u{2F9D4}\u3725\u{27D53}\u8CD6\u{27D98}\u{27DBD}\u8D12\u8D03\u{21910}\u8CDB\u705C\u8D11\u{24CC9}\u3ED0\u8D77"],
      ["9040", "\u8DA9\u{28002}\u{21014}\u{2498A}\u3B7C\u{281BC}\u{2710C}\u7AE7\u8EAD\u8EB6\u8EC3\u92D4\u8F19\u8F2D\u{28365}\u{28412}\u8FA5\u9303\u{2A29F}\u{20A50}\u8FB3\u492A\u{289DE}\u{2853D}\u{23DBB}\u5EF8\u{23262}\u8FF9\u{2A014}\u{286BC}\u{28501}\u{22325}\u3980\u{26ED7}\u9037\u{2853C}\u{27ABE}\u9061\u{2856C}\u{2860B}\u90A8\u{28713}\u90C4\u{286E6}\u90AE\u90FD\u9167\u3AF0\u91A9\u91C4\u7CAC\u{28933}\u{21E89}\u920E\u6C9F\u9241\u9262\u{255B9}\u92B9\u{28AC6}\u{23C9B}\u{28B0C}\u{255DB}"],
      ["90a1", "\u{20D31}\u932C\u936B\u{28AE1}\u{28BEB}\u708F\u5AC3\u{28AE2}\u{28AE5}\u4965\u9244\u{28BEC}\u{28C39}\u{28BFF}\u9373\u945B\u8EBC\u9585\u95A6\u9426\u95A0\u6FF6\u42B9\u{2267A}\u{286D8}\u{2127C}\u{23E2E}\u49DF\u6C1C\u967B\u9696\u416C\u96A3\u{26ED5}\u61DA\u96B6\u78F5\u{28AE0}\u96BD\u53CC\u49A1\u{26CB8}\u{20274}\u{26410}\u{290AF}\u{290E5}\u{24AD1}\u{21915}\u{2330A}\u9731\u8642\u9736\u4A0F\u453D\u4585\u{24AE9}\u7075\u5B41\u971B\u975C\u{291D5}\u9757\u5B4A\u{291EB}\u975F\u9425\u50D0\u{230B7}\u{230BC}\u9789\u979F\u97B1\u97BE\u97C0\u97D2\u97E0\u{2546C}\u97EE\u741C\u{29433}\u97FF\u97F5\u{2941D}\u{2797A}\u4AD1\u9834\u9833\u984B\u9866\u3B0E\u{27175}\u3D51\u{20630}\u{2415C}"],
      ["9140", "\u{25706}\u98CA\u98B7\u98C8\u98C7\u4AFF\u{26D27}\u{216D3}\u55B0\u98E1\u98E6\u98EC\u9378\u9939\u{24A29}\u4B72\u{29857}\u{29905}\u99F5\u9A0C\u9A3B\u9A10\u9A58\u{25725}\u36C4\u{290B1}\u{29BD5}\u9AE0\u9AE2\u{29B05}\u9AF4\u4C0E\u9B14\u9B2D\u{28600}\u5034\u9B34\u{269A8}\u38C3\u{2307D}\u9B50\u9B40\u{29D3E}\u5A45\u{21863}\u9B8E\u{2424B}\u9C02\u9BFF\u9C0C\u{29E68}\u9DD4\u{29FB7}\u{2A192}\u{2A1AB}\u{2A0E1}\u{2A123}\u{2A1DF}\u9D7E\u9D83\u{2A134}\u9E0E\u6888"],
      ["91a1", "\u9DC4\u{2215B}\u{2A193}\u{2A220}\u{2193B}\u{2A233}\u9D39\u{2A0B9}\u{2A2B4}\u9E90\u9E95\u9E9E\u9EA2\u4D34\u9EAA\u9EAF\u{24364}\u9EC1\u3B60\u39E5\u3D1D\u4F32\u37BE\u{28C2B}\u9F02\u9F08\u4B96\u9424\u{26DA2}\u9F17\u9F16\u9F39\u569F\u568A\u9F45\u99B8\u{2908B}\u97F2\u847F\u9F62\u9F69\u7ADC\u9F8E\u7216\u4BBE\u{24975}\u{249BB}\u7177\u{249F8}\u{24348}\u{24A51}\u739E\u{28BDA}\u{218FA}\u799F\u{2897E}\u{28E36}\u9369\u93F3\u{28A44}\u92EC\u9381\u93CB\u{2896C}\u{244B9}\u7217\u3EEB\u7772\u7A43\u70D0\u{24473}\u{243F8}\u717E\u{217EF}\u70A3\u{218BE}\u{23599}\u3EC7\u{21885}\u{2542F}\u{217F8}\u3722\u{216FB}\u{21839}\u36E1\u{21774}\u{218D1}\u{25F4B}\u3723\u{216C0}\u575B\u{24A25}\u{213FE}\u{212A8}"],
      ["9240", "\u{213C6}\u{214B6}\u8503\u{236A6}\u8503\u8455\u{24994}\u{27165}\u{23E31}\u{2555C}\u{23EFB}\u{27052}\u44F4\u{236EE}\u{2999D}\u{26F26}\u67F9\u3733\u3C15\u3DE7\u586C\u{21922}\u6810\u4057\u{2373F}\u{240E1}\u{2408B}\u{2410F}\u{26C21}\u54CB\u569E\u{266B1}\u5692\u{20FDF}\u{20BA8}\u{20E0D}\u93C6\u{28B13}\u939C\u4EF8\u512B\u3819\u{24436}\u4EBC\u{20465}\u{2037F}\u4F4B\u4F8A\u{25651}\u5A68\u{201AB}\u{203CB}\u3999\u{2030A}\u{20414}\u3435\u4F29\u{202C0}\u{28EB3}\u{20275}\u8ADA\u{2020C}\u4E98"],
      ["92a1", "\u50CD\u510D\u4FA2\u4F03\u{24A0E}\u{23E8A}\u4F42\u502E\u506C\u5081\u4FCC\u4FE5\u5058\u50FC\u5159\u515B\u515D\u515E\u6E76\u{23595}\u{23E39}\u{23EBF}\u6D72\u{21884}\u{23E89}\u51A8\u51C3\u{205E0}\u44DD\u{204A3}\u{20492}\u{20491}\u8D7A\u{28A9C}\u{2070E}\u5259\u52A4\u{20873}\u52E1\u936E\u467A\u718C\u{2438C}\u{20C20}\u{249AC}\u{210E4}\u69D1\u{20E1D}\u7479\u3EDE\u7499\u7414\u7456\u7398\u4B8E\u{24ABC}\u{2408D}\u53D0\u3584\u720F\u{240C9}\u55B4\u{20345}\u54CD\u{20BC6}\u571D\u925D\u96F4\u9366\u57DD\u578D\u577F\u363E\u58CB\u5A99\u{28A46}\u{216FA}\u{2176F}\u{21710}\u5A2C\u59B8\u928F\u5A7E\u5ACF\u5A12\u{25946}\u{219F3}\u{21861}\u{24295}\u36F5\u6D05\u7443\u5A21\u{25E83}"],
      ["9340", "\u5A81\u{28BD7}\u{20413}\u93E0\u748C\u{21303}\u7105\u4972\u9408\u{289FB}\u93BD\u37A0\u5C1E\u5C9E\u5E5E\u5E48\u{21996}\u{2197C}\u{23AEE}\u5ECD\u5B4F\u{21903}\u{21904}\u3701\u{218A0}\u36DD\u{216FE}\u36D3\u812A\u{28A47}\u{21DBA}\u{23472}\u{289A8}\u5F0C\u5F0E\u{21927}\u{217AB}\u5A6B\u{2173B}\u5B44\u8614\u{275FD}\u8860\u607E\u{22860}\u{2262B}\u5FDB\u3EB8\u{225AF}\u{225BE}\u{29088}\u{26F73}\u61C0\u{2003E}\u{20046}\u{2261B}\u6199\u6198\u6075\u{22C9B}\u{22D07}\u{246D4}\u{2914D}"],
      ["93a1", "\u6471\u{24665}\u{22B6A}\u3A29\u{22B22}\u{23450}\u{298EA}\u{22E78}\u6337\u{2A45B}\u64B6\u6331\u63D1\u{249E3}\u{22D67}\u62A4\u{22CA1}\u643B\u656B\u6972\u3BF4\u{2308E}\u{232AD}\u{24989}\u{232AB}\u550D\u{232E0}\u{218D9}\u{2943F}\u66CE\u{23289}\u{231B3}\u3AE0\u4190\u{25584}\u{28B22}\u{2558F}\u{216FC}\u{2555B}\u{25425}\u78EE\u{23103}\u{2182A}\u{23234}\u3464\u{2320F}\u{23182}\u{242C9}\u668E\u{26D24}\u666B\u4B93\u6630\u{27870}\u{21DEB}\u6663\u{232D2}\u{232E1}\u661E\u{25872}\u38D1\u{2383A}\u{237BC}\u3B99\u{237A2}\u{233FE}\u74D0\u3B96\u678F\u{2462A}\u68B6\u681E\u3BC4\u6ABE\u3863\u{237D5}\u{24487}\u6A33\u6A52\u6AC9\u6B05\u{21912}\u6511\u6898\u6A4C\u3BD7\u6A7A\u6B57\u{23FC0}\u{23C9A}\u93A0\u92F2\u{28BEA}\u{28ACB}"],
      ["9440", "\u9289\u{2801E}\u{289DC}\u9467\u6DA5\u6F0B\u{249EC}\u6D67\u{23F7F}\u3D8F\u6E04\u{2403C}\u5A3D\u6E0A\u5847\u6D24\u7842\u713B\u{2431A}\u{24276}\u70F1\u7250\u7287\u7294\u{2478F}\u{24725}\u5179\u{24AA4}\u{205EB}\u747A\u{23EF8}\u{2365F}\u{24A4A}\u{24917}\u{25FE1}\u3F06\u3EB1\u{24ADF}\u{28C23}\u{23F35}\u60A7\u3EF3\u74CC\u743C\u9387\u7437\u449F\u{26DEA}\u4551\u7583\u3F63\u{24CD9}\u{24D06}\u3F58\u7555\u7673\u{2A5C6}\u3B19\u7468\u{28ACC}\u{249AB}\u{2498E}\u3AFB"],
      ["94a1", "\u3DCD\u{24A4E}\u3EFF\u{249C5}\u{248F3}\u91FA\u5732\u9342\u{28AE3}\u{21864}\u50DF\u{25221}\u{251E7}\u7778\u{23232}\u770E\u770F\u777B\u{24697}\u{23781}\u3A5E\u{248F0}\u7438\u749B\u3EBF\u{24ABA}\u{24AC7}\u40C8\u{24A96}\u{261AE}\u9307\u{25581}\u781E\u788D\u7888\u78D2\u73D0\u7959\u{27741}\u{256E3}\u410E\u799B\u8496\u79A5\u6A2D\u{23EFA}\u7A3A\u79F4\u416E\u{216E6}\u4132\u9235\u79F1\u{20D4C}\u{2498C}\u{20299}\u{23DBA}\u{2176E}\u3597\u556B\u3570\u36AA\u{201D4}\u{20C0D}\u7AE2\u5A59\u{226F5}\u{25AAF}\u{25A9C}\u5A0D\u{2025B}\u78F0\u5A2A\u{25BC6}\u7AFE\u41F9\u7C5D\u7C6D\u4211\u{25BB3}\u{25EBC}\u{25EA6}\u7CCD\u{249F9}\u{217B0}\u7C8E\u7C7C\u7CAE\u6AB2\u7DDC\u7E07\u7DD3\u7F4E\u{26261}"],
      ["9540", "\u{2615C}\u{27B48}\u7D97\u{25E82}\u426A\u{26B75}\u{20916}\u67D6\u{2004E}\u{235CF}\u57C4\u{26412}\u{263F8}\u{24962}\u7FDD\u7B27\u{2082C}\u{25AE9}\u{25D43}\u7B0C\u{25E0E}\u99E6\u8645\u9A63\u6A1C\u{2343F}\u39E2\u{249F7}\u{265AD}\u9A1F\u{265A0}\u8480\u{27127}\u{26CD1}\u44EA\u8137\u4402\u80C6\u8109\u8142\u{267B4}\u98C3\u{26A42}\u8262\u8265\u{26A51}\u8453\u{26DA7}\u8610\u{2721B}\u5A86\u417F\u{21840}\u5B2B\u{218A1}\u5AE4\u{218D8}\u86A0\u{2F9BC}\u{23D8F}\u882D\u{27422}\u5A02"],
      ["95a1", "\u886E\u4F45\u8887\u88BF\u88E6\u8965\u894D\u{25683}\u8954\u{27785}\u{27784}\u{28BF5}\u{28BD9}\u{28B9C}\u{289F9}\u3EAD\u84A3\u46F5\u46CF\u37F2\u8A3D\u8A1C\u{29448}\u5F4D\u922B\u{24284}\u65D4\u7129\u70C4\u{21845}\u9D6D\u8C9F\u8CE9\u{27DDC}\u599A\u77C3\u59F0\u436E\u36D4\u8E2A\u8EA7\u{24C09}\u8F30\u8F4A\u42F4\u6C58\u6FBB\u{22321}\u489B\u6F79\u6E8B\u{217DA}\u9BE9\u36B5\u{2492F}\u90BB\u9097\u5571\u4906\u91BB\u9404\u{28A4B}\u4062\u{28AFC}\u9427\u{28C1D}\u{28C3B}\u84E5\u8A2B\u9599\u95A7\u9597\u9596\u{28D34}\u7445\u3EC2\u{248FF}\u{24A42}\u{243EA}\u3EE7\u{23225}\u968F\u{28EE7}\u{28E66}\u{28E65}\u3ECC\u{249ED}\u{24A78}\u{23FEE}\u7412\u746B\u3EFC\u9741\u{290B0}"],
      ["9640", "\u6847\u4A1D\u{29093}\u{257DF}\u975D\u9368\u{28989}\u{28C26}\u{28B2F}\u{263BE}\u92BA\u5B11\u8B69\u493C\u73F9\u{2421B}\u979B\u9771\u9938\u{20F26}\u5DC1\u{28BC5}\u{24AB2}\u981F\u{294DA}\u92F6\u{295D7}\u91E5\u44C0\u{28B50}\u{24A67}\u{28B64}\u98DC\u{28A45}\u3F00\u922A\u4925\u8414\u993B\u994D\u{27B06}\u3DFD\u999B\u4B6F\u99AA\u9A5C\u{28B65}\u{258C8}\u6A8F\u9A21\u5AFE\u9A2F\u{298F1}\u4B90\u{29948}\u99BC\u4BBD\u4B97\u937D\u5872\u{21302}\u5822\u{249B8}"],
      ["96a1", "\u{214E8}\u7844\u{2271F}\u{23DB8}\u68C5\u3D7D\u9458\u3927\u6150\u{22781}\u{2296B}\u6107\u9C4F\u9C53\u9C7B\u9C35\u9C10\u9B7F\u9BCF\u{29E2D}\u9B9F\u{2A1F5}\u{2A0FE}\u9D21\u4CAE\u{24104}\u9E18\u4CB0\u9D0C\u{2A1B4}\u{2A0ED}\u{2A0F3}\u{2992F}\u9DA5\u84BD\u{26E12}\u{26FDF}\u{26B82}\u85FC\u4533\u{26DA4}\u{26E84}\u{26DF0}\u8420\u85EE\u{26E00}\u{237D7}\u{26064}\u79E2\u{2359C}\u{23640}\u492D\u{249DE}\u3D62\u93DB\u92BE\u9348\u{202BF}\u78B9\u9277\u944D\u4FE4\u3440\u9064\u{2555D}\u783D\u7854\u78B6\u784B\u{21757}\u{231C9}\u{24941}\u369A\u4F72\u6FDA\u6FD9\u701E\u701E\u5414\u{241B5}\u57BB\u58F3\u578A\u9D16\u57D7\u7134\u34AF\u{241AC}\u71EB\u{26C40}\u{24F97}\u5B28\u{217B5}\u{28A49}"],
      ["9740", "\u610C\u5ACE\u5A0B\u42BC\u{24488}\u372C\u4B7B\u{289FC}\u93BB\u93B8\u{218D6}\u{20F1D}\u8472\u{26CC0}\u{21413}\u{242FA}\u{22C26}\u{243C1}\u5994\u{23DB7}\u{26741}\u7DA8\u{2615B}\u{260A4}\u{249B9}\u{2498B}\u{289FA}\u92E5\u73E2\u3EE9\u74B4\u{28B63}\u{2189F}\u3EE1\u{24AB3}\u6AD8\u73F3\u73FB\u3ED6\u{24A3E}\u{24A94}\u{217D9}\u{24A66}\u{203A7}\u{21424}\u{249E5}\u7448\u{24916}\u70A5\u{24976}\u9284\u73E6\u935F\u{204FE}\u9331\u{28ACE}\u{28A16}\u9386\u{28BE7}\u{255D5}\u4935\u{28A82}\u716B"],
      ["97a1", "\u{24943}\u{20CFF}\u56A4\u{2061A}\u{20BEB}\u{20CB8}\u5502\u79C4\u{217FA}\u7DFE\u{216C2}\u{24A50}\u{21852}\u452E\u9401\u370A\u{28AC0}\u{249AD}\u59B0\u{218BF}\u{21883}\u{27484}\u5AA1\u36E2\u{23D5B}\u36B0\u925F\u5A79\u{28A81}\u{21862}\u9374\u3CCD\u{20AB4}\u4A96\u398A\u50F4\u3D69\u3D4C\u{2139C}\u7175\u42FB\u{28218}\u6E0F\u{290E4}\u44EB\u6D57\u{27E4F}\u7067\u6CAF\u3CD6\u{23FED}\u{23E2D}\u6E02\u6F0C\u3D6F\u{203F5}\u7551\u36BC\u34C8\u4680\u3EDA\u4871\u59C4\u926E\u493E\u8F41\u{28C1C}\u{26BC0}\u5812\u57C8\u36D6\u{21452}\u70FE\u{24362}\u{24A71}\u{22FE3}\u{212B0}\u{223BD}\u68B9\u6967\u{21398}\u{234E5}\u{27BF4}\u{236DF}\u{28A83}\u{237D6}\u{233FA}\u{24C9F}\u6A1A\u{236AD}\u{26CB7}\u843E\u44DF\u44CE"],
      ["9840", "\u{26D26}\u{26D51}\u{26C82}\u{26FDE}\u6F17\u{27109}\u833D\u{2173A}\u83ED\u{26C80}\u{27053}\u{217DB}\u5989\u5A82\u{217B3}\u5A61\u5A71\u{21905}\u{241FC}\u372D\u59EF\u{2173C}\u36C7\u718E\u9390\u669A\u{242A5}\u5A6E\u5A2B\u{24293}\u6A2B\u{23EF9}\u{27736}\u{2445B}\u{242CA}\u711D\u{24259}\u{289E1}\u4FB0\u{26D28}\u5CC2\u{244CE}\u{27E4D}\u{243BD}\u6A0C\u{24256}\u{21304}\u70A6\u7133\u{243E9}\u3DA5\u6CDF\u{2F825}\u{24A4F}\u7E65\u59EB\u5D2F\u3DF3\u5F5C\u{24A5D}\u{217DF}\u7DA4\u8426"],
      ["98a1", "\u5485\u{23AFA}\u{23300}\u{20214}\u577E\u{208D5}\u{20619}\u3FE5\u{21F9E}\u{2A2B6}\u7003\u{2915B}\u5D70\u738F\u7CD3\u{28A59}\u{29420}\u4FC8\u7FE7\u72CD\u7310\u{27AF4}\u7338\u7339\u{256F6}\u7341\u7348\u3EA9\u{27B18}\u906C\u71F5\u{248F2}\u73E1\u81F6\u3ECA\u770C\u3ED1\u6CA2\u56FD\u7419\u741E\u741F\u3EE2\u3EF0\u3EF4\u3EFA\u74D3\u3F0E\u3F53\u7542\u756D\u7572\u758D\u3F7C\u75C8\u75DC\u3FC0\u764D\u3FD7\u7674\u3FDC\u767A\u{24F5C}\u7188\u5623\u8980\u5869\u401D\u7743\u4039\u6761\u4045\u35DB\u7798\u406A\u406F\u5C5E\u77BE\u77CB\u58F2\u7818\u70B9\u781C\u40A8\u7839\u7847\u7851\u7866\u8448\u{25535}\u7933\u6803\u7932\u4103"],
      ["9940", "\u4109\u7991\u7999\u8FBB\u7A06\u8FBC\u4167\u7A91\u41B2\u7ABC\u8279\u41C4\u7ACF\u7ADB\u41CF\u4E21\u7B62\u7B6C\u7B7B\u7C12\u7C1B\u4260\u427A\u7C7B\u7C9C\u428C\u7CB8\u4294\u7CED\u8F93\u70C0\u{20CCF}\u7DCF\u7DD4\u7DD0\u7DFD\u7FAE\u7FB4\u729F\u4397\u8020\u8025\u7B39\u802E\u8031\u8054\u3DCC\u57B4\u70A0\u80B7\u80E9\u43ED\u810C\u732A\u810E\u8112\u7560\u8114\u4401\u3B39\u8156\u8159\u815A"],
      ["99a1", "\u4413\u583A\u817C\u8184\u4425\u8193\u442D\u81A5\u57EF\u81C1\u81E4\u8254\u448F\u82A6\u8276\u82CA\u82D8\u82FF\u44B0\u8357\u9669\u698A\u8405\u70F5\u8464\u60E3\u8488\u4504\u84BE\u84E1\u84F8\u8510\u8538\u8552\u453B\u856F\u8570\u85E0\u4577\u8672\u8692\u86B2\u86EF\u9645\u878B\u4606\u4617\u88AE\u88FF\u8924\u8947\u8991\u{27967}\u8A29\u8A38\u8A94\u8AB4\u8C51\u8CD4\u8CF2\u8D1C\u4798\u585F\u8DC3\u47ED\u4EEE\u8E3A\u55D8\u5754\u8E71\u55F5\u8EB0\u4837\u8ECE\u8EE2\u8EE4\u8EED\u8EF2\u8FB7\u8FC1\u8FCA\u8FCC\u9033\u99C4\u48AD\u98E0\u9213\u491E\u9228\u9258\u926B\u92B1\u92AE\u92BF"],
      ["9a40", "\u92E3\u92EB\u92F3\u92F4\u92FD\u9343\u9384\u93AD\u4945\u4951\u9EBF\u9417\u5301\u941D\u942D\u943E\u496A\u9454\u9479\u952D\u95A2\u49A7\u95F4\u9633\u49E5\u67A0\u4A24\u9740\u4A35\u97B2\u97C2\u5654\u4AE4\u60E8\u98B9\u4B19\u98F1\u5844\u990E\u9919\u51B4\u991C\u9937\u9942\u995D\u9962\u4B70\u99C5\u4B9D\u9A3C\u9B0F\u7A83\u9B69\u9B81\u9BDD\u9BF1\u9BF4\u4C6D\u9C20\u376F\u{21BC2}\u9D49\u9C3A"],
      ["9aa1", "\u9EFE\u5650\u9D93\u9DBD\u9DC0\u9DFC\u94F6\u8FB6\u9E7B\u9EAC\u9EB1\u9EBD\u9EC6\u94DC\u9EE2\u9EF1\u9EF8\u7AC8\u9F44\u{20094}\u{202B7}\u{203A0}\u691A\u94C3\u59AC\u{204D7}\u5840\u94C1\u37B9\u{205D5}\u{20615}\u{20676}\u{216BA}\u5757\u7173\u{20AC2}\u{20ACD}\u{20BBF}\u546A\u{2F83B}\u{20BCB}\u549E\u{20BFB}\u{20C3B}\u{20C53}\u{20C65}\u{20C7C}\u60E7\u{20C8D}\u567A\u{20CB5}\u{20CDD}\u{20CED}\u{20D6F}\u{20DB2}\u{20DC8}\u6955\u9C2F\u87A5\u{20E04}\u{20E0E}\u{20ED7}\u{20F90}\u{20F2D}\u{20E73}\u5C20\u{20FBC}\u5E0B\u{2105C}\u{2104F}\u{21076}\u671E\u{2107B}\u{21088}\u{21096}\u3647\u{210BF}\u{210D3}\u{2112F}\u{2113B}\u5364\u84AD\u{212E3}\u{21375}\u{21336}\u8B81\u{21577}\u{21619}\u{217C3}\u{217C7}\u4E78\u70BB\u{2182D}\u{2196A}"],
      ["9b40", "\u{21A2D}\u{21A45}\u{21C2A}\u{21C70}\u{21CAC}\u{21EC8}\u62C3\u{21ED5}\u{21F15}\u7198\u6855\u{22045}\u69E9\u36C8\u{2227C}\u{223D7}\u{223FA}\u{2272A}\u{22871}\u{2294F}\u82FD\u{22967}\u{22993}\u{22AD5}\u89A5\u{22AE8}\u8FA0\u{22B0E}\u97B8\u{22B3F}\u9847\u9ABD\u{22C4C}"],
      ["9b62", "\u{22C88}\u{22CB7}\u{25BE8}\u{22D08}\u{22D12}\u{22DB7}\u{22D95}\u{22E42}\u{22F74}\u{22FCC}\u{23033}\u{23066}\u{2331F}\u{233DE}\u5FB1\u6648\u66BF\u{27A79}\u{23567}\u{235F3}\u7201\u{249BA}\u77D7\u{2361A}\u{23716}\u7E87\u{20346}\u58B5\u670E"],
      ["9ba1", "\u6918\u{23AA7}\u{27657}\u{25FE2}\u{23E11}\u{23EB9}\u{275FE}\u{2209A}\u48D0\u4AB8\u{24119}\u{28A9A}\u{242EE}\u{2430D}\u{2403B}\u{24334}\u{24396}\u{24A45}\u{205CA}\u51D2\u{20611}\u599F\u{21EA8}\u3BBE\u{23CFF}\u{24404}\u{244D6}\u5788\u{24674}\u399B\u{2472F}\u{285E8}\u{299C9}\u3762\u{221C3}\u8B5E\u{28B4E}\u99D6\u{24812}\u{248FB}\u{24A15}\u7209\u{24AC0}\u{20C78}\u5965\u{24EA5}\u{24F86}\u{20779}\u8EDA\u{2502C}\u528F\u573F\u7171\u{25299}\u{25419}\u{23F4A}\u{24AA7}\u55BC\u{25446}\u{2546E}\u{26B52}\u91D4\u3473\u{2553F}\u{27632}\u{2555E}\u4718\u{25562}\u{25566}\u{257C7}\u{2493F}\u{2585D}\u5066\u34FB\u{233CC}\u60DE\u{25903}\u477C\u{28948}\u{25AAE}\u{25B89}\u{25C06}\u{21D90}\u57A1\u7151\u6FB6\u{26102}\u{27C12}\u9056\u{261B2}\u{24F9A}\u8B62\u{26402}\u{2644A}"],
      ["9c40", "\u5D5B\u{26BF7}\u8F36\u{26484}\u{2191C}\u8AEA\u{249F6}\u{26488}\u{23FEF}\u{26512}\u4BC0\u{265BF}\u{266B5}\u{2271B}\u9465\u{257E1}\u6195\u5A27\u{2F8CD}\u4FBB\u56B9\u{24521}\u{266FC}\u4E6A\u{24934}\u9656\u6D8F\u{26CBD}\u3618\u8977\u{26799}\u{2686E}\u{26411}\u{2685E}\u71DF\u{268C7}\u7B42\u{290C0}\u{20A11}\u{26926}\u9104\u{26939}\u7A45\u9DF0\u{269FA}\u9A26\u{26A2D}\u365F\u{26469}\u{20021}\u7983\u{26A34}\u{26B5B}\u5D2C\u{23519}\u83CF\u{26B9D}\u46D0\u{26CA4}\u753B\u8865\u{26DAE}\u58B6"],
      ["9ca1", "\u371C\u{2258D}\u{2704B}\u{271CD}\u3C54\u{27280}\u{27285}\u9281\u{2217A}\u{2728B}\u9330\u{272E6}\u{249D0}\u6C39\u949F\u{27450}\u{20EF8}\u8827\u88F5\u{22926}\u{28473}\u{217B1}\u6EB8\u{24A2A}\u{21820}\u39A4\u36B9\u5C10\u79E3\u453F\u66B6\u{29CAD}\u{298A4}\u8943\u{277CC}\u{27858}\u56D6\u40DF\u{2160A}\u39A1\u{2372F}\u{280E8}\u{213C5}\u71AD\u8366\u{279DD}\u{291A8}\u5A67\u4CB7\u{270AF}\u{289AB}\u{279FD}\u{27A0A}\u{27B0B}\u{27D66}\u{2417A}\u7B43\u797E\u{28009}\u6FB5\u{2A2DF}\u6A03\u{28318}\u53A2\u{26E07}\u93BF\u6836\u975D\u{2816F}\u{28023}\u{269B5}\u{213ED}\u{2322F}\u{28048}\u5D85\u{28C30}\u{28083}\u5715\u9823\u{28949}\u5DAB\u{24988}\u65BE\u69D5\u53D2\u{24AA5}\u{23F81}\u3C11\u6736\u{28090}\u{280F4}\u{2812E}\u{21FA1}\u{2814F}"],
      ["9d40", "\u{28189}\u{281AF}\u{2821A}\u{28306}\u{2832F}\u{2838A}\u35CA\u{28468}\u{286AA}\u48FA\u63E6\u{28956}\u7808\u9255\u{289B8}\u43F2\u{289E7}\u43DF\u{289E8}\u{28B46}\u{28BD4}\u59F8\u{28C09}\u8F0B\u{28FC5}\u{290EC}\u7B51\u{29110}\u{2913C}\u3DF7\u{2915E}\u{24ACA}\u8FD0\u728F\u568B\u{294E7}\u{295E9}\u{295B0}\u{295B8}\u{29732}\u{298D1}\u{29949}\u{2996A}\u{299C3}\u{29A28}\u{29B0E}\u{29D5A}\u{29D9B}\u7E9F\u{29EF8}\u{29F23}\u4CA4\u9547\u{2A293}\u71A2\u{2A2FF}\u4D91\u9012\u{2A5CB}\u4D9C\u{20C9C}\u8FBE\u55C1"],
      ["9da1", "\u8FBA\u{224B0}\u8FB9\u{24A93}\u4509\u7E7F\u6F56\u6AB1\u4EEA\u34E4\u{28B2C}\u{2789D}\u373A\u8E80\u{217F5}\u{28024}\u{28B6C}\u{28B99}\u{27A3E}\u{266AF}\u3DEB\u{27655}\u{23CB7}\u{25635}\u{25956}\u4E9A\u{25E81}\u{26258}\u56BF\u{20E6D}\u8E0E\u5B6D\u{23E88}\u{24C9E}\u63DE\u62D0\u{217F6}\u{2187B}\u6530\u562D\u{25C4A}\u541A\u{25311}\u3DC6\u{29D98}\u4C7D\u5622\u561E\u7F49\u{25ED8}\u5975\u{23D40}\u8770\u4E1C\u{20FEA}\u{20D49}\u{236BA}\u8117\u9D5E\u8D18\u763B\u9C45\u764E\u77B9\u9345\u5432\u8148\u82F7\u5625\u8132\u8418\u80BD\u55EA\u7962\u5643\u5416\u{20E9D}\u35CE\u5605\u55F1\u66F1\u{282E2}\u362D\u7534\u55F0\u55BA\u5497\u5572\u{20C41}\u{20C96}\u5ED0\u{25148}\u{20E76}\u{22C62}"],
      ["9e40", "\u{20EA2}\u9EAB\u7D5A\u55DE\u{21075}\u629D\u976D\u5494\u8CCD\u71F6\u9176\u63FC\u63B9\u63FE\u5569\u{22B43}\u9C72\u{22EB3}\u519A\u34DF\u{20DA7}\u51A7\u544D\u551E\u5513\u7666\u8E2D\u{2688A}\u75B1\u80B6\u8804\u8786\u88C7\u81B6\u841C\u{210C1}\u44EC\u7304\u{24706}\u5B90\u830B\u{26893}\u567B\u{226F4}\u{27D2F}\u{241A3}\u{27D73}\u{26ED0}\u{272B6}\u9170\u{211D9}\u9208\u{23CFC}\u{2A6A9}\u{20EAC}\u{20EF9}\u7266\u{21CA2}\u474E\u{24FC2}\u{27FF9}\u{20FEB}\u40FA"],
      ["9ea1", "\u9C5D\u651F\u{22DA0}\u48F3\u{247E0}\u{29D7C}\u{20FEC}\u{20E0A}\u6062\u{275A3}\u{20FED}"],
      ["9ead", "\u{26048}\u{21187}\u71A3\u7E8E\u9D50\u4E1A\u4E04\u3577\u5B0D\u6CB2\u5367\u36AC\u39DC\u537D\u36A5\u{24618}\u589A\u{24B6E}\u822D\u544B\u57AA\u{25A95}\u{20979}"],
      ["9ec5", "\u3A52\u{22465}\u7374\u{29EAC}\u4D09\u9BED\u{23CFE}\u{29F30}\u4C5B\u{24FA9}\u{2959E}\u{29FDE}\u845C\u{23DB6}\u{272B2}\u{267B3}\u{23720}\u632E\u7D25\u{23EF7}\u{23E2C}\u3A2A\u9008\u52CC\u3E74\u367A\u45E9\u{2048E}\u7640\u5AF0\u{20EB6}\u787A\u{27F2E}\u58A7\u40BF\u567C\u9B8B\u5D74\u7654\u{2A434}\u9E85\u4CE1\u75F9\u37FB\u6119\u{230DA}\u{243F2}"],
      ["9ef5", "\u565D\u{212A9}\u57A7\u{24963}\u{29E06}\u5234\u{270AE}\u35AD\u6C4A\u9D7C"],
      ["9f40", "\u7C56\u9B39\u57DE\u{2176C}\u5C53\u64D3\u{294D0}\u{26335}\u{27164}\u86AD\u{20D28}\u{26D22}\u{24AE2}\u{20D71}"],
      ["9f4f", "\u51FE\u{21F0F}\u5D8E\u9703\u{21DD1}\u9E81\u904C\u7B1F\u9B02\u5CD1\u7BA3\u6268\u6335\u9AFF\u7BCF\u9B2A\u7C7E\u9B2E\u7C42\u7C86\u9C15\u7BFC\u9B09\u9F17\u9C1B\u{2493E}\u9F5A\u5573\u5BC3\u4FFD\u9E98\u4FF2\u5260\u3E06\u52D1\u5767\u5056\u59B7\u5E12\u97C8\u9DAB\u8F5C\u5469\u97B4\u9940\u97BA\u532C\u6130"],
      ["9fa1", "\u692C\u53DA\u9C0A\u9D02\u4C3B\u9641\u6980\u50A6\u7546\u{2176D}\u99DA\u5273"],
      ["9fae", "\u9159\u9681\u915C"],
      ["9fb2", "\u9151\u{28E97}\u637F\u{26D23}\u6ACA\u5611\u918E\u757A\u6285\u{203FC}\u734F\u7C70\u{25C21}\u{23CFD}"],
      ["9fc1", "\u{24919}\u76D6\u9B9D\u4E2A\u{20CD4}\u83BE\u8842"],
      ["9fc9", "\u5C4A\u69C0\u50ED\u577A\u521F\u5DF5\u4ECE\u6C31\u{201F2}\u4F39\u549C\u54DA\u529A\u8D82\u35FE\u5F0C\u35F3"],
      ["9fdb", "\u6B52\u917C\u9FA5\u9B97\u982E\u98B4\u9ABA\u9EA8\u9E84\u717A\u7B14"],
      ["9fe7", "\u6BFA\u8818\u7F78"],
      ["9feb", "\u5620\u{2A64A}\u8E77\u9F53"],
      ["9ff0", "\u8DD4\u8E4F\u9E1C\u8E01\u6282\u{2837D}\u8E28\u8E75\u7AD3\u{24A77}\u7A3E\u78D8\u6CEA\u8A67\u7607"],
      ["a040", "\u{28A5A}\u9F26\u6CCE\u87D6\u75C3\u{2A2B2}\u7853\u{2F840}\u8D0C\u72E2\u7371\u8B2D\u7302\u74F1\u8CEB\u{24ABB}\u862F\u5FBA\u88A0\u44B7"],
      ["a055", "\u{2183B}\u{26E05}"],
      ["a058", "\u8A7E\u{2251B}"],
      ["a05b", "\u60FD\u7667\u9AD7\u9D44\u936E\u9B8F\u87F5"],
      ["a063", "\u880F\u8CF7\u732C\u9721\u9BB0\u35D6\u72B2\u4C07\u7C51\u994A\u{26159}\u6159\u4C04\u9E96\u617D"],
      ["a073", "\u575F\u616F\u62A6\u6239\u62CE\u3A5C\u61E2\u53AA\u{233F5}\u6364\u6802\u35D2"],
      ["a0a1", "\u5D57\u{28BC2}\u8FDA\u{28E39}"],
      ["a0a6", "\u50D9\u{21D46}\u7906\u5332\u9638\u{20F3B}\u4065"],
      ["a0ae", "\u77FE"],
      ["a0b0", "\u7CC2\u{25F1A}\u7CDA\u7A2D\u8066\u8063\u7D4D\u7505\u74F2\u8994\u821A\u670C\u8062\u{27486}\u805B\u74F0\u8103\u7724\u8989\u{267CC}\u7553\u{26ED1}\u87A9\u87CE\u81C8\u878C\u8A49\u8CAD\u8B43\u772B\u74F8\u84DA\u3635\u69B2\u8DA6"],
      ["a0d4", "\u89A9\u7468\u6DB9\u87C1\u{24011}\u74E7\u3DDB\u7176\u60A4\u619C\u3CD1\u7162\u6077"],
      ["a0e2", "\u7F71\u{28B2D}\u7250\u60E9\u4B7E\u5220\u3C18\u{23CC7}\u{25ED7}\u{27656}\u{25531}\u{21944}\u{212FE}\u{29903}\u{26DDC}\u{270AD}\u5CC1\u{261AD}\u{28A0F}\u{23677}\u{200EE}\u{26846}\u{24F0E}\u4562\u5B1F\u{2634C}\u9F50\u9EA6\u{2626B}"],
      ["a3c0", "\u2400", 31, "\u2421"],
      ["c6a1", "\u2460", 9, "\u2474", 9, "\u2170", 9, "\u4E36\u4E3F\u4E85\u4EA0\u5182\u5196\u51AB\u52F9\u5338\u5369\u53B6\u590A\u5B80\u5DDB\u2F33\u5E7F\u5EF4\u5F50\u5F61\u6534\u65E0\u7592\u7676\u8FB5\u96B6\xA8\u02C6\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\uFF3B\uFF3D\u273D\u3041", 23],
      ["c740", "\u3059", 58, "\u30A1\u30A2\u30A3\u30A4"],
      ["c7a1", "\u30A5", 81, "\u0410", 5, "\u0401\u0416", 4],
      ["c840", "\u041B", 26, "\u0451\u0436", 25, "\u21E7\u21B8\u21B9\u31CF\u{200CC}\u4E5A\u{2008A}\u5202\u4491"],
      ["c8a1", "\u9FB0\u5188\u9FB1\u{27607}"],
      ["c8cd", "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u309B\u309C\u2E80\u2E84\u2E86\u2E87\u2E88\u2E8A\u2E8C\u2E8D\u2E95\u2E9C\u2E9D\u2EA5\u2EA7\u2EAA\u2EAC\u2EAE\u2EB6\u2EBC\u2EBE\u2EC6\u2ECA\u2ECC\u2ECD\u2ECF\u2ED6\u2ED7\u2EDE\u2EE3"],
      ["c8f5", "\u0283\u0250\u025B\u0254\u0275\u0153\xF8\u014B\u028A\u026A"],
      ["f9fe", "\uFFED"],
      ["fa40", "\u{20547}\u92DB\u{205DF}\u{23FC5}\u854C\u42B5\u73EF\u51B5\u3649\u{24942}\u{289E4}\u9344\u{219DB}\u82EE\u{23CC8}\u783C\u6744\u62DF\u{24933}\u{289AA}\u{202A0}\u{26BB3}\u{21305}\u4FAB\u{224ED}\u5008\u{26D29}\u{27A84}\u{23600}\u{24AB1}\u{22513}\u5029\u{2037E}\u5FA4\u{20380}\u{20347}\u6EDB\u{2041F}\u507D\u5101\u347A\u510E\u986C\u3743\u8416\u{249A4}\u{20487}\u5160\u{233B4}\u516A\u{20BFF}\u{220FC}\u{202E5}\u{22530}\u{2058E}\u{23233}\u{21983}\u5B82\u877D\u{205B3}\u{23C99}\u51B2\u51B8"],
      ["faa1", "\u9D34\u51C9\u51CF\u51D1\u3CDC\u51D3\u{24AA6}\u51B3\u51E2\u5342\u51ED\u83CD\u693E\u{2372D}\u5F7B\u520B\u5226\u523C\u52B5\u5257\u5294\u52B9\u52C5\u7C15\u8542\u52E0\u860D\u{26B13}\u5305\u{28ADE}\u5549\u6ED9\u{23F80}\u{20954}\u{23FEC}\u5333\u5344\u{20BE2}\u6CCB\u{21726}\u681B\u73D5\u604A\u3EAA\u38CC\u{216E8}\u71DD\u44A2\u536D\u5374\u{286AB}\u537E\u537F\u{21596}\u{21613}\u77E6\u5393\u{28A9B}\u53A0\u53AB\u53AE\u73A7\u{25772}\u3F59\u739C\u53C1\u53C5\u6C49\u4E49\u57FE\u53D9\u3AAB\u{20B8F}\u53E0\u{23FEB}\u{22DA3}\u53F6\u{20C77}\u5413\u7079\u552B\u6657\u6D5B\u546D\u{26B53}\u{20D74}\u555D\u548F\u54A4\u47A6\u{2170D}\u{20EDD}\u3DB4\u{20D4D}"],
      ["fb40", "\u{289BC}\u{22698}\u5547\u4CED\u542F\u7417\u5586\u55A9\u5605\u{218D7}\u{2403A}\u4552\u{24435}\u66B3\u{210B4}\u5637\u66CD\u{2328A}\u66A4\u66AD\u564D\u564F\u78F1\u56F1\u9787\u53FE\u5700\u56EF\u56ED\u{28B66}\u3623\u{2124F}\u5746\u{241A5}\u6C6E\u708B\u5742\u36B1\u{26C7E}\u57E6\u{21416}\u5803\u{21454}\u{24363}\u5826\u{24BF5}\u585C\u58AA\u3561\u58E0\u58DC\u{2123C}\u58FB\u5BFF\u5743\u{2A150}\u{24278}\u93D3\u35A1\u591F\u68A6\u36C3\u6E59"],
      ["fba1", "\u{2163E}\u5A24\u5553\u{21692}\u8505\u59C9\u{20D4E}\u{26C81}\u{26D2A}\u{217DC}\u59D9\u{217FB}\u{217B2}\u{26DA6}\u6D71\u{21828}\u{216D5}\u59F9\u{26E45}\u5AAB\u5A63\u36E6\u{249A9}\u5A77\u3708\u5A96\u7465\u5AD3\u{26FA1}\u{22554}\u3D85\u{21911}\u3732\u{216B8}\u5E83\u52D0\u5B76\u6588\u5B7C\u{27A0E}\u4004\u485D\u{20204}\u5BD5\u6160\u{21A34}\u{259CC}\u{205A5}\u5BF3\u5B9D\u4D10\u5C05\u{21B44}\u5C13\u73CE\u5C14\u{21CA5}\u{26B28}\u5C49\u48DD\u5C85\u5CE9\u5CEF\u5D8B\u{21DF9}\u{21E37}\u5D10\u5D18\u5D46\u{21EA4}\u5CBA\u5DD7\u82FC\u382D\u{24901}\u{22049}\u{22173}\u8287\u3836\u3BC2\u5E2E\u6A8A\u5E75\u5E7A\u{244BC}\u{20CD3}\u53A6\u4EB7\u5ED0\u53A8\u{21771}\u5E09\u5EF4\u{28482}"],
      ["fc40", "\u5EF9\u5EFB\u38A0\u5EFC\u683E\u941B\u5F0D\u{201C1}\u{2F894}\u3ADE\u48AE\u{2133A}\u5F3A\u{26888}\u{223D0}\u5F58\u{22471}\u5F63\u97BD\u{26E6E}\u5F72\u9340\u{28A36}\u5FA7\u5DB6\u3D5F\u{25250}\u{21F6A}\u{270F8}\u{22668}\u91D6\u{2029E}\u{28A29}\u6031\u6685\u{21877}\u3963\u3DC7\u3639\u5790\u{227B4}\u7971\u3E40\u609E\u60A4\u60B3\u{24982}\u{2498F}\u{27A53}\u74A4\u50E1\u5AA0\u6164\u8424\u6142\u{2F8A6}\u{26ED2}\u6181\u51F4\u{20656}\u6187\u5BAA\u{23FB7}"],
      ["fca1", "\u{2285F}\u61D3\u{28B9D}\u{2995D}\u61D0\u3932\u{22980}\u{228C1}\u6023\u615C\u651E\u638B\u{20118}\u62C5\u{21770}\u62D5\u{22E0D}\u636C\u{249DF}\u3A17\u6438\u63F8\u{2138E}\u{217FC}\u6490\u6F8A\u{22E36}\u9814\u{2408C}\u{2571D}\u64E1\u64E5\u947B\u3A66\u643A\u3A57\u654D\u6F16\u{24A28}\u{24A23}\u6585\u656D\u655F\u{2307E}\u65B5\u{24940}\u4B37\u65D1\u40D8\u{21829}\u65E0\u65E3\u5FDF\u{23400}\u6618\u{231F7}\u{231F8}\u6644\u{231A4}\u{231A5}\u664B\u{20E75}\u6667\u{251E6}\u6673\u6674\u{21E3D}\u{23231}\u{285F4}\u{231C8}\u{25313}\u77C5\u{228F7}\u99A4\u6702\u{2439C}\u{24A21}\u3B2B\u69FA\u{237C2}\u675E\u6767\u6762\u{241CD}\u{290ED}\u67D7\u44E9\u6822\u6E50\u923C\u6801\u{233E6}\u{26DA0}\u685D"],
      ["fd40", "\u{2346F}\u69E1\u6A0B\u{28ADF}\u6973\u68C3\u{235CD}\u6901\u6900\u3D32\u3A01\u{2363C}\u3B80\u67AC\u6961\u{28A4A}\u42FC\u6936\u6998\u3BA1\u{203C9}\u8363\u5090\u69F9\u{23659}\u{2212A}\u6A45\u{23703}\u6A9D\u3BF3\u67B1\u6AC8\u{2919C}\u3C0D\u6B1D\u{20923}\u60DE\u6B35\u6B74\u{227CD}\u6EB5\u{23ADB}\u{203B5}\u{21958}\u3740\u5421\u{23B5A}\u6BE1\u{23EFC}\u6BDC\u6C37\u{2248B}\u{248F1}\u{26B51}\u6C5A\u8226\u6C79\u{23DBC}\u44C5\u{23DBD}\u{241A4}\u{2490C}\u{24900}"],
      ["fda1", "\u{23CC9}\u36E5\u3CEB\u{20D32}\u9B83\u{231F9}\u{22491}\u7F8F\u6837\u{26D25}\u{26DA1}\u{26DEB}\u6D96\u6D5C\u6E7C\u6F04\u{2497F}\u{24085}\u{26E72}\u8533\u{26F74}\u51C7\u6C9C\u6E1D\u842E\u{28B21}\u6E2F\u{23E2F}\u7453\u{23F82}\u79CC\u6E4F\u5A91\u{2304B}\u6FF8\u370D\u6F9D\u{23E30}\u6EFA\u{21497}\u{2403D}\u4555\u93F0\u6F44\u6F5C\u3D4E\u6F74\u{29170}\u3D3B\u6F9F\u{24144}\u6FD3\u{24091}\u{24155}\u{24039}\u{23FF0}\u{23FB4}\u{2413F}\u51DF\u{24156}\u{24157}\u{24140}\u{261DD}\u704B\u707E\u70A7\u7081\u70CC\u70D5\u70D6\u70DF\u4104\u3DE8\u71B4\u7196\u{24277}\u712B\u7145\u5A88\u714A\u716E\u5C9C\u{24365}\u714F\u9362\u{242C1}\u712C\u{2445A}\u{24A27}\u{24A22}\u71BA\u{28BE8}\u70BD\u720E"],
      ["fe40", "\u9442\u7215\u5911\u9443\u7224\u9341\u{25605}\u722E\u7240\u{24974}\u68BD\u7255\u7257\u3E55\u{23044}\u680D\u6F3D\u7282\u732A\u732B\u{24823}\u{2882B}\u48ED\u{28804}\u7328\u732E\u73CF\u73AA\u{20C3A}\u{26A2E}\u73C9\u7449\u{241E2}\u{216E7}\u{24A24}\u6623\u36C5\u{249B7}\u{2498D}\u{249FB}\u73F7\u7415\u6903\u{24A26}\u7439\u{205C3}\u3ED7\u745C\u{228AD}\u7460\u{28EB2}\u7447\u73E4\u7476\u83B9\u746C\u3730\u7474\u93F1\u6A2C\u7482\u4953\u{24A8C}"],
      ["fea1", "\u{2415F}\u{24A79}\u{28B8F}\u5B46\u{28C03}\u{2189E}\u74C8\u{21988}\u750E\u74E9\u751E\u{28ED9}\u{21A4B}\u5BD7\u{28EAC}\u9385\u754D\u754A\u7567\u756E\u{24F82}\u3F04\u{24D13}\u758E\u745D\u759E\u75B4\u7602\u762C\u7651\u764F\u766F\u7676\u{263F5}\u7690\u81EF\u37F8\u{26911}\u{2690E}\u76A1\u76A5\u76B7\u76CC\u{26F9F}\u8462\u{2509D}\u{2517D}\u{21E1C}\u771E\u7726\u7740\u64AF\u{25220}\u7758\u{232AC}\u77AF\u{28964}\u{28968}\u{216C1}\u77F4\u7809\u{21376}\u{24A12}\u68CA\u78AF\u78C7\u78D3\u96A5\u792E\u{255E0}\u78D7\u7934\u78B1\u{2760C}\u8FB8\u8884\u{28B2B}\u{26083}\u{2261C}\u7986\u8900\u6902\u7980\u{25857}\u799D\u{27B39}\u793C\u79A9\u6E2A\u{27126}\u3EA8\u79C6\u{2910D}\u79D4"]
    ];
  }
});

// ../../node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS({
  "../../node_modules/iconv-lite/encodings/dbcs-data.js"(exports, module) {
    "use strict";
    module.exports = {
      // == Japanese/ShiftJIS ====================================================
      // All japanese encodings are based on JIS X set of standards:
      // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
      // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
      //              Has several variations in 1978, 1983, 1990 and 1997.
      // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
      // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
      //              2 planes, first is superset of 0208, second - revised 0212.
      //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)
      // Byte encodings are:
      //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
      //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
      //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
      //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
      //               0x00-0x7F       - lower part of 0201
      //               0x8E, 0xA1-0xDF - upper part of 0201
      //               (0xA1-0xFE)x2   - 0208 plane (94x94).
      //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
      //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
      //               Used as-is in ISO2022 family.
      //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
      //                0201-1976 Roman, 0208-1978, 0208-1983.
      //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
      //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
      //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
      //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
      //
      // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
      //
      // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html
      "shiftjis": {
        type: "_dbcs",
        table: function() {
          return require_shiftjis();
        },
        encodeAdd: { "\xA5": 92, "\u203E": 126 },
        encodeSkipVals: [{ from: 60736, to: 63808 }]
      },
      "csshiftjis": "shiftjis",
      "mskanji": "shiftjis",
      "sjis": "shiftjis",
      "windows31j": "shiftjis",
      "ms31j": "shiftjis",
      "xsjis": "shiftjis",
      "windows932": "shiftjis",
      "ms932": "shiftjis",
      "932": "shiftjis",
      "cp932": "shiftjis",
      "eucjp": {
        type: "_dbcs",
        table: function() {
          return require_eucjp();
        },
        encodeAdd: { "\xA5": 92, "\u203E": 126 }
      },
      // TODO: KDDI extension to Shift_JIS
      // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
      // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.
      // == Chinese/GBK ==========================================================
      // http://en.wikipedia.org/wiki/GBK
      // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder
      // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
      "gb2312": "cp936",
      "gb231280": "cp936",
      "gb23121980": "cp936",
      "csgb2312": "cp936",
      "csiso58gb231280": "cp936",
      "euccn": "cp936",
      // Microsoft's CP936 is a subset and approximation of GBK.
      "windows936": "cp936",
      "ms936": "cp936",
      "936": "cp936",
      "cp936": {
        type: "_dbcs",
        table: function() {
          return require_cp936();
        }
      },
      // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
      "gbk": {
        type: "_dbcs",
        table: function() {
          return require_cp936().concat(require_gbk_added());
        }
      },
      "xgbk": "gbk",
      "isoir58": "gbk",
      // GB18030 is an algorithmic extension of GBK.
      // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
      // http://icu-project.org/docs/papers/gb18030.html
      // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
      // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
      "gb18030": {
        type: "_dbcs",
        table: function() {
          return require_cp936().concat(require_gbk_added());
        },
        gb18030: function() {
          return require_gb18030_ranges();
        },
        encodeSkipVals: [128],
        encodeAdd: { "\u20AC": 41699 }
      },
      "chinese": "gb18030",
      // == Korean ===============================================================
      // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
      "windows949": "cp949",
      "ms949": "cp949",
      "949": "cp949",
      "cp949": {
        type: "_dbcs",
        table: function() {
          return require_cp949();
        }
      },
      "cseuckr": "cp949",
      "csksc56011987": "cp949",
      "euckr": "cp949",
      "isoir149": "cp949",
      "korean": "cp949",
      "ksc56011987": "cp949",
      "ksc56011989": "cp949",
      "ksc5601": "cp949",
      // == Big5/Taiwan/Hong Kong ================================================
      // There are lots of tables for Big5 and cp950. Please see the following links for history:
      // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
      // Variations, in roughly number of defined chars:
      //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
      //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
      //  * Big5-2003 (Taiwan standard) almost superset of cp950.
      //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
      //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
      //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
      //    Plus, it has 4 combining sequences.
      //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
      //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
      //    Implementations are not consistent within browsers; sometimes labeled as just big5.
      //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
      //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
      //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
      //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
      //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
      // 
      // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
      // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
      "windows950": "cp950",
      "ms950": "cp950",
      "950": "cp950",
      "cp950": {
        type: "_dbcs",
        table: function() {
          return require_cp950();
        }
      },
      // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
      "big5": "big5hkscs",
      "big5hkscs": {
        type: "_dbcs",
        table: function() {
          return require_cp950().concat(require_big5_added());
        },
        encodeSkipVals: [41676]
      },
      "cnbig5": "big5hkscs",
      "csbig5": "big5hkscs",
      "xxbig5": "big5hkscs"
    };
  }
});

// ../../node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS({
  "../../node_modules/iconv-lite/encodings/index.js"(exports, module) {
    "use strict";
    var modules = [
      require_internal(),
      require_utf16(),
      require_utf7(),
      require_sbcs_codec(),
      require_sbcs_data(),
      require_sbcs_data_generated(),
      require_dbcs_codec(),
      require_dbcs_data()
    ];
    for (i = 0; i < modules.length; i++) {
      module = modules[i];
      for (enc in module)
        if (Object.prototype.hasOwnProperty.call(module, enc))
          exports[enc] = module[enc];
    }
    var module;
    var enc;
    var i;
  }
});

// ../../node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS({
  "../../node_modules/iconv-lite/lib/streams.js"(exports, module) {
    "use strict";
    var Buffer3 = __require("buffer").Buffer;
    var Transform = __require("stream").Transform;
    module.exports = function(iconv) {
      iconv.encodeStream = function encodeStream(encoding, options) {
        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
      };
      iconv.decodeStream = function decodeStream(encoding, options) {
        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
      };
      iconv.supportsStreams = true;
      iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
      iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
      iconv._collect = IconvLiteDecoderStream.prototype.collect;
    };
    function IconvLiteEncoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.decodeStrings = false;
      Transform.call(this, options);
    }
    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteEncoderStream }
    });
    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
      if (typeof chunk != "string")
        return done(new Error("Iconv encoding stream needs strings as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length) this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype.collect = function(cb) {
      var chunks = [];
      this.on("error", cb);
      this.on("data", function(chunk) {
        chunks.push(chunk);
      });
      this.on("end", function() {
        cb(null, Buffer3.concat(chunks));
      });
      return this;
    };
    function IconvLiteDecoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.encoding = this.encoding = "utf8";
      Transform.call(this, options);
    }
    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteDecoderStream }
    });
    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
      if (!Buffer3.isBuffer(chunk))
        return done(new Error("Iconv decoding stream needs buffers as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length) this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype.collect = function(cb) {
      var res = "";
      this.on("error", cb);
      this.on("data", function(chunk) {
        res += chunk;
      });
      this.on("end", function() {
        cb(null, res);
      });
      return this;
    };
  }
});

// ../../node_modules/iconv-lite/lib/extend-node.js
var require_extend_node = __commonJS({
  "../../node_modules/iconv-lite/lib/extend-node.js"(exports, module) {
    "use strict";
    var Buffer3 = __require("buffer").Buffer;
    module.exports = function(iconv) {
      var original = void 0;
      iconv.supportsNodeEncodingsExtension = !(Buffer3.from || new Buffer3(0) instanceof Uint8Array);
      iconv.extendNodeEncodings = function extendNodeEncodings() {
        if (original) return;
        original = {};
        if (!iconv.supportsNodeEncodingsExtension) {
          console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
          console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
          return;
        }
        var nodeNativeEncodings = {
          "hex": true,
          "utf8": true,
          "utf-8": true,
          "ascii": true,
          "binary": true,
          "base64": true,
          "ucs2": true,
          "ucs-2": true,
          "utf16le": true,
          "utf-16le": true
        };
        Buffer3.isNativeEncoding = function(enc) {
          return enc && nodeNativeEncodings[enc.toLowerCase()];
        };
        var SlowBuffer = __require("buffer").SlowBuffer;
        original.SlowBufferToString = SlowBuffer.prototype.toString;
        SlowBuffer.prototype.toString = function(encoding, start, end) {
          encoding = String(encoding || "utf8").toLowerCase();
          if (Buffer3.isNativeEncoding(encoding))
            return original.SlowBufferToString.call(this, encoding, start, end);
          if (typeof start == "undefined") start = 0;
          if (typeof end == "undefined") end = this.length;
          return iconv.decode(this.slice(start, end), encoding);
        };
        original.SlowBufferWrite = SlowBuffer.prototype.write;
        SlowBuffer.prototype.write = function(string, offset, length, encoding) {
          if (isFinite(offset)) {
            if (!isFinite(length)) {
              encoding = length;
              length = void 0;
            }
          } else {
            var swap = encoding;
            encoding = offset;
            offset = length;
            length = swap;
          }
          offset = +offset || 0;
          var remaining = this.length - offset;
          if (!length) {
            length = remaining;
          } else {
            length = +length;
            if (length > remaining) {
              length = remaining;
            }
          }
          encoding = String(encoding || "utf8").toLowerCase();
          if (Buffer3.isNativeEncoding(encoding))
            return original.SlowBufferWrite.call(this, string, offset, length, encoding);
          if (string.length > 0 && (length < 0 || offset < 0))
            throw new RangeError("attempt to write beyond buffer bounds");
          var buf = iconv.encode(string, encoding);
          if (buf.length < length) length = buf.length;
          buf.copy(this, offset, 0, length);
          return length;
        };
        original.BufferIsEncoding = Buffer3.isEncoding;
        Buffer3.isEncoding = function(encoding) {
          return Buffer3.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
        };
        original.BufferByteLength = Buffer3.byteLength;
        Buffer3.byteLength = SlowBuffer.byteLength = function(str, encoding) {
          encoding = String(encoding || "utf8").toLowerCase();
          if (Buffer3.isNativeEncoding(encoding))
            return original.BufferByteLength.call(this, str, encoding);
          return iconv.encode(str, encoding).length;
        };
        original.BufferToString = Buffer3.prototype.toString;
        Buffer3.prototype.toString = function(encoding, start, end) {
          encoding = String(encoding || "utf8").toLowerCase();
          if (Buffer3.isNativeEncoding(encoding))
            return original.BufferToString.call(this, encoding, start, end);
          if (typeof start == "undefined") start = 0;
          if (typeof end == "undefined") end = this.length;
          return iconv.decode(this.slice(start, end), encoding);
        };
        original.BufferWrite = Buffer3.prototype.write;
        Buffer3.prototype.write = function(string, offset, length, encoding) {
          var _offset = offset, _length = length, _encoding = encoding;
          if (isFinite(offset)) {
            if (!isFinite(length)) {
              encoding = length;
              length = void 0;
            }
          } else {
            var swap = encoding;
            encoding = offset;
            offset = length;
            length = swap;
          }
          encoding = String(encoding || "utf8").toLowerCase();
          if (Buffer3.isNativeEncoding(encoding))
            return original.BufferWrite.call(this, string, _offset, _length, _encoding);
          offset = +offset || 0;
          var remaining = this.length - offset;
          if (!length) {
            length = remaining;
          } else {
            length = +length;
            if (length > remaining) {
              length = remaining;
            }
          }
          if (string.length > 0 && (length < 0 || offset < 0))
            throw new RangeError("attempt to write beyond buffer bounds");
          var buf = iconv.encode(string, encoding);
          if (buf.length < length) length = buf.length;
          buf.copy(this, offset, 0, length);
          return length;
        };
        if (iconv.supportsStreams) {
          var Readable = __require("stream").Readable;
          original.ReadableSetEncoding = Readable.prototype.setEncoding;
          Readable.prototype.setEncoding = function setEncoding(enc, options) {
            this._readableState.decoder = iconv.getDecoder(enc, options);
            this._readableState.encoding = enc;
          };
          Readable.prototype.collect = iconv._collect;
        }
      };
      iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
        if (!iconv.supportsNodeEncodingsExtension)
          return;
        if (!original)
          throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");
        delete Buffer3.isNativeEncoding;
        var SlowBuffer = __require("buffer").SlowBuffer;
        SlowBuffer.prototype.toString = original.SlowBufferToString;
        SlowBuffer.prototype.write = original.SlowBufferWrite;
        Buffer3.isEncoding = original.BufferIsEncoding;
        Buffer3.byteLength = original.BufferByteLength;
        Buffer3.prototype.toString = original.BufferToString;
        Buffer3.prototype.write = original.BufferWrite;
        if (iconv.supportsStreams) {
          var Readable = __require("stream").Readable;
          Readable.prototype.setEncoding = original.ReadableSetEncoding;
          delete Readable.prototype.collect;
        }
        original = void 0;
      };
    };
  }
});

// ../../node_modules/iconv-lite/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/iconv-lite/lib/index.js"(exports, module) {
    "use strict";
    var Buffer3 = require_safer().Buffer;
    var bomHandling = require_bom_handling();
    var iconv = module.exports;
    iconv.encodings = null;
    iconv.defaultCharUnicode = "\uFFFD";
    iconv.defaultCharSingleByte = "?";
    iconv.encode = function encode(str, encoding, options) {
      str = "" + (str || "");
      var encoder = iconv.getEncoder(encoding, options);
      var res = encoder.write(str);
      var trail = encoder.end();
      return trail && trail.length > 0 ? Buffer3.concat([res, trail]) : res;
    };
    iconv.decode = function decode(buf, encoding, options) {
      if (typeof buf === "string") {
        if (!iconv.skipDecodeWarning) {
          console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
          iconv.skipDecodeWarning = true;
        }
        buf = Buffer3.from("" + (buf || ""), "binary");
      }
      var decoder = iconv.getDecoder(encoding, options);
      var res = decoder.write(buf);
      var trail = decoder.end();
      return trail ? res + trail : res;
    };
    iconv.encodingExists = function encodingExists(enc) {
      try {
        iconv.getCodec(enc);
        return true;
      } catch (e) {
        return false;
      }
    };
    iconv.toEncoding = iconv.encode;
    iconv.fromEncoding = iconv.decode;
    iconv._codecDataCache = {};
    iconv.getCodec = function getCodec(encoding) {
      if (!iconv.encodings)
        iconv.encodings = require_encodings();
      var enc = iconv._canonicalizeEncoding(encoding);
      var codecOptions = {};
      while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec)
          return codec;
        var codecDef = iconv.encodings[enc];
        switch (typeof codecDef) {
          case "string":
            enc = codecDef;
            break;
          case "object":
            for (var key in codecDef)
              codecOptions[key] = codecDef[key];
            if (!codecOptions.encodingName)
              codecOptions.encodingName = enc;
            enc = codecDef.type;
            break;
          case "function":
            if (!codecOptions.encodingName)
              codecOptions.encodingName = enc;
            codec = new codecDef(codecOptions, iconv);
            iconv._codecDataCache[codecOptions.encodingName] = codec;
            return codec;
          default:
            throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
        }
      }
    };
    iconv._canonicalizeEncoding = function(encoding) {
      return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
    };
    iconv.getEncoder = function getEncoder(encoding, options) {
      var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
      if (codec.bomAware && options && options.addBOM)
        encoder = new bomHandling.PrependBOM(encoder, options);
      return encoder;
    };
    iconv.getDecoder = function getDecoder(encoding, options) {
      var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
      if (codec.bomAware && !(options && options.stripBOM === false))
        decoder = new bomHandling.StripBOM(decoder, options);
      return decoder;
    };
    var nodeVer = typeof process !== "undefined" && process.versions && process.versions.node;
    if (nodeVer) {
      nodeVerArr = nodeVer.split(".").map(Number);
      if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
        require_streams()(iconv);
      }
      require_extend_node()(iconv);
    }
    var nodeVerArr;
    if (false) {
      console.error("iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
    }
  }
});

// ../../node_modules/unpipe/index.js
var require_unpipe = __commonJS({
  "../../node_modules/unpipe/index.js"(exports, module) {
    "use strict";
    module.exports = unpipe;
    function hasPipeDataListeners(stream2) {
      var listeners = stream2.listeners("data");
      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i].name === "ondata") {
          return true;
        }
      }
      return false;
    }
    function unpipe(stream2) {
      if (!stream2) {
        throw new TypeError("argument stream is required");
      }
      if (typeof stream2.unpipe === "function") {
        stream2.unpipe();
        return;
      }
      if (!hasPipeDataListeners(stream2)) {
        return;
      }
      var listener;
      var listeners = stream2.listeners("close");
      for (var i = 0; i < listeners.length; i++) {
        listener = listeners[i];
        if (listener.name !== "cleanup" && listener.name !== "onclose") {
          continue;
        }
        listener.call(stream2);
      }
    }
  }
});

// ../../node_modules/raw-body/index.js
var require_raw_body = __commonJS({
  "../../node_modules/raw-body/index.js"(exports, module) {
    "use strict";
    var asyncHooks = tryRequireAsyncHooks();
    var bytes = require_bytes();
    var createError = require_http_errors();
    var iconv = require_lib();
    var unpipe = require_unpipe();
    module.exports = getRawBody;
    var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;
    function getDecoder(encoding) {
      if (!encoding) return null;
      try {
        return iconv.getDecoder(encoding);
      } catch (e) {
        if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e;
        throw createError(415, "specified encoding unsupported", {
          encoding,
          type: "encoding.unsupported"
        });
      }
    }
    function getRawBody(stream2, options, callback) {
      var done = callback;
      var opts = options || {};
      if (stream2 === void 0) {
        throw new TypeError("argument stream is required");
      } else if (typeof stream2 !== "object" || stream2 === null || typeof stream2.on !== "function") {
        throw new TypeError("argument stream must be a stream");
      }
      if (options === true || typeof options === "string") {
        opts = {
          encoding: options
        };
      }
      if (typeof options === "function") {
        done = options;
        opts = {};
      }
      if (done !== void 0 && typeof done !== "function") {
        throw new TypeError("argument callback must be a function");
      }
      if (!done && !global.Promise) {
        throw new TypeError("argument callback is required");
      }
      var encoding = opts.encoding !== true ? opts.encoding : "utf-8";
      var limit = bytes.parse(opts.limit);
      var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;
      if (done) {
        return readStream(stream2, encoding, length, limit, wrap(done));
      }
      return new Promise(function executor(resolve, reject) {
        readStream(stream2, encoding, length, limit, function onRead(err, buf) {
          if (err) return reject(err);
          resolve(buf);
        });
      });
    }
    function halt(stream2) {
      unpipe(stream2);
      if (typeof stream2.pause === "function") {
        stream2.pause();
      }
    }
    function readStream(stream2, encoding, length, limit, callback) {
      var complete = false;
      var sync = true;
      if (limit !== null && length !== null && length > limit) {
        return done(createError(413, "request entity too large", {
          expected: length,
          length,
          limit,
          type: "entity.too.large"
        }));
      }
      var state = stream2._readableState;
      if (stream2._decoder || state && (state.encoding || state.decoder)) {
        return done(createError(500, "stream encoding should not be set", {
          type: "stream.encoding.set"
        }));
      }
      if (typeof stream2.readable !== "undefined" && !stream2.readable) {
        return done(createError(500, "stream is not readable", {
          type: "stream.not.readable"
        }));
      }
      var received = 0;
      var decoder;
      try {
        decoder = getDecoder(encoding);
      } catch (err) {
        return done(err);
      }
      var buffer = decoder ? "" : [];
      stream2.on("aborted", onAborted);
      stream2.on("close", cleanup);
      stream2.on("data", onData);
      stream2.on("end", onEnd);
      stream2.on("error", onEnd);
      sync = false;
      function done() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        complete = true;
        if (sync) {
          process.nextTick(invokeCallback);
        } else {
          invokeCallback();
        }
        function invokeCallback() {
          cleanup();
          if (args[0]) {
            halt(stream2);
          }
          callback.apply(null, args);
        }
      }
      function onAborted() {
        if (complete) return;
        done(createError(400, "request aborted", {
          code: "ECONNABORTED",
          expected: length,
          length,
          received,
          type: "request.aborted"
        }));
      }
      function onData(chunk) {
        if (complete) return;
        received += chunk.length;
        if (limit !== null && received > limit) {
          done(createError(413, "request entity too large", {
            limit,
            received,
            type: "entity.too.large"
          }));
        } else if (decoder) {
          buffer += decoder.write(chunk);
        } else {
          buffer.push(chunk);
        }
      }
      function onEnd(err) {
        if (complete) return;
        if (err) return done(err);
        if (length !== null && received !== length) {
          done(createError(400, "request size did not match content length", {
            expected: length,
            length,
            received,
            type: "request.size.invalid"
          }));
        } else {
          var string = decoder ? buffer + (decoder.end() || "") : Buffer.concat(buffer);
          done(null, string);
        }
      }
      function cleanup() {
        buffer = null;
        stream2.removeListener("aborted", onAborted);
        stream2.removeListener("data", onData);
        stream2.removeListener("end", onEnd);
        stream2.removeListener("error", onEnd);
        stream2.removeListener("close", cleanup);
      }
    }
    function tryRequireAsyncHooks() {
      try {
        return __require("async_hooks");
      } catch (e) {
        return {};
      }
    }
    function wrap(fn) {
      var res;
      if (asyncHooks.AsyncResource) {
        res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
      }
      if (!res || !res.runInAsyncScope) {
        return fn;
      }
      return res.runInAsyncScope.bind(res, fn, null);
    }
  }
});

// ../../node_modules/ee-first/index.js
var require_ee_first = __commonJS({
  "../../node_modules/ee-first/index.js"(exports, module) {
    "use strict";
    module.exports = first2;
    function first2(stuff, done) {
      if (!Array.isArray(stuff))
        throw new TypeError("arg must be an array of [ee, events...] arrays");
      var cleanups = [];
      for (var i = 0; i < stuff.length; i++) {
        var arr = stuff[i];
        if (!Array.isArray(arr) || arr.length < 2)
          throw new TypeError("each array member must be [ee, events...]");
        var ee = arr[0];
        for (var j = 1; j < arr.length; j++) {
          var event = arr[j];
          var fn = listener(event, callback);
          ee.on(event, fn);
          cleanups.push({
            ee,
            event,
            fn
          });
        }
      }
      function callback() {
        cleanup();
        done.apply(null, arguments);
      }
      function cleanup() {
        var x;
        for (var i2 = 0; i2 < cleanups.length; i2++) {
          x = cleanups[i2];
          x.ee.removeListener(x.event, x.fn);
        }
      }
      function thunk(fn2) {
        done = fn2;
      }
      thunk.cancel = cleanup;
      return thunk;
    }
    function listener(event, done) {
      return function onevent(arg1) {
        var args = new Array(arguments.length);
        var ee = this;
        var err = event === "error" ? arg1 : null;
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        done(err, ee, event, args);
      };
    }
  }
});

// ../../node_modules/on-finished/index.js
var require_on_finished = __commonJS({
  "../../node_modules/on-finished/index.js"(exports, module) {
    "use strict";
    module.exports = onFinished;
    module.exports.isFinished = isFinished;
    var asyncHooks = tryRequireAsyncHooks();
    var first2 = require_ee_first();
    var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
      process.nextTick(fn.bind.apply(fn, arguments));
    };
    function onFinished(msg, listener) {
      if (isFinished(msg) !== false) {
        defer(listener, null, msg);
        return msg;
      }
      attachListener(msg, wrap(listener));
      return msg;
    }
    function isFinished(msg) {
      var socket = msg.socket;
      if (typeof msg.finished === "boolean") {
        return Boolean(msg.finished || socket && !socket.writable);
      }
      if (typeof msg.complete === "boolean") {
        return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
      }
      return void 0;
    }
    function attachFinishedListener(msg, callback) {
      var eeMsg;
      var eeSocket;
      var finished = false;
      function onFinish(error) {
        eeMsg.cancel();
        eeSocket.cancel();
        finished = true;
        callback(error);
      }
      eeMsg = eeSocket = first2([[msg, "end", "finish"]], onFinish);
      function onSocket(socket) {
        msg.removeListener("socket", onSocket);
        if (finished) return;
        if (eeMsg !== eeSocket) return;
        eeSocket = first2([[socket, "error", "close"]], onFinish);
      }
      if (msg.socket) {
        onSocket(msg.socket);
        return;
      }
      msg.on("socket", onSocket);
      if (msg.socket === void 0) {
        patchAssignSocket(msg, onSocket);
      }
    }
    function attachListener(msg, listener) {
      var attached = msg.__onFinished;
      if (!attached || !attached.queue) {
        attached = msg.__onFinished = createListener(msg);
        attachFinishedListener(msg, attached);
      }
      attached.queue.push(listener);
    }
    function createListener(msg) {
      function listener(err) {
        if (msg.__onFinished === listener) msg.__onFinished = null;
        if (!listener.queue) return;
        var queue = listener.queue;
        listener.queue = null;
        for (var i = 0; i < queue.length; i++) {
          queue[i](err, msg);
        }
      }
      listener.queue = [];
      return listener;
    }
    function patchAssignSocket(res, callback) {
      var assignSocket = res.assignSocket;
      if (typeof assignSocket !== "function") return;
      res.assignSocket = function _assignSocket(socket) {
        assignSocket.call(this, socket);
        callback(socket);
      };
    }
    function tryRequireAsyncHooks() {
      try {
        return __require("async_hooks");
      } catch (e) {
        return {};
      }
    }
    function wrap(fn) {
      var res;
      if (asyncHooks.AsyncResource) {
        res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
      }
      if (!res || !res.runInAsyncScope) {
        return fn;
      }
      return res.runInAsyncScope.bind(res, fn, null);
    }
  }
});

// ../../node_modules/body-parser/lib/read.js
var require_read = __commonJS({
  "../../node_modules/body-parser/lib/read.js"(exports, module) {
    "use strict";
    var createError = require_http_errors();
    var destroy = require_destroy();
    var getBody = require_raw_body();
    var iconv = require_lib();
    var onFinished = require_on_finished();
    var unpipe = require_unpipe();
    var zlib2 = __require("zlib");
    module.exports = read;
    function read(req, res, next, parse2, debug, options) {
      var length;
      var opts = options;
      var stream2;
      req._body = true;
      var encoding = opts.encoding !== null ? opts.encoding : null;
      var verify = opts.verify;
      try {
        stream2 = contentstream(req, debug, opts.inflate);
        length = stream2.length;
        stream2.length = void 0;
      } catch (err) {
        return next(err);
      }
      opts.length = length;
      opts.encoding = verify ? null : encoding;
      if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
        return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
          charset: encoding.toLowerCase(),
          type: "charset.unsupported"
        }));
      }
      debug("read body");
      getBody(stream2, opts, function(error, body) {
        if (error) {
          var _error;
          if (error.type === "encoding.unsupported") {
            _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
              charset: encoding.toLowerCase(),
              type: "charset.unsupported"
            });
          } else {
            _error = createError(400, error);
          }
          if (stream2 !== req) {
            unpipe(req);
            destroy(stream2, true);
          }
          dump(req, function onfinished() {
            next(createError(400, _error));
          });
          return;
        }
        if (verify) {
          try {
            debug("verify body");
            verify(req, res, body, encoding);
          } catch (err) {
            next(createError(403, err, {
              body,
              type: err.type || "entity.verify.failed"
            }));
            return;
          }
        }
        var str = body;
        try {
          debug("parse body");
          str = typeof body !== "string" && encoding !== null ? iconv.decode(body, encoding) : body;
          req.body = parse2(str);
        } catch (err) {
          next(createError(400, err, {
            body: str,
            type: err.type || "entity.parse.failed"
          }));
          return;
        }
        next();
      });
    }
    function contentstream(req, debug, inflate) {
      var encoding = (req.headers["content-encoding"] || "identity").toLowerCase();
      var length = req.headers["content-length"];
      var stream2;
      debug('content-encoding "%s"', encoding);
      if (inflate === false && encoding !== "identity") {
        throw createError(415, "content encoding unsupported", {
          encoding,
          type: "encoding.unsupported"
        });
      }
      switch (encoding) {
        case "deflate":
          stream2 = zlib2.createInflate();
          debug("inflate body");
          req.pipe(stream2);
          break;
        case "gzip":
          stream2 = zlib2.createGunzip();
          debug("gunzip body");
          req.pipe(stream2);
          break;
        case "identity":
          stream2 = req;
          stream2.length = length;
          break;
        default:
          throw createError(415, 'unsupported content encoding "' + encoding + '"', {
            encoding,
            type: "encoding.unsupported"
          });
      }
      return stream2;
    }
    function dump(req, callback) {
      if (onFinished.isFinished(req)) {
        callback(null);
      } else {
        onFinished(req, callback);
        req.resume();
      }
    }
  }
});

// ../../node_modules/media-typer/index.js
var require_media_typer = __commonJS({
  "../../node_modules/media-typer/index.js"(exports) {
    "use strict";
    var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
    var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
    var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
    var qescRegExp = /\\([\u0000-\u007f])/g;
    var quoteRegExp = /([\\"])/g;
    var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
    var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
    var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
    exports.format = format;
    exports.parse = parse2;
    function format(obj) {
      if (!obj || typeof obj !== "object") {
        throw new TypeError("argument obj is required");
      }
      var parameters2 = obj.parameters;
      var subtype = obj.subtype;
      var suffix = obj.suffix;
      var type = obj.type;
      if (!type || !typeNameRegExp.test(type)) {
        throw new TypeError("invalid type");
      }
      if (!subtype || !subtypeNameRegExp.test(subtype)) {
        throw new TypeError("invalid subtype");
      }
      var string = type + "/" + subtype;
      if (suffix) {
        if (!typeNameRegExp.test(suffix)) {
          throw new TypeError("invalid suffix");
        }
        string += "+" + suffix;
      }
      if (parameters2 && typeof parameters2 === "object") {
        var param;
        var params = Object.keys(parameters2).sort();
        for (var i = 0; i < params.length; i++) {
          param = params[i];
          if (!tokenRegExp.test(param)) {
            throw new TypeError("invalid parameter name");
          }
          string += "; " + param + "=" + qstring(parameters2[param]);
        }
      }
      return string;
    }
    function parse2(string) {
      if (!string) {
        throw new TypeError("argument string is required");
      }
      if (typeof string === "object") {
        string = getcontenttype(string);
      }
      if (typeof string !== "string") {
        throw new TypeError("argument string is required to be a string");
      }
      var index = string.indexOf(";");
      var type = index !== -1 ? string.substr(0, index) : string;
      var key;
      var match;
      var obj = splitType(type);
      var params = {};
      var value;
      paramRegExp.lastIndex = index;
      while (match = paramRegExp.exec(string)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value[0] === '"') {
          value = value.substr(1, value.length - 2).replace(qescRegExp, "$1");
        }
        params[key] = value;
      }
      if (index !== -1 && index !== string.length) {
        throw new TypeError("invalid parameter format");
      }
      obj.parameters = params;
      return obj;
    }
    function getcontenttype(obj) {
      if (typeof obj.getHeader === "function") {
        return obj.getHeader("content-type");
      }
      if (typeof obj.headers === "object") {
        return obj.headers && obj.headers["content-type"];
      }
    }
    function qstring(val) {
      var str = String(val);
      if (tokenRegExp.test(str)) {
        return str;
      }
      if (str.length > 0 && !textRegExp.test(str)) {
        throw new TypeError("invalid parameter value");
      }
      return '"' + str.replace(quoteRegExp, "\\$1") + '"';
    }
    function splitType(string) {
      var match = typeRegExp.exec(string.toLowerCase());
      if (!match) {
        throw new TypeError("invalid media type");
      }
      var type = match[1];
      var subtype = match[2];
      var suffix;
      var index = subtype.lastIndexOf("+");
      if (index !== -1) {
        suffix = subtype.substr(index + 1);
        subtype = subtype.substr(0, index);
      }
      var obj = {
        type,
        subtype,
        suffix
      };
      return obj;
    }
  }
});

// ../../node_modules/mime-db/db.json
var require_db = __commonJS({
  "../../node_modules/mime-db/db.json"(exports, module) {
    module.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// ../../node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "../../node_modules/mime-db/index.js"(exports, module) {
    "use strict";
    module.exports = require_db();
  }
});

// ../../node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "../../node_modules/mime-types/index.js"(exports) {
    "use strict";
    var db = require_mime_db();
    var extname = __require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2) mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path3) {
      if (!path3 || typeof path3 !== "string") {
        return false;
      }
      var extension2 = extname("x." + path3).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// ../../node_modules/type-is/index.js
var require_type_is = __commonJS({
  "../../node_modules/type-is/index.js"(exports, module) {
    "use strict";
    var typer = require_media_typer();
    var mime = require_mime_types();
    module.exports = typeofrequest;
    module.exports.is = typeis;
    module.exports.hasBody = hasbody;
    module.exports.normalize = normalize;
    module.exports.match = mimeMatch;
    function typeis(value, types_) {
      var i;
      var types = types_;
      var val = tryNormalizeType(value);
      if (!val) {
        return false;
      }
      if (types && !Array.isArray(types)) {
        types = new Array(arguments.length - 1);
        for (i = 0; i < types.length; i++) {
          types[i] = arguments[i + 1];
        }
      }
      if (!types || !types.length) {
        return val;
      }
      var type;
      for (i = 0; i < types.length; i++) {
        if (mimeMatch(normalize(type = types[i]), val)) {
          return type[0] === "+" || type.indexOf("*") !== -1 ? val : type;
        }
      }
      return false;
    }
    function hasbody(req) {
      return req.headers["transfer-encoding"] !== void 0 || !isNaN(req.headers["content-length"]);
    }
    function typeofrequest(req, types_) {
      var types = types_;
      if (!hasbody(req)) {
        return null;
      }
      if (arguments.length > 2) {
        types = new Array(arguments.length - 1);
        for (var i = 0; i < types.length; i++) {
          types[i] = arguments[i + 1];
        }
      }
      var value = req.headers["content-type"];
      return typeis(value, types);
    }
    function normalize(type) {
      if (typeof type !== "string") {
        return false;
      }
      switch (type) {
        case "urlencoded":
          return "application/x-www-form-urlencoded";
        case "multipart":
          return "multipart/*";
      }
      if (type[0] === "+") {
        return "*/*" + type;
      }
      return type.indexOf("/") === -1 ? mime.lookup(type) : type;
    }
    function mimeMatch(expected, actual) {
      if (expected === false) {
        return false;
      }
      var actualParts = actual.split("/");
      var expectedParts = expected.split("/");
      if (actualParts.length !== 2 || expectedParts.length !== 2) {
        return false;
      }
      if (expectedParts[0] !== "*" && expectedParts[0] !== actualParts[0]) {
        return false;
      }
      if (expectedParts[1].substr(0, 2) === "*+") {
        return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
      }
      if (expectedParts[1] !== "*" && expectedParts[1] !== actualParts[1]) {
        return false;
      }
      return true;
    }
    function normalizeType(value) {
      var type = typer.parse(value);
      type.parameters = void 0;
      return typer.format(type);
    }
    function tryNormalizeType(value) {
      if (!value) {
        return null;
      }
      try {
        return normalizeType(value);
      } catch (err) {
        return null;
      }
    }
  }
});

// ../../node_modules/body-parser/lib/types/json.js
var require_json = __commonJS({
  "../../node_modules/body-parser/lib/types/json.js"(exports, module) {
    "use strict";
    var bytes = require_bytes();
    var contentType = require_content_type();
    var createError = require_http_errors();
    var debug = require_src()("body-parser:json");
    var read = require_read();
    var typeis = require_type_is();
    module.exports = json;
    var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/;
    var JSON_SYNTAX_CHAR = "#";
    var JSON_SYNTAX_REGEXP = /#+/g;
    function json(options) {
      var opts = options || {};
      var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
      var inflate = opts.inflate !== false;
      var reviver = opts.reviver;
      var strict = opts.strict !== false;
      var type = opts.type || "application/json";
      var verify = opts.verify || false;
      if (verify !== false && typeof verify !== "function") {
        throw new TypeError("option verify must be function");
      }
      var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
      function parse2(body) {
        if (body.length === 0) {
          return {};
        }
        if (strict) {
          var first2 = firstchar(body);
          if (first2 !== "{" && first2 !== "[") {
            debug("strict violation");
            throw createStrictSyntaxError(body, first2);
          }
        }
        try {
          debug("parse json");
          return JSON.parse(body, reviver);
        } catch (e) {
          throw normalizeJsonSyntaxError(e, {
            message: e.message,
            stack: e.stack
          });
        }
      }
      return function jsonParser(req, res, next) {
        if (req._body) {
          debug("body already parsed");
          next();
          return;
        }
        req.body = req.body || {};
        if (!typeis.hasBody(req)) {
          debug("skip empty body");
          next();
          return;
        }
        debug("content-type %j", req.headers["content-type"]);
        if (!shouldParse(req)) {
          debug("skip parsing");
          next();
          return;
        }
        var charset = getCharset(req) || "utf-8";
        if (charset.slice(0, 4) !== "utf-") {
          debug("invalid charset");
          next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
            charset,
            type: "charset.unsupported"
          }));
          return;
        }
        read(req, res, next, parse2, debug, {
          encoding: charset,
          inflate,
          limit,
          verify
        });
      };
    }
    function createStrictSyntaxError(str, char) {
      var index = str.indexOf(char);
      var partial = "";
      if (index !== -1) {
        partial = str.substring(0, index) + JSON_SYNTAX_CHAR;
        for (var i = index + 1; i < str.length; i++) {
          partial += JSON_SYNTAX_CHAR;
        }
      }
      try {
        JSON.parse(partial);
        throw new SyntaxError("strict violation");
      } catch (e) {
        return normalizeJsonSyntaxError(e, {
          message: e.message.replace(JSON_SYNTAX_REGEXP, function(placeholder) {
            return str.substring(index, index + placeholder.length);
          }),
          stack: e.stack
        });
      }
    }
    function firstchar(str) {
      var match = FIRST_CHAR_REGEXP.exec(str);
      return match ? match[1] : void 0;
    }
    function getCharset(req) {
      try {
        return (contentType.parse(req).parameters.charset || "").toLowerCase();
      } catch (e) {
        return void 0;
      }
    }
    function normalizeJsonSyntaxError(error, obj) {
      var keys = Object.getOwnPropertyNames(error);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== "stack" && key !== "message") {
          delete error[key];
        }
      }
      error.stack = obj.stack.replace(error.message, obj.message);
      error.message = obj.message;
      return error;
    }
    function typeChecker(type) {
      return function checkType(req) {
        return Boolean(typeis(req, type));
      };
    }
  }
});

// ../../node_modules/body-parser/lib/types/raw.js
var require_raw = __commonJS({
  "../../node_modules/body-parser/lib/types/raw.js"(exports, module) {
    "use strict";
    var bytes = require_bytes();
    var debug = require_src()("body-parser:raw");
    var read = require_read();
    var typeis = require_type_is();
    module.exports = raw;
    function raw(options) {
      var opts = options || {};
      var inflate = opts.inflate !== false;
      var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
      var type = opts.type || "application/octet-stream";
      var verify = opts.verify || false;
      if (verify !== false && typeof verify !== "function") {
        throw new TypeError("option verify must be function");
      }
      var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
      function parse2(buf) {
        return buf;
      }
      return function rawParser(req, res, next) {
        if (req._body) {
          debug("body already parsed");
          next();
          return;
        }
        req.body = req.body || {};
        if (!typeis.hasBody(req)) {
          debug("skip empty body");
          next();
          return;
        }
        debug("content-type %j", req.headers["content-type"]);
        if (!shouldParse(req)) {
          debug("skip parsing");
          next();
          return;
        }
        read(req, res, next, parse2, debug, {
          encoding: null,
          inflate,
          limit,
          verify
        });
      };
    }
    function typeChecker(type) {
      return function checkType(req) {
        return Boolean(typeis(req, type));
      };
    }
  }
});

// ../../node_modules/body-parser/lib/types/text.js
var require_text = __commonJS({
  "../../node_modules/body-parser/lib/types/text.js"(exports, module) {
    "use strict";
    var bytes = require_bytes();
    var contentType = require_content_type();
    var debug = require_src()("body-parser:text");
    var read = require_read();
    var typeis = require_type_is();
    module.exports = text;
    function text(options) {
      var opts = options || {};
      var defaultCharset = opts.defaultCharset || "utf-8";
      var inflate = opts.inflate !== false;
      var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
      var type = opts.type || "text/plain";
      var verify = opts.verify || false;
      if (verify !== false && typeof verify !== "function") {
        throw new TypeError("option verify must be function");
      }
      var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
      function parse2(buf) {
        return buf;
      }
      return function textParser(req, res, next) {
        if (req._body) {
          debug("body already parsed");
          next();
          return;
        }
        req.body = req.body || {};
        if (!typeis.hasBody(req)) {
          debug("skip empty body");
          next();
          return;
        }
        debug("content-type %j", req.headers["content-type"]);
        if (!shouldParse(req)) {
          debug("skip parsing");
          next();
          return;
        }
        var charset = getCharset(req) || defaultCharset;
        read(req, res, next, parse2, debug, {
          encoding: charset,
          inflate,
          limit,
          verify
        });
      };
    }
    function getCharset(req) {
      try {
        return (contentType.parse(req).parameters.charset || "").toLowerCase();
      } catch (e) {
        return void 0;
      }
    }
    function typeChecker(type) {
      return function checkType(req) {
        return Boolean(typeis(req, type));
      };
    }
  }
});

// ../../node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "../../node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    module.exports = Error;
  }
});

// ../../node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "../../node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    module.exports = EvalError;
  }
});

// ../../node_modules/es-errors/range.js
var require_range = __commonJS({
  "../../node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    module.exports = RangeError;
  }
});

// ../../node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "../../node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    module.exports = ReferenceError;
  }
});

// ../../node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "../../node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    module.exports = SyntaxError;
  }
});

// ../../node_modules/es-errors/type.js
var require_type = __commonJS({
  "../../node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    module.exports = TypeError;
  }
});

// ../../node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "../../node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    module.exports = URIError;
  }
});

// ../../node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../../node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../../node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../../node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "../../node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// ../../node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../../node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../../node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// ../../node_modules/hasown/index.js
var require_hasown = __commonJS({
  "../../node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// ../../node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../../node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first2 = $strSlice(string, 0, 1);
      var last2 = $strSlice(string, -1);
      if (first2 === "%" && last2 !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last2 === "%" && first2 !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number2, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first2 = $strSlice(part, 0, 1);
        var last2 = $strSlice(part, -1);
        if ((first2 === '"' || first2 === "'" || first2 === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first2 !== last2) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "../../node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});

// ../../node_modules/gopd/index.js
var require_gopd = __commonJS({
  "../../node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// ../../node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "../../node_modules/define-data-property/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// ../../node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "../../node_modules/has-property-descriptors/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module.exports = hasPropertyDescriptors;
  }
});

// ../../node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "../../node_modules/set-function-length/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// ../../node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "../../node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// ../../node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "../../node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// ../../node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "../../node_modules/object-inspect/util.inspect.js"(exports, module) {
    "use strict";
    module.exports = __require("util").inspect;
  }
});

// ../../node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "../../node_modules/object-inspect/index.js"(exports, module) {
    "use strict";
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    var quotes = {
      __proto__: null,
      "double": '"',
      single: "'"
    };
    var quoteREs = {
      __proto__: null,
      "double": /(["\\])/g,
      single: /(['\\])/g
    };
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && !has(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var style = opts.quoteStyle || defaultStyle;
      var quoteChar = quotes[style];
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var quoteRE = quoteREs[opts.quoteStyle || "single"];
      quoteRE.lastIndex = 0;
      var s = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// ../../node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "../../node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('.').ListNode<typeof value>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// ../../node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "../../node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// ../../node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for (var i = 0; i < segment.length; ++i) {
          var c = segment.charCodeAt(i);
          if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
            arr[arr.length] = segment.charAt(i);
            continue;
          }
          if (c < 128) {
            arr[arr.length] = hexTable[c];
            continue;
          }
          if (c < 2048) {
            arr[arr.length] = hexTable[192 | c >> 6] + hexTable[128 | c & 63];
            continue;
          }
          if (c < 55296 || c >= 57344) {
            arr[arr.length] = hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
            continue;
          }
          i += 1;
          c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
          arr[arr.length] = hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
        }
        out += arr.join("");
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// ../../node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "../../node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.allowEmptyArrays,
          options.strictNullHandling,
          options.skipNulls,
          options.encodeDotInKeys,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// ../../node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "../../node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictDepth: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has.call(obj, key);
        if (existing && options.duplicates === "combine") {
          obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === "last") {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        if (options.strictDepth === true) {
          throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        }
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// ../../node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse2,
      stringify
    };
  }
});

// ../../node_modules/body-parser/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "../../node_modules/body-parser/lib/types/urlencoded.js"(exports, module) {
    "use strict";
    var bytes = require_bytes();
    var contentType = require_content_type();
    var createError = require_http_errors();
    var debug = require_src()("body-parser:urlencoded");
    var deprecate = require_depd()("body-parser");
    var read = require_read();
    var typeis = require_type_is();
    module.exports = urlencoded;
    var parsers = /* @__PURE__ */ Object.create(null);
    function urlencoded(options) {
      var opts = options || {};
      if (opts.extended === void 0) {
        deprecate("undefined extended: provide extended option");
      }
      var extended = opts.extended !== false;
      var inflate = opts.inflate !== false;
      var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
      var type = opts.type || "application/x-www-form-urlencoded";
      var verify = opts.verify || false;
      var depth = typeof opts.depth !== "number" ? Number(opts.depth || 32) : opts.depth;
      if (verify !== false && typeof verify !== "function") {
        throw new TypeError("option verify must be function");
      }
      var queryparse = extended ? extendedparser(opts) : simpleparser(opts);
      var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
      function parse2(body) {
        return body.length ? queryparse(body) : {};
      }
      return function urlencodedParser(req, res, next) {
        if (req._body) {
          debug("body already parsed");
          next();
          return;
        }
        req.body = req.body || {};
        if (!typeis.hasBody(req)) {
          debug("skip empty body");
          next();
          return;
        }
        debug("content-type %j", req.headers["content-type"]);
        if (!shouldParse(req)) {
          debug("skip parsing");
          next();
          return;
        }
        var charset = getCharset(req) || "utf-8";
        if (charset !== "utf-8") {
          debug("invalid charset");
          next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
            charset,
            type: "charset.unsupported"
          }));
          return;
        }
        read(req, res, next, parse2, debug, {
          debug,
          encoding: charset,
          inflate,
          limit,
          verify,
          depth
        });
      };
    }
    function extendedparser(options) {
      var parameterLimit = options.parameterLimit !== void 0 ? options.parameterLimit : 1e3;
      var depth = typeof options.depth !== "number" ? Number(options.depth || 32) : options.depth;
      var parse2 = parser("qs");
      if (isNaN(parameterLimit) || parameterLimit < 1) {
        throw new TypeError("option parameterLimit must be a positive number");
      }
      if (isNaN(depth) || depth < 0) {
        throw new TypeError("option depth must be a zero or a positive number");
      }
      if (isFinite(parameterLimit)) {
        parameterLimit = parameterLimit | 0;
      }
      return function queryparse(body) {
        var paramCount = parameterCount(body, parameterLimit);
        if (paramCount === void 0) {
          debug("too many parameters");
          throw createError(413, "too many parameters", {
            type: "parameters.too.many"
          });
        }
        var arrayLimit = Math.max(100, paramCount);
        debug("parse extended urlencoding");
        try {
          return parse2(body, {
            allowPrototypes: true,
            arrayLimit,
            depth,
            strictDepth: true,
            parameterLimit
          });
        } catch (err) {
          if (err instanceof RangeError) {
            throw createError(400, "The input exceeded the depth", {
              type: "querystring.parse.rangeError"
            });
          } else {
            throw err;
          }
        }
      };
    }
    function getCharset(req) {
      try {
        return (contentType.parse(req).parameters.charset || "").toLowerCase();
      } catch (e) {
        return void 0;
      }
    }
    function parameterCount(body, limit) {
      var count = 0;
      var index = 0;
      while ((index = body.indexOf("&", index)) !== -1) {
        count++;
        index++;
        if (count === limit) {
          return void 0;
        }
      }
      return count;
    }
    function parser(name) {
      var mod = parsers[name];
      if (mod !== void 0) {
        return mod.parse;
      }
      switch (name) {
        case "qs":
          mod = require_lib2();
          break;
        case "querystring":
          mod = __require("querystring");
          break;
      }
      parsers[name] = mod;
      return mod.parse;
    }
    function simpleparser(options) {
      var parameterLimit = options.parameterLimit !== void 0 ? options.parameterLimit : 1e3;
      var parse2 = parser("querystring");
      if (isNaN(parameterLimit) || parameterLimit < 1) {
        throw new TypeError("option parameterLimit must be a positive number");
      }
      if (isFinite(parameterLimit)) {
        parameterLimit = parameterLimit | 0;
      }
      return function queryparse(body) {
        var paramCount = parameterCount(body, parameterLimit);
        if (paramCount === void 0) {
          debug("too many parameters");
          throw createError(413, "too many parameters", {
            type: "parameters.too.many"
          });
        }
        debug("parse urlencoding");
        return parse2(body, void 0, void 0, { maxKeys: parameterLimit });
      };
    }
    function typeChecker(type) {
      return function checkType(req) {
        return Boolean(typeis(req, type));
      };
    }
  }
});

// ../../node_modules/body-parser/index.js
var require_body_parser = __commonJS({
  "../../node_modules/body-parser/index.js"(exports, module) {
    "use strict";
    var deprecate = require_depd()("body-parser");
    var parsers = /* @__PURE__ */ Object.create(null);
    exports = module.exports = deprecate.function(
      bodyParser,
      "bodyParser: use individual json/urlencoded middlewares"
    );
    Object.defineProperty(exports, "json", {
      configurable: true,
      enumerable: true,
      get: createParserGetter("json")
    });
    Object.defineProperty(exports, "raw", {
      configurable: true,
      enumerable: true,
      get: createParserGetter("raw")
    });
    Object.defineProperty(exports, "text", {
      configurable: true,
      enumerable: true,
      get: createParserGetter("text")
    });
    Object.defineProperty(exports, "urlencoded", {
      configurable: true,
      enumerable: true,
      get: createParserGetter("urlencoded")
    });
    function bodyParser(options) {
      var opts = Object.create(options || null, {
        type: {
          configurable: true,
          enumerable: true,
          value: void 0,
          writable: true
        }
      });
      var _urlencoded = exports.urlencoded(opts);
      var _json = exports.json(opts);
      return function bodyParser2(req, res, next) {
        _json(req, res, function(err) {
          if (err) return next(err);
          _urlencoded(req, res, next);
        });
      };
    }
    function createParserGetter(name) {
      return function get() {
        return loadParser(name);
      };
    }
    function loadParser(parserName) {
      var parser = parsers[parserName];
      if (parser !== void 0) {
        return parser;
      }
      switch (parserName) {
        case "json":
          parser = require_json();
          break;
        case "raw":
          parser = require_raw();
          break;
        case "text":
          parser = require_text();
          break;
        case "urlencoded":
          parser = require_urlencoded();
          break;
      }
      return parsers[parserName] = parser;
    }
  }
});

// ../../node_modules/merge-descriptors/index.js
var require_merge_descriptors = __commonJS({
  "../../node_modules/merge-descriptors/index.js"(exports, module) {
    "use strict";
    module.exports = merge;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function merge(dest, src, redefine) {
      if (!dest) {
        throw new TypeError("argument dest is required");
      }
      if (!src) {
        throw new TypeError("argument src is required");
      }
      if (redefine === void 0) {
        redefine = true;
      }
      Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
        if (!redefine && hasOwnProperty.call(dest, name)) {
          return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(src, name);
        Object.defineProperty(dest, name, descriptor);
      });
      return dest;
    }
  }
});

// ../../node_modules/finalhandler/node_modules/ms/index.js
var require_ms2 = __commonJS({
  "../../node_modules/finalhandler/node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + "d";
      }
      if (ms >= h) {
        return Math.round(ms / h) + "h";
      }
      if (ms >= m) {
        return Math.round(ms / m) + "m";
      }
      if (ms >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
    }
    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name;
      }
      return Math.ceil(ms / n) + " " + name + "s";
    }
  }
});

// ../../node_modules/finalhandler/node_modules/debug/src/debug.js
var require_debug2 = __commonJS({
  "../../node_modules/finalhandler/node_modules/debug/src/debug.js"(exports, module) {
    "use strict";
    exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require_ms2();
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    var prevTime;
    function selectColor(namespace) {
      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    function createDebug(namespace) {
      function debug() {
        if (!debug.enabled) return;
        var self2 = debug;
        var curr = +/* @__PURE__ */ new Date();
        var ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ("string" !== typeof args[0]) {
          args.unshift("%O");
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          if (match === "%%") return match;
          index++;
          var formatter = exports.formatters[format];
          if ("function" === typeof formatter) {
            var val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        exports.formatArgs.call(self2, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      if ("function" === typeof exports.init) {
        exports.init(debug);
      }
      return debug;
    }
    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      var len = split.length;
      for (var i = 0; i < len; i++) {
        if (!split[i]) continue;
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          exports.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }
    function disable() {
      exports.enable("");
    }
    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  }
});

// ../../node_modules/finalhandler/node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "../../node_modules/finalhandler/node_modules/debug/src/browser.js"(exports, module) {
    "use strict";
    exports = module.exports = require_debug2();
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
    exports.colors = [
      "lightseagreen",
      "forestgreen",
      "goldenrod",
      "dodgerblue",
      "darkorchid",
      "crimson"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
        return true;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
      }
    };
    function formatArgs(args) {
      var useColors2 = this.useColors;
      args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
      if (!useColors2) return;
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ("%%" === match) return;
        index++;
        if ("%c" === match) {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem("debug");
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {
      }
    }
    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    exports.enable(load());
    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/finalhandler/node_modules/debug/src/node.js
var require_node2 = __commonJS({
  "../../node_modules/finalhandler/node_modules/debug/src/node.js"(exports, module) {
    "use strict";
    var tty = __require("tty");
    var util = __require("util");
    exports = module.exports = require_debug2();
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
      else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
      else if (val === "null") val = null;
      else val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
    if (1 !== fd && 2 !== fd) {
      util.deprecate(function() {
      }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
    }
    var stream2 = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
    }
    exports.formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    exports.formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
    function formatArgs(args) {
      var name = this.namespace;
      var useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var prefix = "  \x1B[3" + c + ";1m" + name + " \x1B[0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = (/* @__PURE__ */ new Date()).toUTCString() + " " + name + " " + args[0];
      }
    }
    function log() {
      return stream2.write(util.format.apply(util, arguments) + "\n");
    }
    function save(namespaces) {
      if (null == namespaces) {
        delete process.env.DEBUG;
      } else {
        process.env.DEBUG = namespaces;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function createWritableStdioStream(fd2) {
      var stream3;
      var tty_wrap = process.binding("tty_wrap");
      switch (tty_wrap.guessHandleType(fd2)) {
        case "TTY":
          stream3 = new tty.WriteStream(fd2);
          stream3._type = "tty";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        case "FILE":
          var fs3 = __require("fs");
          stream3 = new fs3.SyncWriteStream(fd2, { autoClose: false });
          stream3._type = "fs";
          break;
        case "PIPE":
        case "TCP":
          var net = __require("net");
          stream3 = new net.Socket({
            fd: fd2,
            readable: false,
            writable: true
          });
          stream3.readable = false;
          stream3.read = null;
          stream3._type = "pipe";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        default:
          throw new Error("Implement me. Unknown stream file type!");
      }
      stream3.fd = fd2;
      stream3._isStdio = true;
      return stream3;
    }
    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    exports.enable(load());
  }
});

// ../../node_modules/finalhandler/node_modules/debug/src/index.js
var require_src2 = __commonJS({
  "../../node_modules/finalhandler/node_modules/debug/src/index.js"(exports, module) {
    "use strict";
    if (typeof process !== "undefined" && process.type === "renderer") {
      module.exports = require_browser2();
    } else {
      module.exports = require_node2();
    }
  }
});

// ../../node_modules/encodeurl/index.js
var require_encodeurl = __commonJS({
  "../../node_modules/encodeurl/index.js"(exports, module) {
    "use strict";
    module.exports = encodeUrl;
    var ENCODE_CHARS_REGEXP = /(?:[^\x21\x23-\x3B\x3D\x3F-\x5F\x61-\x7A\x7C\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
    var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
    var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
    function encodeUrl(url) {
      return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
    }
  }
});

// ../../node_modules/escape-html/index.js
var require_escape_html = __commonJS({
  "../../node_modules/escape-html/index.js"(exports, module) {
    "use strict";
    var matchHtmlRegExp = /["'&<>]/;
    module.exports = escapeHtml;
    function escapeHtml(string) {
      var str = "" + string;
      var match = matchHtmlRegExp.exec(str);
      if (!match) {
        return str;
      }
      var escape2;
      var html = "";
      var index = 0;
      var lastIndex = 0;
      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34:
            escape2 = "&quot;";
            break;
          case 38:
            escape2 = "&amp;";
            break;
          case 39:
            escape2 = "&#39;";
            break;
          case 60:
            escape2 = "&lt;";
            break;
          case 62:
            escape2 = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== index) {
          html += str.substring(lastIndex, index);
        }
        lastIndex = index + 1;
        html += escape2;
      }
      return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
    }
  }
});

// ../../node_modules/parseurl/index.js
var require_parseurl = __commonJS({
  "../../node_modules/parseurl/index.js"(exports, module) {
    "use strict";
    var url = __require("url");
    var parse2 = url.parse;
    var Url = url.Url;
    module.exports = parseurl;
    module.exports.original = originalurl;
    function parseurl(req) {
      var url2 = req.url;
      if (url2 === void 0) {
        return void 0;
      }
      var parsed = req._parsedUrl;
      if (fresh(url2, parsed)) {
        return parsed;
      }
      parsed = fastparse(url2);
      parsed._raw = url2;
      return req._parsedUrl = parsed;
    }
    function originalurl(req) {
      var url2 = req.originalUrl;
      if (typeof url2 !== "string") {
        return parseurl(req);
      }
      var parsed = req._parsedOriginalUrl;
      if (fresh(url2, parsed)) {
        return parsed;
      }
      parsed = fastparse(url2);
      parsed._raw = url2;
      return req._parsedOriginalUrl = parsed;
    }
    function fastparse(str) {
      if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
        return parse2(str);
      }
      var pathname = str;
      var query = null;
      var search = null;
      for (var i = 1; i < str.length; i++) {
        switch (str.charCodeAt(i)) {
          case 63:
            if (search === null) {
              pathname = str.substring(0, i);
              query = str.substring(i + 1);
              search = str.substring(i);
            }
            break;
          case 9:
          /* \t */
          case 10:
          /* \n */
          case 12:
          /* \f */
          case 13:
          /* \r */
          case 32:
          /*    */
          case 35:
          /* #  */
          case 160:
          case 65279:
            return parse2(str);
        }
      }
      var url2 = Url !== void 0 ? new Url() : {};
      url2.path = str;
      url2.href = str;
      url2.pathname = pathname;
      if (search !== null) {
        url2.query = query;
        url2.search = search;
      }
      return url2;
    }
    function fresh(url2, parsedUrl) {
      return typeof parsedUrl === "object" && parsedUrl !== null && (Url === void 0 || parsedUrl instanceof Url) && parsedUrl._raw === url2;
    }
  }
});

// ../../node_modules/finalhandler/index.js
var require_finalhandler = __commonJS({
  "../../node_modules/finalhandler/index.js"(exports, module) {
    "use strict";
    var debug = require_src2()("finalhandler");
    var encodeUrl = require_encodeurl();
    var escapeHtml = require_escape_html();
    var onFinished = require_on_finished();
    var parseUrl = require_parseurl();
    var statuses = require_statuses();
    var unpipe = require_unpipe();
    var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
    var NEWLINE_REGEXP = /\n/g;
    var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
      process.nextTick(fn.bind.apply(fn, arguments));
    };
    var isFinished = onFinished.isFinished;
    function createHtmlDocument(message) {
      var body = escapeHtml(message).replace(NEWLINE_REGEXP, "<br>").replace(DOUBLE_SPACE_REGEXP, " &nbsp;");
      return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>' + body + "</pre>\n</body>\n</html>\n";
    }
    module.exports = finalhandler;
    function finalhandler(req, res, options) {
      var opts = options || {};
      var env = opts.env || "production";
      var onerror = opts.onerror;
      return function(err) {
        var headers;
        var msg;
        var status;
        if (!err && headersSent(res)) {
          debug("cannot 404 after headers sent");
          return;
        }
        if (err) {
          status = getErrorStatusCode(err);
          if (status === void 0) {
            status = getResponseStatusCode(res);
          } else {
            headers = getErrorHeaders(err);
          }
          msg = getErrorMessage(err, status, env);
        } else {
          status = 404;
          msg = "Cannot " + req.method + " " + encodeUrl(getResourceName(req));
        }
        debug("default %s", status);
        if (err && onerror) {
          defer(onerror, err, req, res);
        }
        if (headersSent(res)) {
          debug("cannot %d after headers sent", status);
          if (req.socket) {
            req.socket.destroy();
          }
          return;
        }
        send(req, res, status, headers, msg);
      };
    }
    function getErrorHeaders(err) {
      if (!err.headers || typeof err.headers !== "object") {
        return void 0;
      }
      var headers = /* @__PURE__ */ Object.create(null);
      var keys = Object.keys(err.headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        headers[key] = err.headers[key];
      }
      return headers;
    }
    function getErrorMessage(err, status, env) {
      var msg;
      if (env !== "production") {
        msg = err.stack;
        if (!msg && typeof err.toString === "function") {
          msg = err.toString();
        }
      }
      return msg || statuses.message[status];
    }
    function getErrorStatusCode(err) {
      if (typeof err.status === "number" && err.status >= 400 && err.status < 600) {
        return err.status;
      }
      if (typeof err.statusCode === "number" && err.statusCode >= 400 && err.statusCode < 600) {
        return err.statusCode;
      }
      return void 0;
    }
    function getResourceName(req) {
      try {
        return parseUrl.original(req).pathname;
      } catch (e) {
        return "resource";
      }
    }
    function getResponseStatusCode(res) {
      var status = res.statusCode;
      if (typeof status !== "number" || status < 400 || status > 599) {
        status = 500;
      }
      return status;
    }
    function headersSent(res) {
      return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
    }
    function send(req, res, status, headers, message) {
      function write() {
        var body = createHtmlDocument(message);
        res.statusCode = status;
        if (req.httpVersionMajor < 2) {
          res.statusMessage = statuses.message[status];
        }
        res.removeHeader("Content-Encoding");
        res.removeHeader("Content-Language");
        res.removeHeader("Content-Range");
        setHeaders(res, headers);
        res.setHeader("Content-Security-Policy", "default-src 'none'");
        res.setHeader("X-Content-Type-Options", "nosniff");
        res.setHeader("Content-Type", "text/html; charset=utf-8");
        res.setHeader("Content-Length", Buffer.byteLength(body, "utf8"));
        if (req.method === "HEAD") {
          res.end();
          return;
        }
        res.end(body, "utf8");
      }
      if (isFinished(req)) {
        write();
        return;
      }
      unpipe(req);
      onFinished(req, write);
      req.resume();
    }
    function setHeaders(res, headers) {
      if (!headers) {
        return;
      }
      var keys = Object.keys(headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        res.setHeader(key, headers[key]);
      }
    }
  }
});

// ../../node_modules/express/node_modules/ms/index.js
var require_ms3 = __commonJS({
  "../../node_modules/express/node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + "d";
      }
      if (ms >= h) {
        return Math.round(ms / h) + "h";
      }
      if (ms >= m) {
        return Math.round(ms / m) + "m";
      }
      if (ms >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
    }
    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name;
      }
      return Math.ceil(ms / n) + " " + name + "s";
    }
  }
});

// ../../node_modules/express/node_modules/debug/src/debug.js
var require_debug3 = __commonJS({
  "../../node_modules/express/node_modules/debug/src/debug.js"(exports, module) {
    "use strict";
    exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require_ms3();
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    var prevTime;
    function selectColor(namespace) {
      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    function createDebug(namespace) {
      function debug() {
        if (!debug.enabled) return;
        var self2 = debug;
        var curr = +/* @__PURE__ */ new Date();
        var ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ("string" !== typeof args[0]) {
          args.unshift("%O");
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          if (match === "%%") return match;
          index++;
          var formatter = exports.formatters[format];
          if ("function" === typeof formatter) {
            var val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        exports.formatArgs.call(self2, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      if ("function" === typeof exports.init) {
        exports.init(debug);
      }
      return debug;
    }
    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      var len = split.length;
      for (var i = 0; i < len; i++) {
        if (!split[i]) continue;
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          exports.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }
    function disable() {
      exports.enable("");
    }
    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  }
});

// ../../node_modules/express/node_modules/debug/src/browser.js
var require_browser3 = __commonJS({
  "../../node_modules/express/node_modules/debug/src/browser.js"(exports, module) {
    "use strict";
    exports = module.exports = require_debug3();
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
    exports.colors = [
      "lightseagreen",
      "forestgreen",
      "goldenrod",
      "dodgerblue",
      "darkorchid",
      "crimson"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
        return true;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
      }
    };
    function formatArgs(args) {
      var useColors2 = this.useColors;
      args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
      if (!useColors2) return;
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ("%%" === match) return;
        index++;
        if ("%c" === match) {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem("debug");
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {
      }
    }
    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    exports.enable(load());
    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/express/node_modules/debug/src/node.js
var require_node3 = __commonJS({
  "../../node_modules/express/node_modules/debug/src/node.js"(exports, module) {
    "use strict";
    var tty = __require("tty");
    var util = __require("util");
    exports = module.exports = require_debug3();
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
      else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
      else if (val === "null") val = null;
      else val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
    if (1 !== fd && 2 !== fd) {
      util.deprecate(function() {
      }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
    }
    var stream2 = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
    }
    exports.formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    exports.formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
    function formatArgs(args) {
      var name = this.namespace;
      var useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var prefix = "  \x1B[3" + c + ";1m" + name + " \x1B[0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = (/* @__PURE__ */ new Date()).toUTCString() + " " + name + " " + args[0];
      }
    }
    function log() {
      return stream2.write(util.format.apply(util, arguments) + "\n");
    }
    function save(namespaces) {
      if (null == namespaces) {
        delete process.env.DEBUG;
      } else {
        process.env.DEBUG = namespaces;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function createWritableStdioStream(fd2) {
      var stream3;
      var tty_wrap = process.binding("tty_wrap");
      switch (tty_wrap.guessHandleType(fd2)) {
        case "TTY":
          stream3 = new tty.WriteStream(fd2);
          stream3._type = "tty";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        case "FILE":
          var fs3 = __require("fs");
          stream3 = new fs3.SyncWriteStream(fd2, { autoClose: false });
          stream3._type = "fs";
          break;
        case "PIPE":
        case "TCP":
          var net = __require("net");
          stream3 = new net.Socket({
            fd: fd2,
            readable: false,
            writable: true
          });
          stream3.readable = false;
          stream3.read = null;
          stream3._type = "pipe";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        default:
          throw new Error("Implement me. Unknown stream file type!");
      }
      stream3.fd = fd2;
      stream3._isStdio = true;
      return stream3;
    }
    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    exports.enable(load());
  }
});

// ../../node_modules/express/node_modules/debug/src/index.js
var require_src3 = __commonJS({
  "../../node_modules/express/node_modules/debug/src/index.js"(exports, module) {
    "use strict";
    if (typeof process !== "undefined" && process.type === "renderer") {
      module.exports = require_browser3();
    } else {
      module.exports = require_node3();
    }
  }
});

// ../../node_modules/array-flatten/array-flatten.js
var require_array_flatten = __commonJS({
  "../../node_modules/array-flatten/array-flatten.js"(exports, module) {
    "use strict";
    module.exports = arrayFlatten;
    function flattenWithDepth(array, result, depth) {
      for (var i = 0; i < array.length; i++) {
        var value = array[i];
        if (depth > 0 && Array.isArray(value)) {
          flattenWithDepth(value, result, depth - 1);
        } else {
          result.push(value);
        }
      }
      return result;
    }
    function flattenForever(array, result) {
      for (var i = 0; i < array.length; i++) {
        var value = array[i];
        if (Array.isArray(value)) {
          flattenForever(value, result);
        } else {
          result.push(value);
        }
      }
      return result;
    }
    function arrayFlatten(array, depth) {
      if (depth == null) {
        return flattenForever(array, []);
      }
      return flattenWithDepth(array, [], depth);
    }
  }
});

// ../../node_modules/path-to-regexp/index.js
var require_path_to_regexp = __commonJS({
  "../../node_modules/path-to-regexp/index.js"(exports, module) {
    "use strict";
    module.exports = pathToRegexp;
    var MATCHING_GROUP_REGEXP = /\\.|\((?:\?<(.*?)>)?(?!\?)/g;
    function pathToRegexp(path3, keys, options) {
      options = options || {};
      keys = keys || [];
      var strict = options.strict;
      var end = options.end !== false;
      var flags = options.sensitive ? "" : "i";
      var lookahead = options.lookahead !== false;
      var extraOffset = 0;
      var keysOffset = keys.length;
      var i = 0;
      var name = 0;
      var pos = 0;
      var backtrack = "";
      var m;
      if (path3 instanceof RegExp) {
        while (m = MATCHING_GROUP_REGEXP.exec(path3.source)) {
          if (m[0][0] === "\\") continue;
          keys.push({
            name: m[1] || name++,
            optional: false,
            offset: m.index
          });
        }
        return path3;
      }
      if (Array.isArray(path3)) {
        path3 = path3.map(function(value) {
          return pathToRegexp(value, keys, options).source;
        });
        return new RegExp(path3.join("|"), flags);
      }
      path3 = path3.replace(
        /\\.|(\/)?(\.)?:(\w+)(\(.*?\))?(\*)?(\?)?|[.*]|\/\(/g,
        function(match, slash, format, key, capture, star, optional, offset) {
          pos = offset + match.length;
          if (match[0] === "\\") {
            backtrack += match;
            return match;
          }
          if (match === ".") {
            backtrack += "\\.";
            extraOffset += 1;
            return "\\.";
          }
          backtrack = slash || format ? "" : path3.slice(pos, offset);
          if (match === "*") {
            extraOffset += 3;
            return "(.*)";
          }
          if (match === "/(") {
            backtrack += "/";
            extraOffset += 2;
            return "/(?:";
          }
          slash = slash || "";
          format = format ? "\\." : "";
          optional = optional || "";
          capture = capture ? capture.replace(/\\.|\*/, function(m2) {
            return m2 === "*" ? "(.*)" : m2;
          }) : backtrack ? "((?:(?!/|" + backtrack + ").)+?)" : "([^/" + format + "]+?)";
          keys.push({
            name: key,
            optional: !!optional,
            offset: offset + extraOffset
          });
          var result = "(?:" + format + slash + capture + (star ? "((?:[/" + format + "].+?)?)" : "") + ")" + optional;
          extraOffset += result.length - match.length;
          return result;
        }
      );
      while (m = MATCHING_GROUP_REGEXP.exec(path3)) {
        if (m[0][0] === "\\") continue;
        if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
          keys.splice(keysOffset + i, 0, {
            name: name++,
            // Unnamed matching groups must be consistently linear.
            optional: false,
            offset: m.index
          });
        }
        i++;
      }
      path3 += strict ? "" : path3[path3.length - 1] === "/" ? "?" : "/?";
      if (end) {
        path3 += "$";
      } else if (path3[path3.length - 1] !== "/") {
        path3 += lookahead ? "(?=/|$)" : "(?:/|$)";
      }
      return new RegExp("^" + path3, flags);
    }
  }
});

// ../../node_modules/express/lib/router/layer.js
var require_layer = __commonJS({
  "../../node_modules/express/lib/router/layer.js"(exports, module) {
    "use strict";
    var pathRegexp = require_path_to_regexp();
    var debug = require_src3()("express:router:layer");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    module.exports = Layer;
    function Layer(path3, options, fn) {
      if (!(this instanceof Layer)) {
        return new Layer(path3, options, fn);
      }
      debug("new %o", path3);
      var opts = options || {};
      this.handle = fn;
      this.name = fn.name || "<anonymous>";
      this.params = void 0;
      this.path = void 0;
      this.regexp = pathRegexp(path3, this.keys = [], opts);
      this.regexp.fast_star = path3 === "*";
      this.regexp.fast_slash = path3 === "/" && opts.end === false;
    }
    Layer.prototype.handle_error = function handle_error(error, req, res, next) {
      var fn = this.handle;
      if (fn.length !== 4) {
        return next(error);
      }
      try {
        fn(error, req, res, next);
      } catch (err) {
        next(err);
      }
    };
    Layer.prototype.handle_request = function handle(req, res, next) {
      var fn = this.handle;
      if (fn.length > 3) {
        return next();
      }
      try {
        fn(req, res, next);
      } catch (err) {
        next(err);
      }
    };
    Layer.prototype.match = function match(path3) {
      var match2;
      if (path3 != null) {
        if (this.regexp.fast_slash) {
          this.params = {};
          this.path = "";
          return true;
        }
        if (this.regexp.fast_star) {
          this.params = { "0": decode_param(path3) };
          this.path = path3;
          return true;
        }
        match2 = this.regexp.exec(path3);
      }
      if (!match2) {
        this.params = void 0;
        this.path = void 0;
        return false;
      }
      this.params = {};
      this.path = match2[0];
      var keys = this.keys;
      var params = this.params;
      for (var i = 1; i < match2.length; i++) {
        var key = keys[i - 1];
        var prop = key.name;
        var val = decode_param(match2[i]);
        if (val !== void 0 || !hasOwnProperty.call(params, prop)) {
          params[prop] = val;
        }
      }
      return true;
    };
    function decode_param(val) {
      if (typeof val !== "string" || val.length === 0) {
        return val;
      }
      try {
        return decodeURIComponent(val);
      } catch (err) {
        if (err instanceof URIError) {
          err.message = "Failed to decode param '" + val + "'";
          err.status = err.statusCode = 400;
        }
        throw err;
      }
    }
  }
});

// ../../node_modules/methods/index.js
var require_methods = __commonJS({
  "../../node_modules/methods/index.js"(exports, module) {
    "use strict";
    var http = __require("http");
    module.exports = getCurrentNodeMethods() || getBasicNodeMethods();
    function getCurrentNodeMethods() {
      return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
        return method.toLowerCase();
      });
    }
    function getBasicNodeMethods() {
      return [
        "get",
        "post",
        "put",
        "head",
        "delete",
        "options",
        "trace",
        "copy",
        "lock",
        "mkcol",
        "move",
        "purge",
        "propfind",
        "proppatch",
        "unlock",
        "report",
        "mkactivity",
        "checkout",
        "merge",
        "m-search",
        "notify",
        "subscribe",
        "unsubscribe",
        "patch",
        "search",
        "connect"
      ];
    }
  }
});

// ../../node_modules/express/lib/router/route.js
var require_route = __commonJS({
  "../../node_modules/express/lib/router/route.js"(exports, module) {
    "use strict";
    var debug = require_src3()("express:router:route");
    var flatten = require_array_flatten();
    var Layer = require_layer();
    var methods = require_methods();
    var slice = Array.prototype.slice;
    var toString = Object.prototype.toString;
    module.exports = Route;
    function Route(path3) {
      this.path = path3;
      this.stack = [];
      debug("new %o", path3);
      this.methods = {};
    }
    Route.prototype._handles_method = function _handles_method(method) {
      if (this.methods._all) {
        return true;
      }
      var name = typeof method === "string" ? method.toLowerCase() : method;
      if (name === "head" && !this.methods["head"]) {
        name = "get";
      }
      return Boolean(this.methods[name]);
    };
    Route.prototype._options = function _options() {
      var methods2 = Object.keys(this.methods);
      if (this.methods.get && !this.methods.head) {
        methods2.push("head");
      }
      for (var i = 0; i < methods2.length; i++) {
        methods2[i] = methods2[i].toUpperCase();
      }
      return methods2;
    };
    Route.prototype.dispatch = function dispatch(req, res, done) {
      var idx = 0;
      var stack = this.stack;
      var sync = 0;
      if (stack.length === 0) {
        return done();
      }
      var method = typeof req.method === "string" ? req.method.toLowerCase() : req.method;
      if (method === "head" && !this.methods["head"]) {
        method = "get";
      }
      req.route = this;
      next();
      function next(err) {
        if (err && err === "route") {
          return done();
        }
        if (err && err === "router") {
          return done(err);
        }
        if (++sync > 100) {
          return setImmediate(next, err);
        }
        var layer = stack[idx++];
        if (!layer) {
          return done(err);
        }
        if (layer.method && layer.method !== method) {
          next(err);
        } else if (err) {
          layer.handle_error(err, req, res, next);
        } else {
          layer.handle_request(req, res, next);
        }
        sync = 0;
      }
    };
    Route.prototype.all = function all() {
      var handles = flatten(slice.call(arguments));
      for (var i = 0; i < handles.length; i++) {
        var handle = handles[i];
        if (typeof handle !== "function") {
          var type = toString.call(handle);
          var msg = "Route.all() requires a callback function but got a " + type;
          throw new TypeError(msg);
        }
        var layer = Layer("/", {}, handle);
        layer.method = void 0;
        this.methods._all = true;
        this.stack.push(layer);
      }
      return this;
    };
    methods.forEach(function(method) {
      Route.prototype[method] = function() {
        var handles = flatten(slice.call(arguments));
        for (var i = 0; i < handles.length; i++) {
          var handle = handles[i];
          if (typeof handle !== "function") {
            var type = toString.call(handle);
            var msg = "Route." + method + "() requires a callback function but got a " + type;
            throw new Error(msg);
          }
          debug("%s %o", method, this.path);
          var layer = Layer("/", {}, handle);
          layer.method = method;
          this.methods[method] = true;
          this.stack.push(layer);
        }
        return this;
      };
    });
  }
});

// ../../node_modules/utils-merge/index.js
var require_utils_merge = __commonJS({
  "../../node_modules/utils-merge/index.js"(exports, module) {
    "use strict";
    exports = module.exports = function(a, b) {
      if (a && b) {
        for (var key in b) {
          a[key] = b[key];
        }
      }
      return a;
    };
  }
});

// ../../node_modules/express/lib/router/index.js
var require_router = __commonJS({
  "../../node_modules/express/lib/router/index.js"(exports, module) {
    "use strict";
    var Route = require_route();
    var Layer = require_layer();
    var methods = require_methods();
    var mixin2 = require_utils_merge();
    var debug = require_src3()("express:router");
    var deprecate = require_depd()("express");
    var flatten = require_array_flatten();
    var parseUrl = require_parseurl();
    var setPrototypeOf = require_setprototypeof();
    var objectRegExp = /^\[object (\S+)\]$/;
    var slice = Array.prototype.slice;
    var toString = Object.prototype.toString;
    var proto = module.exports = function(options) {
      var opts = options || {};
      function router8(req, res, next) {
        router8.handle(req, res, next);
      }
      setPrototypeOf(router8, proto);
      router8.params = {};
      router8._params = [];
      router8.caseSensitive = opts.caseSensitive;
      router8.mergeParams = opts.mergeParams;
      router8.strict = opts.strict;
      router8.stack = [];
      return router8;
    };
    proto.param = function param(name, fn) {
      if (typeof name === "function") {
        deprecate("router.param(fn): Refactor to use path params");
        this._params.push(name);
        return;
      }
      var params = this._params;
      var len = params.length;
      var ret;
      if (name[0] === ":") {
        deprecate("router.param(" + JSON.stringify(name) + ", fn): Use router.param(" + JSON.stringify(name.slice(1)) + ", fn) instead");
        name = name.slice(1);
      }
      for (var i = 0; i < len; ++i) {
        if (ret = params[i](name, fn)) {
          fn = ret;
        }
      }
      if ("function" !== typeof fn) {
        throw new Error("invalid param() call for " + name + ", got " + fn);
      }
      (this.params[name] = this.params[name] || []).push(fn);
      return this;
    };
    proto.handle = function handle(req, res, out) {
      var self2 = this;
      debug("dispatching %s %s", req.method, req.url);
      var idx = 0;
      var protohost = getProtohost(req.url) || "";
      var removed = "";
      var slashAdded = false;
      var sync = 0;
      var paramcalled = {};
      var options = [];
      var stack = self2.stack;
      var parentParams = req.params;
      var parentUrl = req.baseUrl || "";
      var done = restore(out, req, "baseUrl", "next", "params");
      req.next = next;
      if (req.method === "OPTIONS") {
        done = wrap(done, function(old, err) {
          if (err || options.length === 0) return old(err);
          sendOptionsResponse(res, options, old);
        });
      }
      req.baseUrl = parentUrl;
      req.originalUrl = req.originalUrl || req.url;
      next();
      function next(err) {
        var layerError = err === "route" ? null : err;
        if (slashAdded) {
          req.url = req.url.slice(1);
          slashAdded = false;
        }
        if (removed.length !== 0) {
          req.baseUrl = parentUrl;
          req.url = protohost + removed + req.url.slice(protohost.length);
          removed = "";
        }
        if (layerError === "router") {
          setImmediate(done, null);
          return;
        }
        if (idx >= stack.length) {
          setImmediate(done, layerError);
          return;
        }
        if (++sync > 100) {
          return setImmediate(next, err);
        }
        var path3 = getPathname(req);
        if (path3 == null) {
          return done(layerError);
        }
        var layer;
        var match;
        var route;
        while (match !== true && idx < stack.length) {
          layer = stack[idx++];
          match = matchLayer(layer, path3);
          route = layer.route;
          if (typeof match !== "boolean") {
            layerError = layerError || match;
          }
          if (match !== true) {
            continue;
          }
          if (!route) {
            continue;
          }
          if (layerError) {
            match = false;
            continue;
          }
          var method = req.method;
          var has_method = route._handles_method(method);
          if (!has_method && method === "OPTIONS") {
            appendMethods(options, route._options());
          }
          if (!has_method && method !== "HEAD") {
            match = false;
          }
        }
        if (match !== true) {
          return done(layerError);
        }
        if (route) {
          req.route = route;
        }
        req.params = self2.mergeParams ? mergeParams(layer.params, parentParams) : layer.params;
        var layerPath = layer.path;
        self2.process_params(layer, paramcalled, req, res, function(err2) {
          if (err2) {
            next(layerError || err2);
          } else if (route) {
            layer.handle_request(req, res, next);
          } else {
            trim_prefix(layer, layerError, layerPath, path3);
          }
          sync = 0;
        });
      }
      function trim_prefix(layer, layerError, layerPath, path3) {
        if (layerPath.length !== 0) {
          if (layerPath !== path3.slice(0, layerPath.length)) {
            next(layerError);
            return;
          }
          var c = path3[layerPath.length];
          if (c && c !== "/" && c !== ".") return next(layerError);
          debug("trim prefix (%s) from url %s", layerPath, req.url);
          removed = layerPath;
          req.url = protohost + req.url.slice(protohost.length + removed.length);
          if (!protohost && req.url[0] !== "/") {
            req.url = "/" + req.url;
            slashAdded = true;
          }
          req.baseUrl = parentUrl + (removed[removed.length - 1] === "/" ? removed.substring(0, removed.length - 1) : removed);
        }
        debug("%s %s : %s", layer.name, layerPath, req.originalUrl);
        if (layerError) {
          layer.handle_error(layerError, req, res, next);
        } else {
          layer.handle_request(req, res, next);
        }
      }
    };
    proto.process_params = function process_params(layer, called, req, res, done) {
      var params = this.params;
      var keys = layer.keys;
      if (!keys || keys.length === 0) {
        return done();
      }
      var i = 0;
      var name;
      var paramIndex = 0;
      var key;
      var paramVal;
      var paramCallbacks;
      var paramCalled;
      function param(err) {
        if (err) {
          return done(err);
        }
        if (i >= keys.length) {
          return done();
        }
        paramIndex = 0;
        key = keys[i++];
        name = key.name;
        paramVal = req.params[name];
        paramCallbacks = params[name];
        paramCalled = called[name];
        if (paramVal === void 0 || !paramCallbacks) {
          return param();
        }
        if (paramCalled && (paramCalled.match === paramVal || paramCalled.error && paramCalled.error !== "route")) {
          req.params[name] = paramCalled.value;
          return param(paramCalled.error);
        }
        called[name] = paramCalled = {
          error: null,
          match: paramVal,
          value: paramVal
        };
        paramCallback();
      }
      function paramCallback(err) {
        var fn = paramCallbacks[paramIndex++];
        paramCalled.value = req.params[key.name];
        if (err) {
          paramCalled.error = err;
          param(err);
          return;
        }
        if (!fn) return param();
        try {
          fn(req, res, paramCallback, paramVal, key.name);
        } catch (e) {
          paramCallback(e);
        }
      }
      param();
    };
    proto.use = function use(fn) {
      var offset = 0;
      var path3 = "/";
      if (typeof fn !== "function") {
        var arg = fn;
        while (Array.isArray(arg) && arg.length !== 0) {
          arg = arg[0];
        }
        if (typeof arg !== "function") {
          offset = 1;
          path3 = fn;
        }
      }
      var callbacks = flatten(slice.call(arguments, offset));
      if (callbacks.length === 0) {
        throw new TypeError("Router.use() requires a middleware function");
      }
      for (var i = 0; i < callbacks.length; i++) {
        var fn = callbacks[i];
        if (typeof fn !== "function") {
          throw new TypeError("Router.use() requires a middleware function but got a " + gettype(fn));
        }
        debug("use %o %s", path3, fn.name || "<anonymous>");
        var layer = new Layer(path3, {
          sensitive: this.caseSensitive,
          strict: false,
          end: false
        }, fn);
        layer.route = void 0;
        this.stack.push(layer);
      }
      return this;
    };
    proto.route = function route(path3) {
      var route2 = new Route(path3);
      var layer = new Layer(path3, {
        sensitive: this.caseSensitive,
        strict: this.strict,
        end: true
      }, route2.dispatch.bind(route2));
      layer.route = route2;
      this.stack.push(layer);
      return route2;
    };
    methods.concat("all").forEach(function(method) {
      proto[method] = function(path3) {
        var route = this.route(path3);
        route[method].apply(route, slice.call(arguments, 1));
        return this;
      };
    });
    function appendMethods(list, addition) {
      for (var i = 0; i < addition.length; i++) {
        var method = addition[i];
        if (list.indexOf(method) === -1) {
          list.push(method);
        }
      }
    }
    function getPathname(req) {
      try {
        return parseUrl(req).pathname;
      } catch (err) {
        return void 0;
      }
    }
    function getProtohost(url) {
      if (typeof url !== "string" || url.length === 0 || url[0] === "/") {
        return void 0;
      }
      var searchIndex = url.indexOf("?");
      var pathLength = searchIndex !== -1 ? searchIndex : url.length;
      var fqdnIndex = url.slice(0, pathLength).indexOf("://");
      return fqdnIndex !== -1 ? url.substring(0, url.indexOf("/", 3 + fqdnIndex)) : void 0;
    }
    function gettype(obj) {
      var type = typeof obj;
      if (type !== "object") {
        return type;
      }
      return toString.call(obj).replace(objectRegExp, "$1");
    }
    function matchLayer(layer, path3) {
      try {
        return layer.match(path3);
      } catch (err) {
        return err;
      }
    }
    function mergeParams(params, parent) {
      if (typeof parent !== "object" || !parent) {
        return params;
      }
      var obj = mixin2({}, parent);
      if (!(0 in params) || !(0 in parent)) {
        return mixin2(obj, params);
      }
      var i = 0;
      var o = 0;
      while (i in params) {
        i++;
      }
      while (o in parent) {
        o++;
      }
      for (i--; i >= 0; i--) {
        params[i + o] = params[i];
        if (i < o) {
          delete params[i];
        }
      }
      return mixin2(obj, params);
    }
    function restore(fn, obj) {
      var props = new Array(arguments.length - 2);
      var vals = new Array(arguments.length - 2);
      for (var i = 0; i < props.length; i++) {
        props[i] = arguments[i + 2];
        vals[i] = obj[props[i]];
      }
      return function() {
        for (var i2 = 0; i2 < props.length; i2++) {
          obj[props[i2]] = vals[i2];
        }
        return fn.apply(this, arguments);
      };
    }
    function sendOptionsResponse(res, options, next) {
      try {
        var body = options.join(",");
        res.set("Allow", body);
        res.send(body);
      } catch (err) {
        next(err);
      }
    }
    function wrap(old, fn) {
      return function proxy() {
        var args = new Array(arguments.length + 1);
        args[0] = old;
        for (var i = 0, len = arguments.length; i < len; i++) {
          args[i + 1] = arguments[i];
        }
        fn.apply(this, args);
      };
    }
  }
});

// ../../node_modules/express/lib/middleware/init.js
var require_init = __commonJS({
  "../../node_modules/express/lib/middleware/init.js"(exports) {
    "use strict";
    var setPrototypeOf = require_setprototypeof();
    exports.init = function(app2) {
      return function expressInit(req, res, next) {
        if (app2.enabled("x-powered-by")) res.setHeader("X-Powered-By", "Express");
        req.res = res;
        res.req = req;
        req.next = next;
        setPrototypeOf(req, app2.request);
        setPrototypeOf(res, app2.response);
        res.locals = res.locals || /* @__PURE__ */ Object.create(null);
        next();
      };
    };
  }
});

// ../../node_modules/express/lib/middleware/query.js
var require_query = __commonJS({
  "../../node_modules/express/lib/middleware/query.js"(exports, module) {
    "use strict";
    var merge = require_utils_merge();
    var parseUrl = require_parseurl();
    var qs = require_lib2();
    module.exports = function query(options) {
      var opts = merge({}, options);
      var queryparse = qs.parse;
      if (typeof options === "function") {
        queryparse = options;
        opts = void 0;
      }
      if (opts !== void 0 && opts.allowPrototypes === void 0) {
        opts.allowPrototypes = true;
      }
      return function query2(req, res, next) {
        if (!req.query) {
          var val = parseUrl(req).query;
          req.query = queryparse(val, opts);
        }
        next();
      };
    };
  }
});

// ../../node_modules/express/lib/view.js
var require_view = __commonJS({
  "../../node_modules/express/lib/view.js"(exports, module) {
    "use strict";
    var debug = require_src3()("express:view");
    var path3 = __require("path");
    var fs3 = __require("fs");
    var dirname = path3.dirname;
    var basename = path3.basename;
    var extname = path3.extname;
    var join = path3.join;
    var resolve = path3.resolve;
    module.exports = View;
    function View(name, options) {
      var opts = options || {};
      this.defaultEngine = opts.defaultEngine;
      this.ext = extname(name);
      this.name = name;
      this.root = opts.root;
      if (!this.ext && !this.defaultEngine) {
        throw new Error("No default engine was specified and no extension was provided.");
      }
      var fileName = name;
      if (!this.ext) {
        this.ext = this.defaultEngine[0] !== "." ? "." + this.defaultEngine : this.defaultEngine;
        fileName += this.ext;
      }
      if (!opts.engines[this.ext]) {
        var mod = this.ext.slice(1);
        debug('require "%s"', mod);
        var fn = __require(mod).__express;
        if (typeof fn !== "function") {
          throw new Error('Module "' + mod + '" does not provide a view engine.');
        }
        opts.engines[this.ext] = fn;
      }
      this.engine = opts.engines[this.ext];
      this.path = this.lookup(fileName);
    }
    View.prototype.lookup = function lookup(name) {
      var path4;
      var roots = [].concat(this.root);
      debug('lookup "%s"', name);
      for (var i = 0; i < roots.length && !path4; i++) {
        var root = roots[i];
        var loc = resolve(root, name);
        var dir = dirname(loc);
        var file = basename(loc);
        path4 = this.resolve(dir, file);
      }
      return path4;
    };
    View.prototype.render = function render(options, callback) {
      debug('render "%s"', this.path);
      this.engine(this.path, options, callback);
    };
    View.prototype.resolve = function resolve2(dir, file) {
      var ext = this.ext;
      var path4 = join(dir, file);
      var stat = tryStat(path4);
      if (stat && stat.isFile()) {
        return path4;
      }
      path4 = join(dir, basename(file, ext), "index" + ext);
      stat = tryStat(path4);
      if (stat && stat.isFile()) {
        return path4;
      }
    };
    function tryStat(path4) {
      debug('stat "%s"', path4);
      try {
        return fs3.statSync(path4);
      } catch (e) {
        return void 0;
      }
    }
  }
});

// ../../node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "../../node_modules/safe-buffer/index.js"(exports, module) {
    "use strict";
    var buffer = __require("buffer");
    var Buffer3 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer3(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer3.prototype);
    copyProps(Buffer3, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer3(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer3(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer3(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// ../../node_modules/content-disposition/index.js
var require_content_disposition = __commonJS({
  "../../node_modules/content-disposition/index.js"(exports, module) {
    "use strict";
    module.exports = contentDisposition;
    module.exports.parse = parse2;
    var basename = __require("path").basename;
    var Buffer3 = require_safe_buffer().Buffer;
    var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
    var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
    var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
    var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
    var QESC_REGEXP = /\\([\u0000-\u007f])/g;
    var QUOTE_REGEXP = /([\\"])/g;
    var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
    var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
    var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
    var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
    var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
    function contentDisposition(filename, options) {
      var opts = options || {};
      var type = opts.type || "attachment";
      var params = createparams(filename, opts.fallback);
      return format(new ContentDisposition(type, params));
    }
    function createparams(filename, fallback) {
      if (filename === void 0) {
        return;
      }
      var params = {};
      if (typeof filename !== "string") {
        throw new TypeError("filename must be a string");
      }
      if (fallback === void 0) {
        fallback = true;
      }
      if (typeof fallback !== "string" && typeof fallback !== "boolean") {
        throw new TypeError("fallback must be a string or boolean");
      }
      if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
        throw new TypeError("fallback must be ISO-8859-1 string");
      }
      var name = basename(filename);
      var isQuotedString = TEXT_REGEXP.test(name);
      var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
      var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
      if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
        params["filename*"] = name;
      }
      if (isQuotedString || hasFallback) {
        params.filename = hasFallback ? fallbackName : name;
      }
      return params;
    }
    function format(obj) {
      var parameters2 = obj.parameters;
      var type = obj.type;
      if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
        throw new TypeError("invalid type");
      }
      var string = String(type).toLowerCase();
      if (parameters2 && typeof parameters2 === "object") {
        var param;
        var params = Object.keys(parameters2).sort();
        for (var i = 0; i < params.length; i++) {
          param = params[i];
          var val = param.substr(-1) === "*" ? ustring(parameters2[param]) : qstring(parameters2[param]);
          string += "; " + param + "=" + val;
        }
      }
      return string;
    }
    function decodefield(str) {
      var match = EXT_VALUE_REGEXP.exec(str);
      if (!match) {
        throw new TypeError("invalid extended field value");
      }
      var charset = match[1].toLowerCase();
      var encoded = match[2];
      var value;
      var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
      switch (charset) {
        case "iso-8859-1":
          value = getlatin1(binary);
          break;
        case "utf-8":
          value = Buffer3.from(binary, "binary").toString("utf8");
          break;
        default:
          throw new TypeError("unsupported charset in extended field");
      }
      return value;
    }
    function getlatin1(val) {
      return String(val).replace(NON_LATIN1_REGEXP, "?");
    }
    function parse2(string) {
      if (!string || typeof string !== "string") {
        throw new TypeError("argument string is required");
      }
      var match = DISPOSITION_TYPE_REGEXP.exec(string);
      if (!match) {
        throw new TypeError("invalid type format");
      }
      var index = match[0].length;
      var type = match[1].toLowerCase();
      var key;
      var names = [];
      var params = {};
      var value;
      index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
      while (match = PARAM_REGEXP.exec(string)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (names.indexOf(key) !== -1) {
          throw new TypeError("invalid duplicate parameter");
        }
        names.push(key);
        if (key.indexOf("*") + 1 === key.length) {
          key = key.slice(0, -1);
          value = decodefield(value);
          params[key] = value;
          continue;
        }
        if (typeof params[key] === "string") {
          continue;
        }
        if (value[0] === '"') {
          value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
        }
        params[key] = value;
      }
      if (index !== -1 && index !== string.length) {
        throw new TypeError("invalid parameter format");
      }
      return new ContentDisposition(type, params);
    }
    function pdecode(str, hex) {
      return String.fromCharCode(parseInt(hex, 16));
    }
    function pencode(char) {
      return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
    }
    function qstring(val) {
      var str = String(val);
      return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
    }
    function ustring(val) {
      var str = String(val);
      var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
      return "UTF-8''" + encoded;
    }
    function ContentDisposition(type, parameters2) {
      this.type = type;
      this.parameters = parameters2;
    }
  }
});

// ../../node_modules/send/node_modules/debug/node_modules/ms/index.js
var require_ms4 = __commonJS({
  "../../node_modules/send/node_modules/debug/node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + "d";
      }
      if (ms >= h) {
        return Math.round(ms / h) + "h";
      }
      if (ms >= m) {
        return Math.round(ms / m) + "m";
      }
      if (ms >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
    }
    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name;
      }
      return Math.ceil(ms / n) + " " + name + "s";
    }
  }
});

// ../../node_modules/send/node_modules/debug/src/debug.js
var require_debug4 = __commonJS({
  "../../node_modules/send/node_modules/debug/src/debug.js"(exports, module) {
    "use strict";
    exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require_ms4();
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    var prevTime;
    function selectColor(namespace) {
      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    function createDebug(namespace) {
      function debug() {
        if (!debug.enabled) return;
        var self2 = debug;
        var curr = +/* @__PURE__ */ new Date();
        var ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ("string" !== typeof args[0]) {
          args.unshift("%O");
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          if (match === "%%") return match;
          index++;
          var formatter = exports.formatters[format];
          if ("function" === typeof formatter) {
            var val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        exports.formatArgs.call(self2, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      if ("function" === typeof exports.init) {
        exports.init(debug);
      }
      return debug;
    }
    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      var len = split.length;
      for (var i = 0; i < len; i++) {
        if (!split[i]) continue;
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          exports.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }
    function disable() {
      exports.enable("");
    }
    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  }
});

// ../../node_modules/send/node_modules/debug/src/browser.js
var require_browser4 = __commonJS({
  "../../node_modules/send/node_modules/debug/src/browser.js"(exports, module) {
    "use strict";
    exports = module.exports = require_debug4();
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
    exports.colors = [
      "lightseagreen",
      "forestgreen",
      "goldenrod",
      "dodgerblue",
      "darkorchid",
      "crimson"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
        return true;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
      }
    };
    function formatArgs(args) {
      var useColors2 = this.useColors;
      args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
      if (!useColors2) return;
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ("%%" === match) return;
        index++;
        if ("%c" === match) {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem("debug");
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {
      }
    }
    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    exports.enable(load());
    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/send/node_modules/debug/src/node.js
var require_node4 = __commonJS({
  "../../node_modules/send/node_modules/debug/src/node.js"(exports, module) {
    "use strict";
    var tty = __require("tty");
    var util = __require("util");
    exports = module.exports = require_debug4();
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
      else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
      else if (val === "null") val = null;
      else val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
    if (1 !== fd && 2 !== fd) {
      util.deprecate(function() {
      }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
    }
    var stream2 = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
    }
    exports.formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    exports.formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
    function formatArgs(args) {
      var name = this.namespace;
      var useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var prefix = "  \x1B[3" + c + ";1m" + name + " \x1B[0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = (/* @__PURE__ */ new Date()).toUTCString() + " " + name + " " + args[0];
      }
    }
    function log() {
      return stream2.write(util.format.apply(util, arguments) + "\n");
    }
    function save(namespaces) {
      if (null == namespaces) {
        delete process.env.DEBUG;
      } else {
        process.env.DEBUG = namespaces;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function createWritableStdioStream(fd2) {
      var stream3;
      var tty_wrap = process.binding("tty_wrap");
      switch (tty_wrap.guessHandleType(fd2)) {
        case "TTY":
          stream3 = new tty.WriteStream(fd2);
          stream3._type = "tty";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        case "FILE":
          var fs3 = __require("fs");
          stream3 = new fs3.SyncWriteStream(fd2, { autoClose: false });
          stream3._type = "fs";
          break;
        case "PIPE":
        case "TCP":
          var net = __require("net");
          stream3 = new net.Socket({
            fd: fd2,
            readable: false,
            writable: true
          });
          stream3.readable = false;
          stream3.read = null;
          stream3._type = "pipe";
          if (stream3._handle && stream3._handle.unref) {
            stream3._handle.unref();
          }
          break;
        default:
          throw new Error("Implement me. Unknown stream file type!");
      }
      stream3.fd = fd2;
      stream3._isStdio = true;
      return stream3;
    }
    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    exports.enable(load());
  }
});

// ../../node_modules/send/node_modules/debug/src/index.js
var require_src4 = __commonJS({
  "../../node_modules/send/node_modules/debug/src/index.js"(exports, module) {
    "use strict";
    if (typeof process !== "undefined" && process.type === "renderer") {
      module.exports = require_browser4();
    } else {
      module.exports = require_node4();
    }
  }
});

// ../../node_modules/send/node_modules/encodeurl/index.js
var require_encodeurl2 = __commonJS({
  "../../node_modules/send/node_modules/encodeurl/index.js"(exports, module) {
    "use strict";
    module.exports = encodeUrl;
    var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
    var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
    var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
    function encodeUrl(url) {
      return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
    }
  }
});

// ../../node_modules/etag/index.js
var require_etag = __commonJS({
  "../../node_modules/etag/index.js"(exports, module) {
    "use strict";
    module.exports = etag;
    var crypto2 = __require("crypto");
    var Stats = __require("fs").Stats;
    var toString = Object.prototype.toString;
    function entitytag(entity) {
      if (entity.length === 0) {
        return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
      }
      var hash = crypto2.createHash("sha1").update(entity, "utf8").digest("base64").substring(0, 27);
      var len = typeof entity === "string" ? Buffer.byteLength(entity, "utf8") : entity.length;
      return '"' + len.toString(16) + "-" + hash + '"';
    }
    function etag(entity, options) {
      if (entity == null) {
        throw new TypeError("argument entity is required");
      }
      var isStats = isstats(entity);
      var weak = options && typeof options.weak === "boolean" ? options.weak : isStats;
      if (!isStats && typeof entity !== "string" && !Buffer.isBuffer(entity)) {
        throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
      }
      var tag = isStats ? stattag(entity) : entitytag(entity);
      return weak ? "W/" + tag : tag;
    }
    function isstats(obj) {
      if (typeof Stats === "function" && obj instanceof Stats) {
        return true;
      }
      return obj && typeof obj === "object" && "ctime" in obj && toString.call(obj.ctime) === "[object Date]" && "mtime" in obj && toString.call(obj.mtime) === "[object Date]" && "ino" in obj && typeof obj.ino === "number" && "size" in obj && typeof obj.size === "number";
    }
    function stattag(stat) {
      var mtime = stat.mtime.getTime().toString(16);
      var size = stat.size.toString(16);
      return '"' + size + "-" + mtime + '"';
    }
  }
});

// ../../node_modules/fresh/index.js
var require_fresh = __commonJS({
  "../../node_modules/fresh/index.js"(exports, module) {
    "use strict";
    var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;
    module.exports = fresh;
    function fresh(reqHeaders, resHeaders) {
      var modifiedSince = reqHeaders["if-modified-since"];
      var noneMatch = reqHeaders["if-none-match"];
      if (!modifiedSince && !noneMatch) {
        return false;
      }
      var cacheControl = reqHeaders["cache-control"];
      if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
        return false;
      }
      if (noneMatch && noneMatch !== "*") {
        var etag = resHeaders["etag"];
        if (!etag) {
          return false;
        }
        var etagStale = true;
        var matches = parseTokenList(noneMatch);
        for (var i = 0; i < matches.length; i++) {
          var match = matches[i];
          if (match === etag || match === "W/" + etag || "W/" + match === etag) {
            etagStale = false;
            break;
          }
        }
        if (etagStale) {
          return false;
        }
      }
      if (modifiedSince) {
        var lastModified = resHeaders["last-modified"];
        var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));
        if (modifiedStale) {
          return false;
        }
      }
      return true;
    }
    function parseHttpDate(date) {
      var timestamp = date && Date.parse(date);
      return typeof timestamp === "number" ? timestamp : NaN;
    }
    function parseTokenList(str) {
      var end = 0;
      var list = [];
      var start = 0;
      for (var i = 0, len = str.length; i < len; i++) {
        switch (str.charCodeAt(i)) {
          case 32:
            if (start === end) {
              start = end = i + 1;
            }
            break;
          case 44:
            list.push(str.substring(start, end));
            start = end = i + 1;
            break;
          default:
            end = i + 1;
            break;
        }
      }
      list.push(str.substring(start, end));
      return list;
    }
  }
});

// ../../node_modules/mime/types.json
var require_types = __commonJS({
  "../../node_modules/mime/types.json"(exports, module) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/bdoc": ["bdoc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": [], "application/font-woff2": [], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": [], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": [], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": [], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": [], "application/x-msdownload": ["com", "bat"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": [], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": [], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp3": [], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/wav": ["wav"], "audio/wave": [], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": [], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": [], "audio/x-wav": [], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/apng": ["apng"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": [], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": [], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/rtf": [], "text/sgml": ["sgml", "sgm"], "text/slim": ["slim", "slm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": [], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/xml": [], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }
});

// ../../node_modules/mime/mime.js
var require_mime = __commonJS({
  "../../node_modules/mime/mime.js"(exports, module) {
    "use strict";
    var path3 = __require("path");
    var fs3 = __require("fs");
    function Mime() {
      this.types = /* @__PURE__ */ Object.create(null);
      this.extensions = /* @__PURE__ */ Object.create(null);
    }
    Mime.prototype.define = function(map) {
      for (var type in map) {
        var exts = map[type];
        for (var i = 0; i < exts.length; i++) {
          if (process.env.DEBUG_MIME && this.types[exts[i]]) {
            console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + " to " + type);
          }
          this.types[exts[i]] = type;
        }
        if (!this.extensions[type]) {
          this.extensions[type] = exts[0];
        }
      }
    };
    Mime.prototype.load = function(file) {
      this._loading = file;
      var map = {}, content = fs3.readFileSync(file, "ascii"), lines = content.split(/[\r\n]+/);
      lines.forEach(function(line) {
        var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
        map[fields.shift()] = fields;
      });
      this.define(map);
      this._loading = null;
    };
    Mime.prototype.lookup = function(path4, fallback) {
      var ext = path4.replace(/^.*[\.\/\\]/, "").toLowerCase();
      return this.types[ext] || fallback || this.default_type;
    };
    Mime.prototype.extension = function(mimeType) {
      var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
      return this.extensions[type];
    };
    var mime = new Mime();
    mime.define(require_types());
    mime.default_type = mime.lookup("bin");
    mime.Mime = Mime;
    mime.charsets = {
      lookup: function(mimeType, fallback) {
        return /^text\/|^application\/(javascript|json)/.test(mimeType) ? "UTF-8" : fallback;
      }
    };
    module.exports = mime;
  }
});

// ../../node_modules/ms/index.js
var require_ms5 = __commonJS({
  "../../node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/range-parser/index.js
var require_range_parser = __commonJS({
  "../../node_modules/range-parser/index.js"(exports, module) {
    "use strict";
    module.exports = rangeParser;
    function rangeParser(size, str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var index = str.indexOf("=");
      if (index === -1) {
        return -2;
      }
      var arr = str.slice(index + 1).split(",");
      var ranges = [];
      ranges.type = str.slice(0, index);
      for (var i = 0; i < arr.length; i++) {
        var range = arr[i].split("-");
        var start = parseInt(range[0], 10);
        var end = parseInt(range[1], 10);
        if (isNaN(start)) {
          start = size - end;
          end = size - 1;
        } else if (isNaN(end)) {
          end = size - 1;
        }
        if (end > size - 1) {
          end = size - 1;
        }
        if (isNaN(start) || isNaN(end) || start > end || start < 0) {
          continue;
        }
        ranges.push({
          start,
          end
        });
      }
      if (ranges.length < 1) {
        return -1;
      }
      return options && options.combine ? combineRanges(ranges) : ranges;
    }
    function combineRanges(ranges) {
      var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);
      for (var j = 0, i = 1; i < ordered.length; i++) {
        var range = ordered[i];
        var current = ordered[j];
        if (range.start > current.end + 1) {
          ordered[++j] = range;
        } else if (range.end > current.end) {
          current.end = range.end;
          current.index = Math.min(current.index, range.index);
        }
      }
      ordered.length = j + 1;
      var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);
      combined.type = ranges.type;
      return combined;
    }
    function mapWithIndex(range, index) {
      return {
        start: range.start,
        end: range.end,
        index
      };
    }
    function mapWithoutIndex(range) {
      return {
        start: range.start,
        end: range.end
      };
    }
    function sortByRangeIndex(a, b) {
      return a.index - b.index;
    }
    function sortByRangeStart(a, b) {
      return a.start - b.start;
    }
  }
});

// ../../node_modules/send/index.js
var require_send = __commonJS({
  "../../node_modules/send/index.js"(exports, module) {
    "use strict";
    var createError = require_http_errors();
    var debug = require_src4()("send");
    var deprecate = require_depd()("send");
    var destroy = require_destroy();
    var encodeUrl = require_encodeurl2();
    var escapeHtml = require_escape_html();
    var etag = require_etag();
    var fresh = require_fresh();
    var fs3 = __require("fs");
    var mime = require_mime();
    var ms = require_ms5();
    var onFinished = require_on_finished();
    var parseRange = require_range_parser();
    var path3 = __require("path");
    var statuses = require_statuses();
    var Stream = __require("stream");
    var util = __require("util");
    var extname = path3.extname;
    var join = path3.join;
    var normalize = path3.normalize;
    var resolve = path3.resolve;
    var sep = path3.sep;
    var BYTES_RANGE_REGEXP = /^ *bytes=/;
    var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1e3;
    var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
    module.exports = send;
    module.exports.mime = mime;
    function send(req, path4, options) {
      return new SendStream(req, path4, options);
    }
    function SendStream(req, path4, options) {
      Stream.call(this);
      var opts = options || {};
      this.options = opts;
      this.path = path4;
      this.req = req;
      this._acceptRanges = opts.acceptRanges !== void 0 ? Boolean(opts.acceptRanges) : true;
      this._cacheControl = opts.cacheControl !== void 0 ? Boolean(opts.cacheControl) : true;
      this._etag = opts.etag !== void 0 ? Boolean(opts.etag) : true;
      this._dotfiles = opts.dotfiles !== void 0 ? opts.dotfiles : "ignore";
      if (this._dotfiles !== "ignore" && this._dotfiles !== "allow" && this._dotfiles !== "deny") {
        throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
      }
      this._hidden = Boolean(opts.hidden);
      if (opts.hidden !== void 0) {
        deprecate("hidden: use dotfiles: '" + (this._hidden ? "allow" : "ignore") + "' instead");
      }
      if (opts.dotfiles === void 0) {
        this._dotfiles = void 0;
      }
      this._extensions = opts.extensions !== void 0 ? normalizeList(opts.extensions, "extensions option") : [];
      this._immutable = opts.immutable !== void 0 ? Boolean(opts.immutable) : false;
      this._index = opts.index !== void 0 ? normalizeList(opts.index, "index option") : ["index.html"];
      this._lastModified = opts.lastModified !== void 0 ? Boolean(opts.lastModified) : true;
      this._maxage = opts.maxAge || opts.maxage;
      this._maxage = typeof this._maxage === "string" ? ms(this._maxage) : Number(this._maxage);
      this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
      this._root = opts.root ? resolve(opts.root) : null;
      if (!this._root && opts.from) {
        this.from(opts.from);
      }
    }
    util.inherits(SendStream, Stream);
    SendStream.prototype.etag = deprecate.function(function etag2(val) {
      this._etag = Boolean(val);
      debug("etag %s", this._etag);
      return this;
    }, "send.etag: pass etag as option");
    SendStream.prototype.hidden = deprecate.function(function hidden(val) {
      this._hidden = Boolean(val);
      this._dotfiles = void 0;
      debug("hidden %s", this._hidden);
      return this;
    }, "send.hidden: use dotfiles option");
    SendStream.prototype.index = deprecate.function(function index(paths) {
      var index2 = !paths ? [] : normalizeList(paths, "paths argument");
      debug("index %o", paths);
      this._index = index2;
      return this;
    }, "send.index: pass index as option");
    SendStream.prototype.root = function root(path4) {
      this._root = resolve(String(path4));
      debug("root %s", this._root);
      return this;
    };
    SendStream.prototype.from = deprecate.function(
      SendStream.prototype.root,
      "send.from: pass root as option"
    );
    SendStream.prototype.root = deprecate.function(
      SendStream.prototype.root,
      "send.root: pass root as option"
    );
    SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
      this._maxage = typeof maxAge === "string" ? ms(maxAge) : Number(maxAge);
      this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
      debug("max-age %d", this._maxage);
      return this;
    }, "send.maxage: pass maxAge as option");
    SendStream.prototype.error = function error(status, err) {
      if (hasListeners(this, "error")) {
        return this.emit("error", createHttpError(status, err));
      }
      var res = this.res;
      var msg = statuses.message[status] || String(status);
      var doc = createHtmlDocument("Error", escapeHtml(msg));
      clearHeaders(res);
      if (err && err.headers) {
        setHeaders(res, err.headers);
      }
      res.statusCode = status;
      res.setHeader("Content-Type", "text/html; charset=UTF-8");
      res.setHeader("Content-Length", Buffer.byteLength(doc));
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.end(doc);
    };
    SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
      return this.path[this.path.length - 1] === "/";
    };
    SendStream.prototype.isConditionalGET = function isConditionalGET() {
      return this.req.headers["if-match"] || this.req.headers["if-unmodified-since"] || this.req.headers["if-none-match"] || this.req.headers["if-modified-since"];
    };
    SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
      var req = this.req;
      var res = this.res;
      var match = req.headers["if-match"];
      if (match) {
        var etag2 = res.getHeader("ETag");
        return !etag2 || match !== "*" && parseTokenList(match).every(function(match2) {
          return match2 !== etag2 && match2 !== "W/" + etag2 && "W/" + match2 !== etag2;
        });
      }
      var unmodifiedSince = parseHttpDate(req.headers["if-unmodified-since"]);
      if (!isNaN(unmodifiedSince)) {
        var lastModified = parseHttpDate(res.getHeader("Last-Modified"));
        return isNaN(lastModified) || lastModified > unmodifiedSince;
      }
      return false;
    };
    SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
      var res = this.res;
      res.removeHeader("Content-Encoding");
      res.removeHeader("Content-Language");
      res.removeHeader("Content-Length");
      res.removeHeader("Content-Range");
      res.removeHeader("Content-Type");
    };
    SendStream.prototype.notModified = function notModified() {
      var res = this.res;
      debug("not modified");
      this.removeContentHeaderFields();
      res.statusCode = 304;
      res.end();
    };
    SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
      var err = new Error("Can't set headers after they are sent.");
      debug("headers already sent");
      this.error(500, err);
    };
    SendStream.prototype.isCachable = function isCachable() {
      var statusCode = this.res.statusCode;
      return statusCode >= 200 && statusCode < 300 || statusCode === 304;
    };
    SendStream.prototype.onStatError = function onStatError(error) {
      switch (error.code) {
        case "ENAMETOOLONG":
        case "ENOENT":
        case "ENOTDIR":
          this.error(404, error);
          break;
        default:
          this.error(500, error);
          break;
      }
    };
    SendStream.prototype.isFresh = function isFresh() {
      return fresh(this.req.headers, {
        etag: this.res.getHeader("ETag"),
        "last-modified": this.res.getHeader("Last-Modified")
      });
    };
    SendStream.prototype.isRangeFresh = function isRangeFresh() {
      var ifRange = this.req.headers["if-range"];
      if (!ifRange) {
        return true;
      }
      if (ifRange.indexOf('"') !== -1) {
        var etag2 = this.res.getHeader("ETag");
        return Boolean(etag2 && ifRange.indexOf(etag2) !== -1);
      }
      var lastModified = this.res.getHeader("Last-Modified");
      return parseHttpDate(lastModified) <= parseHttpDate(ifRange);
    };
    SendStream.prototype.redirect = function redirect(path4) {
      var res = this.res;
      if (hasListeners(this, "directory")) {
        this.emit("directory", res, path4);
        return;
      }
      if (this.hasTrailingSlash()) {
        this.error(403);
        return;
      }
      var loc = encodeUrl(collapseLeadingSlashes(this.path + "/"));
      var doc = createHtmlDocument("Redirecting", "Redirecting to " + escapeHtml(loc));
      res.statusCode = 301;
      res.setHeader("Content-Type", "text/html; charset=UTF-8");
      res.setHeader("Content-Length", Buffer.byteLength(doc));
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Location", loc);
      res.end(doc);
    };
    SendStream.prototype.pipe = function pipe(res) {
      var root = this._root;
      this.res = res;
      var path4 = decode(this.path);
      if (path4 === -1) {
        this.error(400);
        return res;
      }
      if (~path4.indexOf("\0")) {
        this.error(400);
        return res;
      }
      var parts;
      if (root !== null) {
        if (path4) {
          path4 = normalize("." + sep + path4);
        }
        if (UP_PATH_REGEXP.test(path4)) {
          debug('malicious path "%s"', path4);
          this.error(403);
          return res;
        }
        parts = path4.split(sep);
        path4 = normalize(join(root, path4));
      } else {
        if (UP_PATH_REGEXP.test(path4)) {
          debug('malicious path "%s"', path4);
          this.error(403);
          return res;
        }
        parts = normalize(path4).split(sep);
        path4 = resolve(path4);
      }
      if (containsDotFile(parts)) {
        var access = this._dotfiles;
        if (access === void 0) {
          access = parts[parts.length - 1][0] === "." ? this._hidden ? "allow" : "ignore" : "allow";
        }
        debug('%s dotfile "%s"', access, path4);
        switch (access) {
          case "allow":
            break;
          case "deny":
            this.error(403);
            return res;
          case "ignore":
          default:
            this.error(404);
            return res;
        }
      }
      if (this._index.length && this.hasTrailingSlash()) {
        this.sendIndex(path4);
        return res;
      }
      this.sendFile(path4);
      return res;
    };
    SendStream.prototype.send = function send2(path4, stat) {
      var len = stat.size;
      var options = this.options;
      var opts = {};
      var res = this.res;
      var req = this.req;
      var ranges = req.headers.range;
      var offset = options.start || 0;
      if (headersSent(res)) {
        this.headersAlreadySent();
        return;
      }
      debug('pipe "%s"', path4);
      this.setHeader(path4, stat);
      this.type(path4);
      if (this.isConditionalGET()) {
        if (this.isPreconditionFailure()) {
          this.error(412);
          return;
        }
        if (this.isCachable() && this.isFresh()) {
          this.notModified();
          return;
        }
      }
      len = Math.max(0, len - offset);
      if (options.end !== void 0) {
        var bytes = options.end - offset + 1;
        if (len > bytes) len = bytes;
      }
      if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
        ranges = parseRange(len, ranges, {
          combine: true
        });
        if (!this.isRangeFresh()) {
          debug("range stale");
          ranges = -2;
        }
        if (ranges === -1) {
          debug("range unsatisfiable");
          res.setHeader("Content-Range", contentRange("bytes", len));
          return this.error(416, {
            headers: { "Content-Range": res.getHeader("Content-Range") }
          });
        }
        if (ranges !== -2 && ranges.length === 1) {
          debug("range %j", ranges);
          res.statusCode = 206;
          res.setHeader("Content-Range", contentRange("bytes", len, ranges[0]));
          offset += ranges[0].start;
          len = ranges[0].end - ranges[0].start + 1;
        }
      }
      for (var prop in options) {
        opts[prop] = options[prop];
      }
      opts.start = offset;
      opts.end = Math.max(offset, offset + len - 1);
      res.setHeader("Content-Length", len);
      if (req.method === "HEAD") {
        res.end();
        return;
      }
      this.stream(path4, opts);
    };
    SendStream.prototype.sendFile = function sendFile(path4) {
      var i = 0;
      var self2 = this;
      debug('stat "%s"', path4);
      fs3.stat(path4, function onstat(err, stat) {
        if (err && err.code === "ENOENT" && !extname(path4) && path4[path4.length - 1] !== sep) {
          return next(err);
        }
        if (err) return self2.onStatError(err);
        if (stat.isDirectory()) return self2.redirect(path4);
        self2.emit("file", path4, stat);
        self2.send(path4, stat);
      });
      function next(err) {
        if (self2._extensions.length <= i) {
          return err ? self2.onStatError(err) : self2.error(404);
        }
        var p = path4 + "." + self2._extensions[i++];
        debug('stat "%s"', p);
        fs3.stat(p, function(err2, stat) {
          if (err2) return next(err2);
          if (stat.isDirectory()) return next();
          self2.emit("file", p, stat);
          self2.send(p, stat);
        });
      }
    };
    SendStream.prototype.sendIndex = function sendIndex(path4) {
      var i = -1;
      var self2 = this;
      function next(err) {
        if (++i >= self2._index.length) {
          if (err) return self2.onStatError(err);
          return self2.error(404);
        }
        var p = join(path4, self2._index[i]);
        debug('stat "%s"', p);
        fs3.stat(p, function(err2, stat) {
          if (err2) return next(err2);
          if (stat.isDirectory()) return next();
          self2.emit("file", p, stat);
          self2.send(p, stat);
        });
      }
      next();
    };
    SendStream.prototype.stream = function stream2(path4, options) {
      var self2 = this;
      var res = this.res;
      var stream3 = fs3.createReadStream(path4, options);
      this.emit("stream", stream3);
      stream3.pipe(res);
      function cleanup() {
        destroy(stream3, true);
      }
      onFinished(res, cleanup);
      stream3.on("error", function onerror(err) {
        cleanup();
        self2.onStatError(err);
      });
      stream3.on("end", function onend() {
        self2.emit("end");
      });
    };
    SendStream.prototype.type = function type(path4) {
      var res = this.res;
      if (res.getHeader("Content-Type")) return;
      var type2 = mime.lookup(path4);
      if (!type2) {
        debug("no content-type");
        return;
      }
      var charset = mime.charsets.lookup(type2);
      debug("content-type %s", type2);
      res.setHeader("Content-Type", type2 + (charset ? "; charset=" + charset : ""));
    };
    SendStream.prototype.setHeader = function setHeader(path4, stat) {
      var res = this.res;
      this.emit("headers", res, path4, stat);
      if (this._acceptRanges && !res.getHeader("Accept-Ranges")) {
        debug("accept ranges");
        res.setHeader("Accept-Ranges", "bytes");
      }
      if (this._cacheControl && !res.getHeader("Cache-Control")) {
        var cacheControl = "public, max-age=" + Math.floor(this._maxage / 1e3);
        if (this._immutable) {
          cacheControl += ", immutable";
        }
        debug("cache-control %s", cacheControl);
        res.setHeader("Cache-Control", cacheControl);
      }
      if (this._lastModified && !res.getHeader("Last-Modified")) {
        var modified = stat.mtime.toUTCString();
        debug("modified %s", modified);
        res.setHeader("Last-Modified", modified);
      }
      if (this._etag && !res.getHeader("ETag")) {
        var val = etag(stat);
        debug("etag %s", val);
        res.setHeader("ETag", val);
      }
    };
    function clearHeaders(res) {
      var headers = getHeaderNames(res);
      for (var i = 0; i < headers.length; i++) {
        res.removeHeader(headers[i]);
      }
    }
    function collapseLeadingSlashes(str) {
      for (var i = 0; i < str.length; i++) {
        if (str[i] !== "/") {
          break;
        }
      }
      return i > 1 ? "/" + str.substr(i) : str;
    }
    function containsDotFile(parts) {
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (part.length > 1 && part[0] === ".") {
          return true;
        }
      }
      return false;
    }
    function contentRange(type, size, range) {
      return type + " " + (range ? range.start + "-" + range.end : "*") + "/" + size;
    }
    function createHtmlDocument(title, body) {
      return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
    }
    function createHttpError(status, err) {
      if (!err) {
        return createError(status);
      }
      return err instanceof Error ? createError(status, err, { expose: false }) : createError(status, err);
    }
    function decode(path4) {
      try {
        return decodeURIComponent(path4);
      } catch (err) {
        return -1;
      }
    }
    function getHeaderNames(res) {
      return typeof res.getHeaderNames !== "function" ? Object.keys(res._headers || {}) : res.getHeaderNames();
    }
    function hasListeners(emitter, type) {
      var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
      return count > 0;
    }
    function headersSent(res) {
      return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
    }
    function normalizeList(val, name) {
      var list = [].concat(val || []);
      for (var i = 0; i < list.length; i++) {
        if (typeof list[i] !== "string") {
          throw new TypeError(name + " must be array of strings or false");
        }
      }
      return list;
    }
    function parseHttpDate(date) {
      var timestamp = date && Date.parse(date);
      return typeof timestamp === "number" ? timestamp : NaN;
    }
    function parseTokenList(str) {
      var end = 0;
      var list = [];
      var start = 0;
      for (var i = 0, len = str.length; i < len; i++) {
        switch (str.charCodeAt(i)) {
          case 32:
            if (start === end) {
              start = end = i + 1;
            }
            break;
          case 44:
            if (start !== end) {
              list.push(str.substring(start, end));
            }
            start = end = i + 1;
            break;
          default:
            end = i + 1;
            break;
        }
      }
      if (start !== end) {
        list.push(str.substring(start, end));
      }
      return list;
    }
    function setHeaders(res, headers) {
      var keys = Object.keys(headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        res.setHeader(key, headers[key]);
      }
    }
  }
});

// ../../node_modules/forwarded/index.js
var require_forwarded = __commonJS({
  "../../node_modules/forwarded/index.js"(exports, module) {
    "use strict";
    module.exports = forwarded;
    function forwarded(req) {
      if (!req) {
        throw new TypeError("argument req is required");
      }
      var proxyAddrs = parse2(req.headers["x-forwarded-for"] || "");
      var socketAddr = getSocketAddr(req);
      var addrs = [socketAddr].concat(proxyAddrs);
      return addrs;
    }
    function getSocketAddr(req) {
      return req.socket ? req.socket.remoteAddress : req.connection.remoteAddress;
    }
    function parse2(header) {
      var end = header.length;
      var list = [];
      var start = header.length;
      for (var i = header.length - 1; i >= 0; i--) {
        switch (header.charCodeAt(i)) {
          case 32:
            if (start === end) {
              start = end = i;
            }
            break;
          case 44:
            if (start !== end) {
              list.push(header.substring(start, end));
            }
            start = end = i;
            break;
          default:
            start = i;
            break;
        }
      }
      if (start !== end) {
        list.push(header.substring(start, end));
      }
      return list;
    }
  }
});

// ../../node_modules/ipaddr.js/lib/ipaddr.js
var require_ipaddr = __commonJS({
  "../../node_modules/ipaddr.js/lib/ipaddr.js"(exports, module) {
    "use strict";
    (function() {
      var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;
      ipaddr = {};
      root = this;
      if (typeof module !== "undefined" && module !== null && module.exports) {
        module.exports = ipaddr;
      } else {
        root["ipaddr"] = ipaddr;
      }
      matchCIDR = function(first2, second, partSize, cidrBits) {
        var part, shift;
        if (first2.length !== second.length) {
          throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
        }
        part = 0;
        while (cidrBits > 0) {
          shift = partSize - cidrBits;
          if (shift < 0) {
            shift = 0;
          }
          if (first2[part] >> shift !== second[part] >> shift) {
            return false;
          }
          cidrBits -= partSize;
          part += 1;
        }
        return true;
      };
      ipaddr.subnetMatch = function(address, rangeList, defaultName) {
        var k, len, rangeName, rangeSubnets, subnet;
        if (defaultName == null) {
          defaultName = "unicast";
        }
        for (rangeName in rangeList) {
          rangeSubnets = rangeList[rangeName];
          if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
            rangeSubnets = [rangeSubnets];
          }
          for (k = 0, len = rangeSubnets.length; k < len; k++) {
            subnet = rangeSubnets[k];
            if (address.kind() === subnet[0].kind()) {
              if (address.match.apply(address, subnet)) {
                return rangeName;
              }
            }
          }
        }
        return defaultName;
      };
      ipaddr.IPv4 = function() {
        function IPv4(octets) {
          var k, len, octet;
          if (octets.length !== 4) {
            throw new Error("ipaddr: ipv4 octet count should be 4");
          }
          for (k = 0, len = octets.length; k < len; k++) {
            octet = octets[k];
            if (!(0 <= octet && octet <= 255)) {
              throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
            }
          }
          this.octets = octets;
        }
        IPv4.prototype.kind = function() {
          return "ipv4";
        };
        IPv4.prototype.toString = function() {
          return this.octets.join(".");
        };
        IPv4.prototype.toNormalizedString = function() {
          return this.toString();
        };
        IPv4.prototype.toByteArray = function() {
          return this.octets.slice(0);
        };
        IPv4.prototype.match = function(other, cidrRange) {
          var ref;
          if (cidrRange === void 0) {
            ref = other, other = ref[0], cidrRange = ref[1];
          }
          if (other.kind() !== "ipv4") {
            throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
          }
          return matchCIDR(this.octets, other.octets, 8, cidrRange);
        };
        IPv4.prototype.SpecialRanges = {
          unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
          broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
          multicast: [[new IPv4([224, 0, 0, 0]), 4]],
          linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
          loopback: [[new IPv4([127, 0, 0, 0]), 8]],
          carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
          "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
          reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
        };
        IPv4.prototype.range = function() {
          return ipaddr.subnetMatch(this, this.SpecialRanges);
        };
        IPv4.prototype.toIPv4MappedAddress = function() {
          return ipaddr.IPv6.parse("::ffff:" + this.toString());
        };
        IPv4.prototype.prefixLengthFromSubnetMask = function() {
          var cidr, i, k, octet, stop, zeros, zerotable;
          zerotable = {
            0: 8,
            128: 7,
            192: 6,
            224: 5,
            240: 4,
            248: 3,
            252: 2,
            254: 1,
            255: 0
          };
          cidr = 0;
          stop = false;
          for (i = k = 3; k >= 0; i = k += -1) {
            octet = this.octets[i];
            if (octet in zerotable) {
              zeros = zerotable[octet];
              if (stop && zeros !== 0) {
                return null;
              }
              if (zeros !== 8) {
                stop = true;
              }
              cidr += zeros;
            } else {
              return null;
            }
          }
          return 32 - cidr;
        };
        return IPv4;
      }();
      ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
      ipv4Regexes = {
        fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", "i"),
        longValue: new RegExp("^" + ipv4Part + "$", "i")
      };
      ipaddr.IPv4.parser = function(string) {
        var match, parseIntAuto, part, shift, value;
        parseIntAuto = function(string2) {
          if (string2[0] === "0" && string2[1] !== "x") {
            return parseInt(string2, 8);
          } else {
            return parseInt(string2);
          }
        };
        if (match = string.match(ipv4Regexes.fourOctet)) {
          return function() {
            var k, len, ref, results;
            ref = match.slice(1, 6);
            results = [];
            for (k = 0, len = ref.length; k < len; k++) {
              part = ref[k];
              results.push(parseIntAuto(part));
            }
            return results;
          }();
        } else if (match = string.match(ipv4Regexes.longValue)) {
          value = parseIntAuto(match[1]);
          if (value > 4294967295 || value < 0) {
            throw new Error("ipaddr: address outside defined range");
          }
          return function() {
            var k, results;
            results = [];
            for (shift = k = 0; k <= 24; shift = k += 8) {
              results.push(value >> shift & 255);
            }
            return results;
          }().reverse();
        } else {
          return null;
        }
      };
      ipaddr.IPv6 = function() {
        function IPv6(parts, zoneId) {
          var i, k, l, len, part, ref;
          if (parts.length === 16) {
            this.parts = [];
            for (i = k = 0; k <= 14; i = k += 2) {
              this.parts.push(parts[i] << 8 | parts[i + 1]);
            }
          } else if (parts.length === 8) {
            this.parts = parts;
          } else {
            throw new Error("ipaddr: ipv6 part count should be 8 or 16");
          }
          ref = this.parts;
          for (l = 0, len = ref.length; l < len; l++) {
            part = ref[l];
            if (!(0 <= part && part <= 65535)) {
              throw new Error("ipaddr: ipv6 part should fit in 16 bits");
            }
          }
          if (zoneId) {
            this.zoneId = zoneId;
          }
        }
        IPv6.prototype.kind = function() {
          return "ipv6";
        };
        IPv6.prototype.toString = function() {
          return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, "::");
        };
        IPv6.prototype.toRFC5952String = function() {
          var bestMatchIndex, bestMatchLength, match, regex, string;
          regex = /((^|:)(0(:|$)){2,})/g;
          string = this.toNormalizedString();
          bestMatchIndex = 0;
          bestMatchLength = -1;
          while (match = regex.exec(string)) {
            if (match[0].length > bestMatchLength) {
              bestMatchIndex = match.index;
              bestMatchLength = match[0].length;
            }
          }
          if (bestMatchLength < 0) {
            return string;
          }
          return string.substring(0, bestMatchIndex) + "::" + string.substring(bestMatchIndex + bestMatchLength);
        };
        IPv6.prototype.toByteArray = function() {
          var bytes, k, len, part, ref;
          bytes = [];
          ref = this.parts;
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            bytes.push(part >> 8);
            bytes.push(part & 255);
          }
          return bytes;
        };
        IPv6.prototype.toNormalizedString = function() {
          var addr, part, suffix;
          addr = function() {
            var k, len, ref, results;
            ref = this.parts;
            results = [];
            for (k = 0, len = ref.length; k < len; k++) {
              part = ref[k];
              results.push(part.toString(16));
            }
            return results;
          }.call(this).join(":");
          suffix = "";
          if (this.zoneId) {
            suffix = "%" + this.zoneId;
          }
          return addr + suffix;
        };
        IPv6.prototype.toFixedLengthString = function() {
          var addr, part, suffix;
          addr = function() {
            var k, len, ref, results;
            ref = this.parts;
            results = [];
            for (k = 0, len = ref.length; k < len; k++) {
              part = ref[k];
              results.push(part.toString(16).padStart(4, "0"));
            }
            return results;
          }.call(this).join(":");
          suffix = "";
          if (this.zoneId) {
            suffix = "%" + this.zoneId;
          }
          return addr + suffix;
        };
        IPv6.prototype.match = function(other, cidrRange) {
          var ref;
          if (cidrRange === void 0) {
            ref = other, other = ref[0], cidrRange = ref[1];
          }
          if (other.kind() !== "ipv6") {
            throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
          }
          return matchCIDR(this.parts, other.parts, 16, cidrRange);
        };
        IPv6.prototype.SpecialRanges = {
          unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
          linkLocal: [new IPv6([65152, 0, 0, 0, 0, 0, 0, 0]), 10],
          multicast: [new IPv6([65280, 0, 0, 0, 0, 0, 0, 0]), 8],
          loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
          uniqueLocal: [new IPv6([64512, 0, 0, 0, 0, 0, 0, 0]), 7],
          ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 65535, 0, 0]), 96],
          rfc6145: [new IPv6([0, 0, 0, 0, 65535, 0, 0, 0]), 96],
          rfc6052: [new IPv6([100, 65435, 0, 0, 0, 0, 0, 0]), 96],
          "6to4": [new IPv6([8194, 0, 0, 0, 0, 0, 0, 0]), 16],
          teredo: [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 32],
          reserved: [[new IPv6([8193, 3512, 0, 0, 0, 0, 0, 0]), 32]]
        };
        IPv6.prototype.range = function() {
          return ipaddr.subnetMatch(this, this.SpecialRanges);
        };
        IPv6.prototype.isIPv4MappedAddress = function() {
          return this.range() === "ipv4Mapped";
        };
        IPv6.prototype.toIPv4Address = function() {
          var high, low, ref;
          if (!this.isIPv4MappedAddress()) {
            throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
          }
          ref = this.parts.slice(-2), high = ref[0], low = ref[1];
          return new ipaddr.IPv4([high >> 8, high & 255, low >> 8, low & 255]);
        };
        IPv6.prototype.prefixLengthFromSubnetMask = function() {
          var cidr, i, k, part, stop, zeros, zerotable;
          zerotable = {
            0: 16,
            32768: 15,
            49152: 14,
            57344: 13,
            61440: 12,
            63488: 11,
            64512: 10,
            65024: 9,
            65280: 8,
            65408: 7,
            65472: 6,
            65504: 5,
            65520: 4,
            65528: 3,
            65532: 2,
            65534: 1,
            65535: 0
          };
          cidr = 0;
          stop = false;
          for (i = k = 7; k >= 0; i = k += -1) {
            part = this.parts[i];
            if (part in zerotable) {
              zeros = zerotable[part];
              if (stop && zeros !== 0) {
                return null;
              }
              if (zeros !== 16) {
                stop = true;
              }
              cidr += zeros;
            } else {
              return null;
            }
          }
          return 128 - cidr;
        };
        return IPv6;
      }();
      ipv6Part = "(?:[0-9a-f]+::?)+";
      zoneIndex = "%[0-9a-z]{1,}";
      ipv6Regexes = {
        zoneIndex: new RegExp(zoneIndex, "i"),
        "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", "i"),
        transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), "i")
      };
      expandIPv6 = function(string, parts) {
        var colonCount, lastColon, part, replacement, replacementCount, zoneId;
        if (string.indexOf("::") !== string.lastIndexOf("::")) {
          return null;
        }
        zoneId = (string.match(ipv6Regexes["zoneIndex"]) || [])[0];
        if (zoneId) {
          zoneId = zoneId.substring(1);
          string = string.replace(/%.+$/, "");
        }
        colonCount = 0;
        lastColon = -1;
        while ((lastColon = string.indexOf(":", lastColon + 1)) >= 0) {
          colonCount++;
        }
        if (string.substr(0, 2) === "::") {
          colonCount--;
        }
        if (string.substr(-2, 2) === "::") {
          colonCount--;
        }
        if (colonCount > parts) {
          return null;
        }
        replacementCount = parts - colonCount;
        replacement = ":";
        while (replacementCount--) {
          replacement += "0:";
        }
        string = string.replace("::", replacement);
        if (string[0] === ":") {
          string = string.slice(1);
        }
        if (string[string.length - 1] === ":") {
          string = string.slice(0, -1);
        }
        parts = function() {
          var k, len, ref, results;
          ref = string.split(":");
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(parseInt(part, 16));
          }
          return results;
        }();
        return {
          parts,
          zoneId
        };
      };
      ipaddr.IPv6.parser = function(string) {
        var addr, k, len, match, octet, octets, zoneId;
        if (ipv6Regexes["native"].test(string)) {
          return expandIPv6(string, 8);
        } else if (match = string.match(ipv6Regexes["transitional"])) {
          zoneId = match[6] || "";
          addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
          if (addr.parts) {
            octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
            for (k = 0, len = octets.length; k < len; k++) {
              octet = octets[k];
              if (!(0 <= octet && octet <= 255)) {
                return null;
              }
            }
            addr.parts.push(octets[0] << 8 | octets[1]);
            addr.parts.push(octets[2] << 8 | octets[3]);
            return {
              parts: addr.parts,
              zoneId: addr.zoneId
            };
          }
        }
        return null;
      };
      ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
        return this.parser(string) !== null;
      };
      ipaddr.IPv4.isValid = function(string) {
        var e;
        try {
          new this(this.parser(string));
          return true;
        } catch (error1) {
          e = error1;
          return false;
        }
      };
      ipaddr.IPv4.isValidFourPartDecimal = function(string) {
        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
          return true;
        } else {
          return false;
        }
      };
      ipaddr.IPv6.isValid = function(string) {
        var addr, e;
        if (typeof string === "string" && string.indexOf(":") === -1) {
          return false;
        }
        try {
          addr = this.parser(string);
          new this(addr.parts, addr.zoneId);
          return true;
        } catch (error1) {
          e = error1;
          return false;
        }
      };
      ipaddr.IPv4.parse = function(string) {
        var parts;
        parts = this.parser(string);
        if (parts === null) {
          throw new Error("ipaddr: string is not formatted like ip address");
        }
        return new this(parts);
      };
      ipaddr.IPv6.parse = function(string) {
        var addr;
        addr = this.parser(string);
        if (addr.parts === null) {
          throw new Error("ipaddr: string is not formatted like ip address");
        }
        return new this(addr.parts, addr.zoneId);
      };
      ipaddr.IPv4.parseCIDR = function(string) {
        var maskLength, match, parsed;
        if (match = string.match(/^(.+)\/(\d+)$/)) {
          maskLength = parseInt(match[2]);
          if (maskLength >= 0 && maskLength <= 32) {
            parsed = [this.parse(match[1]), maskLength];
            Object.defineProperty(parsed, "toString", {
              value: function() {
                return this.join("/");
              }
            });
            return parsed;
          }
        }
        throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
      };
      ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
        var filledOctetCount, j, octets;
        prefix = parseInt(prefix);
        if (prefix < 0 || prefix > 32) {
          throw new Error("ipaddr: invalid IPv4 prefix length");
        }
        octets = [0, 0, 0, 0];
        j = 0;
        filledOctetCount = Math.floor(prefix / 8);
        while (j < filledOctetCount) {
          octets[j] = 255;
          j++;
        }
        if (filledOctetCount < 4) {
          octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
        }
        return new this(octets);
      };
      ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
        var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
        try {
          cidr = this.parseCIDR(string);
          ipInterfaceOctets = cidr[0].toByteArray();
          subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
          octets = [];
          i = 0;
          while (i < 4) {
            octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
            i++;
          }
          return new this(octets);
        } catch (error1) {
          error = error1;
          throw new Error("ipaddr: the address does not have IPv4 CIDR format");
        }
      };
      ipaddr.IPv4.networkAddressFromCIDR = function(string) {
        var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
        try {
          cidr = this.parseCIDR(string);
          ipInterfaceOctets = cidr[0].toByteArray();
          subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
          octets = [];
          i = 0;
          while (i < 4) {
            octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
            i++;
          }
          return new this(octets);
        } catch (error1) {
          error = error1;
          throw new Error("ipaddr: the address does not have IPv4 CIDR format");
        }
      };
      ipaddr.IPv6.parseCIDR = function(string) {
        var maskLength, match, parsed;
        if (match = string.match(/^(.+)\/(\d+)$/)) {
          maskLength = parseInt(match[2]);
          if (maskLength >= 0 && maskLength <= 128) {
            parsed = [this.parse(match[1]), maskLength];
            Object.defineProperty(parsed, "toString", {
              value: function() {
                return this.join("/");
              }
            });
            return parsed;
          }
        }
        throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
      };
      ipaddr.isValid = function(string) {
        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
      };
      ipaddr.parse = function(string) {
        if (ipaddr.IPv6.isValid(string)) {
          return ipaddr.IPv6.parse(string);
        } else if (ipaddr.IPv4.isValid(string)) {
          return ipaddr.IPv4.parse(string);
        } else {
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
        }
      };
      ipaddr.parseCIDR = function(string) {
        var e;
        try {
          return ipaddr.IPv6.parseCIDR(string);
        } catch (error1) {
          e = error1;
          try {
            return ipaddr.IPv4.parseCIDR(string);
          } catch (error12) {
            e = error12;
            throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
          }
        }
      };
      ipaddr.fromByteArray = function(bytes) {
        var length;
        length = bytes.length;
        if (length === 4) {
          return new ipaddr.IPv4(bytes);
        } else if (length === 16) {
          return new ipaddr.IPv6(bytes);
        } else {
          throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
        }
      };
      ipaddr.process = function(string) {
        var addr;
        addr = this.parse(string);
        if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) {
          return addr.toIPv4Address();
        } else {
          return addr;
        }
      };
    }).call(exports);
  }
});

// ../../node_modules/proxy-addr/index.js
var require_proxy_addr = __commonJS({
  "../../node_modules/proxy-addr/index.js"(exports, module) {
    "use strict";
    module.exports = proxyaddr;
    module.exports.all = alladdrs;
    module.exports.compile = compile;
    var forwarded = require_forwarded();
    var ipaddr = require_ipaddr();
    var DIGIT_REGEXP = /^[0-9]+$/;
    var isip = ipaddr.isValid;
    var parseip = ipaddr.parse;
    var IP_RANGES = {
      linklocal: ["169.254.0.0/16", "fe80::/10"],
      loopback: ["127.0.0.1/8", "::1/128"],
      uniquelocal: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7"]
    };
    function alladdrs(req, trust) {
      var addrs = forwarded(req);
      if (!trust) {
        return addrs;
      }
      if (typeof trust !== "function") {
        trust = compile(trust);
      }
      for (var i = 0; i < addrs.length - 1; i++) {
        if (trust(addrs[i], i)) continue;
        addrs.length = i + 1;
      }
      return addrs;
    }
    function compile(val) {
      if (!val) {
        throw new TypeError("argument is required");
      }
      var trust;
      if (typeof val === "string") {
        trust = [val];
      } else if (Array.isArray(val)) {
        trust = val.slice();
      } else {
        throw new TypeError("unsupported trust argument");
      }
      for (var i = 0; i < trust.length; i++) {
        val = trust[i];
        if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
          continue;
        }
        val = IP_RANGES[val];
        trust.splice.apply(trust, [i, 1].concat(val));
        i += val.length - 1;
      }
      return compileTrust(compileRangeSubnets(trust));
    }
    function compileRangeSubnets(arr) {
      var rangeSubnets = new Array(arr.length);
      for (var i = 0; i < arr.length; i++) {
        rangeSubnets[i] = parseipNotation(arr[i]);
      }
      return rangeSubnets;
    }
    function compileTrust(rangeSubnets) {
      var len = rangeSubnets.length;
      return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
    }
    function parseipNotation(note) {
      var pos = note.lastIndexOf("/");
      var str = pos !== -1 ? note.substring(0, pos) : note;
      if (!isip(str)) {
        throw new TypeError("invalid IP address: " + str);
      }
      var ip = parseip(str);
      if (pos === -1 && ip.kind() === "ipv6" && ip.isIPv4MappedAddress()) {
        ip = ip.toIPv4Address();
      }
      var max = ip.kind() === "ipv6" ? 128 : 32;
      var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;
      if (range === null) {
        range = max;
      } else if (DIGIT_REGEXP.test(range)) {
        range = parseInt(range, 10);
      } else if (ip.kind() === "ipv4" && isip(range)) {
        range = parseNetmask(range);
      } else {
        range = null;
      }
      if (range <= 0 || range > max) {
        throw new TypeError("invalid range on address: " + note);
      }
      return [ip, range];
    }
    function parseNetmask(netmask) {
      var ip = parseip(netmask);
      var kind = ip.kind();
      return kind === "ipv4" ? ip.prefixLengthFromSubnetMask() : null;
    }
    function proxyaddr(req, trust) {
      if (!req) {
        throw new TypeError("req argument is required");
      }
      if (!trust) {
        throw new TypeError("trust argument is required");
      }
      var addrs = alladdrs(req, trust);
      var addr = addrs[addrs.length - 1];
      return addr;
    }
    function trustNone() {
      return false;
    }
    function trustMulti(subnets) {
      return function trust(addr) {
        if (!isip(addr)) return false;
        var ip = parseip(addr);
        var ipconv;
        var kind = ip.kind();
        for (var i = 0; i < subnets.length; i++) {
          var subnet = subnets[i];
          var subnetip = subnet[0];
          var subnetkind = subnetip.kind();
          var subnetrange = subnet[1];
          var trusted = ip;
          if (kind !== subnetkind) {
            if (subnetkind === "ipv4" && !ip.isIPv4MappedAddress()) {
              continue;
            }
            if (!ipconv) {
              ipconv = subnetkind === "ipv4" ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
            }
            trusted = ipconv;
          }
          if (trusted.match(subnetip, subnetrange)) {
            return true;
          }
        }
        return false;
      };
    }
    function trustSingle(subnet) {
      var subnetip = subnet[0];
      var subnetkind = subnetip.kind();
      var subnetisipv4 = subnetkind === "ipv4";
      var subnetrange = subnet[1];
      return function trust(addr) {
        if (!isip(addr)) return false;
        var ip = parseip(addr);
        var kind = ip.kind();
        if (kind !== subnetkind) {
          if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
            return false;
          }
          ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
        }
        return ip.match(subnetip, subnetrange);
      };
    }
  }
});

// ../../node_modules/express/lib/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/express/lib/utils.js"(exports) {
    "use strict";
    var Buffer3 = require_safe_buffer().Buffer;
    var contentDisposition = require_content_disposition();
    var contentType = require_content_type();
    var deprecate = require_depd()("express");
    var flatten = require_array_flatten();
    var mime = require_send().mime;
    var etag = require_etag();
    var proxyaddr = require_proxy_addr();
    var qs = require_lib2();
    var querystring = __require("querystring");
    exports.etag = createETagGenerator({ weak: false });
    exports.wetag = createETagGenerator({ weak: true });
    exports.isAbsolute = function(path3) {
      if ("/" === path3[0]) return true;
      if (":" === path3[1] && ("\\" === path3[2] || "/" === path3[2])) return true;
      if ("\\\\" === path3.substring(0, 2)) return true;
    };
    exports.flatten = deprecate.function(
      flatten,
      "utils.flatten: use array-flatten npm module instead"
    );
    exports.normalizeType = function(type) {
      return ~type.indexOf("/") ? acceptParams(type) : { value: mime.lookup(type), params: {} };
    };
    exports.normalizeTypes = function(types) {
      var ret = [];
      for (var i = 0; i < types.length; ++i) {
        ret.push(exports.normalizeType(types[i]));
      }
      return ret;
    };
    exports.contentDisposition = deprecate.function(
      contentDisposition,
      "utils.contentDisposition: use content-disposition npm module instead"
    );
    function acceptParams(str) {
      var parts = str.split(/ *; */);
      var ret = { value: parts[0], quality: 1, params: {} };
      for (var i = 1; i < parts.length; ++i) {
        var pms = parts[i].split(/ *= */);
        if ("q" === pms[0]) {
          ret.quality = parseFloat(pms[1]);
        } else {
          ret.params[pms[0]] = pms[1];
        }
      }
      return ret;
    }
    exports.compileETag = function(val) {
      var fn;
      if (typeof val === "function") {
        return val;
      }
      switch (val) {
        case true:
        case "weak":
          fn = exports.wetag;
          break;
        case false:
          break;
        case "strong":
          fn = exports.etag;
          break;
        default:
          throw new TypeError("unknown value for etag function: " + val);
      }
      return fn;
    };
    exports.compileQueryParser = function compileQueryParser(val) {
      var fn;
      if (typeof val === "function") {
        return val;
      }
      switch (val) {
        case true:
        case "simple":
          fn = querystring.parse;
          break;
        case false:
          fn = newObject;
          break;
        case "extended":
          fn = parseExtendedQueryString;
          break;
        default:
          throw new TypeError("unknown value for query parser function: " + val);
      }
      return fn;
    };
    exports.compileTrust = function(val) {
      if (typeof val === "function") return val;
      if (val === true) {
        return function() {
          return true;
        };
      }
      if (typeof val === "number") {
        return function(a, i) {
          return i < val;
        };
      }
      if (typeof val === "string") {
        val = val.split(",").map(function(v) {
          return v.trim();
        });
      }
      return proxyaddr.compile(val || []);
    };
    exports.setCharset = function setCharset(type, charset) {
      if (!type || !charset) {
        return type;
      }
      var parsed = contentType.parse(type);
      parsed.parameters.charset = charset;
      return contentType.format(parsed);
    };
    function createETagGenerator(options) {
      return function generateETag(body, encoding) {
        var buf = !Buffer3.isBuffer(body) ? Buffer3.from(body, encoding) : body;
        return etag(buf, options);
      };
    }
    function parseExtendedQueryString(str) {
      return qs.parse(str, {
        allowPrototypes: true
      });
    }
    function newObject() {
      return {};
    }
  }
});

// ../../node_modules/express/lib/application.js
var require_application = __commonJS({
  "../../node_modules/express/lib/application.js"(exports, module) {
    "use strict";
    var finalhandler = require_finalhandler();
    var Router2 = require_router();
    var methods = require_methods();
    var middleware = require_init();
    var query = require_query();
    var debug = require_src3()("express:application");
    var View = require_view();
    var http = __require("http");
    var compileETag = require_utils2().compileETag;
    var compileQueryParser = require_utils2().compileQueryParser;
    var compileTrust = require_utils2().compileTrust;
    var deprecate = require_depd()("express");
    var flatten = require_array_flatten();
    var merge = require_utils_merge();
    var resolve = __require("path").resolve;
    var setPrototypeOf = require_setprototypeof();
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var slice = Array.prototype.slice;
    var app2 = exports = module.exports = {};
    var trustProxyDefaultSymbol = "@@symbol:trust_proxy_default";
    app2.init = function init() {
      this.cache = {};
      this.engines = {};
      this.settings = {};
      this.defaultConfiguration();
    };
    app2.defaultConfiguration = function defaultConfiguration() {
      var env = "production";
      this.enable("x-powered-by");
      this.set("etag", "weak");
      this.set("env", env);
      this.set("query parser", "extended");
      this.set("subdomain offset", 2);
      this.set("trust proxy", false);
      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
        configurable: true,
        value: true
      });
      debug("booting in %s mode", env);
      this.on("mount", function onmount(parent) {
        if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings["trust proxy fn"] === "function") {
          delete this.settings["trust proxy"];
          delete this.settings["trust proxy fn"];
        }
        setPrototypeOf(this.request, parent.request);
        setPrototypeOf(this.response, parent.response);
        setPrototypeOf(this.engines, parent.engines);
        setPrototypeOf(this.settings, parent.settings);
      });
      this.locals = /* @__PURE__ */ Object.create(null);
      this.mountpath = "/";
      this.locals.settings = this.settings;
      this.set("view", View);
      this.set("views", resolve("views"));
      this.set("jsonp callback name", "callback");
      if (env === "production") {
        this.enable("view cache");
      }
      Object.defineProperty(this, "router", {
        get: function() {
          throw new Error("'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.");
        }
      });
    };
    app2.lazyrouter = function lazyrouter() {
      if (!this._router) {
        this._router = new Router2({
          caseSensitive: this.enabled("case sensitive routing"),
          strict: this.enabled("strict routing")
        });
        this._router.use(query(this.get("query parser fn")));
        this._router.use(middleware.init(this));
      }
    };
    app2.handle = function handle(req, res, callback) {
      var router8 = this._router;
      var done = callback || finalhandler(req, res, {
        env: this.get("env"),
        onerror: logerror.bind(this)
      });
      if (!router8) {
        debug("no routes defined on app");
        done();
        return;
      }
      router8.handle(req, res, done);
    };
    app2.use = function use(fn) {
      var offset = 0;
      var path3 = "/";
      if (typeof fn !== "function") {
        var arg = fn;
        while (Array.isArray(arg) && arg.length !== 0) {
          arg = arg[0];
        }
        if (typeof arg !== "function") {
          offset = 1;
          path3 = fn;
        }
      }
      var fns = flatten(slice.call(arguments, offset));
      if (fns.length === 0) {
        throw new TypeError("app.use() requires a middleware function");
      }
      this.lazyrouter();
      var router8 = this._router;
      fns.forEach(function(fn2) {
        if (!fn2 || !fn2.handle || !fn2.set) {
          return router8.use(path3, fn2);
        }
        debug(".use app under %s", path3);
        fn2.mountpath = path3;
        fn2.parent = this;
        router8.use(path3, function mounted_app(req, res, next) {
          var orig = req.app;
          fn2.handle(req, res, function(err) {
            setPrototypeOf(req, orig.request);
            setPrototypeOf(res, orig.response);
            next(err);
          });
        });
        fn2.emit("mount", this);
      }, this);
      return this;
    };
    app2.route = function route(path3) {
      this.lazyrouter();
      return this._router.route(path3);
    };
    app2.engine = function engine(ext, fn) {
      if (typeof fn !== "function") {
        throw new Error("callback function required");
      }
      var extension = ext[0] !== "." ? "." + ext : ext;
      this.engines[extension] = fn;
      return this;
    };
    app2.param = function param(name, fn) {
      this.lazyrouter();
      if (Array.isArray(name)) {
        for (var i = 0; i < name.length; i++) {
          this.param(name[i], fn);
        }
        return this;
      }
      this._router.param(name, fn);
      return this;
    };
    app2.set = function set(setting, val) {
      if (arguments.length === 1) {
        var settings = this.settings;
        while (settings && settings !== Object.prototype) {
          if (hasOwnProperty.call(settings, setting)) {
            return settings[setting];
          }
          settings = Object.getPrototypeOf(settings);
        }
        return void 0;
      }
      debug('set "%s" to %o', setting, val);
      this.settings[setting] = val;
      switch (setting) {
        case "etag":
          this.set("etag fn", compileETag(val));
          break;
        case "query parser":
          this.set("query parser fn", compileQueryParser(val));
          break;
        case "trust proxy":
          this.set("trust proxy fn", compileTrust(val));
          Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
            configurable: true,
            value: false
          });
          break;
      }
      return this;
    };
    app2.path = function path3() {
      return this.parent ? this.parent.path() + this.mountpath : "";
    };
    app2.enabled = function enabled(setting) {
      return Boolean(this.set(setting));
    };
    app2.disabled = function disabled(setting) {
      return !this.set(setting);
    };
    app2.enable = function enable(setting) {
      return this.set(setting, true);
    };
    app2.disable = function disable(setting) {
      return this.set(setting, false);
    };
    methods.forEach(function(method) {
      app2[method] = function(path3) {
        if (method === "get" && arguments.length === 1) {
          return this.set(path3);
        }
        this.lazyrouter();
        var route = this._router.route(path3);
        route[method].apply(route, slice.call(arguments, 1));
        return this;
      };
    });
    app2.all = function all(path3) {
      this.lazyrouter();
      var route = this._router.route(path3);
      var args = slice.call(arguments, 1);
      for (var i = 0; i < methods.length; i++) {
        route[methods[i]].apply(route, args);
      }
      return this;
    };
    app2.del = deprecate.function(app2.delete, "app.del: Use app.delete instead");
    app2.render = function render(name, options, callback) {
      var cache = this.cache;
      var done = callback;
      var engines = this.engines;
      var opts = options;
      var renderOptions = {};
      var view;
      if (typeof options === "function") {
        done = options;
        opts = {};
      }
      merge(renderOptions, this.locals);
      if (opts._locals) {
        merge(renderOptions, opts._locals);
      }
      merge(renderOptions, opts);
      if (renderOptions.cache == null) {
        renderOptions.cache = this.enabled("view cache");
      }
      if (renderOptions.cache) {
        view = cache[name];
      }
      if (!view) {
        var View2 = this.get("view");
        view = new View2(name, {
          defaultEngine: this.get("view engine"),
          root: this.get("views"),
          engines
        });
        if (!view.path) {
          var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"' : 'directory "' + view.root + '"';
          var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
          err.view = view;
          return done(err);
        }
        if (renderOptions.cache) {
          cache[name] = view;
        }
      }
      tryRender(view, renderOptions, done);
    };
    app2.listen = function listen() {
      var server = http.createServer(this);
      return server.listen.apply(server, arguments);
    };
    function logerror(err) {
      if (this.get("env") !== "test") console.error(err.stack || err.toString());
    }
    function tryRender(view, options, callback) {
      try {
        view.render(options, callback);
      } catch (err) {
        callback(err);
      }
    }
  }
});

// ../../node_modules/negotiator/lib/charset.js
var require_charset = __commonJS({
  "../../node_modules/negotiator/lib/charset.js"(exports, module) {
    "use strict";
    module.exports = preferredCharsets;
    module.exports.preferredCharsets = preferredCharsets;
    var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
    function parseAcceptCharset(accept) {
      var accepts = accept.split(",");
      for (var i = 0, j = 0; i < accepts.length; i++) {
        var charset = parseCharset(accepts[i].trim(), i);
        if (charset) {
          accepts[j++] = charset;
        }
      }
      accepts.length = j;
      return accepts;
    }
    function parseCharset(str, i) {
      var match = simpleCharsetRegExp.exec(str);
      if (!match) return null;
      var charset = match[1];
      var q = 1;
      if (match[2]) {
        var params = match[2].split(";");
        for (var j = 0; j < params.length; j++) {
          var p = params[j].trim().split("=");
          if (p[0] === "q") {
            q = parseFloat(p[1]);
            break;
          }
        }
      }
      return {
        charset,
        q,
        i
      };
    }
    function getCharsetPriority(charset, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(charset, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(charset, spec, index) {
      var s = 0;
      if (spec.charset.toLowerCase() === charset.toLowerCase()) {
        s |= 1;
      } else if (spec.charset !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredCharsets(accept, provided) {
      var accepts = parseAcceptCharset(accept === void 0 ? "*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getCharsetPriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b) {
      return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
    }
    function getFullCharset(spec) {
      return spec.charset;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// ../../node_modules/negotiator/lib/encoding.js
var require_encoding = __commonJS({
  "../../node_modules/negotiator/lib/encoding.js"(exports, module) {
    "use strict";
    module.exports = preferredEncodings;
    module.exports.preferredEncodings = preferredEncodings;
    var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
    function parseAcceptEncoding(accept) {
      var accepts = accept.split(",");
      var hasIdentity = false;
      var minQuality = 1;
      for (var i = 0, j = 0; i < accepts.length; i++) {
        var encoding = parseEncoding(accepts[i].trim(), i);
        if (encoding) {
          accepts[j++] = encoding;
          hasIdentity = hasIdentity || specify("identity", encoding);
          minQuality = Math.min(minQuality, encoding.q || 1);
        }
      }
      if (!hasIdentity) {
        accepts[j++] = {
          encoding: "identity",
          q: minQuality,
          i
        };
      }
      accepts.length = j;
      return accepts;
    }
    function parseEncoding(str, i) {
      var match = simpleEncodingRegExp.exec(str);
      if (!match) return null;
      var encoding = match[1];
      var q = 1;
      if (match[2]) {
        var params = match[2].split(";");
        for (var j = 0; j < params.length; j++) {
          var p = params[j].trim().split("=");
          if (p[0] === "q") {
            q = parseFloat(p[1]);
            break;
          }
        }
      }
      return {
        encoding,
        q,
        i
      };
    }
    function getEncodingPriority(encoding, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(encoding, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(encoding, spec, index) {
      var s = 0;
      if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
        s |= 1;
      } else if (spec.encoding !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredEncodings(accept, provided) {
      var accepts = parseAcceptEncoding(accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getEncodingPriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b) {
      return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
    }
    function getFullEncoding(spec) {
      return spec.encoding;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// ../../node_modules/negotiator/lib/language.js
var require_language = __commonJS({
  "../../node_modules/negotiator/lib/language.js"(exports, module) {
    "use strict";
    module.exports = preferredLanguages;
    module.exports.preferredLanguages = preferredLanguages;
    var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
    function parseAcceptLanguage(accept) {
      var accepts = accept.split(",");
      for (var i = 0, j = 0; i < accepts.length; i++) {
        var language = parseLanguage(accepts[i].trim(), i);
        if (language) {
          accepts[j++] = language;
        }
      }
      accepts.length = j;
      return accepts;
    }
    function parseLanguage(str, i) {
      var match = simpleLanguageRegExp.exec(str);
      if (!match) return null;
      var prefix = match[1];
      var suffix = match[2];
      var full = prefix;
      if (suffix) full += "-" + suffix;
      var q = 1;
      if (match[3]) {
        var params = match[3].split(";");
        for (var j = 0; j < params.length; j++) {
          var p = params[j].split("=");
          if (p[0] === "q") q = parseFloat(p[1]);
        }
      }
      return {
        prefix,
        suffix,
        q,
        i,
        full
      };
    }
    function getLanguagePriority(language, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(language, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(language, spec, index) {
      var p = parseLanguage(language);
      if (!p) return null;
      var s = 0;
      if (spec.full.toLowerCase() === p.full.toLowerCase()) {
        s |= 4;
      } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
        s |= 2;
      } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
        s |= 1;
      } else if (spec.full !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredLanguages(accept, provided) {
      var accepts = parseAcceptLanguage(accept === void 0 ? "*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getLanguagePriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b) {
      return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
    }
    function getFullLanguage(spec) {
      return spec.full;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// ../../node_modules/negotiator/lib/mediaType.js
var require_mediaType = __commonJS({
  "../../node_modules/negotiator/lib/mediaType.js"(exports, module) {
    "use strict";
    module.exports = preferredMediaTypes;
    module.exports.preferredMediaTypes = preferredMediaTypes;
    var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
    function parseAccept(accept) {
      var accepts = splitMediaTypes(accept);
      for (var i = 0, j = 0; i < accepts.length; i++) {
        var mediaType = parseMediaType(accepts[i].trim(), i);
        if (mediaType) {
          accepts[j++] = mediaType;
        }
      }
      accepts.length = j;
      return accepts;
    }
    function parseMediaType(str, i) {
      var match = simpleMediaTypeRegExp.exec(str);
      if (!match) return null;
      var params = /* @__PURE__ */ Object.create(null);
      var q = 1;
      var subtype = match[2];
      var type = match[1];
      if (match[3]) {
        var kvps = splitParameters(match[3]).map(splitKeyValuePair);
        for (var j = 0; j < kvps.length; j++) {
          var pair = kvps[j];
          var key = pair[0].toLowerCase();
          var val = pair[1];
          var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;
          if (key === "q") {
            q = parseFloat(value);
            break;
          }
          params[key] = value;
        }
      }
      return {
        type,
        subtype,
        params,
        q,
        i
      };
    }
    function getMediaTypePriority(type, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(type, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(type, spec, index) {
      var p = parseMediaType(type);
      var s = 0;
      if (!p) {
        return null;
      }
      if (spec.type.toLowerCase() == p.type.toLowerCase()) {
        s |= 4;
      } else if (spec.type != "*") {
        return null;
      }
      if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
        s |= 2;
      } else if (spec.subtype != "*") {
        return null;
      }
      var keys = Object.keys(spec.params);
      if (keys.length > 0) {
        if (keys.every(function(k) {
          return spec.params[k] == "*" || (spec.params[k] || "").toLowerCase() == (p.params[k] || "").toLowerCase();
        })) {
          s |= 1;
        } else {
          return null;
        }
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredMediaTypes(accept, provided) {
      var accepts = parseAccept(accept === void 0 ? "*/*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getMediaTypePriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b) {
      return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
    }
    function getFullType(spec) {
      return spec.type + "/" + spec.subtype;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
    function quoteCount(string) {
      var count = 0;
      var index = 0;
      while ((index = string.indexOf('"', index)) !== -1) {
        count++;
        index++;
      }
      return count;
    }
    function splitKeyValuePair(str) {
      var index = str.indexOf("=");
      var key;
      var val;
      if (index === -1) {
        key = str;
      } else {
        key = str.substr(0, index);
        val = str.substr(index + 1);
      }
      return [key, val];
    }
    function splitMediaTypes(accept) {
      var accepts = accept.split(",");
      for (var i = 1, j = 0; i < accepts.length; i++) {
        if (quoteCount(accepts[j]) % 2 == 0) {
          accepts[++j] = accepts[i];
        } else {
          accepts[j] += "," + accepts[i];
        }
      }
      accepts.length = j + 1;
      return accepts;
    }
    function splitParameters(str) {
      var parameters2 = str.split(";");
      for (var i = 1, j = 0; i < parameters2.length; i++) {
        if (quoteCount(parameters2[j]) % 2 == 0) {
          parameters2[++j] = parameters2[i];
        } else {
          parameters2[j] += ";" + parameters2[i];
        }
      }
      parameters2.length = j + 1;
      for (var i = 0; i < parameters2.length; i++) {
        parameters2[i] = parameters2[i].trim();
      }
      return parameters2;
    }
  }
});

// ../../node_modules/negotiator/index.js
var require_negotiator = __commonJS({
  "../../node_modules/negotiator/index.js"(exports, module) {
    "use strict";
    var preferredCharsets = require_charset();
    var preferredEncodings = require_encoding();
    var preferredLanguages = require_language();
    var preferredMediaTypes = require_mediaType();
    module.exports = Negotiator;
    module.exports.Negotiator = Negotiator;
    function Negotiator(request) {
      if (!(this instanceof Negotiator)) {
        return new Negotiator(request);
      }
      this.request = request;
    }
    Negotiator.prototype.charset = function charset(available) {
      var set = this.charsets(available);
      return set && set[0];
    };
    Negotiator.prototype.charsets = function charsets(available) {
      return preferredCharsets(this.request.headers["accept-charset"], available);
    };
    Negotiator.prototype.encoding = function encoding(available) {
      var set = this.encodings(available);
      return set && set[0];
    };
    Negotiator.prototype.encodings = function encodings(available) {
      return preferredEncodings(this.request.headers["accept-encoding"], available);
    };
    Negotiator.prototype.language = function language(available) {
      var set = this.languages(available);
      return set && set[0];
    };
    Negotiator.prototype.languages = function languages(available) {
      return preferredLanguages(this.request.headers["accept-language"], available);
    };
    Negotiator.prototype.mediaType = function mediaType(available) {
      var set = this.mediaTypes(available);
      return set && set[0];
    };
    Negotiator.prototype.mediaTypes = function mediaTypes(available) {
      return preferredMediaTypes(this.request.headers.accept, available);
    };
    Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
    Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
    Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
    Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
    Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
    Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
    Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
    Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
  }
});

// ../../node_modules/accepts/index.js
var require_accepts = __commonJS({
  "../../node_modules/accepts/index.js"(exports, module) {
    "use strict";
    var Negotiator = require_negotiator();
    var mime = require_mime_types();
    module.exports = Accepts;
    function Accepts(req) {
      if (!(this instanceof Accepts)) {
        return new Accepts(req);
      }
      this.headers = req.headers;
      this.negotiator = new Negotiator(req);
    }
    Accepts.prototype.type = Accepts.prototype.types = function(types_) {
      var types = types_;
      if (types && !Array.isArray(types)) {
        types = new Array(arguments.length);
        for (var i = 0; i < types.length; i++) {
          types[i] = arguments[i];
        }
      }
      if (!types || types.length === 0) {
        return this.negotiator.mediaTypes();
      }
      if (!this.headers.accept) {
        return types[0];
      }
      var mimes = types.map(extToMime);
      var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
      var first2 = accepts[0];
      return first2 ? types[mimes.indexOf(first2)] : false;
    };
    Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {
      var encodings = encodings_;
      if (encodings && !Array.isArray(encodings)) {
        encodings = new Array(arguments.length);
        for (var i = 0; i < encodings.length; i++) {
          encodings[i] = arguments[i];
        }
      }
      if (!encodings || encodings.length === 0) {
        return this.negotiator.encodings();
      }
      return this.negotiator.encodings(encodings)[0] || false;
    };
    Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {
      var charsets = charsets_;
      if (charsets && !Array.isArray(charsets)) {
        charsets = new Array(arguments.length);
        for (var i = 0; i < charsets.length; i++) {
          charsets[i] = arguments[i];
        }
      }
      if (!charsets || charsets.length === 0) {
        return this.negotiator.charsets();
      }
      return this.negotiator.charsets(charsets)[0] || false;
    };
    Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {
      var languages = languages_;
      if (languages && !Array.isArray(languages)) {
        languages = new Array(arguments.length);
        for (var i = 0; i < languages.length; i++) {
          languages[i] = arguments[i];
        }
      }
      if (!languages || languages.length === 0) {
        return this.negotiator.languages();
      }
      return this.negotiator.languages(languages)[0] || false;
    };
    function extToMime(type) {
      return type.indexOf("/") === -1 ? mime.lookup(type) : type;
    }
    function validMime(type) {
      return typeof type === "string";
    }
  }
});

// ../../node_modules/express/lib/request.js
var require_request = __commonJS({
  "../../node_modules/express/lib/request.js"(exports, module) {
    "use strict";
    var accepts = require_accepts();
    var deprecate = require_depd()("express");
    var isIP = __require("net").isIP;
    var typeis = require_type_is();
    var http = __require("http");
    var fresh = require_fresh();
    var parseRange = require_range_parser();
    var parse2 = require_parseurl();
    var proxyaddr = require_proxy_addr();
    var req = Object.create(http.IncomingMessage.prototype);
    module.exports = req;
    req.get = req.header = function header(name) {
      if (!name) {
        throw new TypeError("name argument is required to req.get");
      }
      if (typeof name !== "string") {
        throw new TypeError("name must be a string to req.get");
      }
      var lc = name.toLowerCase();
      switch (lc) {
        case "referer":
        case "referrer":
          return this.headers.referrer || this.headers.referer;
        default:
          return this.headers[lc];
      }
    };
    req.accepts = function() {
      var accept = accepts(this);
      return accept.types.apply(accept, arguments);
    };
    req.acceptsEncodings = function() {
      var accept = accepts(this);
      return accept.encodings.apply(accept, arguments);
    };
    req.acceptsEncoding = deprecate.function(
      req.acceptsEncodings,
      "req.acceptsEncoding: Use acceptsEncodings instead"
    );
    req.acceptsCharsets = function() {
      var accept = accepts(this);
      return accept.charsets.apply(accept, arguments);
    };
    req.acceptsCharset = deprecate.function(
      req.acceptsCharsets,
      "req.acceptsCharset: Use acceptsCharsets instead"
    );
    req.acceptsLanguages = function() {
      var accept = accepts(this);
      return accept.languages.apply(accept, arguments);
    };
    req.acceptsLanguage = deprecate.function(
      req.acceptsLanguages,
      "req.acceptsLanguage: Use acceptsLanguages instead"
    );
    req.range = function range(size, options) {
      var range2 = this.get("Range");
      if (!range2) return;
      return parseRange(size, range2, options);
    };
    req.param = function param(name, defaultValue) {
      var params = this.params || {};
      var body = this.body || {};
      var query = this.query || {};
      var args = arguments.length === 1 ? "name" : "name, default";
      deprecate("req.param(" + args + "): Use req.params, req.body, or req.query instead");
      if (null != params[name] && params.hasOwnProperty(name)) return params[name];
      if (null != body[name]) return body[name];
      if (null != query[name]) return query[name];
      return defaultValue;
    };
    req.is = function is(types) {
      var arr = types;
      if (!Array.isArray(types)) {
        arr = new Array(arguments.length);
        for (var i = 0; i < arr.length; i++) {
          arr[i] = arguments[i];
        }
      }
      return typeis(this, arr);
    };
    defineGetter(req, "protocol", function protocol() {
      var proto = this.connection.encrypted ? "https" : "http";
      var trust = this.app.get("trust proxy fn");
      if (!trust(this.connection.remoteAddress, 0)) {
        return proto;
      }
      var header = this.get("X-Forwarded-Proto") || proto;
      var index = header.indexOf(",");
      return index !== -1 ? header.substring(0, index).trim() : header.trim();
    });
    defineGetter(req, "secure", function secure() {
      return this.protocol === "https";
    });
    defineGetter(req, "ip", function ip() {
      var trust = this.app.get("trust proxy fn");
      return proxyaddr(this, trust);
    });
    defineGetter(req, "ips", function ips() {
      var trust = this.app.get("trust proxy fn");
      var addrs = proxyaddr.all(this, trust);
      addrs.reverse().pop();
      return addrs;
    });
    defineGetter(req, "subdomains", function subdomains() {
      var hostname = this.hostname;
      if (!hostname) return [];
      var offset = this.app.get("subdomain offset");
      var subdomains2 = !isIP(hostname) ? hostname.split(".").reverse() : [hostname];
      return subdomains2.slice(offset);
    });
    defineGetter(req, "path", function path3() {
      return parse2(this).pathname;
    });
    defineGetter(req, "hostname", function hostname() {
      var trust = this.app.get("trust proxy fn");
      var host = this.get("X-Forwarded-Host");
      if (!host || !trust(this.connection.remoteAddress, 0)) {
        host = this.get("Host");
      } else if (host.indexOf(",") !== -1) {
        host = host.substring(0, host.indexOf(",")).trimRight();
      }
      if (!host) return;
      var offset = host[0] === "[" ? host.indexOf("]") + 1 : 0;
      var index = host.indexOf(":", offset);
      return index !== -1 ? host.substring(0, index) : host;
    });
    defineGetter(req, "host", deprecate.function(function host() {
      return this.hostname;
    }, "req.host: Use req.hostname instead"));
    defineGetter(req, "fresh", function() {
      var method = this.method;
      var res = this.res;
      var status = res.statusCode;
      if ("GET" !== method && "HEAD" !== method) return false;
      if (status >= 200 && status < 300 || 304 === status) {
        return fresh(this.headers, {
          "etag": res.get("ETag"),
          "last-modified": res.get("Last-Modified")
        });
      }
      return false;
    });
    defineGetter(req, "stale", function stale() {
      return !this.fresh;
    });
    defineGetter(req, "xhr", function xhr() {
      var val = this.get("X-Requested-With") || "";
      return val.toLowerCase() === "xmlhttprequest";
    });
    function defineGetter(obj, name, getter) {
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable: true,
        get: getter
      });
    }
  }
});

// ../../node_modules/cookie-signature/index.js
var require_cookie_signature = __commonJS({
  "../../node_modules/cookie-signature/index.js"(exports) {
    "use strict";
    var crypto2 = __require("crypto");
    exports.sign = function(val, secret) {
      if ("string" != typeof val) throw new TypeError("Cookie value must be provided as a string.");
      if ("string" != typeof secret) throw new TypeError("Secret string must be provided.");
      return val + "." + crypto2.createHmac("sha256", secret).update(val).digest("base64").replace(/\=+$/, "");
    };
    exports.unsign = function(val, secret) {
      if ("string" != typeof val) throw new TypeError("Signed cookie string must be provided.");
      if ("string" != typeof secret) throw new TypeError("Secret string must be provided.");
      var str = val.slice(0, val.lastIndexOf(".")), mac = exports.sign(str, secret);
      return sha1(mac) == sha1(val) ? str : false;
    };
    function sha1(str) {
      return crypto2.createHash("sha1").update(str).digest("hex");
    }
  }
});

// ../../node_modules/cookie/index.js
var require_cookie = __commonJS({
  "../../node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse2;
    exports.serialize = serialize;
    var __toString = Object.prototype.toString;
    var cookieNameRegExp = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
    var cookieValueRegExp = /^("?)[\u0021\u0023-\u002B\u002D-\u003A\u003C-\u005B\u005D-\u007E]*\1$/;
    var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
    var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
    function parse2(str, opt) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var len = str.length;
      if (len < 2) return obj;
      var dec = opt && opt.decode || decode;
      var index = 0;
      var eqIdx = 0;
      var endIdx = 0;
      do {
        eqIdx = str.indexOf("=", index);
        if (eqIdx === -1) break;
        endIdx = str.indexOf(";", index);
        if (endIdx === -1) {
          endIdx = len;
        } else if (eqIdx > endIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var keyStartIdx = startIndex(str, index, eqIdx);
        var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
        var key = str.slice(keyStartIdx, keyEndIdx);
        if (!obj.hasOwnProperty(key)) {
          var valStartIdx = startIndex(str, eqIdx + 1, endIdx);
          var valEndIdx = endIndex(str, endIdx, valStartIdx);
          if (str.charCodeAt(valStartIdx) === 34 && str.charCodeAt(valEndIdx - 1) === 34) {
            valStartIdx++;
            valEndIdx--;
          }
          var val = str.slice(valStartIdx, valEndIdx);
          obj[key] = tryDecode(val, dec);
        }
        index = endIdx + 1;
      } while (index < len);
      return obj;
    }
    function startIndex(str, index, max) {
      do {
        var code = str.charCodeAt(index);
        if (code !== 32 && code !== 9) return index;
      } while (++index < max);
      return max;
    }
    function endIndex(str, index, min) {
      while (index > min) {
        var code = str.charCodeAt(--index);
        if (code !== 32 && code !== 9) return index + 1;
      }
      return min;
    }
    function serialize(name, val, opt) {
      var enc = opt && opt.encode || encodeURIComponent;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!cookieNameRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (!cookieValueRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (!opt) return str;
      if (null != opt.maxAge) {
        var maxAge = Math.floor(opt.maxAge);
        if (!isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + maxAge;
      }
      if (opt.domain) {
        if (!domainValueRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!pathValueRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.partitioned) {
        str += "; Partitioned";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]";
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// ../../node_modules/vary/index.js
var require_vary = __commonJS({
  "../../node_modules/vary/index.js"(exports, module) {
    "use strict";
    module.exports = vary;
    module.exports.append = append;
    var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
    function append(header, field) {
      if (typeof header !== "string") {
        throw new TypeError("header argument is required");
      }
      if (!field) {
        throw new TypeError("field argument is required");
      }
      var fields = !Array.isArray(field) ? parse2(String(field)) : field;
      for (var j = 0; j < fields.length; j++) {
        if (!FIELD_NAME_REGEXP.test(fields[j])) {
          throw new TypeError("field argument contains an invalid header name");
        }
      }
      if (header === "*") {
        return header;
      }
      var val = header;
      var vals = parse2(header.toLowerCase());
      if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
        return "*";
      }
      for (var i = 0; i < fields.length; i++) {
        var fld = fields[i].toLowerCase();
        if (vals.indexOf(fld) === -1) {
          vals.push(fld);
          val = val ? val + ", " + fields[i] : fields[i];
        }
      }
      return val;
    }
    function parse2(header) {
      var end = 0;
      var list = [];
      var start = 0;
      for (var i = 0, len = header.length; i < len; i++) {
        switch (header.charCodeAt(i)) {
          case 32:
            if (start === end) {
              start = end = i + 1;
            }
            break;
          case 44:
            list.push(header.substring(start, end));
            start = end = i + 1;
            break;
          default:
            end = i + 1;
            break;
        }
      }
      list.push(header.substring(start, end));
      return list;
    }
    function vary(res, field) {
      if (!res || !res.getHeader || !res.setHeader) {
        throw new TypeError("res argument is required");
      }
      var val = res.getHeader("Vary") || "";
      var header = Array.isArray(val) ? val.join(", ") : String(val);
      if (val = append(header, field)) {
        res.setHeader("Vary", val);
      }
    }
  }
});

// ../../node_modules/express/lib/response.js
var require_response = __commonJS({
  "../../node_modules/express/lib/response.js"(exports, module) {
    "use strict";
    var Buffer3 = require_safe_buffer().Buffer;
    var contentDisposition = require_content_disposition();
    var createError = require_http_errors();
    var deprecate = require_depd()("express");
    var encodeUrl = require_encodeurl();
    var escapeHtml = require_escape_html();
    var http = __require("http");
    var isAbsolute = require_utils2().isAbsolute;
    var onFinished = require_on_finished();
    var path3 = __require("path");
    var statuses = require_statuses();
    var merge = require_utils_merge();
    var sign = require_cookie_signature().sign;
    var normalizeType = require_utils2().normalizeType;
    var normalizeTypes = require_utils2().normalizeTypes;
    var setCharset = require_utils2().setCharset;
    var cookie = require_cookie();
    var send = require_send();
    var extname = path3.extname;
    var mime = send.mime;
    var resolve = path3.resolve;
    var vary = require_vary();
    var res = Object.create(http.ServerResponse.prototype);
    module.exports = res;
    var charsetRegExp = /;\s*charset\s*=/;
    res.status = function status(code) {
      if ((typeof code === "string" || Math.floor(code) !== code) && code > 99 && code < 1e3) {
        deprecate("res.status(" + JSON.stringify(code) + "): use res.status(" + Math.floor(code) + ") instead");
      }
      this.statusCode = code;
      return this;
    };
    res.links = function(links) {
      var link = this.get("Link") || "";
      if (link) link += ", ";
      return this.set("Link", link + Object.keys(links).map(function(rel) {
        return "<" + links[rel] + '>; rel="' + rel + '"';
      }).join(", "));
    };
    res.send = function send2(body) {
      var chunk = body;
      var encoding;
      var req = this.req;
      var type;
      var app2 = this.app;
      if (arguments.length === 2) {
        if (typeof arguments[0] !== "number" && typeof arguments[1] === "number") {
          deprecate("res.send(body, status): Use res.status(status).send(body) instead");
          this.statusCode = arguments[1];
        } else {
          deprecate("res.send(status, body): Use res.status(status).send(body) instead");
          this.statusCode = arguments[0];
          chunk = arguments[1];
        }
      }
      if (typeof chunk === "number" && arguments.length === 1) {
        if (!this.get("Content-Type")) {
          this.type("txt");
        }
        deprecate("res.send(status): Use res.sendStatus(status) instead");
        this.statusCode = chunk;
        chunk = statuses.message[chunk];
      }
      switch (typeof chunk) {
        // string defaulting to html
        case "string":
          if (!this.get("Content-Type")) {
            this.type("html");
          }
          break;
        case "boolean":
        case "number":
        case "object":
          if (chunk === null) {
            chunk = "";
          } else if (Buffer3.isBuffer(chunk)) {
            if (!this.get("Content-Type")) {
              this.type("bin");
            }
          } else {
            return this.json(chunk);
          }
          break;
      }
      if (typeof chunk === "string") {
        encoding = "utf8";
        type = this.get("Content-Type");
        if (typeof type === "string") {
          this.set("Content-Type", setCharset(type, "utf-8"));
        }
      }
      var etagFn = app2.get("etag fn");
      var generateETag = !this.get("ETag") && typeof etagFn === "function";
      var len;
      if (chunk !== void 0) {
        if (Buffer3.isBuffer(chunk)) {
          len = chunk.length;
        } else if (!generateETag && chunk.length < 1e3) {
          len = Buffer3.byteLength(chunk, encoding);
        } else {
          chunk = Buffer3.from(chunk, encoding);
          encoding = void 0;
          len = chunk.length;
        }
        this.set("Content-Length", len);
      }
      var etag;
      if (generateETag && len !== void 0) {
        if (etag = etagFn(chunk, encoding)) {
          this.set("ETag", etag);
        }
      }
      if (req.fresh) this.statusCode = 304;
      if (204 === this.statusCode || 304 === this.statusCode) {
        this.removeHeader("Content-Type");
        this.removeHeader("Content-Length");
        this.removeHeader("Transfer-Encoding");
        chunk = "";
      }
      if (this.statusCode === 205) {
        this.set("Content-Length", "0");
        this.removeHeader("Transfer-Encoding");
        chunk = "";
      }
      if (req.method === "HEAD") {
        this.end();
      } else {
        this.end(chunk, encoding);
      }
      return this;
    };
    res.json = function json(obj) {
      var val = obj;
      if (arguments.length === 2) {
        if (typeof arguments[1] === "number") {
          deprecate("res.json(obj, status): Use res.status(status).json(obj) instead");
          this.statusCode = arguments[1];
        } else {
          deprecate("res.json(status, obj): Use res.status(status).json(obj) instead");
          this.statusCode = arguments[0];
          val = arguments[1];
        }
      }
      var app2 = this.app;
      var escape2 = app2.get("json escape");
      var replacer = app2.get("json replacer");
      var spaces = app2.get("json spaces");
      var body = stringify(val, replacer, spaces, escape2);
      if (!this.get("Content-Type")) {
        this.set("Content-Type", "application/json");
      }
      return this.send(body);
    };
    res.jsonp = function jsonp(obj) {
      var val = obj;
      if (arguments.length === 2) {
        if (typeof arguments[1] === "number") {
          deprecate("res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead");
          this.statusCode = arguments[1];
        } else {
          deprecate("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead");
          this.statusCode = arguments[0];
          val = arguments[1];
        }
      }
      var app2 = this.app;
      var escape2 = app2.get("json escape");
      var replacer = app2.get("json replacer");
      var spaces = app2.get("json spaces");
      var body = stringify(val, replacer, spaces, escape2);
      var callback = this.req.query[app2.get("jsonp callback name")];
      if (!this.get("Content-Type")) {
        this.set("X-Content-Type-Options", "nosniff");
        this.set("Content-Type", "application/json");
      }
      if (Array.isArray(callback)) {
        callback = callback[0];
      }
      if (typeof callback === "string" && callback.length !== 0) {
        this.set("X-Content-Type-Options", "nosniff");
        this.set("Content-Type", "text/javascript");
        callback = callback.replace(/[^\[\]\w$.]/g, "");
        if (body === void 0) {
          body = "";
        } else if (typeof body === "string") {
          body = body.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
        }
        body = "/**/ typeof " + callback + " === 'function' && " + callback + "(" + body + ");";
      }
      return this.send(body);
    };
    res.sendStatus = function sendStatus(statusCode) {
      var body = statuses.message[statusCode] || String(statusCode);
      this.statusCode = statusCode;
      this.type("txt");
      return this.send(body);
    };
    res.sendFile = function sendFile(path4, options, callback) {
      var done = callback;
      var req = this.req;
      var res2 = this;
      var next = req.next;
      var opts = options || {};
      if (!path4) {
        throw new TypeError("path argument is required to res.sendFile");
      }
      if (typeof path4 !== "string") {
        throw new TypeError("path must be a string to res.sendFile");
      }
      if (typeof options === "function") {
        done = options;
        opts = {};
      }
      if (!opts.root && !isAbsolute(path4)) {
        throw new TypeError("path must be absolute or specify root to res.sendFile");
      }
      var pathname = encodeURI(path4);
      var file = send(req, pathname, opts);
      sendfile(res2, file, opts, function(err) {
        if (done) return done(err);
        if (err && err.code === "EISDIR") return next();
        if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
          next(err);
        }
      });
    };
    res.sendfile = function(path4, options, callback) {
      var done = callback;
      var req = this.req;
      var res2 = this;
      var next = req.next;
      var opts = options || {};
      if (typeof options === "function") {
        done = options;
        opts = {};
      }
      var file = send(req, path4, opts);
      sendfile(res2, file, opts, function(err) {
        if (done) return done(err);
        if (err && err.code === "EISDIR") return next();
        if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
          next(err);
        }
      });
    };
    res.sendfile = deprecate.function(
      res.sendfile,
      "res.sendfile: Use res.sendFile instead"
    );
    res.download = function download(path4, filename, options, callback) {
      var done = callback;
      var name = filename;
      var opts = options || null;
      if (typeof filename === "function") {
        done = filename;
        name = null;
        opts = null;
      } else if (typeof options === "function") {
        done = options;
        opts = null;
      }
      if (typeof filename === "object" && (typeof options === "function" || options === void 0)) {
        name = null;
        opts = filename;
      }
      var headers = {
        "Content-Disposition": contentDisposition(name || path4)
      };
      if (opts && opts.headers) {
        var keys = Object.keys(opts.headers);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key.toLowerCase() !== "content-disposition") {
            headers[key] = opts.headers[key];
          }
        }
      }
      opts = Object.create(opts);
      opts.headers = headers;
      var fullPath = !opts.root ? resolve(path4) : path4;
      return this.sendFile(fullPath, opts, done);
    };
    res.contentType = res.type = function contentType(type) {
      var ct = type.indexOf("/") === -1 ? mime.lookup(type) : type;
      return this.set("Content-Type", ct);
    };
    res.format = function(obj) {
      var req = this.req;
      var next = req.next;
      var keys = Object.keys(obj).filter(function(v) {
        return v !== "default";
      });
      var key = keys.length > 0 ? req.accepts(keys) : false;
      this.vary("Accept");
      if (key) {
        this.set("Content-Type", normalizeType(key).value);
        obj[key](req, this, next);
      } else if (obj.default) {
        obj.default(req, this, next);
      } else {
        next(createError(406, {
          types: normalizeTypes(keys).map(function(o) {
            return o.value;
          })
        }));
      }
      return this;
    };
    res.attachment = function attachment(filename) {
      if (filename) {
        this.type(extname(filename));
      }
      this.set("Content-Disposition", contentDisposition(filename));
      return this;
    };
    res.append = function append(field, val) {
      var prev = this.get(field);
      var value = val;
      if (prev) {
        value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];
      }
      return this.set(field, value);
    };
    res.set = res.header = function header(field, val) {
      if (arguments.length === 2) {
        var value = Array.isArray(val) ? val.map(String) : String(val);
        if (field.toLowerCase() === "content-type") {
          if (Array.isArray(value)) {
            throw new TypeError("Content-Type cannot be set to an Array");
          }
          if (!charsetRegExp.test(value)) {
            var charset = mime.charsets.lookup(value.split(";")[0]);
            if (charset) value += "; charset=" + charset.toLowerCase();
          }
        }
        this.setHeader(field, value);
      } else {
        for (var key in field) {
          this.set(key, field[key]);
        }
      }
      return this;
    };
    res.get = function(field) {
      return this.getHeader(field);
    };
    res.clearCookie = function clearCookie(name, options) {
      if (options) {
        if (options.maxAge) {
          deprecate('res.clearCookie: Passing "options.maxAge" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
        }
        if (options.expires) {
          deprecate('res.clearCookie: Passing "options.expires" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
        }
      }
      var opts = merge({ expires: /* @__PURE__ */ new Date(1), path: "/" }, options);
      return this.cookie(name, "", opts);
    };
    res.cookie = function(name, value, options) {
      var opts = merge({}, options);
      var secret = this.req.secret;
      var signed = opts.signed;
      if (signed && !secret) {
        throw new Error('cookieParser("secret") required for signed cookies');
      }
      var val = typeof value === "object" ? "j:" + JSON.stringify(value) : String(value);
      if (signed) {
        val = "s:" + sign(val, secret);
      }
      if (opts.maxAge != null) {
        var maxAge = opts.maxAge - 0;
        if (!isNaN(maxAge)) {
          opts.expires = new Date(Date.now() + maxAge);
          opts.maxAge = Math.floor(maxAge / 1e3);
        }
      }
      if (opts.path == null) {
        opts.path = "/";
      }
      this.append("Set-Cookie", cookie.serialize(name, String(val), opts));
      return this;
    };
    res.location = function location(url) {
      var loc;
      if (url === "back") {
        deprecate('res.location("back"): use res.location(req.get("Referrer") || "/") and refer to https://dub.sh/security-redirect for best practices');
        loc = this.req.get("Referrer") || "/";
      } else {
        loc = String(url);
      }
      return this.set("Location", encodeUrl(loc));
    };
    res.redirect = function redirect(url) {
      var address = url;
      var body;
      var status = 302;
      if (arguments.length === 2) {
        if (typeof arguments[0] === "number") {
          status = arguments[0];
          address = arguments[1];
        } else {
          deprecate("res.redirect(url, status): Use res.redirect(status, url) instead");
          status = arguments[1];
        }
      }
      address = this.location(address).get("Location");
      this.format({
        text: function() {
          body = statuses.message[status] + ". Redirecting to " + address;
        },
        html: function() {
          var u = escapeHtml(address);
          body = "<p>" + statuses.message[status] + ". Redirecting to " + u + "</p>";
        },
        default: function() {
          body = "";
        }
      });
      this.statusCode = status;
      this.set("Content-Length", Buffer3.byteLength(body));
      if (this.req.method === "HEAD") {
        this.end();
      } else {
        this.end(body);
      }
    };
    res.vary = function(field) {
      if (!field || Array.isArray(field) && !field.length) {
        deprecate("res.vary(): Provide a field name");
        return this;
      }
      vary(this, field);
      return this;
    };
    res.render = function render(view, options, callback) {
      var app2 = this.req.app;
      var done = callback;
      var opts = options || {};
      var req = this.req;
      var self2 = this;
      if (typeof options === "function") {
        done = options;
        opts = {};
      }
      opts._locals = self2.locals;
      done = done || function(err, str) {
        if (err) return req.next(err);
        self2.send(str);
      };
      app2.render(view, opts, done);
    };
    function sendfile(res2, file, options, callback) {
      var done = false;
      var streaming;
      function onaborted() {
        if (done) return;
        done = true;
        var err = new Error("Request aborted");
        err.code = "ECONNABORTED";
        callback(err);
      }
      function ondirectory() {
        if (done) return;
        done = true;
        var err = new Error("EISDIR, read");
        err.code = "EISDIR";
        callback(err);
      }
      function onerror(err) {
        if (done) return;
        done = true;
        callback(err);
      }
      function onend() {
        if (done) return;
        done = true;
        callback();
      }
      function onfile() {
        streaming = false;
      }
      function onfinish(err) {
        if (err && err.code === "ECONNRESET") return onaborted();
        if (err) return onerror(err);
        if (done) return;
        setImmediate(function() {
          if (streaming !== false && !done) {
            onaborted();
            return;
          }
          if (done) return;
          done = true;
          callback();
        });
      }
      function onstream() {
        streaming = true;
      }
      file.on("directory", ondirectory);
      file.on("end", onend);
      file.on("error", onerror);
      file.on("file", onfile);
      file.on("stream", onstream);
      onFinished(res2, onfinish);
      if (options.headers) {
        file.on("headers", function headers(res3) {
          var obj = options.headers;
          var keys = Object.keys(obj);
          for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            res3.setHeader(k, obj[k]);
          }
        });
      }
      file.pipe(res2);
    }
    function stringify(value, replacer, spaces, escape2) {
      var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);
      if (escape2 && typeof json === "string") {
        json = json.replace(/[<>&]/g, function(c) {
          switch (c.charCodeAt(0)) {
            case 60:
              return "\\u003c";
            case 62:
              return "\\u003e";
            case 38:
              return "\\u0026";
            /* istanbul ignore next: unreachable default */
            default:
              return c;
          }
        });
      }
      return json;
    }
  }
});

// ../../node_modules/serve-static/index.js
var require_serve_static = __commonJS({
  "../../node_modules/serve-static/index.js"(exports, module) {
    "use strict";
    var encodeUrl = require_encodeurl();
    var escapeHtml = require_escape_html();
    var parseUrl = require_parseurl();
    var resolve = __require("path").resolve;
    var send = require_send();
    var url = __require("url");
    module.exports = serveStatic;
    module.exports.mime = send.mime;
    function serveStatic(root, options) {
      if (!root) {
        throw new TypeError("root path required");
      }
      if (typeof root !== "string") {
        throw new TypeError("root path must be a string");
      }
      var opts = Object.create(options || null);
      var fallthrough = opts.fallthrough !== false;
      var redirect = opts.redirect !== false;
      var setHeaders = opts.setHeaders;
      if (setHeaders && typeof setHeaders !== "function") {
        throw new TypeError("option setHeaders must be function");
      }
      opts.maxage = opts.maxage || opts.maxAge || 0;
      opts.root = resolve(root);
      var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();
      return function serveStatic2(req, res, next) {
        if (req.method !== "GET" && req.method !== "HEAD") {
          if (fallthrough) {
            return next();
          }
          res.statusCode = 405;
          res.setHeader("Allow", "GET, HEAD");
          res.setHeader("Content-Length", "0");
          res.end();
          return;
        }
        var forwardError = !fallthrough;
        var originalUrl = parseUrl.original(req);
        var path3 = parseUrl(req).pathname;
        if (path3 === "/" && originalUrl.pathname.substr(-1) !== "/") {
          path3 = "";
        }
        var stream2 = send(req, path3, opts);
        stream2.on("directory", onDirectory);
        if (setHeaders) {
          stream2.on("headers", setHeaders);
        }
        if (fallthrough) {
          stream2.on("file", function onFile() {
            forwardError = true;
          });
        }
        stream2.on("error", function error(err) {
          if (forwardError || !(err.statusCode < 500)) {
            next(err);
            return;
          }
          next();
        });
        stream2.pipe(res);
      };
    }
    function collapseLeadingSlashes(str) {
      for (var i = 0; i < str.length; i++) {
        if (str.charCodeAt(i) !== 47) {
          break;
        }
      }
      return i > 1 ? "/" + str.substr(i) : str;
    }
    function createHtmlDocument(title, body) {
      return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
    }
    function createNotFoundDirectoryListener() {
      return function notFound() {
        this.error(404);
      };
    }
    function createRedirectDirectoryListener() {
      return function redirect(res) {
        if (this.hasTrailingSlash()) {
          this.error(404);
          return;
        }
        var originalUrl = parseUrl.original(this.req);
        originalUrl.path = null;
        originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + "/");
        var loc = encodeUrl(url.format(originalUrl));
        var doc = createHtmlDocument("Redirecting", "Redirecting to " + escapeHtml(loc));
        res.statusCode = 301;
        res.setHeader("Content-Type", "text/html; charset=UTF-8");
        res.setHeader("Content-Length", Buffer.byteLength(doc));
        res.setHeader("Content-Security-Policy", "default-src 'none'");
        res.setHeader("X-Content-Type-Options", "nosniff");
        res.setHeader("Location", loc);
        res.end(doc);
      };
    }
  }
});

// ../../node_modules/express/lib/express.js
var require_express = __commonJS({
  "../../node_modules/express/lib/express.js"(exports, module) {
    "use strict";
    var bodyParser = require_body_parser();
    var EventEmitter2 = __require("events").EventEmitter;
    var mixin2 = require_merge_descriptors();
    var proto = require_application();
    var Route = require_route();
    var Router2 = require_router();
    var req = require_request();
    var res = require_response();
    exports = module.exports = createApplication;
    function createApplication() {
      var app2 = function(req2, res2, next) {
        app2.handle(req2, res2, next);
      };
      mixin2(app2, EventEmitter2.prototype, false);
      mixin2(app2, proto, false);
      app2.request = Object.create(req, {
        app: { configurable: true, enumerable: true, writable: true, value: app2 }
      });
      app2.response = Object.create(res, {
        app: { configurable: true, enumerable: true, writable: true, value: app2 }
      });
      app2.init();
      return app2;
    }
    exports.application = proto;
    exports.request = req;
    exports.response = res;
    exports.Route = Route;
    exports.Router = Router2;
    exports.json = bodyParser.json;
    exports.query = require_query();
    exports.raw = bodyParser.raw;
    exports.static = require_serve_static();
    exports.text = bodyParser.text;
    exports.urlencoded = bodyParser.urlencoded;
    var removedMiddlewares = [
      "bodyParser",
      "compress",
      "cookieSession",
      "session",
      "logger",
      "cookieParser",
      "favicon",
      "responseTime",
      "errorHandler",
      "timeout",
      "methodOverride",
      "vhost",
      "csrf",
      "directory",
      "limit",
      "multipart",
      "staticCache"
    ];
    removedMiddlewares.forEach(function(name) {
      Object.defineProperty(exports, name, {
        get: function() {
          throw new Error("Most middleware (like " + name + ") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.");
        },
        configurable: true
      });
    });
  }
});

// ../../node_modules/express/index.js
var require_express2 = __commonJS({
  "../../node_modules/express/index.js"(exports, module) {
    "use strict";
    module.exports = require_express();
  }
});

// ../../node_modules/crypto-js/core.js
var require_core = __commonJS({
  "../../node_modules/crypto-js/core.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = __require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || /* @__PURE__ */ function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  }
});

// ../../node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "../../node_modules/crypto-js/x64-core.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS2;
    });
  }
});

// ../../node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "../../node_modules/crypto-js/lib-typedarrays.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS2.lib.WordArray;
    });
  }
});

// ../../node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "../../node_modules/crypto-js/enc-utf16.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS2.enc.Utf16;
    });
  }
});

// ../../node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "../../node_modules/crypto-js/enc-base64.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64;
    });
  }
});

// ../../node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "../../node_modules/crypto-js/enc-base64url.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64url;
    });
  }
});

// ../../node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "../../node_modules/crypto-js/md5.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS2.MD5;
    });
  }
});

// ../../node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "../../node_modules/crypto-js/sha1.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS2.SHA1;
    });
  }
});

// ../../node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "../../node_modules/crypto-js/sha256.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  }
});

// ../../node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "../../node_modules/crypto-js/sha224.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS2.SHA224;
    });
  }
});

// ../../node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "../../node_modules/crypto-js/sha512.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS2.SHA512;
    });
  }
});

// ../../node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "../../node_modules/crypto-js/sha384.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS2.SHA384;
    });
  }
});

// ../../node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "../../node_modules/crypto-js/sha3.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS2.SHA3;
    });
  }
});

// ../../node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "../../node_modules/crypto-js/ripemd160.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS2.RIPEMD160;
    });
  }
});

// ../../node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "../../node_modules/crypto-js/hmac.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// ../../node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "../../node_modules/crypto-js/pbkdf2.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.PBKDF2;
    });
  }
});

// ../../node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "../../node_modules/crypto-js/evpkdf.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.EvpKDF;
    });
  }
});

// ../../node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "../../node_modules/crypto-js/cipher-core.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.lib.Cipher || function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// ../../node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "../../node_modules/crypto-js/mode-cfb.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CFB = function() {
        var CFB = CryptoJS2.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS2.mode.CFB;
    });
  }
});

// ../../node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "../../node_modules/crypto-js/mode-ctr.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTR = function() {
        var CTR = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS2.mode.CTR;
    });
  }
});

// ../../node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "../../node_modules/crypto-js/mode-ctr-gladman.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS2.mode.CTRGladman;
    });
  }
});

// ../../node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "../../node_modules/crypto-js/mode-ofb.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.OFB = function() {
        var OFB = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS2.mode.OFB;
    });
  }
});

// ../../node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "../../node_modules/crypto-js/mode-ecb.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.ECB = function() {
        var ECB = CryptoJS2.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS2.mode.ECB;
    });
  }
});

// ../../node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "../../node_modules/crypto-js/pad-ansix923.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Ansix923;
    });
  }
});

// ../../node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "../../node_modules/crypto-js/pad-iso10126.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Iso10126;
    });
  }
});

// ../../node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "../../node_modules/crypto-js/pad-iso97971.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
          CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS2.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS2.pad.Iso97971;
    });
  }
});

// ../../node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "../../node_modules/crypto-js/pad-zeropadding.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS2.pad.ZeroPadding;
    });
  }
});

// ../../node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "../../node_modules/crypto-js/pad-nopadding.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS2.pad.NoPadding;
    });
  }
});

// ../../node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "../../node_modules/crypto-js/format-hex.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS2.format.Hex;
    });
  }
});

// ../../node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "../../node_modules/crypto-js/aes.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx2 = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx2 = sx2 >>> 8 ^ sx2 & 255 ^ 99;
            SBOX[x] = sx2;
            INV_SBOX[sx2] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx2] * 257 ^ sx2 * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx2] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx2] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx2] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx2] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS2.AES;
    });
  }
});

// ../../node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "../../node_modules/crypto-js/tripledes.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS2.TripleDES;
    });
  }
});

// ../../node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "../../node_modules/crypto-js/rc4.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS2.RC4;
    });
  }
});

// ../../node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "../../node_modules/crypto-js/rabbit.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS2.Rabbit;
    });
  }
});

// ../../node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "../../node_modules/crypto-js/rabbit-legacy.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS2.RabbitLegacy;
    });
  }
});

// ../../node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "../../node_modules/crypto-js/blowfish.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS2.Blowfish;
    });
  }
});

// ../../node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "../../node_modules/crypto-js/index.js"(exports, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      return CryptoJS2;
    });
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/DecodeStream.js
var require_DecodeStream = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/DecodeStream.js"(exports, module) {
    "use strict";
    var iconv;
    try {
      iconv = require_lib();
    } catch (error) {
    }
    var DecodeStream = class {
      constructor(buffer) {
        this.buffer = buffer;
        this.pos = 0;
        this.length = this.buffer.length;
      }
      readString(length, encoding = "ascii") {
        switch (encoding) {
          case "utf16le":
          case "ucs2":
          case "utf8":
          case "ascii":
            return this.buffer.toString(encoding, this.pos, this.pos += length);
          case "utf16be":
            var buf = Buffer.from(this.readBuffer(length));
            for (let i = 0, end = buf.length - 1; i < end; i += 2) {
              const byte = buf[i];
              buf[i] = buf[i + 1];
              buf[i + 1] = byte;
            }
            return buf.toString("utf16le");
          default:
            buf = this.readBuffer(length);
            if (iconv) {
              try {
                return iconv.decode(buf, encoding);
              } catch (error1) {
              }
            }
            return buf;
        }
      }
      readBuffer(length) {
        return this.buffer.slice(this.pos, this.pos += length);
      }
      readUInt24BE() {
        return (this.readUInt16BE() << 8) + this.readUInt8();
      }
      readUInt24LE() {
        return this.readUInt16LE() + (this.readUInt8() << 16);
      }
      readInt24BE() {
        return (this.readInt16BE() << 8) + this.readUInt8();
      }
      readInt24LE() {
        return this.readUInt16LE() + (this.readInt8() << 16);
      }
    };
    DecodeStream.TYPES = {
      UInt8: 1,
      UInt16: 2,
      UInt24: 3,
      UInt32: 4,
      Int8: 1,
      Int16: 2,
      Int24: 3,
      Int32: 4,
      Float: 4,
      Double: 8
    };
    for (let key in Buffer.prototype) {
      if (key.slice(0, 4) === "read") {
        const bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, "")];
        DecodeStream.prototype[key] = function() {
          const ret = this.buffer[key](this.pos);
          this.pos += bytes;
          return ret;
        };
      }
    }
    module.exports = DecodeStream;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/EncodeStream.js
var require_EncodeStream = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/EncodeStream.js"(exports, module) {
    "use strict";
    var iconv;
    var stream2 = __require("stream");
    var DecodeStream = require_DecodeStream();
    try {
      iconv = require_lib();
    } catch (error) {
    }
    var EncodeStream = class extends stream2.Readable {
      constructor(bufferSize = 65536) {
        super(...arguments);
        this.buffer = Buffer.alloc(bufferSize);
        this.bufferOffset = 0;
        this.pos = 0;
      }
      // do nothing, required by node
      _read() {
      }
      ensure(bytes) {
        if (this.bufferOffset + bytes > this.buffer.length) {
          return this.flush();
        }
      }
      flush() {
        if (this.bufferOffset > 0) {
          this.push(Buffer.from(this.buffer.slice(0, this.bufferOffset)));
          return this.bufferOffset = 0;
        }
      }
      writeBuffer(buffer) {
        this.flush();
        this.push(buffer);
        return this.pos += buffer.length;
      }
      writeString(string, encoding = "ascii") {
        switch (encoding) {
          case "utf16le":
          case "ucs2":
          case "utf8":
          case "ascii":
            return this.writeBuffer(Buffer.from(string, encoding));
          case "utf16be":
            var buf = Buffer.from(string, "utf16le");
            for (let i = 0, end = buf.length - 1; i < end; i += 2) {
              const byte = buf[i];
              buf[i] = buf[i + 1];
              buf[i + 1] = byte;
            }
            return this.writeBuffer(buf);
          default:
            if (iconv) {
              return this.writeBuffer(iconv.encode(string, encoding));
            } else {
              throw new Error("Install iconv-lite to enable additional string encodings.");
            }
        }
      }
      writeUInt24BE(val) {
        this.ensure(3);
        this.buffer[this.bufferOffset++] = val >>> 16 & 255;
        this.buffer[this.bufferOffset++] = val >>> 8 & 255;
        this.buffer[this.bufferOffset++] = val & 255;
        return this.pos += 3;
      }
      writeUInt24LE(val) {
        this.ensure(3);
        this.buffer[this.bufferOffset++] = val & 255;
        this.buffer[this.bufferOffset++] = val >>> 8 & 255;
        this.buffer[this.bufferOffset++] = val >>> 16 & 255;
        return this.pos += 3;
      }
      writeInt24BE(val) {
        if (val >= 0) {
          return this.writeUInt24BE(val);
        } else {
          return this.writeUInt24BE(val + 16777215 + 1);
        }
      }
      writeInt24LE(val) {
        if (val >= 0) {
          return this.writeUInt24LE(val);
        } else {
          return this.writeUInt24LE(val + 16777215 + 1);
        }
      }
      fill(val, length) {
        if (length < this.buffer.length) {
          this.ensure(length);
          this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
          this.bufferOffset += length;
          return this.pos += length;
        } else {
          const buf = Buffer.alloc(length);
          buf.fill(val);
          return this.writeBuffer(buf);
        }
      }
      end() {
        this.flush();
        return this.push(null);
      }
    };
    for (let key in Buffer.prototype) {
      if (key.slice(0, 5) === "write") {
        const bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, "")];
        EncodeStream.prototype[key] = function(value) {
          this.ensure(bytes);
          this.buffer[key](value, this.bufferOffset);
          this.bufferOffset += bytes;
          return this.pos += bytes;
        };
      }
    }
    module.exports = EncodeStream;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Number.js
var require_Number = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Number.js"(exports) {
    "use strict";
    var DecodeStream = require_DecodeStream();
    var NumberT = class {
      constructor(type, endian = "BE") {
        this.type = type;
        this.endian = endian;
        this.fn = this.type;
        if (this.type[this.type.length - 1] !== "8") {
          this.fn += this.endian;
        }
      }
      size() {
        return DecodeStream.TYPES[this.type];
      }
      decode(stream2) {
        return stream2[`read${this.fn}`]();
      }
      encode(stream2, val) {
        return stream2[`write${this.fn}`](val);
      }
    };
    exports.Number = NumberT;
    exports.uint8 = new NumberT("UInt8");
    exports.uint16be = exports.uint16 = new NumberT("UInt16", "BE");
    exports.uint16le = new NumberT("UInt16", "LE");
    exports.uint24be = exports.uint24 = new NumberT("UInt24", "BE");
    exports.uint24le = new NumberT("UInt24", "LE");
    exports.uint32be = exports.uint32 = new NumberT("UInt32", "BE");
    exports.uint32le = new NumberT("UInt32", "LE");
    exports.int8 = new NumberT("Int8");
    exports.int16be = exports.int16 = new NumberT("Int16", "BE");
    exports.int16le = new NumberT("Int16", "LE");
    exports.int24be = exports.int24 = new NumberT("Int24", "BE");
    exports.int24le = new NumberT("Int24", "LE");
    exports.int32be = exports.int32 = new NumberT("Int32", "BE");
    exports.int32le = new NumberT("Int32", "LE");
    exports.floatbe = exports.float = new NumberT("Float", "BE");
    exports.floatle = new NumberT("Float", "LE");
    exports.doublebe = exports.double = new NumberT("Double", "BE");
    exports.doublele = new NumberT("Double", "LE");
    var Fixed = class extends NumberT {
      constructor(size, endian, fracBits = size >> 1) {
        super(`Int${size}`, endian);
        this._point = 1 << fracBits;
      }
      decode(stream2) {
        return super.decode(stream2) / this._point;
      }
      encode(stream2, val) {
        return super.encode(stream2, val * this._point | 0);
      }
    };
    exports.Fixed = Fixed;
    exports.fixed16be = exports.fixed16 = new Fixed(16, "BE");
    exports.fixed16le = new Fixed(16, "LE");
    exports.fixed32be = exports.fixed32 = new Fixed(32, "BE");
    exports.fixed32le = new Fixed(32, "LE");
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/utils.js"(exports) {
    "use strict";
    var { Number: NumberT } = require_Number();
    exports.resolveLength = function(length, stream2, parent) {
      let res;
      if (typeof length === "number") {
        res = length;
      } else if (typeof length === "function") {
        res = length.call(parent, parent);
      } else if (parent && typeof length === "string") {
        res = parent[length];
      } else if (stream2 && length instanceof NumberT) {
        res = length.decode(stream2);
      }
      if (isNaN(res)) {
        throw new Error("Not a fixed size");
      }
      return res;
    };
    var PropertyDescriptor = class {
      constructor(opts = {}) {
        this.enumerable = true;
        this.configurable = true;
        for (let key in opts) {
          const val = opts[key];
          this[key] = val;
        }
      }
    };
    exports.PropertyDescriptor = PropertyDescriptor;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Array.js
var require_Array = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Array.js"(exports, module) {
    "use strict";
    var { Number: NumberT } = require_Number();
    var utils = require_utils3();
    var ArrayT = class {
      constructor(type, length, lengthType = "count") {
        this.type = type;
        this.length = length;
        this.lengthType = lengthType;
      }
      decode(stream2, parent) {
        let length;
        const { pos } = stream2;
        const res = [];
        let ctx = parent;
        if (this.length != null) {
          length = utils.resolveLength(this.length, stream2, parent);
        }
        if (this.length instanceof NumberT) {
          Object.defineProperties(res, {
            parent: { value: parent },
            _startOffset: { value: pos },
            _currentOffset: { value: 0, writable: true },
            _length: { value: length }
          });
          ctx = res;
        }
        if (length == null || this.lengthType === "bytes") {
          const target = length != null ? stream2.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream2.length;
          while (stream2.pos < target) {
            res.push(this.type.decode(stream2, ctx));
          }
        } else {
          for (let i = 0, end = length; i < end; i++) {
            res.push(this.type.decode(stream2, ctx));
          }
        }
        return res;
      }
      size(array, ctx) {
        if (!array) {
          return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
        }
        let size = 0;
        if (this.length instanceof NumberT) {
          size += this.length.size();
          ctx = { parent: ctx };
        }
        for (let item of array) {
          size += this.type.size(item, ctx);
        }
        return size;
      }
      encode(stream2, array, parent) {
        let ctx = parent;
        if (this.length instanceof NumberT) {
          ctx = {
            pointers: [],
            startOffset: stream2.pos,
            parent
          };
          ctx.pointerOffset = stream2.pos + this.size(array, ctx);
          this.length.encode(stream2, array.length);
        }
        for (let item of array) {
          this.type.encode(stream2, item, ctx);
        }
        if (this.length instanceof NumberT) {
          let i = 0;
          while (i < ctx.pointers.length) {
            const ptr = ctx.pointers[i++];
            ptr.type.encode(stream2, ptr.val);
          }
        }
      }
    };
    module.exports = ArrayT;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/LazyArray.js
var require_LazyArray = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/LazyArray.js"(exports, module) {
    "use strict";
    var ArrayT = require_Array();
    var { Number: NumberT } = require_Number();
    var utils = require_utils3();
    var { inspect } = __require("util");
    var LazyArrayT = class extends ArrayT {
      decode(stream2, parent) {
        const { pos } = stream2;
        const length = utils.resolveLength(this.length, stream2, parent);
        if (this.length instanceof NumberT) {
          parent = {
            parent,
            _startOffset: pos,
            _currentOffset: 0,
            _length: length
          };
        }
        const res = new LazyArray(this.type, length, stream2, parent);
        stream2.pos += length * this.type.size(null, parent);
        return res;
      }
      size(val, ctx) {
        if (val instanceof LazyArray) {
          val = val.toArray();
        }
        return super.size(val, ctx);
      }
      encode(stream2, val, ctx) {
        if (val instanceof LazyArray) {
          val = val.toArray();
        }
        return super.encode(stream2, val, ctx);
      }
    };
    var LazyArray = class {
      constructor(type, length, stream2, ctx) {
        this.type = type;
        this.length = length;
        this.stream = stream2;
        this.ctx = ctx;
        this.base = this.stream.pos;
        this.items = [];
      }
      get(index) {
        if (index < 0 || index >= this.length) {
          return void 0;
        }
        if (this.items[index] == null) {
          const { pos } = this.stream;
          this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
          this.items[index] = this.type.decode(this.stream, this.ctx);
          this.stream.pos = pos;
        }
        return this.items[index];
      }
      toArray() {
        const result = [];
        for (let i = 0, end = this.length; i < end; i++) {
          result.push(this.get(i));
        }
        return result;
      }
      inspect() {
        return inspect(this.toArray());
      }
    };
    module.exports = LazyArrayT;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Bitfield.js
var require_Bitfield = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Bitfield.js"(exports, module) {
    "use strict";
    var Bitfield = class {
      constructor(type, flags = []) {
        this.type = type;
        this.flags = flags;
      }
      decode(stream2) {
        const val = this.type.decode(stream2);
        const res = {};
        for (let i = 0; i < this.flags.length; i++) {
          const flag = this.flags[i];
          if (flag != null) {
            res[flag] = !!(val & 1 << i);
          }
        }
        return res;
      }
      size() {
        return this.type.size();
      }
      encode(stream2, keys) {
        let val = 0;
        for (let i = 0; i < this.flags.length; i++) {
          const flag = this.flags[i];
          if (flag != null) {
            if (keys[flag]) {
              val |= 1 << i;
            }
          }
        }
        return this.type.encode(stream2, val);
      }
    };
    module.exports = Bitfield;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Boolean.js
var require_Boolean = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Boolean.js"(exports, module) {
    "use strict";
    var BooleanT = class {
      constructor(type) {
        this.type = type;
      }
      decode(stream2, parent) {
        return !!this.type.decode(stream2, parent);
      }
      size(val, parent) {
        return this.type.size(val, parent);
      }
      encode(stream2, val, parent) {
        return this.type.encode(stream2, +val, parent);
      }
    };
    module.exports = BooleanT;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Buffer.js
var require_Buffer = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Buffer.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var { Number: NumberT } = require_Number();
    var BufferT = class {
      constructor(length) {
        this.length = length;
      }
      decode(stream2, parent) {
        const length = utils.resolveLength(this.length, stream2, parent);
        return stream2.readBuffer(length);
      }
      size(val, parent) {
        if (!val) {
          return utils.resolveLength(this.length, null, parent);
        }
        return val.length;
      }
      encode(stream2, buf, parent) {
        if (this.length instanceof NumberT) {
          this.length.encode(stream2, buf.length);
        }
        return stream2.writeBuffer(buf);
      }
    };
    module.exports = BufferT;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Enum.js
var require_Enum = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Enum.js"(exports, module) {
    "use strict";
    var Enum = class {
      constructor(type, options = []) {
        this.type = type;
        this.options = options;
      }
      decode(stream2) {
        const index = this.type.decode(stream2);
        return this.options[index] || index;
      }
      size() {
        return this.type.size();
      }
      encode(stream2, val) {
        const index = this.options.indexOf(val);
        if (index === -1) {
          throw new Error(`Unknown option in enum: ${val}`);
        }
        return this.type.encode(stream2, index);
      }
    };
    module.exports = Enum;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Optional.js
var require_Optional = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Optional.js"(exports, module) {
    "use strict";
    var Optional = class {
      constructor(type, condition = true) {
        this.type = type;
        this.condition = condition;
      }
      decode(stream2, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.decode(stream2, parent);
        }
      }
      size(val, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.size(val, parent);
        } else {
          return 0;
        }
      }
      encode(stream2, val, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.encode(stream2, val, parent);
        }
      }
    };
    module.exports = Optional;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Reserved.js
var require_Reserved = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Reserved.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var Reserved = class {
      constructor(type, count = 1) {
        this.type = type;
        this.count = count;
      }
      decode(stream2, parent) {
        stream2.pos += this.size(null, parent);
        return void 0;
      }
      size(data, parent) {
        const count = utils.resolveLength(this.count, null, parent);
        return this.type.size() * count;
      }
      encode(stream2, val, parent) {
        return stream2.fill(0, this.size(val, parent));
      }
    };
    module.exports = Reserved;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/String.js
var require_String = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/String.js"(exports, module) {
    "use strict";
    var { Number: NumberT } = require_Number();
    var utils = require_utils3();
    var StringT = class {
      constructor(length, encoding = "ascii") {
        this.length = length;
        this.encoding = encoding;
      }
      decode(stream2, parent) {
        let length, pos;
        if (this.length != null) {
          length = utils.resolveLength(this.length, stream2, parent);
        } else {
          let buffer;
          ({ buffer, length, pos } = stream2);
          while (pos < length && buffer[pos] !== 0) {
            ++pos;
          }
          length = pos - stream2.pos;
        }
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent, parent) || "ascii";
        }
        const string = stream2.readString(length, encoding);
        if (this.length == null && stream2.pos < stream2.length) {
          stream2.pos++;
        }
        return string;
      }
      size(val, parent) {
        if (!val) {
          return utils.resolveLength(this.length, null, parent);
        }
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        }
        if (encoding === "utf16be") {
          encoding = "utf16le";
        }
        let size = Buffer.byteLength(val, encoding);
        if (this.length instanceof NumberT) {
          size += this.length.size();
        }
        if (this.length == null) {
          size++;
        }
        return size;
      }
      encode(stream2, val, parent) {
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        }
        if (this.length instanceof NumberT) {
          this.length.encode(stream2, Buffer.byteLength(val, encoding));
        }
        stream2.writeString(val, encoding);
        if (this.length == null) {
          return stream2.writeUInt8(0);
        }
      }
    };
    module.exports = StringT;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Struct.js
var require_Struct = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Struct.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var Struct = class {
      constructor(fields = {}) {
        this.fields = fields;
      }
      decode(stream2, parent, length = 0) {
        const res = this._setup(stream2, parent, length);
        this._parseFields(stream2, res, this.fields);
        if (this.process != null) {
          this.process.call(res, stream2);
        }
        return res;
      }
      _setup(stream2, parent, length) {
        const res = {};
        Object.defineProperties(res, {
          parent: { value: parent },
          _startOffset: { value: stream2.pos },
          _currentOffset: { value: 0, writable: true },
          _length: { value: length }
        });
        return res;
      }
      _parseFields(stream2, res, fields) {
        for (let key in fields) {
          var val;
          const type = fields[key];
          if (typeof type === "function") {
            val = type.call(res, res);
          } else {
            val = type.decode(stream2, res);
          }
          if (val !== void 0) {
            if (val instanceof utils.PropertyDescriptor) {
              Object.defineProperty(res, key, val);
            } else {
              res[key] = val;
            }
          }
          res._currentOffset = stream2.pos - res._startOffset;
        }
      }
      size(val, parent, includePointers) {
        if (val == null) {
          val = {};
        }
        if (includePointers == null) {
          includePointers = true;
        }
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        let size = 0;
        for (let key in this.fields) {
          const type = this.fields[key];
          if (type.size != null) {
            size += type.size(val[key], ctx);
          }
        }
        if (includePointers) {
          size += ctx.pointerSize;
        }
        return size;
      }
      encode(stream2, val, parent) {
        let type;
        if (this.preEncode != null) {
          this.preEncode.call(val, stream2);
        }
        const ctx = {
          pointers: [],
          startOffset: stream2.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream2.pos + this.size(val, ctx, false);
        for (let key in this.fields) {
          type = this.fields[key];
          if (type.encode != null) {
            type.encode(stream2, val[key], ctx);
          }
        }
        let i = 0;
        while (i < ctx.pointers.length) {
          const ptr = ctx.pointers[i++];
          ptr.type.encode(stream2, ptr.val, ptr.parent);
        }
      }
    };
    module.exports = Struct;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/VersionedStruct.js
var require_VersionedStruct = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/VersionedStruct.js"(exports, module) {
    "use strict";
    var Struct = require_Struct();
    var getPath = (object, pathArray) => {
      return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object);
    };
    var VersionedStruct = class _VersionedStruct extends Struct {
      constructor(type, versions = {}) {
        super();
        this.type = type;
        this.versions = versions;
        if (typeof type === "string") {
          this.versionPath = type.split(".");
        }
      }
      decode(stream2, parent, length = 0) {
        const res = this._setup(stream2, parent, length);
        if (typeof this.type === "string") {
          res.version = getPath(parent, this.versionPath);
        } else {
          res.version = this.type.decode(stream2);
        }
        if (this.versions.header) {
          this._parseFields(stream2, res, this.versions.header);
        }
        const fields = this.versions[res.version];
        if (fields == null) {
          throw new Error(`Unknown version ${res.version}`);
        }
        if (fields instanceof _VersionedStruct) {
          return fields.decode(stream2, parent);
        }
        this._parseFields(stream2, res, fields);
        if (this.process != null) {
          this.process.call(res, stream2);
        }
        return res;
      }
      size(val, parent, includePointers = true) {
        let key, type;
        if (!val) {
          throw new Error("Not a fixed size");
        }
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        let size = 0;
        if (typeof this.type !== "string") {
          size += this.type.size(val.version, ctx);
        }
        if (this.versions.header) {
          for (key in this.versions.header) {
            type = this.versions.header[key];
            if (type.size != null) {
              size += type.size(val[key], ctx);
            }
          }
        }
        const fields = this.versions[val.version];
        if (fields == null) {
          throw new Error(`Unknown version ${val.version}`);
        }
        for (key in fields) {
          type = fields[key];
          if (type.size != null) {
            size += type.size(val[key], ctx);
          }
        }
        if (includePointers) {
          size += ctx.pointerSize;
        }
        return size;
      }
      encode(stream2, val, parent) {
        let key, type;
        if (this.preEncode != null) {
          this.preEncode.call(val, stream2);
        }
        const ctx = {
          pointers: [],
          startOffset: stream2.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream2.pos + this.size(val, ctx, false);
        if (typeof this.type !== "string") {
          this.type.encode(stream2, val.version);
        }
        if (this.versions.header) {
          for (key in this.versions.header) {
            type = this.versions.header[key];
            if (type.encode != null) {
              type.encode(stream2, val[key], ctx);
            }
          }
        }
        const fields = this.versions[val.version];
        for (key in fields) {
          type = fields[key];
          if (type.encode != null) {
            type.encode(stream2, val[key], ctx);
          }
        }
        let i = 0;
        while (i < ctx.pointers.length) {
          const ptr = ctx.pointers[i++];
          ptr.type.encode(stream2, ptr.val, ptr.parent);
        }
      }
    };
    module.exports = VersionedStruct;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/src/Pointer.js
var require_Pointer = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/src/Pointer.js"(exports) {
    "use strict";
    var utils = require_utils3();
    var Pointer = class {
      constructor(offsetType, type, options = {}) {
        this.offsetType = offsetType;
        this.type = type;
        this.options = options;
        if (this.type === "void") {
          this.type = null;
        }
        if (this.options.type == null) {
          this.options.type = "local";
        }
        if (this.options.allowNull == null) {
          this.options.allowNull = true;
        }
        if (this.options.nullValue == null) {
          this.options.nullValue = 0;
        }
        if (this.options.lazy == null) {
          this.options.lazy = false;
        }
        if (this.options.relativeTo) {
          if (typeof this.options.relativeTo !== "function") {
            throw new Error("relativeTo option must be a function");
          }
          this.relativeToGetter = options.relativeTo;
        }
      }
      decode(stream2, ctx) {
        const offset = this.offsetType.decode(stream2, ctx);
        if (offset === this.options.nullValue && this.options.allowNull) {
          return null;
        }
        let relative;
        switch (this.options.type) {
          case "local":
            relative = ctx._startOffset;
            break;
          case "immediate":
            relative = stream2.pos - this.offsetType.size();
            break;
          case "parent":
            relative = ctx.parent._startOffset;
            break;
          default:
            var c = ctx;
            while (c.parent) {
              c = c.parent;
            }
            relative = c._startOffset || 0;
        }
        if (this.options.relativeTo) {
          relative += this.relativeToGetter(ctx);
        }
        const ptr = offset + relative;
        if (this.type != null) {
          let val = null;
          const decodeValue = () => {
            if (val != null) {
              return val;
            }
            const { pos } = stream2;
            stream2.pos = ptr;
            val = this.type.decode(stream2, ctx);
            stream2.pos = pos;
            return val;
          };
          if (this.options.lazy) {
            return new utils.PropertyDescriptor({
              get: decodeValue
            });
          }
          return decodeValue();
        } else {
          return ptr;
        }
      }
      size(val, ctx) {
        const parent = ctx;
        switch (this.options.type) {
          case "local":
          case "immediate":
            break;
          case "parent":
            ctx = ctx.parent;
            break;
          default:
            while (ctx.parent) {
              ctx = ctx.parent;
            }
        }
        let { type } = this;
        if (type == null) {
          if (!(val instanceof VoidPointer)) {
            throw new Error("Must be a VoidPointer");
          }
          ({ type } = val);
          val = val.value;
        }
        if (val && ctx) {
          ctx.pointerSize += type.size(val, parent);
        }
        return this.offsetType.size();
      }
      encode(stream2, val, ctx) {
        let relative;
        const parent = ctx;
        if (val == null) {
          this.offsetType.encode(stream2, this.options.nullValue);
          return;
        }
        switch (this.options.type) {
          case "local":
            relative = ctx.startOffset;
            break;
          case "immediate":
            relative = stream2.pos + this.offsetType.size(val, parent);
            break;
          case "parent":
            ctx = ctx.parent;
            relative = ctx.startOffset;
            break;
          default:
            relative = 0;
            while (ctx.parent) {
              ctx = ctx.parent;
            }
        }
        if (this.options.relativeTo) {
          relative += this.relativeToGetter(parent.val);
        }
        this.offsetType.encode(stream2, ctx.pointerOffset - relative);
        let { type } = this;
        if (type == null) {
          if (!(val instanceof VoidPointer)) {
            throw new Error("Must be a VoidPointer");
          }
          ({ type } = val);
          val = val.value;
        }
        ctx.pointers.push({
          type,
          val,
          parent
        });
        return ctx.pointerOffset += type.size(val, parent);
      }
    };
    var VoidPointer = class {
      constructor(type, value) {
        this.type = type;
        this.value = value;
      }
    };
    exports.Pointer = Pointer;
    exports.VoidPointer = VoidPointer;
  }
});

// ../../node_modules/pdfkit/node_modules/restructure/index.js
var require_restructure = __commonJS({
  "../../node_modules/pdfkit/node_modules/restructure/index.js"(exports) {
    "use strict";
    exports.EncodeStream = require_EncodeStream();
    exports.DecodeStream = require_DecodeStream();
    exports.Array = require_Array();
    exports.LazyArray = require_LazyArray();
    exports.Bitfield = require_Bitfield();
    exports.Boolean = require_Boolean();
    exports.Buffer = require_Buffer();
    exports.Enum = require_Enum();
    exports.Optional = require_Optional();
    exports.Reserved = require_Reserved();
    exports.String = require_String();
    exports.Struct = require_Struct();
    exports.VersionedStruct = require_VersionedStruct();
    var utils = require_utils3();
    var NumberT = require_Number();
    var Pointer = require_Pointer();
    Object.assign(exports, utils, NumberT, Pointer);
  }
});

// ../../node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "../../node_modules/object-keys/isArguments.js"(exports, module) {
    "use strict";
    var toStr = Object.prototype.toString;
    module.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// ../../node_modules/object-keys/implementation.js
var require_implementation2 = __commonJS({
  "../../node_modules/object-keys/implementation.js"(exports, module) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module.exports = keysShim;
  }
});

// ../../node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "../../node_modules/object-keys/index.js"(exports, module) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation2();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module.exports = keysShim;
  }
});

// ../../node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "../../node_modules/define-properties/index.js"(exports, module) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module.exports = defineProperties;
  }
});

// ../../node_modules/object.assign/implementation.js
var require_implementation3 = __commonJS({
  "../../node_modules/object.assign/implementation.js"(exports, module) {
    "use strict";
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = toObject(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = toObject(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i = 0; i < keys.length; ++i) {
          var nextKey = keys[i];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "../../node_modules/object.assign/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation3();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i = 0; i < letters.length; ++i) {
        map[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// ../../node_modules/object.assign/shim.js
var require_shim = __commonJS({
  "../../node_modules/object.assign/shim.js"(exports, module) {
    "use strict";
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill();
    module.exports = function shimAssign() {
      var polyfill = getPolyfill();
      define2(
        Object,
        { assign: polyfill },
        { assign: function() {
          return Object.assign !== polyfill;
        } }
      );
      return polyfill;
    };
  }
});

// ../../node_modules/object.assign/index.js
var require_object = __commonJS({
  "../../node_modules/object.assign/index.js"(exports, module) {
    "use strict";
    var defineProperties = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind.apply(getPolyfill());
    var bound = function assign(target, source1) {
      return polyfill(Object, arguments);
    };
    defineProperties(bound, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = bound;
  }
});

// ../../node_modules/functions-have-names/index.js
var require_functions_have_names = __commonJS({
  "../../node_modules/functions-have-names/index.js"(exports, module) {
    "use strict";
    var functionsHaveNames = function functionsHaveNames2() {
      return typeof function f() {
      }.name === "string";
    };
    var gOPD = Object.getOwnPropertyDescriptor;
    if (gOPD) {
      try {
        gOPD([], "length");
      } catch (e) {
        gOPD = null;
      }
    }
    functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
      if (!functionsHaveNames() || !gOPD) {
        return false;
      }
      var desc = gOPD(function() {
      }, "name");
      return !!desc && !!desc.configurable;
    };
    var $bind = Function.prototype.bind;
    functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
      return functionsHaveNames() && typeof $bind === "function" && function f() {
      }.bind().name !== "";
    };
    module.exports = functionsHaveNames;
  }
});

// ../../node_modules/set-function-name/index.js
var require_set_function_name = __commonJS({
  "../../node_modules/set-function-name/index.js"(exports, module) {
    "use strict";
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames();
    var $TypeError = require_type();
    module.exports = function setFunctionName(fn, name) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      if (!loose || functionsHaveConfigurableNames) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "name",
            name,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "name",
            name
          );
        }
      }
      return fn;
    };
  }
});

// ../../node_modules/regexp.prototype.flags/implementation.js
var require_implementation4 = __commonJS({
  "../../node_modules/regexp.prototype.flags/implementation.js"(exports, module) {
    "use strict";
    var setFunctionName = require_set_function_name();
    var $TypeError = require_type();
    var $Object = Object;
    module.exports = setFunctionName(function flags() {
      if (this == null || this !== $Object(this)) {
        throw new $TypeError("RegExp.prototype.flags getter called on non-object");
      }
      var result = "";
      if (this.hasIndices) {
        result += "d";
      }
      if (this.global) {
        result += "g";
      }
      if (this.ignoreCase) {
        result += "i";
      }
      if (this.multiline) {
        result += "m";
      }
      if (this.dotAll) {
        result += "s";
      }
      if (this.unicode) {
        result += "u";
      }
      if (this.unicodeSets) {
        result += "v";
      }
      if (this.sticky) {
        result += "y";
      }
      return result;
    }, "get flags", true);
  }
});

// ../../node_modules/regexp.prototype.flags/polyfill.js
var require_polyfill2 = __commonJS({
  "../../node_modules/regexp.prototype.flags/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation4();
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var $gOPD = Object.getOwnPropertyDescriptor;
    module.exports = function getPolyfill() {
      if (supportsDescriptors && /a/mig.flags === "gim") {
        var descriptor = $gOPD(RegExp.prototype, "flags");
        if (descriptor && typeof descriptor.get === "function" && "dotAll" in RegExp.prototype && "hasIndices" in RegExp.prototype) {
          var calls = "";
          var o = {};
          Object.defineProperty(o, "hasIndices", {
            get: function() {
              calls += "d";
            }
          });
          Object.defineProperty(o, "sticky", {
            get: function() {
              calls += "y";
            }
          });
          descriptor.get.call(o);
          if (calls === "dy") {
            return descriptor.get;
          }
        }
      }
      return implementation;
    };
  }
});

// ../../node_modules/regexp.prototype.flags/shim.js
var require_shim2 = __commonJS({
  "../../node_modules/regexp.prototype.flags/shim.js"(exports, module) {
    "use strict";
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var getPolyfill = require_polyfill2();
    var gOPD = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto = Object.getPrototypeOf;
    var regex = /a/;
    module.exports = function shimFlags() {
      if (!supportsDescriptors || !getProto) {
        throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
      }
      var polyfill = getPolyfill();
      var proto = getProto(regex);
      var descriptor = gOPD(proto, "flags");
      if (!descriptor || descriptor.get !== polyfill) {
        defineProperty(proto, "flags", {
          configurable: true,
          enumerable: false,
          get: polyfill
        });
      }
      return polyfill;
    };
  }
});

// ../../node_modules/regexp.prototype.flags/index.js
var require_regexp_prototype = __commonJS({
  "../../node_modules/regexp.prototype.flags/index.js"(exports, module) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var flagsBound = callBind(getPolyfill());
    define2(flagsBound, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = flagsBound;
  }
});

// ../../node_modules/es-get-iterator/node.js
var require_node5 = __commonJS({
  "../../node_modules/es-get-iterator/node.js"(exports, module) {
    "use strict";
    var $iterator = Symbol.iterator;
    module.exports = function getIterator(iterable) {
      if (iterable != null && typeof iterable[$iterator] !== "undefined") {
        return iterable[$iterator]();
      }
    };
  }
});

// ../../node_modules/object-is/implementation.js
var require_implementation5 = __commonJS({
  "../../node_modules/object-is/implementation.js"(exports, module) {
    "use strict";
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// ../../node_modules/object-is/polyfill.js
var require_polyfill3 = __commonJS({
  "../../node_modules/object-is/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation5();
    module.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// ../../node_modules/object-is/shim.js
var require_shim3 = __commonJS({
  "../../node_modules/object-is/shim.js"(exports, module) {
    "use strict";
    var getPolyfill = require_polyfill3();
    var define2 = require_define_properties();
    module.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// ../../node_modules/object-is/index.js
var require_object_is = __commonJS({
  "../../node_modules/object-is/index.js"(exports, module) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation5();
    var getPolyfill = require_polyfill3();
    var shim = require_shim3();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// ../../node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "../../node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// ../../node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "../../node_modules/is-arguments/index.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// ../../node_modules/isarray/index.js
var require_isarray = __commonJS({
  "../../node_modules/isarray/index.js"(exports, module) {
    "use strict";
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// ../../node_modules/is-array-buffer/index.js
var require_is_array_buffer = __commonJS({
  "../../node_modules/is-array-buffer/index.js"(exports, module) {
    "use strict";
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var GetIntrinsic = require_get_intrinsic();
    var $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true);
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var $toString = callBound("Object.prototype.toString");
    var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
    var $abSlice = !!abSlice && callBind(abSlice);
    module.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        if ($byteLength) {
          $byteLength(obj);
        } else {
          $abSlice(obj, 0);
        }
        return true;
      } catch (e) {
        return false;
      }
    } : $ArrayBuffer ? function isArrayBuffer(obj) {
      return $toString(obj) === "[object ArrayBuffer]";
    } : function isArrayBuffer(obj) {
      return false;
    };
  }
});

// ../../node_modules/is-date-object/index.js
var require_is_date_object = __commonJS({
  "../../node_modules/is-date-object/index.js"(exports, module) {
    "use strict";
    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
      try {
        getDay.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var dateClass = "[object Date]";
    var hasToStringTag = require_shams2()();
    module.exports = function isDateObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
    };
  }
});

// ../../node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "../../node_modules/is-regex/index.js"(exports, module) {
    "use strict";
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var hasOwn = require_hasown();
    var gOPD = require_gopd();
    var fn;
    if (hasToStringTag) {
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
      fn = function isRegex(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        var descriptor = (
          /** @type {NonNullable<typeof gOPD>} */
          gOPD(
            /** @type {{ lastIndex?: unknown }} */
            value,
            "lastIndex"
          )
        );
        var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, "value");
        if (!hasLastIndexDataProperty) {
          return false;
        }
        try {
          $exec(
            value,
            /** @type {string} */
            /** @type {unknown} */
            badStringifier
          );
        } catch (e) {
          return e === isRegexMarker;
        }
      };
    } else {
      $toString = callBound("Object.prototype.toString");
      regexClass = "[object RegExp]";
      fn = function isRegex(value) {
        if (!value || typeof value !== "object" && typeof value !== "function") {
          return false;
        }
        return $toString(value) === regexClass;
      };
    }
    var $exec;
    var isRegexMarker;
    var throwRegexMarker;
    var badStringifier;
    var $toString;
    var regexClass;
    module.exports = fn;
  }
});

// ../../node_modules/is-shared-array-buffer/index.js
var require_is_shared_array_buffer = __commonJS({
  "../../node_modules/is-shared-array-buffer/index.js"(exports, module) {
    "use strict";
    var callBound = require_callBound();
    var $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    module.exports = $byteLength ? function isSharedArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        $byteLength(obj);
        return true;
      } catch (e) {
        return false;
      }
    } : function isSharedArrayBuffer(obj) {
      return false;
    };
  }
});

// ../../node_modules/is-string/index.js
var require_is_string = __commonJS({
  "../../node_modules/is-string/index.js"(exports, module) {
    "use strict";
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject2(value) {
      try {
        strValue.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = "[object String]";
    var hasToStringTag = require_shams2()();
    module.exports = function isString(value) {
      if (typeof value === "string") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;
    };
  }
});

// ../../node_modules/is-number-object/index.js
var require_is_number_object = __commonJS({
  "../../node_modules/is-number-object/index.js"(exports, module) {
    "use strict";
    var numToStr = Number.prototype.toString;
    var tryNumberObject = function tryNumberObject2(value) {
      try {
        numToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var numClass = "[object Number]";
    var hasToStringTag = require_shams2()();
    module.exports = function isNumberObject(value) {
      if (typeof value === "number") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryNumberObject(value) : toStr.call(value) === numClass;
    };
  }
});

// ../../node_modules/is-boolean-object/index.js
var require_is_boolean_object = __commonJS({
  "../../node_modules/is-boolean-object/index.js"(exports, module) {
    "use strict";
    var callBound = require_callBound();
    var $boolToStr = callBound("Boolean.prototype.toString");
    var $toString = callBound("Object.prototype.toString");
    var tryBooleanObject = function booleanBrandCheck(value) {
      try {
        $boolToStr(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var boolClass = "[object Boolean]";
    var hasToStringTag = require_shams2()();
    module.exports = function isBoolean(value) {
      if (typeof value === "boolean") {
        return true;
      }
      if (value === null || typeof value !== "object") {
        return false;
      }
      return hasToStringTag && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString(value) === boolClass;
    };
  }
});

// ../../node_modules/is-symbol/index.js
var require_is_symbol = __commonJS({
  "../../node_modules/is-symbol/index.js"(exports, module) {
    "use strict";
    var toStr = Object.prototype.toString;
    var hasSymbols = require_has_symbols()();
    if (hasSymbols) {
      symToStr = Symbol.prototype.toString;
      symStringRegex = /^Symbol\(.*\)$/;
      isSymbolObject = function isRealSymbolObject(value) {
        if (typeof value.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value));
      };
      module.exports = function isSymbol(value) {
        if (typeof value === "symbol") {
          return true;
        }
        if (toStr.call(value) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value);
        } catch (e) {
          return false;
        }
      };
    } else {
      module.exports = function isSymbol(value) {
        return false;
      };
    }
    var symToStr;
    var symStringRegex;
    var isSymbolObject;
  }
});

// ../../node_modules/has-bigints/index.js
var require_has_bigints = __commonJS({
  "../../node_modules/has-bigints/index.js"(exports, module) {
    "use strict";
    var $BigInt = typeof BigInt !== "undefined" && BigInt;
    module.exports = function hasNativeBigInts() {
      return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
    };
  }
});

// ../../node_modules/is-bigint/index.js
var require_is_bigint = __commonJS({
  "../../node_modules/is-bigint/index.js"(exports, module) {
    "use strict";
    var hasBigInts = require_has_bigints()();
    if (hasBigInts) {
      bigIntValueOf = BigInt.prototype.valueOf;
      tryBigInt = function tryBigIntObject(value) {
        try {
          bigIntValueOf.call(value);
          return true;
        } catch (e) {
        }
        return false;
      };
      module.exports = function isBigInt(value) {
        if (value === null || typeof value === "undefined" || typeof value === "boolean" || typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "function") {
          return false;
        }
        if (typeof value === "bigint") {
          return true;
        }
        return tryBigInt(value);
      };
    } else {
      module.exports = function isBigInt(value) {
        return false;
      };
    }
    var bigIntValueOf;
    var tryBigInt;
  }
});

// ../../node_modules/which-boxed-primitive/index.js
var require_which_boxed_primitive = __commonJS({
  "../../node_modules/which-boxed-primitive/index.js"(exports, module) {
    "use strict";
    var isString = require_is_string();
    var isNumber = require_is_number_object();
    var isBoolean = require_is_boolean_object();
    var isSymbol = require_is_symbol();
    var isBigInt = require_is_bigint();
    module.exports = function whichBoxedPrimitive(value) {
      if (value == null || typeof value !== "object" && typeof value !== "function") {
        return null;
      }
      if (isString(value)) {
        return "String";
      }
      if (isNumber(value)) {
        return "Number";
      }
      if (isBoolean(value)) {
        return "Boolean";
      }
      if (isSymbol(value)) {
        return "Symbol";
      }
      if (isBigInt(value)) {
        return "BigInt";
      }
    };
  }
});

// ../../node_modules/is-map/index.js
var require_is_map = __commonJS({
  "../../node_modules/is-map/index.js"(exports, module) {
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Map) {
      exported = function isMap(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isMap(x) {
        return false;
      };
    }
    module.exports = exported || function isMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x);
        if ($setHas) {
          try {
            $setHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Map;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../../node_modules/is-set/index.js
var require_is_set = __commonJS({
  "../../node_modules/is-set/index.js"(exports, module) {
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Set) {
      exported = function isSet(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$setHas) {
      exported = function isSet(x) {
        return false;
      };
    }
    module.exports = exported || function isSet(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $setHas.call(x);
        if ($mapHas) {
          try {
            $mapHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Set;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../../node_modules/is-weakmap/index.js
var require_is_weakmap = __commonJS({
  "../../node_modules/is-weakmap/index.js"(exports, module) {
    "use strict";
    var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
    var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
    var exported;
    if (!$WeakMap) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
    var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    module.exports = exported || function isWeakMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x, $mapHas);
        if ($setHas) {
          try {
            $setHas.call(x, $setHas);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $WeakMap;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../../node_modules/is-weakset/index.js
var require_is_weakset = __commonJS({
  "../../node_modules/is-weakset/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var $WeakSet = GetIntrinsic("%WeakSet%", true);
    var $setHas = callBound("WeakSet.prototype.has", true);
    if ($setHas) {
      $mapHas = callBound("WeakMap.prototype.has", true);
      module.exports = function isWeakSet(x) {
        if (!x || typeof x !== "object") {
          return false;
        }
        try {
          $setHas(x, $setHas);
          if ($mapHas) {
            try {
              $mapHas(x, $mapHas);
            } catch (e) {
              return true;
            }
          }
          return x instanceof $WeakSet;
        } catch (e) {
        }
        return false;
      };
    } else {
      module.exports = function isWeakSet(x) {
        return false;
      };
    }
    var $mapHas;
  }
});

// ../../node_modules/which-collection/index.js
var require_which_collection = __commonJS({
  "../../node_modules/which-collection/index.js"(exports, module) {
    "use strict";
    var isMap = require_is_map();
    var isSet = require_is_set();
    var isWeakMap = require_is_weakmap();
    var isWeakSet = require_is_weakset();
    module.exports = function whichCollection(value) {
      if (value && typeof value === "object") {
        if (isMap(value)) {
          return "Map";
        }
        if (isSet(value)) {
          return "Set";
        }
        if (isWeakMap(value)) {
          return "WeakMap";
        }
        if (isWeakSet(value)) {
          return "WeakSet";
        }
      }
      return false;
    };
  }
});

// ../../node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "../../node_modules/is-callable/index.js"(exports, module) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// ../../node_modules/for-each/index.js
var require_for_each = __commonJS({
  "../../node_modules/for-each/index.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    var forEach = function forEach2(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr.call(list) === "[object Array]") {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
    module.exports = forEach;
  }
});

// ../../node_modules/possible-typed-array-names/index.js
var require_possible_typed_array_names = __commonJS({
  "../../node_modules/possible-typed-array-names/index.js"(exports, module) {
    "use strict";
    module.exports = [
      "Float32Array",
      "Float64Array",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
  }
});

// ../../node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "../../node_modules/available-typed-arrays/index.js"(exports, module) {
    "use strict";
    var possibleNames = require_possible_typed_array_names();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    module.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// ../../node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "../../node_modules/which-typed-array/index.js"(exports, module) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var getPrototypeOf = Object.getPrototypeOf;
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
      for (var i = 0; i < array.length; i += 1) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      });
    } else {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache["$" + typedArray] = callBind(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = $slice(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, name) {
          if (!found) {
            try {
              getter(value);
              found = $slice(name, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    module.exports = function whichTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD) {
        return null;
      }
      return tryTypedArrays(value);
    };
  }
});

// ../../node_modules/array-buffer-byte-length/index.js
var require_array_buffer_byte_length = __commonJS({
  "../../node_modules/array-buffer-byte-length/index.js"(exports, module) {
    "use strict";
    var callBound = require_callBound();
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var isArrayBuffer = require_is_array_buffer();
    module.exports = function byteLength(ab) {
      if (!isArrayBuffer(ab)) {
        return NaN;
      }
      return $byteLength ? $byteLength(ab) : ab.byteLength;
    };
  }
});

// ../../node_modules/deep-equal/index.js
var require_deep_equal = __commonJS({
  "../../node_modules/deep-equal/index.js"(exports, module) {
    "use strict";
    var assign = require_object();
    var callBound = require_callBound();
    var flags = require_regexp_prototype();
    var GetIntrinsic = require_get_intrinsic();
    var getIterator = require_node5();
    var getSideChannel = require_side_channel();
    var is = require_object_is();
    var isArguments = require_is_arguments();
    var isArray = require_isarray();
    var isArrayBuffer = require_is_array_buffer();
    var isDate = require_is_date_object();
    var isRegex = require_is_regex();
    var isSharedArrayBuffer = require_is_shared_array_buffer();
    var objectKeys = require_object_keys();
    var whichBoxedPrimitive = require_which_boxed_primitive();
    var whichCollection = require_which_collection();
    var whichTypedArray = require_which_typed_array();
    var byteLength = require_array_buffer_byte_length();
    var sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    var $getTime = callBound("Date.prototype.getTime");
    var gPO = Object.getPrototypeOf;
    var $objToString = callBound("Object.prototype.toString");
    var $Set = GetIntrinsic("%Set%", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSize = callBound("Map.prototype.size", true);
    var $setAdd = callBound("Set.prototype.add", true);
    var $setDelete = callBound("Set.prototype.delete", true);
    var $setHas = callBound("Set.prototype.has", true);
    var $setSize = callBound("Set.prototype.size", true);
    function setHasEqualElement(set, val1, opts, channel) {
      var i = getIterator(set);
      var result;
      while ((result = i.next()) && !result.done) {
        if (internalDeepEqual(val1, result.value, opts, channel)) {
          $setDelete(set, result.value);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      if (typeof prim === "undefined") {
        return null;
      }
      if (typeof prim === "object") {
        return void 0;
      }
      if (typeof prim === "symbol") {
        return false;
      }
      if (typeof prim === "string" || typeof prim === "number") {
        return +prim === +prim;
      }
      return true;
    }
    function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = $mapGet(b, altValue);
      var looseOpts = assign({}, opts, { strict: false });
      if (typeof curB === "undefined" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
        return false;
      }
      return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      return $setHas(b, altValue) && !$setHas(a, altValue);
    }
    function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
      var i = getIterator(set);
      var result;
      var key2;
      while ((result = i.next()) && !result.done) {
        key2 = result.value;
        if (
          // eslint-disable-next-line no-use-before-define
          internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
        ) {
          $setDelete(set, key2);
          return true;
        }
      }
      return false;
    }
    function internalDeepEqual(actual, expected, options, channel) {
      var opts = options || {};
      if (opts.strict ? is(actual, expected) : actual === expected) {
        return true;
      }
      var actualBoxed = whichBoxedPrimitive(actual);
      var expectedBoxed = whichBoxedPrimitive(expected);
      if (actualBoxed !== expectedBoxed) {
        return false;
      }
      if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
        return opts.strict ? is(actual, expected) : actual == expected;
      }
      var hasActual = channel.has(actual);
      var hasExpected = channel.has(expected);
      var sentinel;
      if (hasActual && hasExpected) {
        if (channel.get(actual) === channel.get(expected)) {
          return true;
        }
      } else {
        sentinel = {};
      }
      if (!hasActual) {
        channel.set(actual, sentinel);
      }
      if (!hasExpected) {
        channel.set(expected, sentinel);
      }
      return objEquiv(actual, expected, opts, channel);
    }
    function isBuffer(x) {
      if (!x || typeof x !== "object" || typeof x.length !== "number") {
        return false;
      }
      if (typeof x.copy !== "function" || typeof x.slice !== "function") {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== "number") {
        return false;
      }
      return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
    }
    function setEquiv(a, b, opts, channel) {
      if ($setSize(a) !== $setSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      while ((resultA = iA.next()) && !resultA.done) {
        if (resultA.value && typeof resultA.value === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        } else if (!$setHas(b, resultA.value)) {
          if (opts.strict) {
            return false;
          }
          if (!setMightHaveLoosePrim(a, b, resultA.value)) {
            return false;
          }
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          if (resultB.value && typeof resultB.value === "object") {
            if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
              return false;
            }
          } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function mapEquiv(a, b, opts, channel) {
      if ($mapSize(a) !== $mapSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      var key;
      var item1;
      var item2;
      while ((resultA = iA.next()) && !resultA.done) {
        key = resultA.value[0];
        item1 = resultA.value[1];
        if (key && typeof key === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, key);
        } else {
          item2 = $mapGet(b, key);
          if (typeof item2 === "undefined" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict) {
              return false;
            }
            if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
              return false;
            }
            if (!set) {
              set = new $Set();
            }
            $setAdd(set, key);
          }
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          key = resultB.value[0];
          item2 = resultB.value[1];
          if (key && typeof key === "object") {
            if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
              return false;
            }
          } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function objEquiv(a, b, opts, channel) {
      var i, key;
      if (typeof a !== typeof b) {
        return false;
      }
      if (a == null || b == null) {
        return false;
      }
      if ($objToString(a) !== $objToString(b)) {
        return false;
      }
      if (isArguments(a) !== isArguments(b)) {
        return false;
      }
      var aIsArray = isArray(a);
      var bIsArray = isArray(b);
      if (aIsArray !== bIsArray) {
        return false;
      }
      var aIsError = a instanceof Error;
      var bIsError = b instanceof Error;
      if (aIsError !== bIsError) {
        return false;
      }
      if (aIsError || bIsError) {
        if (a.name !== b.name || a.message !== b.message) {
          return false;
        }
      }
      var aIsRegex = isRegex(a);
      var bIsRegex = isRegex(b);
      if (aIsRegex !== bIsRegex) {
        return false;
      }
      if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
        return false;
      }
      var aIsDate = isDate(a);
      var bIsDate = isDate(b);
      if (aIsDate !== bIsDate) {
        return false;
      }
      if (aIsDate || bIsDate) {
        if ($getTime(a) !== $getTime(b)) {
          return false;
        }
      }
      if (opts.strict && gPO && gPO(a) !== gPO(b)) {
        return false;
      }
      var aWhich = whichTypedArray(a);
      var bWhich = whichTypedArray(b);
      if (aWhich !== bWhich) {
        return false;
      }
      if (aWhich || bWhich) {
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      var aIsBuffer = isBuffer(a);
      var bIsBuffer = isBuffer(b);
      if (aIsBuffer !== bIsBuffer) {
        return false;
      }
      if (aIsBuffer || bIsBuffer) {
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      var aIsArrayBuffer = isArrayBuffer(a);
      var bIsArrayBuffer = isArrayBuffer(b);
      if (aIsArrayBuffer !== bIsArrayBuffer) {
        return false;
      }
      if (aIsArrayBuffer || bIsArrayBuffer) {
        if (byteLength(a) !== byteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      var aIsSAB = isSharedArrayBuffer(a);
      var bIsSAB = isSharedArrayBuffer(b);
      if (aIsSAB !== bIsSAB) {
        return false;
      }
      if (aIsSAB || bIsSAB) {
        if (sabByteLength(a) !== sabByteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      if (typeof a !== typeof b) {
        return false;
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      if (ka.length !== kb.length) {
        return false;
      }
      ka.sort();
      kb.sort();
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) {
          return false;
        }
      }
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!internalDeepEqual(a[key], b[key], opts, channel)) {
          return false;
        }
      }
      var aCollection = whichCollection(a);
      var bCollection = whichCollection(b);
      if (aCollection !== bCollection) {
        return false;
      }
      if (aCollection === "Set" || bCollection === "Set") {
        return setEquiv(a, b, opts, channel);
      }
      if (aCollection === "Map") {
        return mapEquiv(a, b, opts, channel);
      }
      return true;
    }
    module.exports = function deepEqual(a, b, opts) {
      return internalDeepEqual(a, b, opts, getSideChannel());
    };
  }
});

// ../../node_modules/pdfkit/node_modules/fontkit/iconv-lite.cjs
var require_iconv_lite = __commonJS({
  "../../node_modules/pdfkit/node_modules/fontkit/iconv-lite.cjs"(exports, module) {
    "use strict";
    try {
      module.exports = require_lib();
    } catch (err) {
    }
  }
});

// ../../node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "../../node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// ../../node_modules/tiny-inflate/index.js
var require_tiny_inflate = __commonJS({
  "../../node_modules/tiny-inflate/index.js"(exports, module) {
    "use strict";
    var TINF_OK = 0;
    var TINF_DATA_ERROR = -3;
    function Tree() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function Data(source, dest) {
      this.source = source;
      this.sourceIndex = 0;
      this.tag = 0;
      this.bitcount = 0;
      this.dest = dest;
      this.destLen = 0;
      this.ltree = new Tree();
      this.dtree = new Tree();
    }
    var sltree = new Tree();
    var sdtree = new Tree();
    var length_bits = new Uint8Array(30);
    var length_base = new Uint16Array(30);
    var dist_bits = new Uint8Array(30);
    var dist_base = new Uint16Array(30);
    var clcidx = new Uint8Array([
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    ]);
    var code_tree = new Tree();
    var lengths = new Uint8Array(288 + 32);
    function tinf_build_bits_base(bits, base, delta, first2) {
      var i, sum;
      for (i = 0; i < delta; ++i) bits[i] = 0;
      for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;
      for (sum = first2, i = 0; i < 30; ++i) {
        base[i] = sum;
        sum += 1 << bits[i];
      }
    }
    function tinf_build_fixed_trees(lt, dt) {
      var i;
      for (i = 0; i < 7; ++i) lt.table[i] = 0;
      lt.table[7] = 24;
      lt.table[8] = 152;
      lt.table[9] = 112;
      for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
      for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
      for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
      for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;
      for (i = 0; i < 5; ++i) dt.table[i] = 0;
      dt.table[5] = 32;
      for (i = 0; i < 32; ++i) dt.trans[i] = i;
    }
    var offs = new Uint16Array(16);
    function tinf_build_tree(t, lengths2, off, num) {
      var i, sum;
      for (i = 0; i < 16; ++i) t.table[i] = 0;
      for (i = 0; i < num; ++i) t.table[lengths2[off + i]]++;
      t.table[0] = 0;
      for (sum = 0, i = 0; i < 16; ++i) {
        offs[i] = sum;
        sum += t.table[i];
      }
      for (i = 0; i < num; ++i) {
        if (lengths2[off + i]) t.trans[offs[lengths2[off + i]]++] = i;
      }
    }
    function tinf_getbit(d) {
      if (!d.bitcount--) {
        d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
      }
      var bit = d.tag & 1;
      d.tag >>>= 1;
      return bit;
    }
    function tinf_read_bits(d, num, base) {
      if (!num)
        return base;
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var val = d.tag & 65535 >>> 16 - num;
      d.tag >>>= num;
      d.bitcount -= num;
      return val + base;
    }
    function tinf_decode_symbol(d, t) {
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var sum = 0, cur = 0, len = 0;
      var tag = d.tag;
      do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;
        sum += t.table[len];
        cur -= t.table[len];
      } while (cur >= 0);
      d.tag = tag;
      d.bitcount -= len;
      return t.trans[sum + cur];
    }
    function tinf_decode_trees(d, lt, dt) {
      var hlit, hdist, hclen;
      var i, num, length;
      hlit = tinf_read_bits(d, 5, 257);
      hdist = tinf_read_bits(d, 5, 1);
      hclen = tinf_read_bits(d, 4, 4);
      for (i = 0; i < 19; ++i) lengths[i] = 0;
      for (i = 0; i < hclen; ++i) {
        var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i]] = clen;
      }
      tinf_build_tree(code_tree, lengths, 0, 19);
      for (num = 0; num < hlit + hdist; ) {
        var sym = tinf_decode_symbol(d, code_tree);
        switch (sym) {
          case 16:
            var prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length) {
              lengths[num++] = prev;
            }
            break;
          case 17:
            for (length = tinf_read_bits(d, 3, 3); length; --length) {
              lengths[num++] = 0;
            }
            break;
          case 18:
            for (length = tinf_read_bits(d, 7, 11); length; --length) {
              lengths[num++] = 0;
            }
            break;
          default:
            lengths[num++] = sym;
            break;
        }
      }
      tinf_build_tree(lt, lengths, 0, hlit);
      tinf_build_tree(dt, lengths, hlit, hdist);
    }
    function tinf_inflate_block_data(d, lt, dt) {
      while (1) {
        var sym = tinf_decode_symbol(d, lt);
        if (sym === 256) {
          return TINF_OK;
        }
        if (sym < 256) {
          d.dest[d.destLen++] = sym;
        } else {
          var length, dist, offs2;
          var i;
          sym -= 257;
          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
          dist = tinf_decode_symbol(d, dt);
          offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
          for (i = offs2; i < offs2 + length; ++i) {
            d.dest[d.destLen++] = d.dest[i];
          }
        }
      }
    }
    function tinf_inflate_uncompressed_block(d) {
      var length, invlength;
      var i;
      while (d.bitcount > 8) {
        d.sourceIndex--;
        d.bitcount -= 8;
      }
      length = d.source[d.sourceIndex + 1];
      length = 256 * length + d.source[d.sourceIndex];
      invlength = d.source[d.sourceIndex + 3];
      invlength = 256 * invlength + d.source[d.sourceIndex + 2];
      if (length !== (~invlength & 65535))
        return TINF_DATA_ERROR;
      d.sourceIndex += 4;
      for (i = length; i; --i)
        d.dest[d.destLen++] = d.source[d.sourceIndex++];
      d.bitcount = 0;
      return TINF_OK;
    }
    function tinf_uncompress(source, dest) {
      var d = new Data(source, dest);
      var bfinal, btype, res;
      do {
        bfinal = tinf_getbit(d);
        btype = tinf_read_bits(d, 2, 0);
        switch (btype) {
          case 0:
            res = tinf_inflate_uncompressed_block(d);
            break;
          case 1:
            res = tinf_inflate_block_data(d, sltree, sdtree);
            break;
          case 2:
            tinf_decode_trees(d, d.ltree, d.dtree);
            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
            break;
          default:
            res = TINF_DATA_ERROR;
        }
        if (res !== TINF_OK)
          throw new Error("Data error");
      } while (!bfinal);
      if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === "function")
          return d.dest.slice(0, d.destLen);
        else
          return d.dest.subarray(0, d.destLen);
      }
      return d.dest;
    }
    tinf_build_fixed_trees(sltree, sdtree);
    tinf_build_bits_base(length_bits, length_base, 4, 3);
    tinf_build_bits_base(dist_bits, dist_base, 2, 1);
    length_bits[28] = 0;
    length_base[28] = 258;
    module.exports = tinf_uncompress;
  }
});

// ../../node_modules/unicode-trie/swap.js
var require_swap = __commonJS({
  "../../node_modules/unicode-trie/swap.js"(exports, module) {
    "use strict";
    var isBigEndian = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18;
    var swap = (b, n, m) => {
      let i = b[n];
      b[n] = b[m];
      b[m] = i;
    };
    var swap32 = (array) => {
      const len = array.length;
      for (let i = 0; i < len; i += 4) {
        swap(array, i, i + 3);
        swap(array, i + 1, i + 2);
      }
    };
    var swap32LE = (array) => {
      if (isBigEndian) {
        swap32(array);
      }
    };
    module.exports = {
      swap32LE
    };
  }
});

// ../../node_modules/unicode-trie/index.js
var require_unicode_trie = __commonJS({
  "../../node_modules/unicode-trie/index.js"(exports, module) {
    "use strict";
    var inflate = require_tiny_inflate();
    var { swap32LE } = require_swap();
    var SHIFT_1 = 6 + 5;
    var SHIFT_2 = 5;
    var SHIFT_1_2 = SHIFT_1 - SHIFT_2;
    var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;
    var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
    var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
    var INDEX_SHIFT = 2;
    var DATA_BLOCK_LENGTH = 1 << SHIFT_2;
    var DATA_MASK = DATA_BLOCK_LENGTH - 1;
    var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;
    var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;
    var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
    var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
    var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;
    var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
    var DATA_GRANULARITY = 1 << INDEX_SHIFT;
    var UnicodeTrie = class {
      constructor(data) {
        const isBuffer = typeof data.readUInt32BE === "function" && typeof data.slice === "function";
        if (isBuffer || data instanceof Uint8Array) {
          let uncompressedLength;
          if (isBuffer) {
            this.highStart = data.readUInt32LE(0);
            this.errorValue = data.readUInt32LE(4);
            uncompressedLength = data.readUInt32LE(8);
            data = data.slice(12);
          } else {
            const view = new DataView(data.buffer);
            this.highStart = view.getUint32(0, true);
            this.errorValue = view.getUint32(4, true);
            uncompressedLength = view.getUint32(8, true);
            data = data.subarray(12);
          }
          data = inflate(data, new Uint8Array(uncompressedLength));
          data = inflate(data, new Uint8Array(uncompressedLength));
          swap32LE(data);
          this.data = new Uint32Array(data.buffer);
        } else {
          ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
        }
      }
      get(codePoint) {
        let index;
        if (codePoint < 0 || codePoint > 1114111) {
          return this.errorValue;
        }
        if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {
          index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint <= 65535) {
          index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint < this.highStart) {
          index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
          index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
          index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        return this.data[this.data.length - DATA_GRANULARITY];
      }
    };
    module.exports = UnicodeTrie;
  }
});

// ../../node_modules/dfa/index.js
var require_dfa = __commonJS({
  "../../node_modules/dfa/index.js"(exports, module) {
    "use strict";
    var INITIAL_STATE = 1;
    var FAIL_STATE = 0;
    var StateMachine = class {
      constructor(dfa) {
        this.stateTable = dfa.stateTable;
        this.accepting = dfa.accepting;
        this.tags = dfa.tags;
      }
      /**
       * Returns an iterable object that yields pattern matches over the input sequence.
       * Matches are of the form [startIndex, endIndex, tags].
       */
      match(str) {
        var self2 = this;
        return {
          *[Symbol.iterator]() {
            var state = INITIAL_STATE;
            var startRun = null;
            var lastAccepting = null;
            var lastState = null;
            for (var p = 0; p < str.length; p++) {
              var c = str[p];
              lastState = state;
              state = self2.stateTable[state][c];
              if (state === FAIL_STATE) {
                if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                  yield [startRun, lastAccepting, self2.tags[lastState]];
                }
                state = self2.stateTable[INITIAL_STATE][c];
                startRun = null;
              }
              if (state !== FAIL_STATE && startRun == null) {
                startRun = p;
              }
              if (self2.accepting[state]) {
                lastAccepting = p;
              }
              if (state === FAIL_STATE) {
                state = INITIAL_STATE;
              }
            }
            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
              yield [startRun, lastAccepting, self2.tags[state]];
            }
          }
        };
      }
      /**
       * For each match over the input sequence, action functions matching
       * the tag definitions in the input pattern are called with the startIndex,
       * endIndex, and sub-match sequence.
       */
      apply(str, actions) {
        for (var [start, end, tags] of this.match(str)) {
          for (var tag of tags) {
            if (typeof actions[tag] === "function") {
              actions[tag](start, end, str.slice(start, end + 1));
            }
          }
        }
      }
    };
    module.exports = StateMachine;
  }
});

// ../../node_modules/clone/clone.js
var require_clone = __commonJS({
  "../../node_modules/clone/clone.js"(exports, module) {
    "use strict";
    var clone = function() {
      "use strict";
      function _instanceof(obj, type) {
        return type != null && obj instanceof type;
      }
      var nativeMap;
      try {
        nativeMap = Map;
      } catch (_) {
        nativeMap = function() {
        };
      }
      var nativeSet;
      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function() {
        };
      }
      var nativePromise;
      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function() {
        };
      }
      function clone2(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === "object") {
          depth = circular.depth;
          prototype = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        }
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined")
          circular = true;
        if (typeof depth == "undefined")
          depth = Infinity;
        function _clone(parent2, depth2) {
          if (parent2 === null)
            return null;
          if (depth2 === 0)
            return parent2;
          var child;
          var proto;
          if (typeof parent2 != "object") {
            return parent2;
          }
          if (_instanceof(parent2, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent2, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent2, nativePromise)) {
            child = new nativePromise(function(resolve, reject) {
              parent2.then(function(value) {
                resolve(_clone(value, depth2 - 1));
              }, function(err) {
                reject(_clone(err, depth2 - 1));
              });
            });
          } else if (clone2.__isArray(parent2)) {
            child = [];
          } else if (clone2.__isRegExp(parent2)) {
            child = new RegExp(parent2.source, __getRegExpFlags(parent2));
            if (parent2.lastIndex) child.lastIndex = parent2.lastIndex;
          } else if (clone2.__isDate(parent2)) {
            child = new Date(parent2.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent2)) {
            if (Buffer.allocUnsafe) {
              child = Buffer.allocUnsafe(parent2.length);
            } else {
              child = new Buffer(parent2.length);
            }
            parent2.copy(child);
            return child;
          } else if (_instanceof(parent2, Error)) {
            child = Object.create(parent2);
          } else {
            if (typeof prototype == "undefined") {
              proto = Object.getPrototypeOf(parent2);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype);
              proto = prototype;
            }
          }
          if (circular) {
            var index = allParents.indexOf(parent2);
            if (index != -1) {
              return allChildren[index];
            }
            allParents.push(parent2);
            allChildren.push(child);
          }
          if (_instanceof(parent2, nativeMap)) {
            parent2.forEach(function(value, key) {
              var keyChild = _clone(key, depth2 - 1);
              var valueChild = _clone(value, depth2 - 1);
              child.set(keyChild, valueChild);
            });
          }
          if (_instanceof(parent2, nativeSet)) {
            parent2.forEach(function(value) {
              var entryChild = _clone(value, depth2 - 1);
              child.add(entryChild);
            });
          }
          for (var i in parent2) {
            var attrs;
            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i);
            }
            if (attrs && attrs.set == null) {
              continue;
            }
            child[i] = _clone(parent2[i], depth2 - 1);
          }
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(parent2);
            for (var i = 0; i < symbols.length; i++) {
              var symbol = symbols[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }
              child[symbol] = _clone(parent2[symbol], depth2 - 1);
              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol, {
                  enumerable: false
                });
              }
            }
          }
          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent2);
            for (var i = 0; i < allPropertyNames.length; i++) {
              var propertyName = allPropertyNames[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
              if (descriptor && descriptor.enumerable) {
                continue;
              }
              child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }
          return child;
        }
        return _clone(parent, depth);
      }
      clone2.clonePrototype = function clonePrototype(parent) {
        if (parent === null)
          return null;
        var c = function() {
        };
        c.prototype = parent;
        return new c();
      };
      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }
      clone2.__objToStr = __objToStr;
      function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
      }
      clone2.__isDate = __isDate;
      function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
      }
      clone2.__isArray = __isArray;
      function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
      }
      clone2.__isRegExp = __isRegExp;
      function __getRegExpFlags(re) {
        var flags = "";
        if (re.global) flags += "g";
        if (re.ignoreCase) flags += "i";
        if (re.multiline) flags += "m";
        return flags;
      }
      clone2.__getRegExpFlags = __getRegExpFlags;
      return clone2;
    }();
    if (typeof module === "object" && module.exports) {
      module.exports = clone;
    }
  }
});

// ../../node_modules/brotli/dec/streams.js
var require_streams2 = __commonJS({
  "../../node_modules/brotli/dec/streams.js"(exports) {
    "use strict";
    function BrotliInput(buffer) {
      this.buffer = buffer;
      this.pos = 0;
    }
    BrotliInput.prototype.read = function(buf, i, count) {
      if (this.pos + count > this.buffer.length) {
        count = this.buffer.length - this.pos;
      }
      for (var p = 0; p < count; p++)
        buf[i + p] = this.buffer[this.pos + p];
      this.pos += count;
      return count;
    };
    exports.BrotliInput = BrotliInput;
    function BrotliOutput(buf) {
      this.buffer = buf;
      this.pos = 0;
    }
    BrotliOutput.prototype.write = function(buf, count) {
      if (this.pos + count > this.buffer.length)
        throw new Error("Output buffer is not large enough");
      this.buffer.set(buf.subarray(0, count), this.pos);
      this.pos += count;
      return count;
    };
    exports.BrotliOutput = BrotliOutput;
  }
});

// ../../node_modules/brotli/dec/bit_reader.js
var require_bit_reader = __commonJS({
  "../../node_modules/brotli/dec/bit_reader.js"(exports, module) {
    "use strict";
    var BROTLI_READ_SIZE = 4096;
    var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
    var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
    var kBitMask = new Uint32Array([
      0,
      1,
      3,
      7,
      15,
      31,
      63,
      127,
      255,
      511,
      1023,
      2047,
      4095,
      8191,
      16383,
      32767,
      65535,
      131071,
      262143,
      524287,
      1048575,
      2097151,
      4194303,
      8388607,
      16777215
    ]);
    function BrotliBitReader(input) {
      this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
      this.input_ = input;
      this.reset();
    }
    BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
    BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
    BrotliBitReader.prototype.reset = function() {
      this.buf_ptr_ = 0;
      this.val_ = 0;
      this.pos_ = 0;
      this.bit_pos_ = 0;
      this.bit_end_pos_ = 0;
      this.eos_ = 0;
      this.readMoreInput();
      for (var i = 0; i < 4; i++) {
        this.val_ |= this.buf_[this.pos_] << 8 * i;
        ++this.pos_;
      }
      return this.bit_end_pos_ > 0;
    };
    BrotliBitReader.prototype.readMoreInput = function() {
      if (this.bit_end_pos_ > 256) {
        return;
      } else if (this.eos_) {
        if (this.bit_pos_ > this.bit_end_pos_)
          throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
      } else {
        var dst = this.buf_ptr_;
        var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
        if (bytes_read < 0) {
          throw new Error("Unexpected end of input");
        }
        if (bytes_read < BROTLI_READ_SIZE) {
          this.eos_ = 1;
          for (var p = 0; p < 32; p++)
            this.buf_[dst + bytes_read + p] = 0;
        }
        if (dst === 0) {
          for (var p = 0; p < 32; p++)
            this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
          this.buf_ptr_ = BROTLI_READ_SIZE;
        } else {
          this.buf_ptr_ = 0;
        }
        this.bit_end_pos_ += bytes_read << 3;
      }
    };
    BrotliBitReader.prototype.fillBitWindow = function() {
      while (this.bit_pos_ >= 8) {
        this.val_ >>>= 8;
        this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
        ++this.pos_;
        this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
        this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
      }
    };
    BrotliBitReader.prototype.readBits = function(n_bits) {
      if (32 - this.bit_pos_ < n_bits) {
        this.fillBitWindow();
      }
      var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
      this.bit_pos_ += n_bits;
      return val;
    };
    module.exports = BrotliBitReader;
  }
});

// ../../node_modules/brotli/dec/dictionary-data.js
var require_dictionary_data = __commonJS({
  "../../node_modules/brotli/dec/dictionary-data.js"(exports) {
    "use strict";
    exports.dictionary = new Uint8Array([
      116,
      105,
      109,
      101,
      100,
      111,
      119,
      110,
      108,
      105,
      102,
      101,
      108,
      101,
      102,
      116,
      98,
      97,
      99,
      107,
      99,
      111,
      100,
      101,
      100,
      97,
      116,
      97,
      115,
      104,
      111,
      119,
      111,
      110,
      108,
      121,
      115,
      105,
      116,
      101,
      99,
      105,
      116,
      121,
      111,
      112,
      101,
      110,
      106,
      117,
      115,
      116,
      108,
      105,
      107,
      101,
      102,
      114,
      101,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      120,
      116,
      121,
      101,
      97,
      114,
      111,
      118,
      101,
      114,
      98,
      111,
      100,
      121,
      108,
      111,
      118,
      101,
      102,
      111,
      114,
      109,
      98,
      111,
      111,
      107,
      112,
      108,
      97,
      121,
      108,
      105,
      118,
      101,
      108,
      105,
      110,
      101,
      104,
      101,
      108,
      112,
      104,
      111,
      109,
      101,
      115,
      105,
      100,
      101,
      109,
      111,
      114,
      101,
      119,
      111,
      114,
      100,
      108,
      111,
      110,
      103,
      116,
      104,
      101,
      109,
      118,
      105,
      101,
      119,
      102,
      105,
      110,
      100,
      112,
      97,
      103,
      101,
      100,
      97,
      121,
      115,
      102,
      117,
      108,
      108,
      104,
      101,
      97,
      100,
      116,
      101,
      114,
      109,
      101,
      97,
      99,
      104,
      97,
      114,
      101,
      97,
      102,
      114,
      111,
      109,
      116,
      114,
      117,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      117,
      112,
      111,
      110,
      104,
      105,
      103,
      104,
      100,
      97,
      116,
      101,
      108,
      97,
      110,
      100,
      110,
      101,
      119,
      115,
      101,
      118,
      101,
      110,
      110,
      101,
      120,
      116,
      99,
      97,
      115,
      101,
      98,
      111,
      116,
      104,
      112,
      111,
      115,
      116,
      117,
      115,
      101,
      100,
      109,
      97,
      100,
      101,
      104,
      97,
      110,
      100,
      104,
      101,
      114,
      101,
      119,
      104,
      97,
      116,
      110,
      97,
      109,
      101,
      76,
      105,
      110,
      107,
      98,
      108,
      111,
      103,
      115,
      105,
      122,
      101,
      98,
      97,
      115,
      101,
      104,
      101,
      108,
      100,
      109,
      97,
      107,
      101,
      109,
      97,
      105,
      110,
      117,
      115,
      101,
      114,
      39,
      41,
      32,
      43,
      104,
      111,
      108,
      100,
      101,
      110,
      100,
      115,
      119,
      105,
      116,
      104,
      78,
      101,
      119,
      115,
      114,
      101,
      97,
      100,
      119,
      101,
      114,
      101,
      115,
      105,
      103,
      110,
      116,
      97,
      107,
      101,
      104,
      97,
      118,
      101,
      103,
      97,
      109,
      101,
      115,
      101,
      101,
      110,
      99,
      97,
      108,
      108,
      112,
      97,
      116,
      104,
      119,
      101,
      108,
      108,
      112,
      108,
      117,
      115,
      109,
      101,
      110,
      117,
      102,
      105,
      108,
      109,
      112,
      97,
      114,
      116,
      106,
      111,
      105,
      110,
      116,
      104,
      105,
      115,
      108,
      105,
      115,
      116,
      103,
      111,
      111,
      100,
      110,
      101,
      101,
      100,
      119,
      97,
      121,
      115,
      119,
      101,
      115,
      116,
      106,
      111,
      98,
      115,
      109,
      105,
      110,
      100,
      97,
      108,
      115,
      111,
      108,
      111,
      103,
      111,
      114,
      105,
      99,
      104,
      117,
      115,
      101,
      115,
      108,
      97,
      115,
      116,
      116,
      101,
      97,
      109,
      97,
      114,
      109,
      121,
      102,
      111,
      111,
      100,
      107,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      101,
      97,
      115,
      116,
      119,
      97,
      114,
      100,
      98,
      101,
      115,
      116,
      102,
      105,
      114,
      101,
      80,
      97,
      103,
      101,
      107,
      110,
      111,
      119,
      97,
      119,
      97,
      121,
      46,
      112,
      110,
      103,
      109,
      111,
      118,
      101,
      116,
      104,
      97,
      110,
      108,
      111,
      97,
      100,
      103,
      105,
      118,
      101,
      115,
      101,
      108,
      102,
      110,
      111,
      116,
      101,
      109,
      117,
      99,
      104,
      102,
      101,
      101,
      100,
      109,
      97,
      110,
      121,
      114,
      111,
      99,
      107,
      105,
      99,
      111,
      110,
      111,
      110,
      99,
      101,
      108,
      111,
      111,
      107,
      104,
      105,
      100,
      101,
      100,
      105,
      101,
      100,
      72,
      111,
      109,
      101,
      114,
      117,
      108,
      101,
      104,
      111,
      115,
      116,
      97,
      106,
      97,
      120,
      105,
      110,
      102,
      111,
      99,
      108,
      117,
      98,
      108,
      97,
      119,
      115,
      108,
      101,
      115,
      115,
      104,
      97,
      108,
      102,
      115,
      111,
      109,
      101,
      115,
      117,
      99,
      104,
      122,
      111,
      110,
      101,
      49,
      48,
      48,
      37,
      111,
      110,
      101,
      115,
      99,
      97,
      114,
      101,
      84,
      105,
      109,
      101,
      114,
      97,
      99,
      101,
      98,
      108,
      117,
      101,
      102,
      111,
      117,
      114,
      119,
      101,
      101,
      107,
      102,
      97,
      99,
      101,
      104,
      111,
      112,
      101,
      103,
      97,
      118,
      101,
      104,
      97,
      114,
      100,
      108,
      111,
      115,
      116,
      119,
      104,
      101,
      110,
      112,
      97,
      114,
      107,
      107,
      101,
      112,
      116,
      112,
      97,
      115,
      115,
      115,
      104,
      105,
      112,
      114,
      111,
      111,
      109,
      72,
      84,
      77,
      76,
      112,
      108,
      97,
      110,
      84,
      121,
      112,
      101,
      100,
      111,
      110,
      101,
      115,
      97,
      118,
      101,
      107,
      101,
      101,
      112,
      102,
      108,
      97,
      103,
      108,
      105,
      110,
      107,
      115,
      111,
      108,
      100,
      102,
      105,
      118,
      101,
      116,
      111,
      111,
      107,
      114,
      97,
      116,
      101,
      116,
      111,
      119,
      110,
      106,
      117,
      109,
      112,
      116,
      104,
      117,
      115,
      100,
      97,
      114,
      107,
      99,
      97,
      114,
      100,
      102,
      105,
      108,
      101,
      102,
      101,
      97,
      114,
      115,
      116,
      97,
      121,
      107,
      105,
      108,
      108,
      116,
      104,
      97,
      116,
      102,
      97,
      108,
      108,
      97,
      117,
      116,
      111,
      101,
      118,
      101,
      114,
      46,
      99,
      111,
      109,
      116,
      97,
      108,
      107,
      115,
      104,
      111,
      112,
      118,
      111,
      116,
      101,
      100,
      101,
      101,
      112,
      109,
      111,
      100,
      101,
      114,
      101,
      115,
      116,
      116,
      117,
      114,
      110,
      98,
      111,
      114,
      110,
      98,
      97,
      110,
      100,
      102,
      101,
      108,
      108,
      114,
      111,
      115,
      101,
      117,
      114,
      108,
      40,
      115,
      107,
      105,
      110,
      114,
      111,
      108,
      101,
      99,
      111,
      109,
      101,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      115,
      109,
      101,
      101,
      116,
      103,
      111,
      108,
      100,
      46,
      106,
      112,
      103,
      105,
      116,
      101,
      109,
      118,
      97,
      114,
      121,
      102,
      101,
      108,
      116,
      116,
      104,
      101,
      110,
      115,
      101,
      110,
      100,
      100,
      114,
      111,
      112,
      86,
      105,
      101,
      119,
      99,
      111,
      112,
      121,
      49,
      46,
      48,
      34,
      60,
      47,
      97,
      62,
      115,
      116,
      111,
      112,
      101,
      108,
      115,
      101,
      108,
      105,
      101,
      115,
      116,
      111,
      117,
      114,
      112,
      97,
      99,
      107,
      46,
      103,
      105,
      102,
      112,
      97,
      115,
      116,
      99,
      115,
      115,
      63,
      103,
      114,
      97,
      121,
      109,
      101,
      97,
      110,
      38,
      103,
      116,
      59,
      114,
      105,
      100,
      101,
      115,
      104,
      111,
      116,
      108,
      97,
      116,
      101,
      115,
      97,
      105,
      100,
      114,
      111,
      97,
      100,
      118,
      97,
      114,
      32,
      102,
      101,
      101,
      108,
      106,
      111,
      104,
      110,
      114,
      105,
      99,
      107,
      112,
      111,
      114,
      116,
      102,
      97,
      115,
      116,
      39,
      85,
      65,
      45,
      100,
      101,
      97,
      100,
      60,
      47,
      98,
      62,
      112,
      111,
      111,
      114,
      98,
      105,
      108,
      108,
      116,
      121,
      112,
      101,
      85,
      46,
      83,
      46,
      119,
      111,
      111,
      100,
      109,
      117,
      115,
      116,
      50,
      112,
      120,
      59,
      73,
      110,
      102,
      111,
      114,
      97,
      110,
      107,
      119,
      105,
      100,
      101,
      119,
      97,
      110,
      116,
      119,
      97,
      108,
      108,
      108,
      101,
      97,
      100,
      91,
      48,
      93,
      59,
      112,
      97,
      117,
      108,
      119,
      97,
      118,
      101,
      115,
      117,
      114,
      101,
      36,
      40,
      39,
      35,
      119,
      97,
      105,
      116,
      109,
      97,
      115,
      115,
      97,
      114,
      109,
      115,
      103,
      111,
      101,
      115,
      103,
      97,
      105,
      110,
      108,
      97,
      110,
      103,
      112,
      97,
      105,
      100,
      33,
      45,
      45,
      32,
      108,
      111,
      99,
      107,
      117,
      110,
      105,
      116,
      114,
      111,
      111,
      116,
      119,
      97,
      108,
      107,
      102,
      105,
      114,
      109,
      119,
      105,
      102,
      101,
      120,
      109,
      108,
      34,
      115,
      111,
      110,
      103,
      116,
      101,
      115,
      116,
      50,
      48,
      112,
      120,
      107,
      105,
      110,
      100,
      114,
      111,
      119,
      115,
      116,
      111,
      111,
      108,
      102,
      111,
      110,
      116,
      109,
      97,
      105,
      108,
      115,
      97,
      102,
      101,
      115,
      116,
      97,
      114,
      109,
      97,
      112,
      115,
      99,
      111,
      114,
      101,
      114,
      97,
      105,
      110,
      102,
      108,
      111,
      119,
      98,
      97,
      98,
      121,
      115,
      112,
      97,
      110,
      115,
      97,
      121,
      115,
      52,
      112,
      120,
      59,
      54,
      112,
      120,
      59,
      97,
      114,
      116,
      115,
      102,
      111,
      111,
      116,
      114,
      101,
      97,
      108,
      119,
      105,
      107,
      105,
      104,
      101,
      97,
      116,
      115,
      116,
      101,
      112,
      116,
      114,
      105,
      112,
      111,
      114,
      103,
      47,
      108,
      97,
      107,
      101,
      119,
      101,
      97,
      107,
      116,
      111,
      108,
      100,
      70,
      111,
      114,
      109,
      99,
      97,
      115,
      116,
      102,
      97,
      110,
      115,
      98,
      97,
      110,
      107,
      118,
      101,
      114,
      121,
      114,
      117,
      110,
      115,
      106,
      117,
      108,
      121,
      116,
      97,
      115,
      107,
      49,
      112,
      120,
      59,
      103,
      111,
      97,
      108,
      103,
      114,
      101,
      119,
      115,
      108,
      111,
      119,
      101,
      100,
      103,
      101,
      105,
      100,
      61,
      34,
      115,
      101,
      116,
      115,
      53,
      112,
      120,
      59,
      46,
      106,
      115,
      63,
      52,
      48,
      112,
      120,
      105,
      102,
      32,
      40,
      115,
      111,
      111,
      110,
      115,
      101,
      97,
      116,
      110,
      111,
      110,
      101,
      116,
      117,
      98,
      101,
      122,
      101,
      114,
      111,
      115,
      101,
      110,
      116,
      114,
      101,
      101,
      100,
      102,
      97,
      99,
      116,
      105,
      110,
      116,
      111,
      103,
      105,
      102,
      116,
      104,
      97,
      114,
      109,
      49,
      56,
      112,
      120,
      99,
      97,
      109,
      101,
      104,
      105,
      108,
      108,
      98,
      111,
      108,
      100,
      122,
      111,
      111,
      109,
      118,
      111,
      105,
      100,
      101,
      97,
      115,
      121,
      114,
      105,
      110,
      103,
      102,
      105,
      108,
      108,
      112,
      101,
      97,
      107,
      105,
      110,
      105,
      116,
      99,
      111,
      115,
      116,
      51,
      112,
      120,
      59,
      106,
      97,
      99,
      107,
      116,
      97,
      103,
      115,
      98,
      105,
      116,
      115,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      116,
      107,
      110,
      101,
      119,
      110,
      101,
      97,
      114,
      60,
      33,
      45,
      45,
      103,
      114,
      111,
      119,
      74,
      83,
      79,
      78,
      100,
      117,
      116,
      121,
      78,
      97,
      109,
      101,
      115,
      97,
      108,
      101,
      121,
      111,
      117,
      32,
      108,
      111,
      116,
      115,
      112,
      97,
      105,
      110,
      106,
      97,
      122,
      122,
      99,
      111,
      108,
      100,
      101,
      121,
      101,
      115,
      102,
      105,
      115,
      104,
      119,
      119,
      119,
      46,
      114,
      105,
      115,
      107,
      116,
      97,
      98,
      115,
      112,
      114,
      101,
      118,
      49,
      48,
      112,
      120,
      114,
      105,
      115,
      101,
      50,
      53,
      112,
      120,
      66,
      108,
      117,
      101,
      100,
      105,
      110,
      103,
      51,
      48,
      48,
      44,
      98,
      97,
      108,
      108,
      102,
      111,
      114,
      100,
      101,
      97,
      114,
      110,
      119,
      105,
      108,
      100,
      98,
      111,
      120,
      46,
      102,
      97,
      105,
      114,
      108,
      97,
      99,
      107,
      118,
      101,
      114,
      115,
      112,
      97,
      105,
      114,
      106,
      117,
      110,
      101,
      116,
      101,
      99,
      104,
      105,
      102,
      40,
      33,
      112,
      105,
      99,
      107,
      101,
      118,
      105,
      108,
      36,
      40,
      34,
      35,
      119,
      97,
      114,
      109,
      108,
      111,
      114,
      100,
      100,
      111,
      101,
      115,
      112,
      117,
      108,
      108,
      44,
      48,
      48,
      48,
      105,
      100,
      101,
      97,
      100,
      114,
      97,
      119,
      104,
      117,
      103,
      101,
      115,
      112,
      111,
      116,
      102,
      117,
      110,
      100,
      98,
      117,
      114,
      110,
      104,
      114,
      101,
      102,
      99,
      101,
      108,
      108,
      107,
      101,
      121,
      115,
      116,
      105,
      99,
      107,
      104,
      111,
      117,
      114,
      108,
      111,
      115,
      115,
      102,
      117,
      101,
      108,
      49,
      50,
      112,
      120,
      115,
      117,
      105,
      116,
      100,
      101,
      97,
      108,
      82,
      83,
      83,
      34,
      97,
      103,
      101,
      100,
      103,
      114,
      101,
      121,
      71,
      69,
      84,
      34,
      101,
      97,
      115,
      101,
      97,
      105,
      109,
      115,
      103,
      105,
      114,
      108,
      97,
      105,
      100,
      115,
      56,
      112,
      120,
      59,
      110,
      97,
      118,
      121,
      103,
      114,
      105,
      100,
      116,
      105,
      112,
      115,
      35,
      57,
      57,
      57,
      119,
      97,
      114,
      115,
      108,
      97,
      100,
      121,
      99,
      97,
      114,
      115,
      41,
      59,
      32,
      125,
      112,
      104,
      112,
      63,
      104,
      101,
      108,
      108,
      116,
      97,
      108,
      108,
      119,
      104,
      111,
      109,
      122,
      104,
      58,
      229,
      42,
      47,
      13,
      10,
      32,
      49,
      48,
      48,
      104,
      97,
      108,
      108,
      46,
      10,
      10,
      65,
      55,
      112,
      120,
      59,
      112,
      117,
      115,
      104,
      99,
      104,
      97,
      116,
      48,
      112,
      120,
      59,
      99,
      114,
      101,
      119,
      42,
      47,
      60,
      47,
      104,
      97,
      115,
      104,
      55,
      53,
      112,
      120,
      102,
      108,
      97,
      116,
      114,
      97,
      114,
      101,
      32,
      38,
      38,
      32,
      116,
      101,
      108,
      108,
      99,
      97,
      109,
      112,
      111,
      110,
      116,
      111,
      108,
      97,
      105,
      100,
      109,
      105,
      115,
      115,
      115,
      107,
      105,
      112,
      116,
      101,
      110,
      116,
      102,
      105,
      110,
      101,
      109,
      97,
      108,
      101,
      103,
      101,
      116,
      115,
      112,
      108,
      111,
      116,
      52,
      48,
      48,
      44,
      13,
      10,
      13,
      10,
      99,
      111,
      111,
      108,
      102,
      101,
      101,
      116,
      46,
      112,
      104,
      112,
      60,
      98,
      114,
      62,
      101,
      114,
      105,
      99,
      109,
      111,
      115,
      116,
      103,
      117,
      105,
      100,
      98,
      101,
      108,
      108,
      100,
      101,
      115,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      116,
      104,
      97,
      116,
      111,
      109,
      47,
      105,
      109,
      103,
      38,
      35,
      56,
      50,
      108,
      117,
      99,
      107,
      99,
      101,
      110,
      116,
      48,
      48,
      48,
      59,
      116,
      105,
      110,
      121,
      103,
      111,
      110,
      101,
      104,
      116,
      109,
      108,
      115,
      101,
      108,
      108,
      100,
      114,
      117,
      103,
      70,
      82,
      69,
      69,
      110,
      111,
      100,
      101,
      110,
      105,
      99,
      107,
      63,
      105,
      100,
      61,
      108,
      111,
      115,
      101,
      110,
      117,
      108,
      108,
      118,
      97,
      115,
      116,
      119,
      105,
      110,
      100,
      82,
      83,
      83,
      32,
      119,
      101,
      97,
      114,
      114,
      101,
      108,
      121,
      98,
      101,
      101,
      110,
      115,
      97,
      109,
      101,
      100,
      117,
      107,
      101,
      110,
      97,
      115,
      97,
      99,
      97,
      112,
      101,
      119,
      105,
      115,
      104,
      103,
      117,
      108,
      102,
      84,
      50,
      51,
      58,
      104,
      105,
      116,
      115,
      115,
      108,
      111,
      116,
      103,
      97,
      116,
      101,
      107,
      105,
      99,
      107,
      98,
      108,
      117,
      114,
      116,
      104,
      101,
      121,
      49,
      53,
      112,
      120,
      39,
      39,
      41,
      59,
      41,
      59,
      34,
      62,
      109,
      115,
      105,
      101,
      119,
      105,
      110,
      115,
      98,
      105,
      114,
      100,
      115,
      111,
      114,
      116,
      98,
      101,
      116,
      97,
      115,
      101,
      101,
      107,
      84,
      49,
      56,
      58,
      111,
      114,
      100,
      115,
      116,
      114,
      101,
      101,
      109,
      97,
      108,
      108,
      54,
      48,
      112,
      120,
      102,
      97,
      114,
      109,
      226,
      128,
      153,
      115,
      98,
      111,
      121,
      115,
      91,
      48,
      93,
      46,
      39,
      41,
      59,
      34,
      80,
      79,
      83,
      84,
      98,
      101,
      97,
      114,
      107,
      105,
      100,
      115,
      41,
      59,
      125,
      125,
      109,
      97,
      114,
      121,
      116,
      101,
      110,
      100,
      40,
      85,
      75,
      41,
      113,
      117,
      97,
      100,
      122,
      104,
      58,
      230,
      45,
      115,
      105,
      122,
      45,
      45,
      45,
      45,
      112,
      114,
      111,
      112,
      39,
      41,
      59,
      13,
      108,
      105,
      102,
      116,
      84,
      49,
      57,
      58,
      118,
      105,
      99,
      101,
      97,
      110,
      100,
      121,
      100,
      101,
      98,
      116,
      62,
      82,
      83,
      83,
      112,
      111,
      111,
      108,
      110,
      101,
      99,
      107,
      98,
      108,
      111,
      119,
      84,
      49,
      54,
      58,
      100,
      111,
      111,
      114,
      101,
      118,
      97,
      108,
      84,
      49,
      55,
      58,
      108,
      101,
      116,
      115,
      102,
      97,
      105,
      108,
      111,
      114,
      97,
      108,
      112,
      111,
      108,
      108,
      110,
      111,
      118,
      97,
      99,
      111,
      108,
      115,
      103,
      101,
      110,
      101,
      32,
      226,
      128,
      148,
      115,
      111,
      102,
      116,
      114,
      111,
      109,
      101,
      116,
      105,
      108,
      108,
      114,
      111,
      115,
      115,
      60,
      104,
      51,
      62,
      112,
      111,
      117,
      114,
      102,
      97,
      100,
      101,
      112,
      105,
      110,
      107,
      60,
      116,
      114,
      62,
      109,
      105,
      110,
      105,
      41,
      124,
      33,
      40,
      109,
      105,
      110,
      101,
      122,
      104,
      58,
      232,
      98,
      97,
      114,
      115,
      104,
      101,
      97,
      114,
      48,
      48,
      41,
      59,
      109,
      105,
      108,
      107,
      32,
      45,
      45,
      62,
      105,
      114,
      111,
      110,
      102,
      114,
      101,
      100,
      100,
      105,
      115,
      107,
      119,
      101,
      110,
      116,
      115,
      111,
      105,
      108,
      112,
      117,
      116,
      115,
      47,
      106,
      115,
      47,
      104,
      111,
      108,
      121,
      84,
      50,
      50,
      58,
      73,
      83,
      66,
      78,
      84,
      50,
      48,
      58,
      97,
      100,
      97,
      109,
      115,
      101,
      101,
      115,
      60,
      104,
      50,
      62,
      106,
      115,
      111,
      110,
      39,
      44,
      32,
      39,
      99,
      111,
      110,
      116,
      84,
      50,
      49,
      58,
      32,
      82,
      83,
      83,
      108,
      111,
      111,
      112,
      97,
      115,
      105,
      97,
      109,
      111,
      111,
      110,
      60,
      47,
      112,
      62,
      115,
      111,
      117,
      108,
      76,
      73,
      78,
      69,
      102,
      111,
      114,
      116,
      99,
      97,
      114,
      116,
      84,
      49,
      52,
      58,
      60,
      104,
      49,
      62,
      56,
      48,
      112,
      120,
      33,
      45,
      45,
      60,
      57,
      112,
      120,
      59,
      84,
      48,
      52,
      58,
      109,
      105,
      107,
      101,
      58,
      52,
      54,
      90,
      110,
      105,
      99,
      101,
      105,
      110,
      99,
      104,
      89,
      111,
      114,
      107,
      114,
      105,
      99,
      101,
      122,
      104,
      58,
      228,
      39,
      41,
      41,
      59,
      112,
      117,
      114,
      101,
      109,
      97,
      103,
      101,
      112,
      97,
      114,
      97,
      116,
      111,
      110,
      101,
      98,
      111,
      110,
      100,
      58,
      51,
      55,
      90,
      95,
      111,
      102,
      95,
      39,
      93,
      41,
      59,
      48,
      48,
      48,
      44,
      122,
      104,
      58,
      231,
      116,
      97,
      110,
      107,
      121,
      97,
      114,
      100,
      98,
      111,
      119,
      108,
      98,
      117,
      115,
      104,
      58,
      53,
      54,
      90,
      74,
      97,
      118,
      97,
      51,
      48,
      112,
      120,
      10,
      124,
      125,
      10,
      37,
      67,
      51,
      37,
      58,
      51,
      52,
      90,
      106,
      101,
      102,
      102,
      69,
      88,
      80,
      73,
      99,
      97,
      115,
      104,
      118,
      105,
      115,
      97,
      103,
      111,
      108,
      102,
      115,
      110,
      111,
      119,
      122,
      104,
      58,
      233,
      113,
      117,
      101,
      114,
      46,
      99,
      115,
      115,
      115,
      105,
      99,
      107,
      109,
      101,
      97,
      116,
      109,
      105,
      110,
      46,
      98,
      105,
      110,
      100,
      100,
      101,
      108,
      108,
      104,
      105,
      114,
      101,
      112,
      105,
      99,
      115,
      114,
      101,
      110,
      116,
      58,
      51,
      54,
      90,
      72,
      84,
      84,
      80,
      45,
      50,
      48,
      49,
      102,
      111,
      116,
      111,
      119,
      111,
      108,
      102,
      69,
      78,
      68,
      32,
      120,
      98,
      111,
      120,
      58,
      53,
      52,
      90,
      66,
      79,
      68,
      89,
      100,
      105,
      99,
      107,
      59,
      10,
      125,
      10,
      101,
      120,
      105,
      116,
      58,
      51,
      53,
      90,
      118,
      97,
      114,
      115,
      98,
      101,
      97,
      116,
      39,
      125,
      41,
      59,
      100,
      105,
      101,
      116,
      57,
      57,
      57,
      59,
      97,
      110,
      110,
      101,
      125,
      125,
      60,
      47,
      91,
      105,
      93,
      46,
      76,
      97,
      110,
      103,
      107,
      109,
      194,
      178,
      119,
      105,
      114,
      101,
      116,
      111,
      121,
      115,
      97,
      100,
      100,
      115,
      115,
      101,
      97,
      108,
      97,
      108,
      101,
      120,
      59,
      10,
      9,
      125,
      101,
      99,
      104,
      111,
      110,
      105,
      110,
      101,
      46,
      111,
      114,
      103,
      48,
      48,
      53,
      41,
      116,
      111,
      110,
      121,
      106,
      101,
      119,
      115,
      115,
      97,
      110,
      100,
      108,
      101,
      103,
      115,
      114,
      111,
      111,
      102,
      48,
      48,
      48,
      41,
      32,
      50,
      48,
      48,
      119,
      105,
      110,
      101,
      103,
      101,
      97,
      114,
      100,
      111,
      103,
      115,
      98,
      111,
      111,
      116,
      103,
      97,
      114,
      121,
      99,
      117,
      116,
      115,
      116,
      121,
      108,
      101,
      116,
      101,
      109,
      112,
      116,
      105,
      111,
      110,
      46,
      120,
      109,
      108,
      99,
      111,
      99,
      107,
      103,
      97,
      110,
      103,
      36,
      40,
      39,
      46,
      53,
      48,
      112,
      120,
      80,
      104,
      46,
      68,
      109,
      105,
      115,
      99,
      97,
      108,
      97,
      110,
      108,
      111,
      97,
      110,
      100,
      101,
      115,
      107,
      109,
      105,
      108,
      101,
      114,
      121,
      97,
      110,
      117,
      110,
      105,
      120,
      100,
      105,
      115,
      99,
      41,
      59,
      125,
      10,
      100,
      117,
      115,
      116,
      99,
      108,
      105,
      112,
      41,
      46,
      10,
      10,
      55,
      48,
      112,
      120,
      45,
      50,
      48,
      48,
      68,
      86,
      68,
      115,
      55,
      93,
      62,
      60,
      116,
      97,
      112,
      101,
      100,
      101,
      109,
      111,
      105,
      43,
      43,
      41,
      119,
      97,
      103,
      101,
      101,
      117,
      114,
      111,
      112,
      104,
      105,
      108,
      111,
      112,
      116,
      115,
      104,
      111,
      108,
      101,
      70,
      65,
      81,
      115,
      97,
      115,
      105,
      110,
      45,
      50,
      54,
      84,
      108,
      97,
      98,
      115,
      112,
      101,
      116,
      115,
      85,
      82,
      76,
      32,
      98,
      117,
      108,
      107,
      99,
      111,
      111,
      107,
      59,
      125,
      13,
      10,
      72,
      69,
      65,
      68,
      91,
      48,
      93,
      41,
      97,
      98,
      98,
      114,
      106,
      117,
      97,
      110,
      40,
      49,
      57,
      56,
      108,
      101,
      115,
      104,
      116,
      119,
      105,
      110,
      60,
      47,
      105,
      62,
      115,
      111,
      110,
      121,
      103,
      117,
      121,
      115,
      102,
      117,
      99,
      107,
      112,
      105,
      112,
      101,
      124,
      45,
      10,
      33,
      48,
      48,
      50,
      41,
      110,
      100,
      111,
      119,
      91,
      49,
      93,
      59,
      91,
      93,
      59,
      10,
      76,
      111,
      103,
      32,
      115,
      97,
      108,
      116,
      13,
      10,
      9,
      9,
      98,
      97,
      110,
      103,
      116,
      114,
      105,
      109,
      98,
      97,
      116,
      104,
      41,
      123,
      13,
      10,
      48,
      48,
      112,
      120,
      10,
      125,
      41,
      59,
      107,
      111,
      58,
      236,
      102,
      101,
      101,
      115,
      97,
      100,
      62,
      13,
      115,
      58,
      47,
      47,
      32,
      91,
      93,
      59,
      116,
      111,
      108,
      108,
      112,
      108,
      117,
      103,
      40,
      41,
      123,
      10,
      123,
      13,
      10,
      32,
      46,
      106,
      115,
      39,
      50,
      48,
      48,
      112,
      100,
      117,
      97,
      108,
      98,
      111,
      97,
      116,
      46,
      74,
      80,
      71,
      41,
      59,
      10,
      125,
      113,
      117,
      111,
      116,
      41,
      59,
      10,
      10,
      39,
      41,
      59,
      10,
      13,
      10,
      125,
      13,
      50,
      48,
      49,
      52,
      50,
      48,
      49,
      53,
      50,
      48,
      49,
      54,
      50,
      48,
      49,
      55,
      50,
      48,
      49,
      56,
      50,
      48,
      49,
      57,
      50,
      48,
      50,
      48,
      50,
      48,
      50,
      49,
      50,
      48,
      50,
      50,
      50,
      48,
      50,
      51,
      50,
      48,
      50,
      52,
      50,
      48,
      50,
      53,
      50,
      48,
      50,
      54,
      50,
      48,
      50,
      55,
      50,
      48,
      50,
      56,
      50,
      48,
      50,
      57,
      50,
      48,
      51,
      48,
      50,
      48,
      51,
      49,
      50,
      48,
      51,
      50,
      50,
      48,
      51,
      51,
      50,
      48,
      51,
      52,
      50,
      48,
      51,
      53,
      50,
      48,
      51,
      54,
      50,
      48,
      51,
      55,
      50,
      48,
      49,
      51,
      50,
      48,
      49,
      50,
      50,
      48,
      49,
      49,
      50,
      48,
      49,
      48,
      50,
      48,
      48,
      57,
      50,
      48,
      48,
      56,
      50,
      48,
      48,
      55,
      50,
      48,
      48,
      54,
      50,
      48,
      48,
      53,
      50,
      48,
      48,
      52,
      50,
      48,
      48,
      51,
      50,
      48,
      48,
      50,
      50,
      48,
      48,
      49,
      50,
      48,
      48,
      48,
      49,
      57,
      57,
      57,
      49,
      57,
      57,
      56,
      49,
      57,
      57,
      55,
      49,
      57,
      57,
      54,
      49,
      57,
      57,
      53,
      49,
      57,
      57,
      52,
      49,
      57,
      57,
      51,
      49,
      57,
      57,
      50,
      49,
      57,
      57,
      49,
      49,
      57,
      57,
      48,
      49,
      57,
      56,
      57,
      49,
      57,
      56,
      56,
      49,
      57,
      56,
      55,
      49,
      57,
      56,
      54,
      49,
      57,
      56,
      53,
      49,
      57,
      56,
      52,
      49,
      57,
      56,
      51,
      49,
      57,
      56,
      50,
      49,
      57,
      56,
      49,
      49,
      57,
      56,
      48,
      49,
      57,
      55,
      57,
      49,
      57,
      55,
      56,
      49,
      57,
      55,
      55,
      49,
      57,
      55,
      54,
      49,
      57,
      55,
      53,
      49,
      57,
      55,
      52,
      49,
      57,
      55,
      51,
      49,
      57,
      55,
      50,
      49,
      57,
      55,
      49,
      49,
      57,
      55,
      48,
      49,
      57,
      54,
      57,
      49,
      57,
      54,
      56,
      49,
      57,
      54,
      55,
      49,
      57,
      54,
      54,
      49,
      57,
      54,
      53,
      49,
      57,
      54,
      52,
      49,
      57,
      54,
      51,
      49,
      57,
      54,
      50,
      49,
      57,
      54,
      49,
      49,
      57,
      54,
      48,
      49,
      57,
      53,
      57,
      49,
      57,
      53,
      56,
      49,
      57,
      53,
      55,
      49,
      57,
      53,
      54,
      49,
      57,
      53,
      53,
      49,
      57,
      53,
      52,
      49,
      57,
      53,
      51,
      49,
      57,
      53,
      50,
      49,
      57,
      53,
      49,
      49,
      57,
      53,
      48,
      49,
      48,
      48,
      48,
      49,
      48,
      50,
      52,
      49,
      51,
      57,
      52,
      48,
      48,
      48,
      48,
      57,
      57,
      57,
      57,
      99,
      111,
      109,
      111,
      109,
      195,
      161,
      115,
      101,
      115,
      116,
      101,
      101,
      115,
      116,
      97,
      112,
      101,
      114,
      111,
      116,
      111,
      100,
      111,
      104,
      97,
      99,
      101,
      99,
      97,
      100,
      97,
      97,
      195,
      177,
      111,
      98,
      105,
      101,
      110,
      100,
      195,
      173,
      97,
      97,
      115,
      195,
      173,
      118,
      105,
      100,
      97,
      99,
      97,
      115,
      111,
      111,
      116,
      114,
      111,
      102,
      111,
      114,
      111,
      115,
      111,
      108,
      111,
      111,
      116,
      114,
      97,
      99,
      117,
      97,
      108,
      100,
      105,
      106,
      111,
      115,
      105,
      100,
      111,
      103,
      114,
      97,
      110,
      116,
      105,
      112,
      111,
      116,
      101,
      109,
      97,
      100,
      101,
      98,
      101,
      97,
      108,
      103,
      111,
      113,
      117,
      195,
      169,
      101,
      115,
      116,
      111,
      110,
      97,
      100,
      97,
      116,
      114,
      101,
      115,
      112,
      111,
      99,
      111,
      99,
      97,
      115,
      97,
      98,
      97,
      106,
      111,
      116,
      111,
      100,
      97,
      115,
      105,
      110,
      111,
      97,
      103,
      117,
      97,
      112,
      117,
      101,
      115,
      117,
      110,
      111,
      115,
      97,
      110,
      116,
      101,
      100,
      105,
      99,
      101,
      108,
      117,
      105,
      115,
      101,
      108,
      108,
      97,
      109,
      97,
      121,
      111,
      122,
      111,
      110,
      97,
      97,
      109,
      111,
      114,
      112,
      105,
      115,
      111,
      111,
      98,
      114,
      97,
      99,
      108,
      105,
      99,
      101,
      108,
      108,
      111,
      100,
      105,
      111,
      115,
      104,
      111,
      114,
      97,
      99,
      97,
      115,
      105,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      190,
      208,
      188,
      209,
      128,
      208,
      176,
      209,
      128,
      209,
      131,
      209,
      130,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      184,
      209,
      133,
      208,
      157,
      208,
      176,
      208,
      181,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      188,
      209,
      139,
      208,
      146,
      209,
      139,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      157,
      208,
      190,
      208,
      190,
      208,
      177,
      208,
      159,
      208,
      190,
      208,
      187,
      208,
      184,
      208,
      189,
      208,
      184,
      208,
      160,
      208,
      164,
      208,
      157,
      208,
      181,
      208,
      156,
      209,
      139,
      209,
      130,
      209,
      139,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      180,
      208,
      176,
      208,
      151,
      208,
      176,
      208,
      148,
      208,
      176,
      208,
      157,
      209,
      131,
      208,
      158,
      208,
      177,
      209,
      130,
      208,
      181,
      208,
      152,
      208,
      183,
      208,
      181,
      208,
      185,
      208,
      189,
      209,
      131,
      208,
      188,
      208,
      188,
      208,
      162,
      209,
      139,
      209,
      131,
      208,
      182,
      217,
      129,
      217,
      138,
      216,
      163,
      217,
      134,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      131,
      217,
      132,
      216,
      163,
      217,
      136,
      216,
      177,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      129,
      217,
      137,
      217,
      135,
      217,
      136,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      131,
      216,
      167,
      217,
      136,
      217,
      132,
      217,
      135,
      216,
      168,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      165,
      217,
      134,
      217,
      135,
      217,
      138,
      216,
      163,
      217,
      138,
      217,
      130,
      216,
      175,
      217,
      135,
      217,
      132,
      216,
      171,
      217,
      133,
      216,
      168,
      217,
      135,
      217,
      132,
      217,
      136,
      217,
      132,
      217,
      138,
      216,
      168,
      217,
      132,
      216,
      167,
      217,
      138,
      216,
      168,
      217,
      131,
      216,
      180,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      163,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      168,
      217,
      138,
      217,
      132,
      217,
      134,
      216,
      173,
      216,
      168,
      217,
      135,
      217,
      133,
      217,
      133,
      216,
      180,
      217,
      136,
      216,
      180,
      102,
      105,
      114,
      115,
      116,
      118,
      105,
      100,
      101,
      111,
      108,
      105,
      103,
      104,
      116,
      119,
      111,
      114,
      108,
      100,
      109,
      101,
      100,
      105,
      97,
      119,
      104,
      105,
      116,
      101,
      99,
      108,
      111,
      115,
      101,
      98,
      108,
      97,
      99,
      107,
      114,
      105,
      103,
      104,
      116,
      115,
      109,
      97,
      108,
      108,
      98,
      111,
      111,
      107,
      115,
      112,
      108,
      97,
      99,
      101,
      109,
      117,
      115,
      105,
      99,
      102,
      105,
      101,
      108,
      100,
      111,
      114,
      100,
      101,
      114,
      112,
      111,
      105,
      110,
      116,
      118,
      97,
      108,
      117,
      101,
      108,
      101,
      118,
      101,
      108,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      97,
      114,
      100,
      104,
      111,
      117,
      115,
      101,
      103,
      114,
      111,
      117,
      112,
      119,
      111,
      114,
      107,
      115,
      121,
      101,
      97,
      114,
      115,
      115,
      116,
      97,
      116,
      101,
      116,
      111,
      100,
      97,
      121,
      119,
      97,
      116,
      101,
      114,
      115,
      116,
      97,
      114,
      116,
      115,
      116,
      121,
      108,
      101,
      100,
      101,
      97,
      116,
      104,
      112,
      111,
      119,
      101,
      114,
      112,
      104,
      111,
      110,
      101,
      110,
      105,
      103,
      104,
      116,
      101,
      114,
      114,
      111,
      114,
      105,
      110,
      112,
      117,
      116,
      97,
      98,
      111,
      117,
      116,
      116,
      101,
      114,
      109,
      115,
      116,
      105,
      116,
      108,
      101,
      116,
      111,
      111,
      108,
      115,
      101,
      118,
      101,
      110,
      116,
      108,
      111,
      99,
      97,
      108,
      116,
      105,
      109,
      101,
      115,
      108,
      97,
      114,
      103,
      101,
      119,
      111,
      114,
      100,
      115,
      103,
      97,
      109,
      101,
      115,
      115,
      104,
      111,
      114,
      116,
      115,
      112,
      97,
      99,
      101,
      102,
      111,
      99,
      117,
      115,
      99,
      108,
      101,
      97,
      114,
      109,
      111,
      100,
      101,
      108,
      98,
      108,
      111,
      99,
      107,
      103,
      117,
      105,
      100,
      101,
      114,
      97,
      100,
      105,
      111,
      115,
      104,
      97,
      114,
      101,
      119,
      111,
      109,
      101,
      110,
      97,
      103,
      97,
      105,
      110,
      109,
      111,
      110,
      101,
      121,
      105,
      109,
      97,
      103,
      101,
      110,
      97,
      109,
      101,
      115,
      121,
      111,
      117,
      110,
      103,
      108,
      105,
      110,
      101,
      115,
      108,
      97,
      116,
      101,
      114,
      99,
      111,
      108,
      111,
      114,
      103,
      114,
      101,
      101,
      110,
      102,
      114,
      111,
      110,
      116,
      38,
      97,
      109,
      112,
      59,
      119,
      97,
      116,
      99,
      104,
      102,
      111,
      114,
      99,
      101,
      112,
      114,
      105,
      99,
      101,
      114,
      117,
      108,
      101,
      115,
      98,
      101,
      103,
      105,
      110,
      97,
      102,
      116,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      115,
      115,
      117,
      101,
      97,
      114,
      101,
      97,
      115,
      98,
      101,
      108,
      111,
      119,
      105,
      110,
      100,
      101,
      120,
      116,
      111,
      116,
      97,
      108,
      104,
      111,
      117,
      114,
      115,
      108,
      97,
      98,
      101,
      108,
      112,
      114,
      105,
      110,
      116,
      112,
      114,
      101,
      115,
      115,
      98,
      117,
      105,
      108,
      116,
      108,
      105,
      110,
      107,
      115,
      115,
      112,
      101,
      101,
      100,
      115,
      116,
      117,
      100,
      121,
      116,
      114,
      97,
      100,
      101,
      102,
      111,
      117,
      110,
      100,
      115,
      101,
      110,
      115,
      101,
      117,
      110,
      100,
      101,
      114,
      115,
      104,
      111,
      119,
      110,
      102,
      111,
      114,
      109,
      115,
      114,
      97,
      110,
      103,
      101,
      97,
      100,
      100,
      101,
      100,
      115,
      116,
      105,
      108,
      108,
      109,
      111,
      118,
      101,
      100,
      116,
      97,
      107,
      101,
      110,
      97,
      98,
      111,
      118,
      101,
      102,
      108,
      97,
      115,
      104,
      102,
      105,
      120,
      101,
      100,
      111,
      102,
      116,
      101,
      110,
      111,
      116,
      104,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      99,
      104,
      101,
      99,
      107,
      108,
      101,
      103,
      97,
      108,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      115,
      113,
      117,
      105,
      99,
      107,
      115,
      104,
      97,
      112,
      101,
      104,
      117,
      109,
      97,
      110,
      101,
      120,
      105,
      115,
      116,
      103,
      111,
      105,
      110,
      103,
      109,
      111,
      118,
      105,
      101,
      116,
      104,
      105,
      114,
      100,
      98,
      97,
      115,
      105,
      99,
      112,
      101,
      97,
      99,
      101,
      115,
      116,
      97,
      103,
      101,
      119,
      105,
      100,
      116,
      104,
      108,
      111,
      103,
      105,
      110,
      105,
      100,
      101,
      97,
      115,
      119,
      114,
      111,
      116,
      101,
      112,
      97,
      103,
      101,
      115,
      117,
      115,
      101,
      114,
      115,
      100,
      114,
      105,
      118,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      114,
      101,
      97,
      107,
      115,
      111,
      117,
      116,
      104,
      118,
      111,
      105,
      99,
      101,
      115,
      105,
      116,
      101,
      115,
      109,
      111,
      110,
      116,
      104,
      119,
      104,
      101,
      114,
      101,
      98,
      117,
      105,
      108,
      100,
      119,
      104,
      105,
      99,
      104,
      101,
      97,
      114,
      116,
      104,
      102,
      111,
      114,
      117,
      109,
      116,
      104,
      114,
      101,
      101,
      115,
      112,
      111,
      114,
      116,
      112,
      97,
      114,
      116,
      121,
      67,
      108,
      105,
      99,
      107,
      108,
      111,
      119,
      101,
      114,
      108,
      105,
      118,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      121,
      101,
      114,
      101,
      110,
      116,
      114,
      121,
      115,
      116,
      111,
      114,
      121,
      117,
      115,
      97,
      103,
      101,
      115,
      111,
      117,
      110,
      100,
      99,
      111,
      117,
      114,
      116,
      121,
      111,
      117,
      114,
      32,
      98,
      105,
      114,
      116,
      104,
      112,
      111,
      112,
      117,
      112,
      116,
      121,
      112,
      101,
      115,
      97,
      112,
      112,
      108,
      121,
      73,
      109,
      97,
      103,
      101,
      98,
      101,
      105,
      110,
      103,
      117,
      112,
      112,
      101,
      114,
      110,
      111,
      116,
      101,
      115,
      101,
      118,
      101,
      114,
      121,
      115,
      104,
      111,
      119,
      115,
      109,
      101,
      97,
      110,
      115,
      101,
      120,
      116,
      114,
      97,
      109,
      97,
      116,
      99,
      104,
      116,
      114,
      97,
      99,
      107,
      107,
      110,
      111,
      119,
      110,
      101,
      97,
      114,
      108,
      121,
      98,
      101,
      103,
      97,
      110,
      115,
      117,
      112,
      101,
      114,
      112,
      97,
      112,
      101,
      114,
      110,
      111,
      114,
      116,
      104,
      108,
      101,
      97,
      114,
      110,
      103,
      105,
      118,
      101,
      110,
      110,
      97,
      109,
      101,
      100,
      101,
      110,
      100,
      101,
      100,
      84,
      101,
      114,
      109,
      115,
      112,
      97,
      114,
      116,
      115,
      71,
      114,
      111,
      117,
      112,
      98,
      114,
      97,
      110,
      100,
      117,
      115,
      105,
      110,
      103,
      119,
      111,
      109,
      97,
      110,
      102,
      97,
      108,
      115,
      101,
      114,
      101,
      97,
      100,
      121,
      97,
      117,
      100,
      105,
      111,
      116,
      97,
      107,
      101,
      115,
      119,
      104,
      105,
      108,
      101,
      46,
      99,
      111,
      109,
      47,
      108,
      105,
      118,
      101,
      100,
      99,
      97,
      115,
      101,
      115,
      100,
      97,
      105,
      108,
      121,
      99,
      104,
      105,
      108,
      100,
      103,
      114,
      101,
      97,
      116,
      106,
      117,
      100,
      103,
      101,
      116,
      104,
      111,
      115,
      101,
      117,
      110,
      105,
      116,
      115,
      110,
      101,
      118,
      101,
      114,
      98,
      114,
      111,
      97,
      100,
      99,
      111,
      97,
      115,
      116,
      99,
      111,
      118,
      101,
      114,
      97,
      112,
      112,
      108,
      101,
      102,
      105,
      108,
      101,
      115,
      99,
      121,
      99,
      108,
      101,
      115,
      99,
      101,
      110,
      101,
      112,
      108,
      97,
      110,
      115,
      99,
      108,
      105,
      99,
      107,
      119,
      114,
      105,
      116,
      101,
      113,
      117,
      101,
      101,
      110,
      112,
      105,
      101,
      99,
      101,
      101,
      109,
      97,
      105,
      108,
      102,
      114,
      97,
      109,
      101,
      111,
      108,
      100,
      101,
      114,
      112,
      104,
      111,
      116,
      111,
      108,
      105,
      109,
      105,
      116,
      99,
      97,
      99,
      104,
      101,
      99,
      105,
      118,
      105,
      108,
      115,
      99,
      97,
      108,
      101,
      101,
      110,
      116,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      116,
      104,
      101,
      114,
      101,
      116,
      111,
      117,
      99,
      104,
      98,
      111,
      117,
      110,
      100,
      114,
      111,
      121,
      97,
      108,
      97,
      115,
      107,
      101,
      100,
      119,
      104,
      111,
      108,
      101,
      115,
      105,
      110,
      99,
      101,
      115,
      116,
      111,
      99,
      107,
      32,
      110,
      97,
      109,
      101,
      102,
      97,
      105,
      116,
      104,
      104,
      101,
      97,
      114,
      116,
      101,
      109,
      112,
      116,
      121,
      111,
      102,
      102,
      101,
      114,
      115,
      99,
      111,
      112,
      101,
      111,
      119,
      110,
      101,
      100,
      109,
      105,
      103,
      104,
      116,
      97,
      108,
      98,
      117,
      109,
      116,
      104,
      105,
      110,
      107,
      98,
      108,
      111,
      111,
      100,
      97,
      114,
      114,
      97,
      121,
      109,
      97,
      106,
      111,
      114,
      116,
      114,
      117,
      115,
      116,
      99,
      97,
      110,
      111,
      110,
      117,
      110,
      105,
      111,
      110,
      99,
      111,
      117,
      110,
      116,
      118,
      97,
      108,
      105,
      100,
      115,
      116,
      111,
      110,
      101,
      83,
      116,
      121,
      108,
      101,
      76,
      111,
      103,
      105,
      110,
      104,
      97,
      112,
      112,
      121,
      111,
      99,
      99,
      117,
      114,
      108,
      101,
      102,
      116,
      58,
      102,
      114,
      101,
      115,
      104,
      113,
      117,
      105,
      116,
      101,
      102,
      105,
      108,
      109,
      115,
      103,
      114,
      97,
      100,
      101,
      110,
      101,
      101,
      100,
      115,
      117,
      114,
      98,
      97,
      110,
      102,
      105,
      103,
      104,
      116,
      98,
      97,
      115,
      105,
      115,
      104,
      111,
      118,
      101,
      114,
      97,
      117,
      116,
      111,
      59,
      114,
      111,
      117,
      116,
      101,
      46,
      104,
      116,
      109,
      108,
      109,
      105,
      120,
      101,
      100,
      102,
      105,
      110,
      97,
      108,
      89,
      111,
      117,
      114,
      32,
      115,
      108,
      105,
      100,
      101,
      116,
      111,
      112,
      105,
      99,
      98,
      114,
      111,
      119,
      110,
      97,
      108,
      111,
      110,
      101,
      100,
      114,
      97,
      119,
      110,
      115,
      112,
      108,
      105,
      116,
      114,
      101,
      97,
      99,
      104,
      82,
      105,
      103,
      104,
      116,
      100,
      97,
      116,
      101,
      115,
      109,
      97,
      114,
      99,
      104,
      113,
      117,
      111,
      116,
      101,
      103,
      111,
      111,
      100,
      115,
      76,
      105,
      110,
      107,
      115,
      100,
      111,
      117,
      98,
      116,
      97,
      115,
      121,
      110,
      99,
      116,
      104,
      117,
      109,
      98,
      97,
      108,
      108,
      111,
      119,
      99,
      104,
      105,
      101,
      102,
      121,
      111,
      117,
      116,
      104,
      110,
      111,
      118,
      101,
      108,
      49,
      48,
      112,
      120,
      59,
      115,
      101,
      114,
      118,
      101,
      117,
      110,
      116,
      105,
      108,
      104,
      97,
      110,
      100,
      115,
      67,
      104,
      101,
      99,
      107,
      83,
      112,
      97,
      99,
      101,
      113,
      117,
      101,
      114,
      121,
      106,
      97,
      109,
      101,
      115,
      101,
      113,
      117,
      97,
      108,
      116,
      119,
      105,
      99,
      101,
      48,
      44,
      48,
      48,
      48,
      83,
      116,
      97,
      114,
      116,
      112,
      97,
      110,
      101,
      108,
      115,
      111,
      110,
      103,
      115,
      114,
      111,
      117,
      110,
      100,
      101,
      105,
      103,
      104,
      116,
      115,
      104,
      105,
      102,
      116,
      119,
      111,
      114,
      116,
      104,
      112,
      111,
      115,
      116,
      115,
      108,
      101,
      97,
      100,
      115,
      119,
      101,
      101,
      107,
      115,
      97,
      118,
      111,
      105,
      100,
      116,
      104,
      101,
      115,
      101,
      109,
      105,
      108,
      101,
      115,
      112,
      108,
      97,
      110,
      101,
      115,
      109,
      97,
      114,
      116,
      97,
      108,
      112,
      104,
      97,
      112,
      108,
      97,
      110,
      116,
      109,
      97,
      114,
      107,
      115,
      114,
      97,
      116,
      101,
      115,
      112,
      108,
      97,
      121,
      115,
      99,
      108,
      97,
      105,
      109,
      115,
      97,
      108,
      101,
      115,
      116,
      101,
      120,
      116,
      115,
      115,
      116,
      97,
      114,
      115,
      119,
      114,
      111,
      110,
      103,
      60,
      47,
      104,
      51,
      62,
      116,
      104,
      105,
      110,
      103,
      46,
      111,
      114,
      103,
      47,
      109,
      117,
      108,
      116,
      105,
      104,
      101,
      97,
      114,
      100,
      80,
      111,
      119,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      116,
      111,
      107,
      101,
      110,
      115,
      111,
      108,
      105,
      100,
      40,
      116,
      104,
      105,
      115,
      98,
      114,
      105,
      110,
      103,
      115,
      104,
      105,
      112,
      115,
      115,
      116,
      97,
      102,
      102,
      116,
      114,
      105,
      101,
      100,
      99,
      97,
      108,
      108,
      115,
      102,
      117,
      108,
      108,
      121,
      102,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      110,
      116,
      84,
      104,
      105,
      115,
      32,
      47,
      47,
      45,
      45,
      62,
      97,
      100,
      109,
      105,
      110,
      101,
      103,
      121,
      112,
      116,
      69,
      118,
      101,
      110,
      116,
      49,
      53,
      112,
      120,
      59,
      69,
      109,
      97,
      105,
      108,
      116,
      114,
      117,
      101,
      34,
      99,
      114,
      111,
      115,
      115,
      115,
      112,
      101,
      110,
      116,
      98,
      108,
      111,
      103,
      115,
      98,
      111,
      120,
      34,
      62,
      110,
      111,
      116,
      101,
      100,
      108,
      101,
      97,
      118,
      101,
      99,
      104,
      105,
      110,
      97,
      115,
      105,
      122,
      101,
      115,
      103,
      117,
      101,
      115,
      116,
      60,
      47,
      104,
      52,
      62,
      114,
      111,
      98,
      111,
      116,
      104,
      101,
      97,
      118,
      121,
      116,
      114,
      117,
      101,
      44,
      115,
      101,
      118,
      101,
      110,
      103,
      114,
      97,
      110,
      100,
      99,
      114,
      105,
      109,
      101,
      115,
      105,
      103,
      110,
      115,
      97,
      119,
      97,
      114,
      101,
      100,
      97,
      110,
      99,
      101,
      112,
      104,
      97,
      115,
      101,
      62,
      60,
      33,
      45,
      45,
      101,
      110,
      95,
      85,
      83,
      38,
      35,
      51,
      57,
      59,
      50,
      48,
      48,
      112,
      120,
      95,
      110,
      97,
      109,
      101,
      108,
      97,
      116,
      105,
      110,
      101,
      110,
      106,
      111,
      121,
      97,
      106,
      97,
      120,
      46,
      97,
      116,
      105,
      111,
      110,
      115,
      109,
      105,
      116,
      104,
      85,
      46,
      83,
      46,
      32,
      104,
      111,
      108,
      100,
      115,
      112,
      101,
      116,
      101,
      114,
      105,
      110,
      100,
      105,
      97,
      110,
      97,
      118,
      34,
      62,
      99,
      104,
      97,
      105,
      110,
      115,
      99,
      111,
      114,
      101,
      99,
      111,
      109,
      101,
      115,
      100,
      111,
      105,
      110,
      103,
      112,
      114,
      105,
      111,
      114,
      83,
      104,
      97,
      114,
      101,
      49,
      57,
      57,
      48,
      115,
      114,
      111,
      109,
      97,
      110,
      108,
      105,
      115,
      116,
      115,
      106,
      97,
      112,
      97,
      110,
      102,
      97,
      108,
      108,
      115,
      116,
      114,
      105,
      97,
      108,
      111,
      119,
      110,
      101,
      114,
      97,
      103,
      114,
      101,
      101,
      60,
      47,
      104,
      50,
      62,
      97,
      98,
      117,
      115,
      101,
      97,
      108,
      101,
      114,
      116,
      111,
      112,
      101,
      114,
      97,
      34,
      45,
      47,
      47,
      87,
      99,
      97,
      114,
      100,
      115,
      104,
      105,
      108,
      108,
      115,
      116,
      101,
      97,
      109,
      115,
      80,
      104,
      111,
      116,
      111,
      116,
      114,
      117,
      116,
      104,
      99,
      108,
      101,
      97,
      110,
      46,
      112,
      104,
      112,
      63,
      115,
      97,
      105,
      110,
      116,
      109,
      101,
      116,
      97,
      108,
      108,
      111,
      117,
      105,
      115,
      109,
      101,
      97,
      110,
      116,
      112,
      114,
      111,
      111,
      102,
      98,
      114,
      105,
      101,
      102,
      114,
      111,
      119,
      34,
      62,
      103,
      101,
      110,
      114,
      101,
      116,
      114,
      117,
      99,
      107,
      108,
      111,
      111,
      107,
      115,
      86,
      97,
      108,
      117,
      101,
      70,
      114,
      97,
      109,
      101,
      46,
      110,
      101,
      116,
      47,
      45,
      45,
      62,
      10,
      60,
      116,
      114,
      121,
      32,
      123,
      10,
      118,
      97,
      114,
      32,
      109,
      97,
      107,
      101,
      115,
      99,
      111,
      115,
      116,
      115,
      112,
      108,
      97,
      105,
      110,
      97,
      100,
      117,
      108,
      116,
      113,
      117,
      101,
      115,
      116,
      116,
      114,
      97,
      105,
      110,
      108,
      97,
      98,
      111,
      114,
      104,
      101,
      108,
      112,
      115,
      99,
      97,
      117,
      115,
      101,
      109,
      97,
      103,
      105,
      99,
      109,
      111,
      116,
      111,
      114,
      116,
      104,
      101,
      105,
      114,
      50,
      53,
      48,
      112,
      120,
      108,
      101,
      97,
      115,
      116,
      115,
      116,
      101,
      112,
      115,
      67,
      111,
      117,
      110,
      116,
      99,
      111,
      117,
      108,
      100,
      103,
      108,
      97,
      115,
      115,
      115,
      105,
      100,
      101,
      115,
      102,
      117,
      110,
      100,
      115,
      104,
      111,
      116,
      101,
      108,
      97,
      119,
      97,
      114,
      100,
      109,
      111,
      117,
      116,
      104,
      109,
      111,
      118,
      101,
      115,
      112,
      97,
      114,
      105,
      115,
      103,
      105,
      118,
      101,
      115,
      100,
      117,
      116,
      99,
      104,
      116,
      101,
      120,
      97,
      115,
      102,
      114,
      117,
      105,
      116,
      110,
      117,
      108,
      108,
      44,
      124,
      124,
      91,
      93,
      59,
      116,
      111,
      112,
      34,
      62,
      10,
      60,
      33,
      45,
      45,
      80,
      79,
      83,
      84,
      34,
      111,
      99,
      101,
      97,
      110,
      60,
      98,
      114,
      47,
      62,
      102,
      108,
      111,
      111,
      114,
      115,
      112,
      101,
      97,
      107,
      100,
      101,
      112,
      116,
      104,
      32,
      115,
      105,
      122,
      101,
      98,
      97,
      110,
      107,
      115,
      99,
      97,
      116,
      99,
      104,
      99,
      104,
      97,
      114,
      116,
      50,
      48,
      112,
      120,
      59,
      97,
      108,
      105,
      103,
      110,
      100,
      101,
      97,
      108,
      115,
      119,
      111,
      117,
      108,
      100,
      53,
      48,
      112,
      120,
      59,
      117,
      114,
      108,
      61,
      34,
      112,
      97,
      114,
      107,
      115,
      109,
      111,
      117,
      115,
      101,
      77,
      111,
      115,
      116,
      32,
      46,
      46,
      46,
      60,
      47,
      97,
      109,
      111,
      110,
      103,
      98,
      114,
      97,
      105,
      110,
      98,
      111,
      100,
      121,
      32,
      110,
      111,
      110,
      101,
      59,
      98,
      97,
      115,
      101,
      100,
      99,
      97,
      114,
      114,
      121,
      100,
      114,
      97,
      102,
      116,
      114,
      101,
      102,
      101,
      114,
      112,
      97,
      103,
      101,
      95,
      104,
      111,
      109,
      101,
      46,
      109,
      101,
      116,
      101,
      114,
      100,
      101,
      108,
      97,
      121,
      100,
      114,
      101,
      97,
      109,
      112,
      114,
      111,
      118,
      101,
      106,
      111,
      105,
      110,
      116,
      60,
      47,
      116,
      114,
      62,
      100,
      114,
      117,
      103,
      115,
      60,
      33,
      45,
      45,
      32,
      97,
      112,
      114,
      105,
      108,
      105,
      100,
      101,
      97,
      108,
      97,
      108,
      108,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      102,
      111,
      114,
      116,
      104,
      99,
      111,
      100,
      101,
      115,
      108,
      111,
      103,
      105,
      99,
      86,
      105,
      101,
      119,
      32,
      115,
      101,
      101,
      109,
      115,
      98,
      108,
      97,
      110,
      107,
      112,
      111,
      114,
      116,
      115,
      32,
      40,
      50,
      48,
      48,
      115,
      97,
      118,
      101,
      100,
      95,
      108,
      105,
      110,
      107,
      103,
      111,
      97,
      108,
      115,
      103,
      114,
      97,
      110,
      116,
      103,
      114,
      101,
      101,
      107,
      104,
      111,
      109,
      101,
      115,
      114,
      105,
      110,
      103,
      115,
      114,
      97,
      116,
      101,
      100,
      51,
      48,
      112,
      120,
      59,
      119,
      104,
      111,
      115,
      101,
      112,
      97,
      114,
      115,
      101,
      40,
      41,
      59,
      34,
      32,
      66,
      108,
      111,
      99,
      107,
      108,
      105,
      110,
      117,
      120,
      106,
      111,
      110,
      101,
      115,
      112,
      105,
      120,
      101,
      108,
      39,
      41,
      59,
      34,
      62,
      41,
      59,
      105,
      102,
      40,
      45,
      108,
      101,
      102,
      116,
      100,
      97,
      118,
      105,
      100,
      104,
      111,
      114,
      115,
      101,
      70,
      111,
      99,
      117,
      115,
      114,
      97,
      105,
      115,
      101,
      98,
      111,
      120,
      101,
      115,
      84,
      114,
      97,
      99,
      107,
      101,
      109,
      101,
      110,
      116,
      60,
      47,
      101,
      109,
      62,
      98,
      97,
      114,
      34,
      62,
      46,
      115,
      114,
      99,
      61,
      116,
      111,
      119,
      101,
      114,
      97,
      108,
      116,
      61,
      34,
      99,
      97,
      98,
      108,
      101,
      104,
      101,
      110,
      114,
      121,
      50,
      52,
      112,
      120,
      59,
      115,
      101,
      116,
      117,
      112,
      105,
      116,
      97,
      108,
      121,
      115,
      104,
      97,
      114,
      112,
      109,
      105,
      110,
      111,
      114,
      116,
      97,
      115,
      116,
      101,
      119,
      97,
      110,
      116,
      115,
      116,
      104,
      105,
      115,
      46,
      114,
      101,
      115,
      101,
      116,
      119,
      104,
      101,
      101,
      108,
      103,
      105,
      114,
      108,
      115,
      47,
      99,
      115,
      115,
      47,
      49,
      48,
      48,
      37,
      59,
      99,
      108,
      117,
      98,
      115,
      115,
      116,
      117,
      102,
      102,
      98,
      105,
      98,
      108,
      101,
      118,
      111,
      116,
      101,
      115,
      32,
      49,
      48,
      48,
      48,
      107,
      111,
      114,
      101,
      97,
      125,
      41,
      59,
      13,
      10,
      98,
      97,
      110,
      100,
      115,
      113,
      117,
      101,
      117,
      101,
      61,
      32,
      123,
      125,
      59,
      56,
      48,
      112,
      120,
      59,
      99,
      107,
      105,
      110,
      103,
      123,
      13,
      10,
      9,
      9,
      97,
      104,
      101,
      97,
      100,
      99,
      108,
      111,
      99,
      107,
      105,
      114,
      105,
      115,
      104,
      108,
      105,
      107,
      101,
      32,
      114,
      97,
      116,
      105,
      111,
      115,
      116,
      97,
      116,
      115,
      70,
      111,
      114,
      109,
      34,
      121,
      97,
      104,
      111,
      111,
      41,
      91,
      48,
      93,
      59,
      65,
      98,
      111,
      117,
      116,
      102,
      105,
      110,
      100,
      115,
      60,
      47,
      104,
      49,
      62,
      100,
      101,
      98,
      117,
      103,
      116,
      97,
      115,
      107,
      115,
      85,
      82,
      76,
      32,
      61,
      99,
      101,
      108,
      108,
      115,
      125,
      41,
      40,
      41,
      59,
      49,
      50,
      112,
      120,
      59,
      112,
      114,
      105,
      109,
      101,
      116,
      101,
      108,
      108,
      115,
      116,
      117,
      114,
      110,
      115,
      48,
      120,
      54,
      48,
      48,
      46,
      106,
      112,
      103,
      34,
      115,
      112,
      97,
      105,
      110,
      98,
      101,
      97,
      99,
      104,
      116,
      97,
      120,
      101,
      115,
      109,
      105,
      99,
      114,
      111,
      97,
      110,
      103,
      101,
      108,
      45,
      45,
      62,
      60,
      47,
      103,
      105,
      102,
      116,
      115,
      115,
      116,
      101,
      118,
      101,
      45,
      108,
      105,
      110,
      107,
      98,
      111,
      100,
      121,
      46,
      125,
      41,
      59,
      10,
      9,
      109,
      111,
      117,
      110,
      116,
      32,
      40,
      49,
      57,
      57,
      70,
      65,
      81,
      60,
      47,
      114,
      111,
      103,
      101,
      114,
      102,
      114,
      97,
      110,
      107,
      67,
      108,
      97,
      115,
      115,
      50,
      56,
      112,
      120,
      59,
      102,
      101,
      101,
      100,
      115,
      60,
      104,
      49,
      62,
      60,
      115,
      99,
      111,
      116,
      116,
      116,
      101,
      115,
      116,
      115,
      50,
      50,
      112,
      120,
      59,
      100,
      114,
      105,
      110,
      107,
      41,
      32,
      124,
      124,
      32,
      108,
      101,
      119,
      105,
      115,
      115,
      104,
      97,
      108,
      108,
      35,
      48,
      51,
      57,
      59,
      32,
      102,
      111,
      114,
      32,
      108,
      111,
      118,
      101,
      100,
      119,
      97,
      115,
      116,
      101,
      48,
      48,
      112,
      120,
      59,
      106,
      97,
      58,
      227,
      130,
      115,
      105,
      109,
      111,
      110,
      60,
      102,
      111,
      110,
      116,
      114,
      101,
      112,
      108,
      121,
      109,
      101,
      101,
      116,
      115,
      117,
      110,
      116,
      101,
      114,
      99,
      104,
      101,
      97,
      112,
      116,
      105,
      103,
      104,
      116,
      66,
      114,
      97,
      110,
      100,
      41,
      32,
      33,
      61,
      32,
      100,
      114,
      101,
      115,
      115,
      99,
      108,
      105,
      112,
      115,
      114,
      111,
      111,
      109,
      115,
      111,
      110,
      107,
      101,
      121,
      109,
      111,
      98,
      105,
      108,
      109,
      97,
      105,
      110,
      46,
      78,
      97,
      109,
      101,
      32,
      112,
      108,
      97,
      116,
      101,
      102,
      117,
      110,
      110,
      121,
      116,
      114,
      101,
      101,
      115,
      99,
      111,
      109,
      47,
      34,
      49,
      46,
      106,
      112,
      103,
      119,
      109,
      111,
      100,
      101,
      112,
      97,
      114,
      97,
      109,
      83,
      84,
      65,
      82,
      84,
      108,
      101,
      102,
      116,
      32,
      105,
      100,
      100,
      101,
      110,
      44,
      32,
      50,
      48,
      49,
      41,
      59,
      10,
      125,
      10,
      102,
      111,
      114,
      109,
      46,
      118,
      105,
      114,
      117,
      115,
      99,
      104,
      97,
      105,
      114,
      116,
      114,
      97,
      110,
      115,
      119,
      111,
      114,
      115,
      116,
      80,
      97,
      103,
      101,
      115,
      105,
      116,
      105,
      111,
      110,
      112,
      97,
      116,
      99,
      104,
      60,
      33,
      45,
      45,
      10,
      111,
      45,
      99,
      97,
      99,
      102,
      105,
      114,
      109,
      115,
      116,
      111,
      117,
      114,
      115,
      44,
      48,
      48,
      48,
      32,
      97,
      115,
      105,
      97,
      110,
      105,
      43,
      43,
      41,
      123,
      97,
      100,
      111,
      98,
      101,
      39,
      41,
      91,
      48,
      93,
      105,
      100,
      61,
      49,
      48,
      98,
      111,
      116,
      104,
      59,
      109,
      101,
      110,
      117,
      32,
      46,
      50,
      46,
      109,
      105,
      46,
      112,
      110,
      103,
      34,
      107,
      101,
      118,
      105,
      110,
      99,
      111,
      97,
      99,
      104,
      67,
      104,
      105,
      108,
      100,
      98,
      114,
      117,
      99,
      101,
      50,
      46,
      106,
      112,
      103,
      85,
      82,
      76,
      41,
      43,
      46,
      106,
      112,
      103,
      124,
      115,
      117,
      105,
      116,
      101,
      115,
      108,
      105,
      99,
      101,
      104,
      97,
      114,
      114,
      121,
      49,
      50,
      48,
      34,
      32,
      115,
      119,
      101,
      101,
      116,
      116,
      114,
      62,
      13,
      10,
      110,
      97,
      109,
      101,
      61,
      100,
      105,
      101,
      103,
      111,
      112,
      97,
      103,
      101,
      32,
      115,
      119,
      105,
      115,
      115,
      45,
      45,
      62,
      10,
      10,
      35,
      102,
      102,
      102,
      59,
      34,
      62,
      76,
      111,
      103,
      46,
      99,
      111,
      109,
      34,
      116,
      114,
      101,
      97,
      116,
      115,
      104,
      101,
      101,
      116,
      41,
      32,
      38,
      38,
      32,
      49,
      52,
      112,
      120,
      59,
      115,
      108,
      101,
      101,
      112,
      110,
      116,
      101,
      110,
      116,
      102,
      105,
      108,
      101,
      100,
      106,
      97,
      58,
      227,
      131,
      105,
      100,
      61,
      34,
      99,
      78,
      97,
      109,
      101,
      34,
      119,
      111,
      114,
      115,
      101,
      115,
      104,
      111,
      116,
      115,
      45,
      98,
      111,
      120,
      45,
      100,
      101,
      108,
      116,
      97,
      10,
      38,
      108,
      116,
      59,
      98,
      101,
      97,
      114,
      115,
      58,
      52,
      56,
      90,
      60,
      100,
      97,
      116,
      97,
      45,
      114,
      117,
      114,
      97,
      108,
      60,
      47,
      97,
      62,
      32,
      115,
      112,
      101,
      110,
      100,
      98,
      97,
      107,
      101,
      114,
      115,
      104,
      111,
      112,
      115,
      61,
      32,
      34,
      34,
      59,
      112,
      104,
      112,
      34,
      62,
      99,
      116,
      105,
      111,
      110,
      49,
      51,
      112,
      120,
      59,
      98,
      114,
      105,
      97,
      110,
      104,
      101,
      108,
      108,
      111,
      115,
      105,
      122,
      101,
      61,
      111,
      61,
      37,
      50,
      70,
      32,
      106,
      111,
      105,
      110,
      109,
      97,
      121,
      98,
      101,
      60,
      105,
      109,
      103,
      32,
      105,
      109,
      103,
      34,
      62,
      44,
      32,
      102,
      106,
      115,
      105,
      109,
      103,
      34,
      32,
      34,
      41,
      91,
      48,
      93,
      77,
      84,
      111,
      112,
      66,
      84,
      121,
      112,
      101,
      34,
      110,
      101,
      119,
      108,
      121,
      68,
      97,
      110,
      115,
      107,
      99,
      122,
      101,
      99,
      104,
      116,
      114,
      97,
      105,
      108,
      107,
      110,
      111,
      119,
      115,
      60,
      47,
      104,
      53,
      62,
      102,
      97,
      113,
      34,
      62,
      122,
      104,
      45,
      99,
      110,
      49,
      48,
      41,
      59,
      10,
      45,
      49,
      34,
      41,
      59,
      116,
      121,
      112,
      101,
      61,
      98,
      108,
      117,
      101,
      115,
      116,
      114,
      117,
      108,
      121,
      100,
      97,
      118,
      105,
      115,
      46,
      106,
      115,
      39,
      59,
      62,
      13,
      10,
      60,
      33,
      115,
      116,
      101,
      101,
      108,
      32,
      121,
      111,
      117,
      32,
      104,
      50,
      62,
      13,
      10,
      102,
      111,
      114,
      109,
      32,
      106,
      101,
      115,
      117,
      115,
      49,
      48,
      48,
      37,
      32,
      109,
      101,
      110,
      117,
      46,
      13,
      10,
      9,
      13,
      10,
      119,
      97,
      108,
      101,
      115,
      114,
      105,
      115,
      107,
      115,
      117,
      109,
      101,
      110,
      116,
      100,
      100,
      105,
      110,
      103,
      98,
      45,
      108,
      105,
      107,
      116,
      101,
      97,
      99,
      104,
      103,
      105,
      102,
      34,
      32,
      118,
      101,
      103,
      97,
      115,
      100,
      97,
      110,
      115,
      107,
      101,
      101,
      115,
      116,
      105,
      115,
      104,
      113,
      105,
      112,
      115,
      117,
      111,
      109,
      105,
      115,
      111,
      98,
      114,
      101,
      100,
      101,
      115,
      100,
      101,
      101,
      110,
      116,
      114,
      101,
      116,
      111,
      100,
      111,
      115,
      112,
      117,
      101,
      100,
      101,
      97,
      195,
      177,
      111,
      115,
      101,
      115,
      116,
      195,
      161,
      116,
      105,
      101,
      110,
      101,
      104,
      97,
      115,
      116,
      97,
      111,
      116,
      114,
      111,
      115,
      112,
      97,
      114,
      116,
      101,
      100,
      111,
      110,
      100,
      101,
      110,
      117,
      101,
      118,
      111,
      104,
      97,
      99,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      109,
      105,
      115,
      109,
      111,
      109,
      101,
      106,
      111,
      114,
      109,
      117,
      110,
      100,
      111,
      97,
      113,
      117,
      195,
      173,
      100,
      195,
      173,
      97,
      115,
      115,
      195,
      179,
      108,
      111,
      97,
      121,
      117,
      100,
      97,
      102,
      101,
      99,
      104,
      97,
      116,
      111,
      100,
      97,
      115,
      116,
      97,
      110,
      116,
      111,
      109,
      101,
      110,
      111,
      115,
      100,
      97,
      116,
      111,
      115,
      111,
      116,
      114,
      97,
      115,
      115,
      105,
      116,
      105,
      111,
      109,
      117,
      99,
      104,
      111,
      97,
      104,
      111,
      114,
      97,
      108,
      117,
      103,
      97,
      114,
      109,
      97,
      121,
      111,
      114,
      101,
      115,
      116,
      111,
      115,
      104,
      111,
      114,
      97,
      115,
      116,
      101,
      110,
      101,
      114,
      97,
      110,
      116,
      101,
      115,
      102,
      111,
      116,
      111,
      115,
      101,
      115,
      116,
      97,
      115,
      112,
      97,
      195,
      173,
      115,
      110,
      117,
      101,
      118,
      97,
      115,
      97,
      108,
      117,
      100,
      102,
      111,
      114,
      111,
      115,
      109,
      101,
      100,
      105,
      111,
      113,
      117,
      105,
      101,
      110,
      109,
      101,
      115,
      101,
      115,
      112,
      111,
      100,
      101,
      114,
      99,
      104,
      105,
      108,
      101,
      115,
      101,
      114,
      195,
      161,
      118,
      101,
      99,
      101,
      115,
      100,
      101,
      99,
      105,
      114,
      106,
      111,
      115,
      195,
      169,
      101,
      115,
      116,
      97,
      114,
      118,
      101,
      110,
      116,
      97,
      103,
      114,
      117,
      112,
      111,
      104,
      101,
      99,
      104,
      111,
      101,
      108,
      108,
      111,
      115,
      116,
      101,
      110,
      103,
      111,
      97,
      109,
      105,
      103,
      111,
      99,
      111,
      115,
      97,
      115,
      110,
      105,
      118,
      101,
      108,
      103,
      101,
      110,
      116,
      101,
      109,
      105,
      115,
      109,
      97,
      97,
      105,
      114,
      101,
      115,
      106,
      117,
      108,
      105,
      111,
      116,
      101,
      109,
      97,
      115,
      104,
      97,
      99,
      105,
      97,
      102,
      97,
      118,
      111,
      114,
      106,
      117,
      110,
      105,
      111,
      108,
      105,
      98,
      114,
      101,
      112,
      117,
      110,
      116,
      111,
      98,
      117,
      101,
      110,
      111,
      97,
      117,
      116,
      111,
      114,
      97,
      98,
      114,
      105,
      108,
      98,
      117,
      101,
      110,
      97,
      116,
      101,
      120,
      116,
      111,
      109,
      97,
      114,
      122,
      111,
      115,
      97,
      98,
      101,
      114,
      108,
      105,
      115,
      116,
      97,
      108,
      117,
      101,
      103,
      111,
      99,
      195,
      179,
      109,
      111,
      101,
      110,
      101,
      114,
      111,
      106,
      117,
      101,
      103,
      111,
      112,
      101,
      114,
      195,
      186,
      104,
      97,
      98,
      101,
      114,
      101,
      115,
      116,
      111,
      121,
      110,
      117,
      110,
      99,
      97,
      109,
      117,
      106,
      101,
      114,
      118,
      97,
      108,
      111,
      114,
      102,
      117,
      101,
      114,
      97,
      108,
      105,
      98,
      114,
      111,
      103,
      117,
      115,
      116,
      97,
      105,
      103,
      117,
      97,
      108,
      118,
      111,
      116,
      111,
      115,
      99,
      97,
      115,
      111,
      115,
      103,
      117,
      195,
      173,
      97,
      112,
      117,
      101,
      100,
      111,
      115,
      111,
      109,
      111,
      115,
      97,
      118,
      105,
      115,
      111,
      117,
      115,
      116,
      101,
      100,
      100,
      101,
      98,
      101,
      110,
      110,
      111,
      99,
      104,
      101,
      98,
      117,
      115,
      99,
      97,
      102,
      97,
      108,
      116,
      97,
      101,
      117,
      114,
      111,
      115,
      115,
      101,
      114,
      105,
      101,
      100,
      105,
      99,
      104,
      111,
      99,
      117,
      114,
      115,
      111,
      99,
      108,
      97,
      118,
      101,
      99,
      97,
      115,
      97,
      115,
      108,
      101,
      195,
      179,
      110,
      112,
      108,
      97,
      122,
      111,
      108,
      97,
      114,
      103,
      111,
      111,
      98,
      114,
      97,
      115,
      118,
      105,
      115,
      116,
      97,
      97,
      112,
      111,
      121,
      111,
      106,
      117,
      110,
      116,
      111,
      116,
      114,
      97,
      116,
      97,
      118,
      105,
      115,
      116,
      111,
      99,
      114,
      101,
      97,
      114,
      99,
      97,
      109,
      112,
      111,
      104,
      101,
      109,
      111,
      115,
      99,
      105,
      110,
      99,
      111,
      99,
      97,
      114,
      103,
      111,
      112,
      105,
      115,
      111,
      115,
      111,
      114,
      100,
      101,
      110,
      104,
      97,
      99,
      101,
      110,
      195,
      161,
      114,
      101,
      97,
      100,
      105,
      115,
      99,
      111,
      112,
      101,
      100,
      114,
      111,
      99,
      101,
      114,
      99,
      97,
      112,
      117,
      101,
      100,
      97,
      112,
      97,
      112,
      101,
      108,
      109,
      101,
      110,
      111,
      114,
      195,
      186,
      116,
      105,
      108,
      99,
      108,
      97,
      114,
      111,
      106,
      111,
      114,
      103,
      101,
      99,
      97,
      108,
      108,
      101,
      112,
      111,
      110,
      101,
      114,
      116,
      97,
      114,
      100,
      101,
      110,
      97,
      100,
      105,
      101,
      109,
      97,
      114,
      99,
      97,
      115,
      105,
      103,
      117,
      101,
      101,
      108,
      108,
      97,
      115,
      115,
      105,
      103,
      108,
      111,
      99,
      111,
      99,
      104,
      101,
      109,
      111,
      116,
      111,
      115,
      109,
      97,
      100,
      114,
      101,
      99,
      108,
      97,
      115,
      101,
      114,
      101,
      115,
      116,
      111,
      110,
      105,
      195,
      177,
      111,
      113,
      117,
      101,
      100,
      97,
      112,
      97,
      115,
      97,
      114,
      98,
      97,
      110,
      99,
      111,
      104,
      105,
      106,
      111,
      115,
      118,
      105,
      97,
      106,
      101,
      112,
      97,
      98,
      108,
      111,
      195,
      169,
      115,
      116,
      101,
      118,
      105,
      101,
      110,
      101,
      114,
      101,
      105,
      110,
      111,
      100,
      101,
      106,
      97,
      114,
      102,
      111,
      110,
      100,
      111,
      99,
      97,
      110,
      97,
      108,
      110,
      111,
      114,
      116,
      101,
      108,
      101,
      116,
      114,
      97,
      99,
      97,
      117,
      115,
      97,
      116,
      111,
      109,
      97,
      114,
      109,
      97,
      110,
      111,
      115,
      108,
      117,
      110,
      101,
      115,
      97,
      117,
      116,
      111,
      115,
      118,
      105,
      108,
      108,
      97,
      118,
      101,
      110,
      100,
      111,
      112,
      101,
      115,
      97,
      114,
      116,
      105,
      112,
      111,
      115,
      116,
      101,
      110,
      103,
      97,
      109,
      97,
      114,
      99,
      111,
      108,
      108,
      101,
      118,
      97,
      112,
      97,
      100,
      114,
      101,
      117,
      110,
      105,
      100,
      111,
      118,
      97,
      109,
      111,
      115,
      122,
      111,
      110,
      97,
      115,
      97,
      109,
      98,
      111,
      115,
      98,
      97,
      110,
      100,
      97,
      109,
      97,
      114,
      105,
      97,
      97,
      98,
      117,
      115,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      117,
      98,
      105,
      114,
      114,
      105,
      111,
      106,
      97,
      118,
      105,
      118,
      105,
      114,
      103,
      114,
      97,
      100,
      111,
      99,
      104,
      105,
      99,
      97,
      97,
      108,
      108,
      195,
      173,
      106,
      111,
      118,
      101,
      110,
      100,
      105,
      99,
      104,
      97,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      108,
      101,
      115,
      115,
      97,
      108,
      105,
      114,
      115,
      117,
      101,
      108,
      111,
      112,
      101,
      115,
      111,
      115,
      102,
      105,
      110,
      101,
      115,
      108,
      108,
      97,
      109,
      97,
      98,
      117,
      115,
      99,
      111,
      195,
      169,
      115,
      116,
      97,
      108,
      108,
      101,
      103,
      97,
      110,
      101,
      103,
      114,
      111,
      112,
      108,
      97,
      122,
      97,
      104,
      117,
      109,
      111,
      114,
      112,
      97,
      103,
      97,
      114,
      106,
      117,
      110,
      116,
      97,
      100,
      111,
      98,
      108,
      101,
      105,
      115,
      108,
      97,
      115,
      98,
      111,
      108,
      115,
      97,
      98,
      97,
      195,
      177,
      111,
      104,
      97,
      98,
      108,
      97,
      108,
      117,
      99,
      104,
      97,
      195,
      129,
      114,
      101,
      97,
      100,
      105,
      99,
      101,
      110,
      106,
      117,
      103,
      97,
      114,
      110,
      111,
      116,
      97,
      115,
      118,
      97,
      108,
      108,
      101,
      97,
      108,
      108,
      195,
      161,
      99,
      97,
      114,
      103,
      97,
      100,
      111,
      108,
      111,
      114,
      97,
      98,
      97,
      106,
      111,
      101,
      115,
      116,
      195,
      169,
      103,
      117,
      115,
      116,
      111,
      109,
      101,
      110,
      116,
      101,
      109,
      97,
      114,
      105,
      111,
      102,
      105,
      114,
      109,
      97,
      99,
      111,
      115,
      116,
      111,
      102,
      105,
      99,
      104,
      97,
      112,
      108,
      97,
      116,
      97,
      104,
      111,
      103,
      97,
      114,
      97,
      114,
      116,
      101,
      115,
      108,
      101,
      121,
      101,
      115,
      97,
      113,
      117,
      101,
      108,
      109,
      117,
      115,
      101,
      111,
      98,
      97,
      115,
      101,
      115,
      112,
      111,
      99,
      111,
      115,
      109,
      105,
      116,
      97,
      100,
      99,
      105,
      101,
      108,
      111,
      99,
      104,
      105,
      99,
      111,
      109,
      105,
      101,
      100,
      111,
      103,
      97,
      110,
      97,
      114,
      115,
      97,
      110,
      116,
      111,
      101,
      116,
      97,
      112,
      97,
      100,
      101,
      98,
      101,
      115,
      112,
      108,
      97,
      121,
      97,
      114,
      101,
      100,
      101,
      115,
      115,
      105,
      101,
      116,
      101,
      99,
      111,
      114,
      116,
      101,
      99,
      111,
      114,
      101,
      97,
      100,
      117,
      100,
      97,
      115,
      100,
      101,
      115,
      101,
      111,
      118,
      105,
      101,
      106,
      111,
      100,
      101,
      115,
      101,
      97,
      97,
      103,
      117,
      97,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      111,
      109,
      97,
      105,
      110,
      99,
      111,
      109,
      109,
      111,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      101,
      118,
      101,
      110,
      116,
      115,
      109,
      97,
      115,
      116,
      101,
      114,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      99,
      116,
      105,
      111,
      110,
      98,
      97,
      110,
      110,
      101,
      114,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      103,
      108,
      111,
      98,
      97,
      108,
      109,
      101,
      100,
      105,
      117,
      109,
      102,
      105,
      108,
      116,
      101,
      114,
      110,
      117,
      109,
      98,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      112,
      117,
      98,
      108,
      105,
      99,
      115,
      99,
      114,
      101,
      101,
      110,
      99,
      104,
      111,
      111,
      115,
      101,
      110,
      111,
      114,
      109,
      97,
      108,
      116,
      114,
      97,
      118,
      101,
      108,
      105,
      115,
      115,
      117,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      112,
      114,
      105,
      110,
      103,
      109,
      111,
      100,
      117,
      108,
      101,
      109,
      111,
      98,
      105,
      108,
      101,
      115,
      119,
      105,
      116,
      99,
      104,
      112,
      104,
      111,
      116,
      111,
      115,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      103,
      105,
      111,
      110,
      105,
      116,
      115,
      101,
      108,
      102,
      115,
      111,
      99,
      105,
      97,
      108,
      97,
      99,
      116,
      105,
      118,
      101,
      99,
      111,
      108,
      117,
      109,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      116,
      105,
      116,
      108,
      101,
      62,
      101,
      105,
      116,
      104,
      101,
      114,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      97,
      109,
      105,
      108,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      97,
      121,
      111,
      117,
      116,
      97,
      117,
      116,
      104,
      111,
      114,
      99,
      114,
      101,
      97,
      116,
      101,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      117,
      109,
      109,
      101,
      114,
      115,
      101,
      114,
      118,
      101,
      114,
      112,
      108,
      97,
      121,
      101,
      100,
      112,
      108,
      97,
      121,
      101,
      114,
      101,
      120,
      112,
      97,
      110,
      100,
      112,
      111,
      108,
      105,
      99,
      121,
      102,
      111,
      114,
      109,
      97,
      116,
      100,
      111,
      117,
      98,
      108,
      101,
      112,
      111,
      105,
      110,
      116,
      115,
      115,
      101,
      114,
      105,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      108,
      105,
      118,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      109,
      111,
      110,
      116,
      104,
      115,
      102,
      111,
      114,
      99,
      101,
      115,
      117,
      110,
      105,
      113,
      117,
      101,
      119,
      101,
      105,
      103,
      104,
      116,
      112,
      101,
      111,
      112,
      108,
      101,
      101,
      110,
      101,
      114,
      103,
      121,
      110,
      97,
      116,
      117,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      102,
      105,
      103,
      117,
      114,
      101,
      104,
      97,
      118,
      105,
      110,
      103,
      99,
      117,
      115,
      116,
      111,
      109,
      111,
      102,
      102,
      115,
      101,
      116,
      108,
      101,
      116,
      116,
      101,
      114,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      117,
      98,
      109,
      105,
      116,
      114,
      101,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      112,
      115,
      117,
      112,
      108,
      111,
      97,
      100,
      104,
      101,
      97,
      108,
      116,
      104,
      109,
      101,
      116,
      104,
      111,
      100,
      118,
      105,
      100,
      101,
      111,
      115,
      115,
      99,
      104,
      111,
      111,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      115,
      104,
      97,
      100,
      111,
      119,
      100,
      101,
      98,
      97,
      116,
      101,
      118,
      97,
      108,
      117,
      101,
      115,
      79,
      98,
      106,
      101,
      99,
      116,
      111,
      116,
      104,
      101,
      114,
      115,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      101,
      97,
      103,
      117,
      101,
      99,
      104,
      114,
      111,
      109,
      101,
      115,
      105,
      109,
      112,
      108,
      101,
      110,
      111,
      116,
      105,
      99,
      101,
      115,
      104,
      97,
      114,
      101,
      100,
      101,
      110,
      100,
      105,
      110,
      103,
      115,
      101,
      97,
      115,
      111,
      110,
      114,
      101,
      112,
      111,
      114,
      116,
      111,
      110,
      108,
      105,
      110,
      101,
      115,
      113,
      117,
      97,
      114,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      105,
      109,
      97,
      103,
      101,
      115,
      101,
      110,
      97,
      98,
      108,
      101,
      109,
      111,
      118,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      115,
      116,
      119,
      105,
      110,
      116,
      101,
      114,
      70,
      114,
      97,
      110,
      99,
      101,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      114,
      101,
      112,
      101,
      97,
      116,
      76,
      111,
      110,
      100,
      111,
      110,
      100,
      101,
      116,
      97,
      105,
      108,
      102,
      111,
      114,
      109,
      101,
      100,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      101,
      99,
      117,
      114,
      101,
      112,
      97,
      115,
      115,
      101,
      100,
      116,
      111,
      103,
      103,
      108,
      101,
      112,
      108,
      97,
      99,
      101,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      116,
      97,
      116,
      105,
      99,
      99,
      105,
      116,
      105,
      101,
      115,
      115,
      116,
      114,
      101,
      97,
      109,
      121,
      101,
      108,
      108,
      111,
      119,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      116,
      114,
      101,
      101,
      116,
      102,
      108,
      105,
      103,
      104,
      116,
      104,
      105,
      100,
      100,
      101,
      110,
      105,
      110,
      102,
      111,
      34,
      62,
      111,
      112,
      101,
      110,
      101,
      100,
      117,
      115,
      101,
      102,
      117,
      108,
      118,
      97,
      108,
      108,
      101,
      121,
      99,
      97,
      117,
      115,
      101,
      115,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      101,
      99,
      114,
      101,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      100,
      97,
      109,
      97,
      103,
      101,
      115,
      112,
      111,
      114,
      116,
      115,
      101,
      120,
      99,
      101,
      112,
      116,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      105,
      110,
      103,
      115,
      101,
      102,
      102,
      101,
      99,
      116,
      102,
      105,
      101,
      108,
      100,
      115,
      115,
      116,
      97,
      116,
      101,
      115,
      111,
      102,
      102,
      105,
      99,
      101,
      118,
      105,
      115,
      117,
      97,
      108,
      101,
      100,
      105,
      116,
      111,
      114,
      118,
      111,
      108,
      117,
      109,
      101,
      82,
      101,
      112,
      111,
      114,
      116,
      109,
      117,
      115,
      101,
      117,
      109,
      109,
      111,
      118,
      105,
      101,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      97,
      99,
      99,
      101,
      115,
      115,
      109,
      111,
      115,
      116,
      108,
      121,
      109,
      111,
      116,
      104,
      101,
      114,
      34,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      114,
      107,
      101,
      116,
      103,
      114,
      111,
      117,
      110,
      100,
      99,
      104,
      97,
      110,
      99,
      101,
      115,
      117,
      114,
      118,
      101,
      121,
      98,
      101,
      102,
      111,
      114,
      101,
      115,
      121,
      109,
      98,
      111,
      108,
      109,
      111,
      109,
      101,
      110,
      116,
      115,
      112,
      101,
      101,
      99,
      104,
      109,
      111,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      105,
      100,
      101,
      109,
      97,
      116,
      116,
      101,
      114,
      67,
      101,
      110,
      116,
      101,
      114,
      111,
      98,
      106,
      101,
      99,
      116,
      101,
      120,
      105,
      115,
      116,
      115,
      109,
      105,
      100,
      100,
      108,
      101,
      69,
      117,
      114,
      111,
      112,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      108,
      101,
      103,
      97,
      99,
      121,
      109,
      97,
      110,
      110,
      101,
      114,
      101,
      110,
      111,
      117,
      103,
      104,
      99,
      97,
      114,
      101,
      101,
      114,
      97,
      110,
      115,
      119,
      101,
      114,
      111,
      114,
      105,
      103,
      105,
      110,
      112,
      111,
      114,
      116,
      97,
      108,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      97,
      110,
      100,
      111,
      109,
      99,
      108,
      111,
      115,
      101,
      100,
      116,
      111,
      112,
      105,
      99,
      115,
      99,
      111,
      109,
      105,
      110,
      103,
      102,
      97,
      116,
      104,
      101,
      114,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      112,
      108,
      121,
      114,
      97,
      105,
      115,
      101,
      100,
      101,
      115,
      99,
      97,
      112,
      101,
      99,
      104,
      111,
      115,
      101,
      110,
      99,
      104,
      117,
      114,
      99,
      104,
      100,
      101,
      102,
      105,
      110,
      101,
      114,
      101,
      97,
      115,
      111,
      110,
      99,
      111,
      114,
      110,
      101,
      114,
      111,
      117,
      116,
      112,
      117,
      116,
      109,
      101,
      109,
      111,
      114,
      121,
      105,
      102,
      114,
      97,
      109,
      101,
      112,
      111,
      108,
      105,
      99,
      101,
      109,
      111,
      100,
      101,
      108,
      115,
      78,
      117,
      109,
      98,
      101,
      114,
      100,
      117,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      115,
      115,
      116,
      121,
      108,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      108,
      105,
      115,
      116,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      105,
      108,
      118,
      101,
      114,
      109,
      97,
      114,
      103,
      105,
      110,
      100,
      101,
      108,
      101,
      116,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      98,
      114,
      111,
      119,
      115,
      101,
      108,
      105,
      109,
      105,
      116,
      115,
      71,
      108,
      111,
      98,
      97,
      108,
      115,
      105,
      110,
      103,
      108,
      101,
      119,
      105,
      100,
      103,
      101,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      98,
      117,
      100,
      103,
      101,
      116,
      110,
      111,
      119,
      114,
      97,
      112,
      99,
      114,
      101,
      100,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      97,
      102,
      101,
      116,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      112,
      105,
      114,
      105,
      116,
      45,
      115,
      116,
      121,
      108,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      109,
      97,
      107,
      105,
      110,
      103,
      110,
      101,
      101,
      100,
      101,
      100,
      114,
      117,
      115,
      115,
      105,
      97,
      112,
      108,
      101,
      97,
      115,
      101,
      101,
      120,
      116,
      101,
      110,
      116,
      83,
      99,
      114,
      105,
      112,
      116,
      98,
      114,
      111,
      107,
      101,
      110,
      97,
      108,
      108,
      111,
      119,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      102,
      97,
      99,
      116,
      111,
      114,
      109,
      101,
      109,
      98,
      101,
      114,
      45,
      98,
      97,
      115,
      101,
      100,
      116,
      104,
      101,
      111,
      114,
      121,
      99,
      111,
      110,
      102,
      105,
      103,
      97,
      114,
      111,
      117,
      110,
      100,
      119,
      111,
      114,
      107,
      101,
      100,
      104,
      101,
      108,
      112,
      101,
      100,
      67,
      104,
      117,
      114,
      99,
      104,
      105,
      109,
      112,
      97,
      99,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      97,
      108,
      119,
      97,
      121,
      115,
      108,
      111,
      103,
      111,
      34,
      32,
      98,
      111,
      116,
      116,
      111,
      109,
      108,
      105,
      115,
      116,
      34,
      62,
      41,
      123,
      118,
      97,
      114,
      32,
      112,
      114,
      101,
      102,
      105,
      120,
      111,
      114,
      97,
      110,
      103,
      101,
      72,
      101,
      97,
      100,
      101,
      114,
      46,
      112,
      117,
      115,
      104,
      40,
      99,
      111,
      117,
      112,
      108,
      101,
      103,
      97,
      114,
      100,
      101,
      110,
      98,
      114,
      105,
      100,
      103,
      101,
      108,
      97,
      117,
      110,
      99,
      104,
      82,
      101,
      118,
      105,
      101,
      119,
      116,
      97,
      107,
      105,
      110,
      103,
      118,
      105,
      115,
      105,
      111,
      110,
      108,
      105,
      116,
      116,
      108,
      101,
      100,
      97,
      116,
      105,
      110,
      103,
      66,
      117,
      116,
      116,
      111,
      110,
      98,
      101,
      97,
      117,
      116,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      102,
      111,
      114,
      103,
      111,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      97,
      110,
      99,
      104,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      108,
      111,
      97,
      100,
      101,
      100,
      67,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      114,
      105,
      110,
      103,
      114,
      101,
      108,
      111,
      97,
      100,
      77,
      111,
      98,
      105,
      108,
      101,
      105,
      110,
      99,
      111,
      109,
      101,
      115,
      117,
      112,
      112,
      108,
      121,
      83,
      111,
      117,
      114,
      99,
      101,
      111,
      114,
      100,
      101,
      114,
      115,
      118,
      105,
      101,
      119,
      101,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      99,
      111,
      117,
      114,
      115,
      101,
      65,
      98,
      111,
      117,
      116,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      60,
      104,
      116,
      109,
      108,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      109,
      97,
      122,
      111,
      110,
      109,
      111,
      100,
      101,
      114,
      110,
      97,
      100,
      118,
      105,
      99,
      101,
      105,
      110,
      60,
      47,
      97,
      62,
      58,
      32,
      84,
      104,
      101,
      32,
      100,
      105,
      97,
      108,
      111,
      103,
      104,
      111,
      117,
      115,
      101,
      115,
      66,
      69,
      71,
      73,
      78,
      32,
      77,
      101,
      120,
      105,
      99,
      111,
      115,
      116,
      97,
      114,
      116,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      104,
      101,
      105,
      103,
      104,
      116,
      97,
      100,
      100,
      105,
      110,
      103,
      73,
      115,
      108,
      97,
      110,
      100,
      97,
      115,
      115,
      101,
      116,
      115,
      69,
      109,
      112,
      105,
      114,
      101,
      83,
      99,
      104,
      111,
      111,
      108,
      101,
      102,
      102,
      111,
      114,
      116,
      100,
      105,
      114,
      101,
      99,
      116,
      110,
      101,
      97,
      114,
      108,
      121,
      109,
      97,
      110,
      117,
      97,
      108,
      83,
      101,
      108,
      101,
      99,
      116,
      46,
      10,
      10,
      79,
      110,
      101,
      106,
      111,
      105,
      110,
      101,
      100,
      109,
      101,
      110,
      117,
      34,
      62,
      80,
      104,
      105,
      108,
      105,
      112,
      97,
      119,
      97,
      114,
      100,
      115,
      104,
      97,
      110,
      100,
      108,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      79,
      102,
      102,
      105,
      99,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      115,
      107,
      105,
      108,
      108,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      83,
      112,
      111,
      114,
      116,
      115,
      100,
      101,
      103,
      114,
      101,
      101,
      119,
      101,
      101,
      107,
      108,
      121,
      32,
      40,
      101,
      46,
      103,
      46,
      98,
      101,
      104,
      105,
      110,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      108,
      111,
      103,
      103,
      101,
      100,
      117,
      110,
      105,
      116,
      101,
      100,
      60,
      47,
      98,
      62,
      60,
      47,
      98,
      101,
      103,
      105,
      110,
      115,
      112,
      108,
      97,
      110,
      116,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      114,
      116,
      105,
      115,
      116,
      105,
      115,
      115,
      117,
      101,
      100,
      51,
      48,
      48,
      112,
      120,
      124,
      99,
      97,
      110,
      97,
      100,
      97,
      97,
      103,
      101,
      110,
      99,
      121,
      115,
      99,
      104,
      101,
      109,
      101,
      114,
      101,
      109,
      97,
      105,
      110,
      66,
      114,
      97,
      122,
      105,
      108,
      115,
      97,
      109,
      112,
      108,
      101,
      108,
      111,
      103,
      111,
      34,
      62,
      98,
      101,
      121,
      111,
      110,
      100,
      45,
      115,
      99,
      97,
      108,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      101,
      114,
      118,
      101,
      100,
      109,
      97,
      114,
      105,
      110,
      101,
      70,
      111,
      111,
      116,
      101,
      114,
      99,
      97,
      109,
      101,
      114,
      97,
      60,
      47,
      104,
      49,
      62,
      10,
      95,
      102,
      111,
      114,
      109,
      34,
      108,
      101,
      97,
      118,
      101,
      115,
      115,
      116,
      114,
      101,
      115,
      115,
      34,
      32,
      47,
      62,
      13,
      10,
      46,
      103,
      105,
      102,
      34,
      32,
      111,
      110,
      108,
      111,
      97,
      100,
      108,
      111,
      97,
      100,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      115,
      105,
      115,
      116,
      101,
      114,
      115,
      117,
      114,
      118,
      105,
      118,
      108,
      105,
      115,
      116,
      101,
      110,
      102,
      101,
      109,
      97,
      108,
      101,
      68,
      101,
      115,
      105,
      103,
      110,
      115,
      105,
      122,
      101,
      61,
      34,
      97,
      112,
      112,
      101,
      97,
      108,
      116,
      101,
      120,
      116,
      34,
      62,
      108,
      101,
      118,
      101,
      108,
      115,
      116,
      104,
      97,
      110,
      107,
      115,
      104,
      105,
      103,
      104,
      101,
      114,
      102,
      111,
      114,
      99,
      101,
      100,
      97,
      110,
      105,
      109,
      97,
      108,
      97,
      110,
      121,
      111,
      110,
      101,
      65,
      102,
      114,
      105,
      99,
      97,
      97,
      103,
      114,
      101,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      80,
      101,
      111,
      112,
      108,
      101,
      60,
      98,
      114,
      32,
      47,
      62,
      119,
      111,
      110,
      100,
      101,
      114,
      112,
      114,
      105,
      99,
      101,
      115,
      116,
      117,
      114,
      110,
      101,
      100,
      124,
      124,
      32,
      123,
      125,
      59,
      109,
      97,
      105,
      110,
      34,
      62,
      105,
      110,
      108,
      105,
      110,
      101,
      115,
      117,
      110,
      100,
      97,
      121,
      119,
      114,
      97,
      112,
      34,
      62,
      102,
      97,
      105,
      108,
      101,
      100,
      99,
      101,
      110,
      115,
      117,
      115,
      109,
      105,
      110,
      117,
      116,
      101,
      98,
      101,
      97,
      99,
      111,
      110,
      113,
      117,
      111,
      116,
      101,
      115,
      49,
      53,
      48,
      112,
      120,
      124,
      101,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      109,
      111,
      116,
      101,
      101,
      109,
      97,
      105,
      108,
      34,
      108,
      105,
      110,
      107,
      101,
      100,
      114,
      105,
      103,
      104,
      116,
      59,
      115,
      105,
      103,
      110,
      97,
      108,
      102,
      111,
      114,
      109,
      97,
      108,
      49,
      46,
      104,
      116,
      109,
      108,
      115,
      105,
      103,
      110,
      117,
      112,
      112,
      114,
      105,
      110,
      99,
      101,
      102,
      108,
      111,
      97,
      116,
      58,
      46,
      112,
      110,
      103,
      34,
      32,
      102,
      111,
      114,
      117,
      109,
      46,
      65,
      99,
      99,
      101,
      115,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      115,
      111,
      117,
      110,
      100,
      115,
      101,
      120,
      116,
      101,
      110,
      100,
      72,
      101,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      100,
      101,
      114,
      85,
      84,
      70,
      45,
      56,
      34,
      38,
      97,
      109,
      112,
      59,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      46,
      32,
      87,
      105,
      116,
      104,
      115,
      116,
      117,
      100,
      105,
      111,
      111,
      119,
      110,
      101,
      114,
      115,
      109,
      97,
      110,
      97,
      103,
      101,
      112,
      114,
      111,
      102,
      105,
      116,
      106,
      81,
      117,
      101,
      114,
      121,
      97,
      110,
      110,
      117,
      97,
      108,
      112,
      97,
      114,
      97,
      109,
      115,
      98,
      111,
      117,
      103,
      104,
      116,
      102,
      97,
      109,
      111,
      117,
      115,
      103,
      111,
      111,
      103,
      108,
      101,
      108,
      111,
      110,
      103,
      101,
      114,
      105,
      43,
      43,
      41,
      32,
      123,
      105,
      115,
      114,
      97,
      101,
      108,
      115,
      97,
      121,
      105,
      110,
      103,
      100,
      101,
      99,
      105,
      100,
      101,
      104,
      111,
      109,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      101,
      110,
      115,
      117,
      114,
      101,
      98,
      114,
      97,
      110,
      99,
      104,
      112,
      105,
      101,
      99,
      101,
      115,
      98,
      108,
      111,
      99,
      107,
      59,
      115,
      116,
      97,
      116,
      101,
      100,
      116,
      111,
      112,
      34,
      62,
      60,
      114,
      97,
      99,
      105,
      110,
      103,
      114,
      101,
      115,
      105,
      122,
      101,
      45,
      45,
      38,
      103,
      116,
      59,
      112,
      97,
      99,
      105,
      116,
      121,
      115,
      101,
      120,
      117,
      97,
      108,
      98,
      117,
      114,
      101,
      97,
      117,
      46,
      106,
      112,
      103,
      34,
      32,
      49,
      48,
      44,
      48,
      48,
      48,
      111,
      98,
      116,
      97,
      105,
      110,
      116,
      105,
      116,
      108,
      101,
      115,
      97,
      109,
      111,
      117,
      110,
      116,
      44,
      32,
      73,
      110,
      99,
      46,
      99,
      111,
      109,
      101,
      100,
      121,
      109,
      101,
      110,
      117,
      34,
      32,
      108,
      121,
      114,
      105,
      99,
      115,
      116,
      111,
      100,
      97,
      121,
      46,
      105,
      110,
      100,
      101,
      101,
      100,
      99,
      111,
      117,
      110,
      116,
      121,
      95,
      108,
      111,
      103,
      111,
      46,
      70,
      97,
      109,
      105,
      108,
      121,
      108,
      111,
      111,
      107,
      101,
      100,
      77,
      97,
      114,
      107,
      101,
      116,
      108,
      115,
      101,
      32,
      105,
      102,
      80,
      108,
      97,
      121,
      101,
      114,
      116,
      117,
      114,
      107,
      101,
      121,
      41,
      59,
      118,
      97,
      114,
      32,
      102,
      111,
      114,
      101,
      115,
      116,
      103,
      105,
      118,
      105,
      110,
      103,
      101,
      114,
      114,
      111,
      114,
      115,
      68,
      111,
      109,
      97,
      105,
      110,
      125,
      101,
      108,
      115,
      101,
      123,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      108,
      111,
      103,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      108,
      111,
      103,
      105,
      110,
      46,
      102,
      97,
      115,
      116,
      101,
      114,
      97,
      103,
      101,
      110,
      116,
      115,
      60,
      98,
      111,
      100,
      121,
      32,
      49,
      48,
      112,
      120,
      32,
      48,
      112,
      114,
      97,
      103,
      109,
      97,
      102,
      114,
      105,
      100,
      97,
      121,
      106,
      117,
      110,
      105,
      111,
      114,
      100,
      111,
      108,
      108,
      97,
      114,
      112,
      108,
      97,
      99,
      101,
      100,
      99,
      111,
      118,
      101,
      114,
      115,
      112,
      108,
      117,
      103,
      105,
      110,
      53,
      44,
      48,
      48,
      48,
      32,
      112,
      97,
      103,
      101,
      34,
      62,
      98,
      111,
      115,
      116,
      111,
      110,
      46,
      116,
      101,
      115,
      116,
      40,
      97,
      118,
      97,
      116,
      97,
      114,
      116,
      101,
      115,
      116,
      101,
      100,
      95,
      99,
      111,
      117,
      110,
      116,
      102,
      111,
      114,
      117,
      109,
      115,
      115,
      99,
      104,
      101,
      109,
      97,
      105,
      110,
      100,
      101,
      120,
      44,
      102,
      105,
      108,
      108,
      101,
      100,
      115,
      104,
      97,
      114,
      101,
      115,
      114,
      101,
      97,
      100,
      101,
      114,
      97,
      108,
      101,
      114,
      116,
      40,
      97,
      112,
      112,
      101,
      97,
      114,
      83,
      117,
      98,
      109,
      105,
      116,
      108,
      105,
      110,
      101,
      34,
      62,
      98,
      111,
      100,
      121,
      34,
      62,
      10,
      42,
      32,
      84,
      104,
      101,
      84,
      104,
      111,
      117,
      103,
      104,
      115,
      101,
      101,
      105,
      110,
      103,
      106,
      101,
      114,
      115,
      101,
      121,
      78,
      101,
      119,
      115,
      60,
      47,
      118,
      101,
      114,
      105,
      102,
      121,
      101,
      120,
      112,
      101,
      114,
      116,
      105,
      110,
      106,
      117,
      114,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      67,
      111,
      111,
      107,
      105,
      101,
      83,
      84,
      65,
      82,
      84,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      95,
      105,
      109,
      97,
      103,
      101,
      116,
      104,
      114,
      101,
      97,
      100,
      110,
      97,
      116,
      105,
      118,
      101,
      112,
      111,
      99,
      107,
      101,
      116,
      98,
      111,
      120,
      34,
      62,
      10,
      83,
      121,
      115,
      116,
      101,
      109,
      32,
      68,
      97,
      118,
      105,
      100,
      99,
      97,
      110,
      99,
      101,
      114,
      116,
      97,
      98,
      108,
      101,
      115,
      112,
      114,
      111,
      118,
      101,
      100,
      65,
      112,
      114,
      105,
      108,
      32,
      114,
      101,
      97,
      108,
      108,
      121,
      100,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      34,
      62,
      109,
      111,
      114,
      101,
      34,
      62,
      98,
      111,
      97,
      114,
      100,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      97,
      109,
      112,
      117,
      115,
      102,
      105,
      114,
      115,
      116,
      32,
      124,
      124,
      32,
      91,
      93,
      59,
      109,
      101,
      100,
      105,
      97,
      46,
      103,
      117,
      105,
      116,
      97,
      114,
      102,
      105,
      110,
      105,
      115,
      104,
      119,
      105,
      100,
      116,
      104,
      58,
      115,
      104,
      111,
      119,
      101,
      100,
      79,
      116,
      104,
      101,
      114,
      32,
      46,
      112,
      104,
      112,
      34,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      108,
      97,
      121,
      101,
      114,
      115,
      119,
      105,
      108,
      115,
      111,
      110,
      115,
      116,
      111,
      114,
      101,
      115,
      114,
      101,
      108,
      105,
      101,
      102,
      115,
      119,
      101,
      100,
      101,
      110,
      67,
      117,
      115,
      116,
      111,
      109,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      121,
      111,
      117,
      114,
      32,
      83,
      116,
      114,
      105,
      110,
      103,
      10,
      10,
      87,
      104,
      105,
      108,
      116,
      97,
      121,
      108,
      111,
      114,
      99,
      108,
      101,
      97,
      114,
      58,
      114,
      101,
      115,
      111,
      114,
      116,
      102,
      114,
      101,
      110,
      99,
      104,
      116,
      104,
      111,
      117,
      103,
      104,
      34,
      41,
      32,
      43,
      32,
      34,
      60,
      98,
      111,
      100,
      121,
      62,
      98,
      117,
      121,
      105,
      110,
      103,
      98,
      114,
      97,
      110,
      100,
      115,
      77,
      101,
      109,
      98,
      101,
      114,
      110,
      97,
      109,
      101,
      34,
      62,
      111,
      112,
      112,
      105,
      110,
      103,
      115,
      101,
      99,
      116,
      111,
      114,
      53,
      112,
      120,
      59,
      34,
      62,
      118,
      115,
      112,
      97,
      99,
      101,
      112,
      111,
      115,
      116,
      101,
      114,
      109,
      97,
      106,
      111,
      114,
      32,
      99,
      111,
      102,
      102,
      101,
      101,
      109,
      97,
      114,
      116,
      105,
      110,
      109,
      97,
      116,
      117,
      114,
      101,
      104,
      97,
      112,
      112,
      101,
      110,
      60,
      47,
      110,
      97,
      118,
      62,
      107,
      97,
      110,
      115,
      97,
      115,
      108,
      105,
      110,
      107,
      34,
      62,
      73,
      109,
      97,
      103,
      101,
      115,
      61,
      102,
      97,
      108,
      115,
      101,
      119,
      104,
      105,
      108,
      101,
      32,
      104,
      115,
      112,
      97,
      99,
      101,
      48,
      38,
      97,
      109,
      112,
      59,
      32,
      10,
      10,
      73,
      110,
      32,
      32,
      112,
      111,
      119,
      101,
      114,
      80,
      111,
      108,
      115,
      107,
      105,
      45,
      99,
      111,
      108,
      111,
      114,
      106,
      111,
      114,
      100,
      97,
      110,
      66,
      111,
      116,
      116,
      111,
      109,
      83,
      116,
      97,
      114,
      116,
      32,
      45,
      99,
      111,
      117,
      110,
      116,
      50,
      46,
      104,
      116,
      109,
      108,
      110,
      101,
      119,
      115,
      34,
      62,
      48,
      49,
      46,
      106,
      112,
      103,
      79,
      110,
      108,
      105,
      110,
      101,
      45,
      114,
      105,
      103,
      104,
      116,
      109,
      105,
      108,
      108,
      101,
      114,
      115,
      101,
      110,
      105,
      111,
      114,
      73,
      83,
      66,
      78,
      32,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      103,
      117,
      105,
      100,
      101,
      115,
      118,
      97,
      108,
      117,
      101,
      41,
      101,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      97,
      105,
      114,
      46,
      120,
      109,
      108,
      34,
      32,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      46,
      104,
      116,
      109,
      108,
      45,
      98,
      108,
      111,
      99,
      107,
      114,
      101,
      103,
      69,
      120,
      112,
      58,
      104,
      111,
      118,
      101,
      114,
      119,
      105,
      116,
      104,
      105,
      110,
      118,
      105,
      114,
      103,
      105,
      110,
      112,
      104,
      111,
      110,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      117,
      115,
      105,
      110,
      103,
      32,
      10,
      9,
      118,
      97,
      114,
      32,
      62,
      39,
      41,
      59,
      10,
      9,
      60,
      47,
      116,
      100,
      62,
      10,
      60,
      47,
      116,
      114,
      62,
      10,
      98,
      97,
      104,
      97,
      115,
      97,
      98,
      114,
      97,
      115,
      105,
      108,
      103,
      97,
      108,
      101,
      103,
      111,
      109,
      97,
      103,
      121,
      97,
      114,
      112,
      111,
      108,
      115,
      107,
      105,
      115,
      114,
      112,
      115,
      107,
      105,
      216,
      177,
      216,
      175,
      217,
      136,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      231,
      185,
      129,
      233,
      171,
      148,
      228,
      191,
      161,
      230,
      129,
      175,
      228,
      184,
      173,
      229,
      155,
      189,
      230,
      136,
      145,
      228,
      187,
      172,
      228,
      184,
      128,
      228,
      184,
      170,
      229,
      133,
      172,
      229,
      143,
      184,
      231,
      174,
      161,
      231,
      144,
      134,
      232,
      174,
      186,
      229,
      157,
      155,
      229,
      143,
      175,
      228,
      187,
      165,
      230,
      156,
      141,
      229,
      138,
      161,
      230,
      151,
      182,
      233,
      151,
      180,
      228,
      184,
      170,
      228,
      186,
      186,
      228,
      186,
      167,
      229,
      147,
      129,
      232,
      135,
      170,
      229,
      183,
      177,
      228,
      188,
      129,
      228,
      184,
      154,
      230,
      159,
      165,
      231,
      156,
      139,
      229,
      183,
      165,
      228,
      189,
      156,
      232,
      129,
      148,
      231,
      179,
      187,
      230,
      178,
      161,
      230,
      156,
      137,
      231,
      189,
      145,
      231,
      171,
      153,
      230,
      137,
      128,
      230,
      156,
      137,
      232,
      175,
      132,
      232,
      174,
      186,
      228,
      184,
      173,
      229,
      191,
      131,
      230,
      150,
      135,
      231,
      171,
      160,
      231,
      148,
      168,
      230,
      136,
      183,
      233,
      166,
      150,
      233,
      161,
      181,
      228,
      189,
      156,
      232,
      128,
      133,
      230,
      138,
      128,
      230,
      156,
      175,
      233,
      151,
      174,
      233,
      162,
      152,
      231,
      155,
      184,
      229,
      133,
      179,
      228,
      184,
      139,
      232,
      189,
      189,
      230,
      144,
      156,
      231,
      180,
      162,
      228,
      189,
      191,
      231,
      148,
      168,
      232,
      189,
      175,
      228,
      187,
      182,
      229,
      156,
      168,
      231,
      186,
      191,
      228,
      184,
      187,
      233,
      162,
      152,
      232,
      181,
      132,
      230,
      150,
      153,
      232,
      167,
      134,
      233,
      162,
      145,
      229,
      155,
      158,
      229,
      164,
      141,
      230,
      179,
      168,
      229,
      134,
      140,
      231,
      189,
      145,
      231,
      187,
      156,
      230,
      148,
      182,
      232,
      151,
      143,
      229,
      134,
      133,
      229,
      174,
      185,
      230,
      142,
      168,
      232,
      141,
      144,
      229,
      184,
      130,
      229,
      156,
      186,
      230,
      182,
      136,
      230,
      129,
      175,
      231,
      169,
      186,
      233,
      151,
      180,
      229,
      143,
      145,
      229,
      184,
      131,
      228,
      187,
      128,
      228,
      185,
      136,
      229,
      165,
      189,
      229,
      143,
      139,
      231,
      148,
      159,
      230,
      180,
      187,
      229,
      155,
      190,
      231,
      137,
      135,
      229,
      143,
      145,
      229,
      177,
      149,
      229,
      166,
      130,
      230,
      158,
      156,
      230,
      137,
      139,
      230,
      156,
      186,
      230,
      150,
      176,
      233,
      151,
      187,
      230,
      156,
      128,
      230,
      150,
      176,
      230,
      150,
      185,
      229,
      188,
      143,
      229,
      140,
      151,
      228,
      186,
      172,
      230,
      143,
      144,
      228,
      190,
      155,
      229,
      133,
      179,
      228,
      186,
      142,
      230,
      155,
      180,
      229,
      164,
      154,
      232,
      191,
      153,
      228,
      184,
      170,
      231,
      179,
      187,
      231,
      187,
      159,
      231,
      159,
      165,
      233,
      129,
      147,
      230,
      184,
      184,
      230,
      136,
      143,
      229,
      185,
      191,
      229,
      145,
      138,
      229,
      133,
      182,
      228,
      187,
      150,
      229,
      143,
      145,
      232,
      161,
      168,
      229,
      174,
      137,
      229,
      133,
      168,
      231,
      172,
      172,
      228,
      184,
      128,
      228,
      188,
      154,
      229,
      145,
      152,
      232,
      191,
      155,
      232,
      161,
      140,
      231,
      130,
      185,
      229,
      135,
      187,
      231,
      137,
      136,
      230,
      157,
      131,
      231,
      148,
      181,
      229,
      173,
      144,
      228,
      184,
      150,
      231,
      149,
      140,
      232,
      174,
      190,
      232,
      174,
      161,
      229,
      133,
      141,
      232,
      180,
      185,
      230,
      149,
      153,
      232,
      130,
      178,
      229,
      138,
      160,
      229,
      133,
      165,
      230,
      180,
      187,
      229,
      138,
      168,
      228,
      187,
      150,
      228,
      187,
      172,
      229,
      149,
      134,
      229,
      147,
      129,
      229,
      141,
      154,
      229,
      174,
      162,
      231,
      142,
      176,
      229,
      156,
      168,
      228,
      184,
      138,
      230,
      181,
      183,
      229,
      166,
      130,
      228,
      189,
      149,
      229,
      183,
      178,
      231,
      187,
      143,
      231,
      149,
      153,
      232,
      168,
      128,
      232,
      175,
      166,
      231,
      187,
      134,
      231,
      164,
      190,
      229,
      140,
      186,
      231,
      153,
      187,
      229,
      189,
      149,
      230,
      156,
      172,
      231,
      171,
      153,
      233,
      156,
      128,
      232,
      166,
      129,
      228,
      187,
      183,
      230,
      160,
      188,
      230,
      148,
      175,
      230,
      140,
      129,
      229,
      155,
      189,
      233,
      153,
      133,
      233,
      147,
      190,
      230,
      142,
      165,
      229,
      155,
      189,
      229,
      174,
      182,
      229,
      187,
      186,
      232,
      174,
      190,
      230,
      156,
      139,
      229,
      143,
      139,
      233,
      152,
      133,
      232,
      175,
      187,
      230,
      179,
      149,
      229,
      190,
      139,
      228,
      189,
      141,
      231,
      189,
      174,
      231,
      187,
      143,
      230,
      181,
      142,
      233,
      128,
      137,
      230,
      139,
      169,
      232,
      191,
      153,
      230,
      160,
      183,
      229,
      189,
      147,
      229,
      137,
      141,
      229,
      136,
      134,
      231,
      177,
      187,
      230,
      142,
      146,
      232,
      161,
      140,
      229,
      155,
      160,
      228,
      184,
      186,
      228,
      186,
      164,
      230,
      152,
      147,
      230,
      156,
      128,
      229,
      144,
      142,
      233,
      159,
      179,
      228,
      185,
      144,
      228,
      184,
      141,
      232,
      131,
      189,
      233,
      128,
      154,
      232,
      191,
      135,
      232,
      161,
      140,
      228,
      184,
      154,
      231,
      167,
      145,
      230,
      138,
      128,
      229,
      143,
      175,
      232,
      131,
      189,
      232,
      174,
      190,
      229,
      164,
      135,
      229,
      144,
      136,
      228,
      189,
      156,
      229,
      164,
      167,
      229,
      174,
      182,
      231,
      164,
      190,
      228,
      188,
      154,
      231,
      160,
      148,
      231,
      169,
      182,
      228,
      184,
      147,
      228,
      184,
      154,
      229,
      133,
      168,
      233,
      131,
      168,
      233,
      161,
      185,
      231,
      155,
      174,
      232,
      191,
      153,
      233,
      135,
      140,
      232,
      191,
      152,
      230,
      152,
      175,
      229,
      188,
      128,
      229,
      167,
      139,
      230,
      131,
      133,
      229,
      134,
      181,
      231,
      148,
      181,
      232,
      132,
      145,
      230,
      150,
      135,
      228,
      187,
      182,
      229,
      147,
      129,
      231,
      137,
      140,
      229,
      184,
      174,
      229,
      138,
      169,
      230,
      150,
      135,
      229,
      140,
      150,
      232,
      181,
      132,
      230,
      186,
      144,
      229,
      164,
      167,
      229,
      173,
      166,
      229,
      173,
      166,
      228,
      185,
      160,
      229,
      156,
      176,
      229,
      157,
      128,
      230,
      181,
      143,
      232,
      167,
      136,
      230,
      138,
      149,
      232,
      181,
      132,
      229,
      183,
      165,
      231,
      168,
      139,
      232,
      166,
      129,
      230,
      177,
      130,
      230,
      128,
      142,
      228,
      185,
      136,
      230,
      151,
      182,
      229,
      128,
      153,
      229,
      138,
      159,
      232,
      131,
      189,
      228,
      184,
      187,
      232,
      166,
      129,
      231,
      155,
      174,
      229,
      137,
      141,
      232,
      181,
      132,
      232,
      174,
      175,
      229,
      159,
      142,
      229,
      184,
      130,
      230,
      150,
      185,
      230,
      179,
      149,
      231,
      148,
      181,
      229,
      189,
      177,
      230,
      139,
      155,
      232,
      129,
      152,
      229,
      163,
      176,
      230,
      152,
      142,
      228,
      187,
      187,
      228,
      189,
      149,
      229,
      129,
      165,
      229,
      186,
      183,
      230,
      149,
      176,
      230,
      141,
      174,
      231,
      190,
      142,
      229,
      155,
      189,
      230,
      177,
      189,
      232,
      189,
      166,
      228,
      187,
      139,
      231,
      187,
      141,
      228,
      189,
      134,
      230,
      152,
      175,
      228,
      186,
      164,
      230,
      181,
      129,
      231,
      148,
      159,
      228,
      186,
      167,
      230,
      137,
      128,
      228,
      187,
      165,
      231,
      148,
      181,
      232,
      175,
      157,
      230,
      152,
      190,
      231,
      164,
      186,
      228,
      184,
      128,
      228,
      186,
      155,
      229,
      141,
      149,
      228,
      189,
      141,
      228,
      186,
      186,
      229,
      145,
      152,
      229,
      136,
      134,
      230,
      158,
      144,
      229,
      156,
      176,
      229,
      155,
      190,
      230,
      151,
      133,
      230,
      184,
      184,
      229,
      183,
      165,
      229,
      133,
      183,
      229,
      173,
      166,
      231,
      148,
      159,
      231,
      179,
      187,
      229,
      136,
      151,
      231,
      189,
      145,
      229,
      143,
      139,
      229,
      184,
      150,
      229,
      173,
      144,
      229,
      175,
      134,
      231,
      160,
      129,
      233,
      162,
      145,
      233,
      129,
      147,
      230,
      142,
      167,
      229,
      136,
      182,
      229,
      156,
      176,
      229,
      140,
      186,
      229,
      159,
      186,
      230,
      156,
      172,
      229,
      133,
      168,
      229,
      155,
      189,
      231,
      189,
      145,
      228,
      184,
      138,
      233,
      135,
      141,
      232,
      166,
      129,
      231,
      172,
      172,
      228,
      186,
      140,
      229,
      150,
      156,
      230,
      172,
      162,
      232,
      191,
      155,
      229,
      133,
      165,
      229,
      143,
      139,
      230,
      131,
      133,
      232,
      191,
      153,
      228,
      186,
      155,
      232,
      128,
      131,
      232,
      175,
      149,
      229,
      143,
      145,
      231,
      142,
      176,
      229,
      159,
      185,
      232,
      174,
      173,
      228,
      187,
      165,
      228,
      184,
      138,
      230,
      148,
      191,
      229,
      186,
      156,
      230,
      136,
      144,
      228,
      184,
      186,
      231,
      142,
      175,
      229,
      162,
      131,
      233,
      166,
      153,
      230,
      184,
      175,
      229,
      144,
      140,
      230,
      151,
      182,
      229,
      168,
      177,
      228,
      185,
      144,
      229,
      143,
      145,
      233,
      128,
      129,
      228,
      184,
      128,
      229,
      174,
      154,
      229,
      188,
      128,
      229,
      143,
      145,
      228,
      189,
      156,
      229,
      147,
      129,
      230,
      160,
      135,
      229,
      135,
      134,
      230,
      172,
      162,
      232,
      191,
      142,
      232,
      167,
      163,
      229,
      134,
      179,
      229,
      156,
      176,
      230,
      150,
      185,
      228,
      184,
      128,
      228,
      184,
      139,
      228,
      187,
      165,
      229,
      143,
      138,
      232,
      180,
      163,
      228,
      187,
      187,
      230,
      136,
      150,
      232,
      128,
      133,
      229,
      174,
      162,
      230,
      136,
      183,
      228,
      187,
      163,
      232,
      161,
      168,
      231,
      167,
      175,
      229,
      136,
      134,
      229,
      165,
      179,
      228,
      186,
      186,
      230,
      149,
      176,
      231,
      160,
      129,
      233,
      148,
      128,
      229,
      148,
      174,
      229,
      135,
      186,
      231,
      142,
      176,
      231,
      166,
      187,
      231,
      186,
      191,
      229,
      186,
      148,
      231,
      148,
      168,
      229,
      136,
      151,
      232,
      161,
      168,
      228,
      184,
      141,
      229,
      144,
      140,
      231,
      188,
      150,
      232,
      190,
      145,
      231,
      187,
      159,
      232,
      174,
      161,
      230,
      159,
      165,
      232,
      175,
      162,
      228,
      184,
      141,
      232,
      166,
      129,
      230,
      156,
      137,
      229,
      133,
      179,
      230,
      156,
      186,
      230,
      158,
      132,
      229,
      190,
      136,
      229,
      164,
      154,
      230,
      146,
      173,
      230,
      148,
      190,
      231,
      187,
      132,
      231,
      187,
      135,
      230,
      148,
      191,
      231,
      173,
      150,
      231,
      155,
      180,
      230,
      142,
      165,
      232,
      131,
      189,
      229,
      138,
      155,
      230,
      157,
      165,
      230,
      186,
      144,
      230,
      153,
      130,
      233,
      150,
      147,
      231,
      156,
      139,
      229,
      136,
      176,
      231,
      131,
      173,
      233,
      151,
      168,
      229,
      133,
      179,
      233,
      148,
      174,
      228,
      184,
      147,
      229,
      140,
      186,
      233,
      157,
      158,
      229,
      184,
      184,
      232,
      139,
      177,
      232,
      175,
      173,
      231,
      153,
      190,
      229,
      186,
      166,
      229,
      184,
      140,
      230,
      156,
      155,
      231,
      190,
      142,
      229,
      165,
      179,
      230,
      175,
      148,
      232,
      190,
      131,
      231,
      159,
      165,
      232,
      175,
      134,
      232,
      167,
      132,
      229,
      174,
      154,
      229,
      187,
      186,
      232,
      174,
      174,
      233,
      131,
      168,
      233,
      151,
      168,
      230,
      132,
      143,
      232,
      167,
      129,
      231,
      178,
      190,
      229,
      189,
      169,
      230,
      151,
      165,
      230,
      156,
      172,
      230,
      143,
      144,
      233,
      171,
      152,
      229,
      143,
      145,
      232,
      168,
      128,
      230,
      150,
      185,
      233,
      157,
      162,
      229,
      159,
      186,
      233,
      135,
      145,
      229,
      164,
      132,
      231,
      144,
      134,
      230,
      157,
      131,
      233,
      153,
      144,
      229,
      189,
      177,
      231,
      137,
      135,
      233,
      147,
      182,
      232,
      161,
      140,
      232,
      191,
      152,
      230,
      156,
      137,
      229,
      136,
      134,
      228,
      186,
      171,
      231,
      137,
      169,
      229,
      147,
      129,
      231,
      187,
      143,
      232,
      144,
      165,
      230,
      183,
      187,
      229,
      138,
      160,
      228,
      184,
      147,
      229,
      174,
      182,
      232,
      191,
      153,
      231,
      167,
      141,
      232,
      175,
      157,
      233,
      162,
      152,
      232,
      181,
      183,
      230,
      157,
      165,
      228,
      184,
      154,
      229,
      138,
      161,
      229,
      133,
      172,
      229,
      145,
      138,
      232,
      174,
      176,
      229,
      189,
      149,
      231,
      174,
      128,
      228,
      187,
      139,
      232,
      180,
      168,
      233,
      135,
      143,
      231,
      148,
      183,
      228,
      186,
      186,
      229,
      189,
      177,
      229,
      147,
      141,
      229,
      188,
      149,
      231,
      148,
      168,
      230,
      138,
      165,
      229,
      145,
      138,
      233,
      131,
      168,
      229,
      136,
      134,
      229,
      191,
      171,
      233,
      128,
      159,
      229,
      146,
      168,
      232,
      175,
      162,
      230,
      151,
      182,
      229,
      176,
      154,
      230,
      179,
      168,
      230,
      132,
      143,
      231,
      148,
      179,
      232,
      175,
      183,
      229,
      173,
      166,
      230,
      160,
      161,
      229,
      186,
      148,
      232,
      175,
      165,
      229,
      142,
      134,
      229,
      143,
      178,
      229,
      143,
      170,
      230,
      152,
      175,
      232,
      191,
      148,
      229,
      155,
      158,
      232,
      180,
      173,
      228,
      185,
      176,
      229,
      144,
      141,
      231,
      167,
      176,
      228,
      184,
      186,
      228,
      186,
      134,
      230,
      136,
      144,
      229,
      138,
      159,
      232,
      175,
      180,
      230,
      152,
      142,
      228,
      190,
      155,
      229,
      186,
      148,
      229,
      173,
      169,
      229,
      173,
      144,
      228,
      184,
      147,
      233,
      162,
      152,
      231,
      168,
      139,
      229,
      186,
      143,
      228,
      184,
      128,
      232,
      136,
      172,
      230,
      156,
      131,
      229,
      147,
      161,
      229,
      143,
      170,
      230,
      156,
      137,
      229,
      133,
      182,
      229,
      174,
      131,
      228,
      191,
      157,
      230,
      138,
      164,
      232,
      128,
      140,
      228,
      184,
      148,
      228,
      187,
      138,
      229,
      164,
      169,
      231,
      170,
      151,
      229,
      143,
      163,
      229,
      138,
      168,
      230,
      128,
      129,
      231,
      138,
      182,
      230,
      128,
      129,
      231,
      137,
      185,
      229,
      136,
      171,
      232,
      174,
      164,
      228,
      184,
      186,
      229,
      191,
      133,
      233,
      161,
      187,
      230,
      155,
      180,
      230,
      150,
      176,
      229,
      176,
      143,
      232,
      175,
      180,
      230,
      136,
      145,
      229,
      128,
      145,
      228,
      189,
      156,
      228,
      184,
      186,
      229,
      170,
      146,
      228,
      189,
      147,
      229,
      140,
      133,
      230,
      139,
      172,
      233,
      130,
      163,
      228,
      185,
      136,
      228,
      184,
      128,
      230,
      160,
      183,
      229,
      155,
      189,
      229,
      134,
      133,
      230,
      152,
      175,
      229,
      144,
      166,
      230,
      160,
      185,
      230,
      141,
      174,
      231,
      148,
      181,
      232,
      167,
      134,
      229,
      173,
      166,
      233,
      153,
      162,
      229,
      133,
      183,
      230,
      156,
      137,
      232,
      191,
      135,
      231,
      168,
      139,
      231,
      148,
      177,
      228,
      186,
      142,
      228,
      186,
      186,
      230,
      137,
      141,
      229,
      135,
      186,
      230,
      157,
      165,
      228,
      184,
      141,
      232,
      191,
      135,
      230,
      173,
      163,
      229,
      156,
      168,
      230,
      152,
      142,
      230,
      152,
      159,
      230,
      149,
      133,
      228,
      186,
      139,
      229,
      133,
      179,
      231,
      179,
      187,
      230,
      160,
      135,
      233,
      162,
      152,
      229,
      149,
      134,
      229,
      138,
      161,
      232,
      190,
      147,
      229,
      133,
      165,
      228,
      184,
      128,
      231,
      155,
      180,
      229,
      159,
      186,
      231,
      161,
      128,
      230,
      149,
      153,
      229,
      173,
      166,
      228,
      186,
      134,
      232,
      167,
      163,
      229,
      187,
      186,
      231,
      173,
      145,
      231,
      187,
      147,
      230,
      158,
      156,
      229,
      133,
      168,
      231,
      144,
      131,
      233,
      128,
      154,
      231,
      159,
      165,
      232,
      174,
      161,
      229,
      136,
      146,
      229,
      175,
      185,
      228,
      186,
      142,
      232,
      137,
      186,
      230,
      156,
      175,
      231,
      155,
      184,
      229,
      134,
      140,
      229,
      143,
      145,
      231,
      148,
      159,
      231,
      156,
      159,
      231,
      154,
      132,
      229,
      187,
      186,
      231,
      171,
      139,
      231,
      173,
      137,
      231,
      186,
      167,
      231,
      177,
      187,
      229,
      158,
      139,
      231,
      187,
      143,
      233,
      170,
      140,
      229,
      174,
      158,
      231,
      142,
      176,
      229,
      136,
      182,
      228,
      189,
      156,
      230,
      157,
      165,
      232,
      135,
      170,
      230,
      160,
      135,
      231,
      173,
      190,
      228,
      187,
      165,
      228,
      184,
      139,
      229,
      142,
      159,
      229,
      136,
      155,
      230,
      151,
      160,
      230,
      179,
      149,
      229,
      133,
      182,
      228,
      184,
      173,
      229,
      128,
      139,
      228,
      186,
      186,
      228,
      184,
      128,
      229,
      136,
      135,
      230,
      140,
      135,
      229,
      141,
      151,
      229,
      133,
      179,
      233,
      151,
      173,
      233,
      155,
      134,
      229,
      155,
      162,
      231,
      172,
      172,
      228,
      184,
      137,
      229,
      133,
      179,
      230,
      179,
      168,
      229,
      155,
      160,
      230,
      173,
      164,
      231,
      133,
      167,
      231,
      137,
      135,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      149,
      134,
      228,
      184,
      154,
      229,
      185,
      191,
      229,
      183,
      158,
      230,
      151,
      165,
      230,
      156,
      159,
      233,
      171,
      152,
      231,
      186,
      167,
      230,
      156,
      128,
      232,
      191,
      145,
      231,
      187,
      188,
      229,
      144,
      136,
      232,
      161,
      168,
      231,
      164,
      186,
      228,
      184,
      147,
      232,
      190,
      145,
      232,
      161,
      140,
      228,
      184,
      186,
      228,
      186,
      164,
      233,
      128,
      154,
      232,
      175,
      132,
      228,
      187,
      183,
      232,
      167,
      137,
      229,
      190,
      151,
      231,
      178,
      190,
      229,
      141,
      142,
      229,
      174,
      182,
      229,
      186,
      173,
      229,
      174,
      140,
      230,
      136,
      144,
      230,
      132,
      159,
      232,
      167,
      137,
      229,
      174,
      137,
      232,
      163,
      133,
      229,
      190,
      151,
      229,
      136,
      176,
      233,
      130,
      174,
      228,
      187,
      182,
      229,
      136,
      182,
      229,
      186,
      166,
      233,
      163,
      159,
      229,
      147,
      129,
      232,
      153,
      189,
      231,
      132,
      182,
      232,
      189,
      172,
      232,
      189,
      189,
      230,
      138,
      165,
      228,
      187,
      183,
      232,
      174,
      176,
      232,
      128,
      133,
      230,
      150,
      185,
      230,
      161,
      136,
      232,
      161,
      140,
      230,
      148,
      191,
      228,
      186,
      186,
      230,
      176,
      145,
      231,
      148,
      168,
      229,
      147,
      129,
      228,
      184,
      156,
      232,
      165,
      191,
      230,
      143,
      144,
      229,
      135,
      186,
      233,
      133,
      146,
      229,
      186,
      151,
      231,
      132,
      182,
      229,
      144,
      142,
      228,
      187,
      152,
      230,
      172,
      190,
      231,
      131,
      173,
      231,
      130,
      185,
      228,
      187,
      165,
      229,
      137,
      141,
      229,
      174,
      140,
      229,
      133,
      168,
      229,
      143,
      145,
      229,
      184,
      150,
      232,
      174,
      190,
      231,
      189,
      174,
      233,
      162,
      134,
      229,
      175,
      188,
      229,
      183,
      165,
      228,
      184,
      154,
      229,
      140,
      187,
      233,
      153,
      162,
      231,
      156,
      139,
      231,
      156,
      139,
      231,
      187,
      143,
      229,
      133,
      184,
      229,
      142,
      159,
      229,
      155,
      160,
      229,
      185,
      179,
      229,
      143,
      176,
      229,
      144,
      132,
      231,
      167,
      141,
      229,
      162,
      158,
      229,
      138,
      160,
      230,
      157,
      144,
      230,
      150,
      153,
      230,
      150,
      176,
      229,
      162,
      158,
      228,
      185,
      139,
      229,
      144,
      142,
      232,
      129,
      140,
      228,
      184,
      154,
      230,
      149,
      136,
      230,
      158,
      156,
      228,
      187,
      138,
      229,
      185,
      180,
      232,
      174,
      186,
      230,
      150,
      135,
      230,
      136,
      145,
      229,
      155,
      189,
      229,
      145,
      138,
      232,
      175,
      137,
      231,
      137,
      136,
      228,
      184,
      187,
      228,
      191,
      174,
      230,
      148,
      185,
      229,
      143,
      130,
      228,
      184,
      142,
      230,
      137,
      147,
      229,
      141,
      176,
      229,
      191,
      171,
      228,
      185,
      144,
      230,
      156,
      186,
      230,
      162,
      176,
      232,
      167,
      130,
      231,
      130,
      185,
      229,
      173,
      152,
      229,
      156,
      168,
      231,
      178,
      190,
      231,
      165,
      158,
      232,
      142,
      183,
      229,
      190,
      151,
      229,
      136,
      169,
      231,
      148,
      168,
      231,
      187,
      167,
      231,
      187,
      173,
      228,
      189,
      160,
      228,
      187,
      172,
      232,
      191,
      153,
      228,
      185,
      136,
      230,
      168,
      161,
      229,
      188,
      143,
      232,
      175,
      173,
      232,
      168,
      128,
      232,
      131,
      189,
      229,
      164,
      159,
      233,
      155,
      133,
      232,
      153,
      142,
      230,
      147,
      141,
      228,
      189,
      156,
      233,
      163,
      142,
      230,
      160,
      188,
      228,
      184,
      128,
      232,
      181,
      183,
      231,
      167,
      145,
      229,
      173,
      166,
      228,
      189,
      147,
      232,
      130,
      178,
      231,
      159,
      173,
      228,
      191,
      161,
      230,
      157,
      161,
      228,
      187,
      182,
      230,
      178,
      187,
      231,
      150,
      151,
      232,
      191,
      144,
      229,
      138,
      168,
      228,
      186,
      167,
      228,
      184,
      154,
      228,
      188,
      154,
      232,
      174,
      174,
      229,
      175,
      188,
      232,
      136,
      170,
      229,
      133,
      136,
      231,
      148,
      159,
      232,
      129,
      148,
      231,
      155,
      159,
      229,
      143,
      175,
      230,
      152,
      175,
      229,
      149,
      143,
      233,
      161,
      140,
      231,
      187,
      147,
      230,
      158,
      132,
      228,
      189,
      156,
      231,
      148,
      168,
      232,
      176,
      131,
      230,
      159,
      165,
      232,
      179,
      135,
      230,
      150,
      153,
      232,
      135,
      170,
      229,
      138,
      168,
      232,
      180,
      159,
      232,
      180,
      163,
      229,
      134,
      156,
      228,
      184,
      154,
      232,
      174,
      191,
      233,
      151,
      174,
      229,
      174,
      158,
      230,
      150,
      189,
      230,
      142,
      165,
      229,
      143,
      151,
      232,
      174,
      168,
      232,
      174,
      186,
      233,
      130,
      163,
      228,
      184,
      170,
      229,
      143,
      141,
      233,
      166,
      136,
      229,
      138,
      160,
      229,
      188,
      186,
      229,
      165,
      179,
      230,
      128,
      167,
      232,
      140,
      131,
      229,
      155,
      180,
      230,
      156,
      141,
      229,
      139,
      153,
      228,
      188,
      145,
      233,
      151,
      178,
      228,
      187,
      138,
      230,
      151,
      165,
      229,
      174,
      162,
      230,
      156,
      141,
      232,
      167,
      128,
      231,
      156,
      139,
      229,
      143,
      130,
      229,
      138,
      160,
      231,
      154,
      132,
      232,
      175,
      157,
      228,
      184,
      128,
      231,
      130,
      185,
      228,
      191,
      157,
      232,
      175,
      129,
      229,
      155,
      190,
      228,
      185,
      166,
      230,
      156,
      137,
      230,
      149,
      136,
      230,
      181,
      139,
      232,
      175,
      149,
      231,
      167,
      187,
      229,
      138,
      168,
      230,
      137,
      141,
      232,
      131,
      189,
      229,
      134,
      179,
      229,
      174,
      154,
      232,
      130,
      161,
      231,
      165,
      168,
      228,
      184,
      141,
      230,
      150,
      173,
      233,
      156,
      128,
      230,
      177,
      130,
      228,
      184,
      141,
      229,
      190,
      151,
      229,
      138,
      158,
      230,
      179,
      149,
      228,
      185,
      139,
      233,
      151,
      180,
      233,
      135,
      135,
      231,
      148,
      168,
      232,
      144,
      165,
      233,
      148,
      128,
      230,
      138,
      149,
      232,
      175,
      137,
      231,
      155,
      174,
      230,
      160,
      135,
      231,
      136,
      177,
      230,
      131,
      133,
      230,
      145,
      132,
      229,
      189,
      177,
      230,
      156,
      137,
      228,
      186,
      155,
      232,
      164,
      135,
      232,
      163,
      189,
      230,
      150,
      135,
      229,
      173,
      166,
      230,
      156,
      186,
      228,
      188,
      154,
      230,
      149,
      176,
      229,
      173,
      151,
      232,
      163,
      133,
      228,
      191,
      174,
      232,
      180,
      173,
      231,
      137,
      169,
      229,
      134,
      156,
      230,
      157,
      145,
      229,
      133,
      168,
      233,
      157,
      162,
      231,
      178,
      190,
      229,
      147,
      129,
      229,
      133,
      182,
      229,
      174,
      158,
      228,
      186,
      139,
      230,
      131,
      133,
      230,
      176,
      180,
      229,
      185,
      179,
      230,
      143,
      144,
      231,
      164,
      186,
      228,
      184,
      138,
      229,
      184,
      130,
      232,
      176,
      162,
      232,
      176,
      162,
      230,
      153,
      174,
      233,
      128,
      154,
      230,
      149,
      153,
      229,
      184,
      136,
      228,
      184,
      138,
      228,
      188,
      160,
      231,
      177,
      187,
      229,
      136,
      171,
      230,
      173,
      140,
      230,
      155,
      178,
      230,
      139,
      165,
      230,
      156,
      137,
      229,
      136,
      155,
      230,
      150,
      176,
      233,
      133,
      141,
      228,
      187,
      182,
      229,
      143,
      170,
      232,
      166,
      129,
      230,
      151,
      182,
      228,
      187,
      163,
      232,
      179,
      135,
      232,
      168,
      138,
      232,
      190,
      190,
      229,
      136,
      176,
      228,
      186,
      186,
      231,
      148,
      159,
      232,
      174,
      162,
      233,
      152,
      133,
      232,
      128,
      129,
      229,
      184,
      136,
      229,
      177,
      149,
      231,
      164,
      186,
      229,
      191,
      131,
      231,
      144,
      134,
      232,
      180,
      180,
      229,
      173,
      144,
      231,
      182,
      178,
      231,
      171,
      153,
      228,
      184,
      187,
      233,
      161,
      140,
      232,
      135,
      170,
      231,
      132,
      182,
      231,
      186,
      167,
      229,
      136,
      171,
      231,
      174,
      128,
      229,
      141,
      149,
      230,
      148,
      185,
      233,
      157,
      169,
      233,
      130,
      163,
      228,
      186,
      155,
      230,
      157,
      165,
      232,
      175,
      180,
      230,
      137,
      147,
      229,
      188,
      128,
      228,
      187,
      163,
      231,
      160,
      129,
      229,
      136,
      160,
      233,
      153,
      164,
      232,
      175,
      129,
      229,
      136,
      184,
      232,
      138,
      130,
      231,
      155,
      174,
      233,
      135,
      141,
      231,
      130,
      185,
      230,
      172,
      161,
      230,
      149,
      184,
      229,
      164,
      154,
      229,
      176,
      145,
      232,
      167,
      132,
      229,
      136,
      146,
      232,
      181,
      132,
      233,
      135,
      145,
      230,
      137,
      190,
      229,
      136,
      176,
      228,
      187,
      165,
      229,
      144,
      142,
      229,
      164,
      167,
      229,
      133,
      168,
      228,
      184,
      187,
      233,
      161,
      181,
      230,
      156,
      128,
      228,
      189,
      179,
      229,
      155,
      158,
      231,
      173,
      148,
      229,
      164,
      169,
      228,
      184,
      139,
      228,
      191,
      157,
      233,
      154,
      156,
      231,
      142,
      176,
      228,
      187,
      163,
      230,
      163,
      128,
      230,
      159,
      165,
      230,
      138,
      149,
      231,
      165,
      168,
      229,
      176,
      143,
      230,
      151,
      182,
      230,
      178,
      146,
      230,
      156,
      137,
      230,
      173,
      163,
      229,
      184,
      184,
      231,
      148,
      154,
      232,
      135,
      179,
      228,
      187,
      163,
      231,
      144,
      134,
      231,
      155,
      174,
      229,
      189,
      149,
      229,
      133,
      172,
      229,
      188,
      128,
      229,
      164,
      141,
      229,
      136,
      182,
      233,
      135,
      145,
      232,
      158,
      141,
      229,
      185,
      184,
      231,
      166,
      143,
      231,
      137,
      136,
      230,
      156,
      172,
      229,
      189,
      162,
      230,
      136,
      144,
      229,
      135,
      134,
      229,
      164,
      135,
      232,
      161,
      140,
      230,
      131,
      133,
      229,
      155,
      158,
      229,
      136,
      176,
      230,
      128,
      157,
      230,
      131,
      179,
      230,
      128,
      142,
      230,
      160,
      183,
      229,
      141,
      143,
      232,
      174,
      174,
      232,
      174,
      164,
      232,
      175,
      129,
      230,
      156,
      128,
      229,
      165,
      189,
      228,
      186,
      167,
      231,
      148,
      159,
      230,
      140,
      137,
      231,
      133,
      167,
      230,
      156,
      141,
      232,
      163,
      133,
      229,
      185,
      191,
      228,
      184,
      156,
      229,
      138,
      168,
      230,
      188,
      171,
      233,
      135,
      135,
      232,
      180,
      173,
      230,
      150,
      176,
      230,
      137,
      139,
      231,
      187,
      132,
      229,
      155,
      190,
      233,
      157,
      162,
      230,
      157,
      191,
      229,
      143,
      130,
      232,
      128,
      131,
      230,
      148,
      191,
      230,
      178,
      187,
      229,
      174,
      185,
      230,
      152,
      147,
      229,
      164,
      169,
      229,
      156,
      176,
      229,
      138,
      170,
      229,
      138,
      155,
      228,
      186,
      186,
      228,
      187,
      172,
      229,
      141,
      135,
      231,
      186,
      167,
      233,
      128,
      159,
      229,
      186,
      166,
      228,
      186,
      186,
      231,
      137,
      169,
      232,
      176,
      131,
      230,
      149,
      180,
      230,
      181,
      129,
      232,
      161,
      140,
      233,
      128,
      160,
      230,
      136,
      144,
      230,
      150,
      135,
      229,
      173,
      151,
      233,
      159,
      169,
      229,
      155,
      189,
      232,
      180,
      184,
      230,
      152,
      147,
      229,
      188,
      128,
      229,
      177,
      149,
      231,
      155,
      184,
      233,
      151,
      156,
      232,
      161,
      168,
      231,
      142,
      176,
      229,
      189,
      177,
      232,
      167,
      134,
      229,
      166,
      130,
      230,
      173,
      164,
      231,
      190,
      142,
      229,
      174,
      185,
      229,
      164,
      167,
      229,
      176,
      143,
      230,
      138,
      165,
      233,
      129,
      147,
      230,
      157,
      161,
      230,
      172,
      190,
      229,
      191,
      131,
      230,
      131,
      133,
      232,
      174,
      184,
      229,
      164,
      154,
      230,
      179,
      149,
      232,
      167,
      132,
      229,
      174,
      182,
      229,
      177,
      133,
      228,
      185,
      166,
      229,
      186,
      151,
      232,
      191,
      158,
      230,
      142,
      165,
      231,
      171,
      139,
      229,
      141,
      179,
      228,
      184,
      190,
      230,
      138,
      165,
      230,
      138,
      128,
      229,
      183,
      167,
      229,
      165,
      165,
      232,
      191,
      144,
      231,
      153,
      187,
      229,
      133,
      165,
      228,
      187,
      165,
      230,
      157,
      165,
      231,
      144,
      134,
      232,
      174,
      186,
      228,
      186,
      139,
      228,
      187,
      182,
      232,
      135,
      170,
      231,
      148,
      177,
      228,
      184,
      173,
      229,
      141,
      142,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      166,
      136,
      229,
      166,
      136,
      231,
      156,
      159,
      230,
      173,
      163,
      228,
      184,
      141,
      233,
      148,
      153,
      229,
      133,
      168,
      230,
      150,
      135,
      229,
      144,
      136,
      229,
      144,
      140,
      228,
      187,
      183,
      229,
      128,
      188,
      229,
      136,
      171,
      228,
      186,
      186,
      231,
      155,
      145,
      231,
      157,
      163,
      229,
      133,
      183,
      228,
      189,
      147,
      228,
      184,
      150,
      231,
      186,
      170,
      229,
      155,
      162,
      233,
      152,
      159,
      229,
      136,
      155,
      228,
      184,
      154,
      230,
      137,
      191,
      230,
      139,
      133,
      229,
      162,
      158,
      233,
      149,
      191,
      230,
      156,
      137,
      228,
      186,
      186,
      228,
      191,
      157,
      230,
      140,
      129,
      229,
      149,
      134,
      229,
      174,
      182,
      231,
      187,
      180,
      228,
      191,
      174,
      229,
      143,
      176,
      230,
      185,
      190,
      229,
      183,
      166,
      229,
      143,
      179,
      232,
      130,
      161,
      228,
      187,
      189,
      231,
      173,
      148,
      230,
      161,
      136,
      229,
      174,
      158,
      233,
      153,
      133,
      231,
      148,
      181,
      228,
      191,
      161,
      231,
      187,
      143,
      231,
      144,
      134,
      231,
      148,
      159,
      229,
      145,
      189,
      229,
      174,
      163,
      228,
      188,
      160,
      228,
      187,
      187,
      229,
      138,
      161,
      230,
      173,
      163,
      229,
      188,
      143,
      231,
      137,
      185,
      232,
      137,
      178,
      228,
      184,
      139,
      230,
      157,
      165,
      229,
      141,
      143,
      228,
      188,
      154,
      229,
      143,
      170,
      232,
      131,
      189,
      229,
      189,
      147,
      231,
      132,
      182,
      233,
      135,
      141,
      230,
      150,
      176,
      229,
      133,
      167,
      229,
      174,
      185,
      230,
      140,
      135,
      229,
      175,
      188,
      232,
      191,
      144,
      232,
      161,
      140,
      230,
      151,
      165,
      229,
      191,
      151,
      232,
      179,
      163,
      229,
      174,
      182,
      232,
      182,
      133,
      232,
      191,
      135,
      229,
      156,
      159,
      229,
      156,
      176,
      230,
      181,
      153,
      230,
      177,
      159,
      230,
      148,
      175,
      228,
      187,
      152,
      230,
      142,
      168,
      229,
      135,
      186,
      231,
      171,
      153,
      233,
      149,
      191,
      230,
      157,
      173,
      229,
      183,
      158,
      230,
      137,
      167,
      232,
      161,
      140,
      229,
      136,
      182,
      233,
      128,
      160,
      228,
      185,
      139,
      228,
      184,
      128,
      230,
      142,
      168,
      229,
      185,
      191,
      231,
      142,
      176,
      229,
      156,
      186,
      230,
      143,
      143,
      232,
      191,
      176,
      229,
      143,
      152,
      229,
      140,
      150,
      228,
      188,
      160,
      231,
      187,
      159,
      230,
      173,
      140,
      230,
      137,
      139,
      228,
      191,
      157,
      233,
      153,
      169,
      232,
      175,
      190,
      231,
      168,
      139,
      229,
      140,
      187,
      231,
      150,
      151,
      231,
      187,
      143,
      232,
      191,
      135,
      232,
      191,
      135,
      229,
      142,
      187,
      228,
      185,
      139,
      229,
      137,
      141,
      230,
      148,
      182,
      229,
      133,
      165,
      229,
      185,
      180,
      229,
      186,
      166,
      230,
      157,
      130,
      229,
      191,
      151,
      231,
      190,
      142,
      228,
      184,
      189,
      230,
      156,
      128,
      233,
      171,
      152,
      231,
      153,
      187,
      233,
      153,
      134,
      230,
      156,
      170,
      230,
      157,
      165,
      229,
      138,
      160,
      229,
      183,
      165,
      229,
      133,
      141,
      232,
      180,
      163,
      230,
      149,
      153,
      231,
      168,
      139,
      231,
      137,
      136,
      229,
      157,
      151,
      232,
      186,
      171,
      228,
      189,
      147,
      233,
      135,
      141,
      229,
      186,
      134,
      229,
      135,
      186,
      229,
      148,
      174,
      230,
      136,
      144,
      230,
      156,
      172,
      229,
      189,
      162,
      229,
      188,
      143,
      229,
      156,
      159,
      232,
      177,
      134,
      229,
      135,
      186,
      229,
      131,
      185,
      228,
      184,
      156,
      230,
      150,
      185,
      233,
      130,
      174,
      231,
      174,
      177,
      229,
      141,
      151,
      228,
      186,
      172,
      230,
      177,
      130,
      232,
      129,
      140,
      229,
      143,
      150,
      229,
      190,
      151,
      232,
      129,
      140,
      228,
      189,
      141,
      231,
      155,
      184,
      228,
      191,
      161,
      233,
      161,
      181,
      233,
      157,
      162,
      229,
      136,
      134,
      233,
      146,
      159,
      231,
      189,
      145,
      233,
      161,
      181,
      231,
      161,
      174,
      229,
      174,
      154,
      229,
      155,
      190,
      228,
      190,
      139,
      231,
      189,
      145,
      229,
      157,
      128,
      231,
      167,
      175,
      230,
      158,
      129,
      233,
      148,
      153,
      232,
      175,
      175,
      231,
      155,
      174,
      231,
      154,
      132,
      229,
      174,
      157,
      232,
      180,
      157,
      230,
      156,
      186,
      229,
      133,
      179,
      233,
      163,
      142,
      233,
      153,
      169,
      230,
      142,
      136,
      230,
      157,
      131,
      231,
      151,
      133,
      230,
      175,
      146,
      229,
      174,
      160,
      231,
      137,
      169,
      233,
      153,
      164,
      228,
      186,
      134,
      232,
      169,
      149,
      232,
      171,
      150,
      231,
      150,
      190,
      231,
      151,
      133,
      229,
      143,
      138,
      230,
      151,
      182,
      230,
      177,
      130,
      232,
      180,
      173,
      231,
      171,
      153,
      231,
      130,
      185,
      229,
      132,
      191,
      231,
      171,
      165,
      230,
      175,
      143,
      229,
      164,
      169,
      228,
      184,
      173,
      229,
      164,
      174,
      232,
      174,
      164,
      232,
      175,
      134,
      230,
      175,
      143,
      228,
      184,
      170,
      229,
      164,
      169,
      230,
      180,
      165,
      229,
      173,
      151,
      228,
      189,
      147,
      229,
      143,
      176,
      231,
      129,
      163,
      231,
      187,
      180,
      230,
      138,
      164,
      230,
      156,
      172,
      233,
      161,
      181,
      228,
      184,
      170,
      230,
      128,
      167,
      229,
      174,
      152,
      230,
      150,
      185,
      229,
      184,
      184,
      232,
      167,
      129,
      231,
      155,
      184,
      230,
      156,
      186,
      230,
      136,
      152,
      231,
      149,
      165,
      229,
      186,
      148,
      229,
      189,
      147,
      229,
      190,
      139,
      229,
      184,
      136,
      230,
      150,
      185,
      228,
      190,
      191,
      230,
      160,
      161,
      229,
      155,
      173,
      232,
      130,
      161,
      229,
      184,
      130,
      230,
      136,
      191,
      229,
      177,
      139,
      230,
      160,
      143,
      231,
      155,
      174,
      229,
      145,
      152,
      229,
      183,
      165,
      229,
      175,
      188,
      232,
      135,
      180,
      231,
      170,
      129,
      231,
      132,
      182,
      233,
      129,
      147,
      229,
      133,
      183,
      230,
      156,
      172,
      231,
      189,
      145,
      231,
      187,
      147,
      229,
      144,
      136,
      230,
      161,
      163,
      230,
      161,
      136,
      229,
      138,
      179,
      229,
      138,
      168,
      229,
      143,
      166,
      229,
      164,
      150,
      231,
      190,
      142,
      229,
      133,
      131,
      229,
      188,
      149,
      232,
      181,
      183,
      230,
      148,
      185,
      229,
      143,
      152,
      231,
      172,
      172,
      229,
      155,
      155,
      228,
      188,
      154,
      232,
      174,
      161,
      232,
      170,
      170,
      230,
      152,
      142,
      233,
      154,
      144,
      231,
      167,
      129,
      229,
      174,
      157,
      229,
      174,
      157,
      232,
      167,
      132,
      232,
      140,
      131,
      230,
      182,
      136,
      232,
      180,
      185,
      229,
      133,
      177,
      229,
      144,
      140,
      229,
      191,
      152,
      232,
      174,
      176,
      228,
      189,
      147,
      231,
      179,
      187,
      229,
      184,
      166,
      230,
      157,
      165,
      229,
      144,
      141,
      229,
      173,
      151,
      231,
      153,
      188,
      232,
      161,
      168,
      229,
      188,
      128,
      230,
      148,
      190,
      229,
      138,
      160,
      231,
      155,
      159,
      229,
      143,
      151,
      229,
      136,
      176,
      228,
      186,
      140,
      230,
      137,
      139,
      229,
      164,
      167,
      233,
      135,
      143,
      230,
      136,
      144,
      228,
      186,
      186,
      230,
      149,
      176,
      233,
      135,
      143,
      229,
      133,
      177,
      228,
      186,
      171,
      229,
      140,
      186,
      229,
      159,
      159,
      229,
      165,
      179,
      229,
      173,
      169,
      229,
      142,
      159,
      229,
      136,
      153,
      230,
      137,
      128,
      229,
      156,
      168,
      231,
      187,
      147,
      230,
      157,
      159,
      233,
      128,
      154,
      228,
      191,
      161,
      232,
      182,
      133,
      231,
      186,
      167,
      233,
      133,
      141,
      231,
      189,
      174,
      229,
      189,
      147,
      230,
      151,
      182,
      228,
      188,
      152,
      231,
      167,
      128,
      230,
      128,
      167,
      230,
      132,
      159,
      230,
      136,
      191,
      228,
      186,
      167,
      233,
      129,
      138,
      230,
      136,
      178,
      229,
      135,
      186,
      229,
      143,
      163,
      230,
      143,
      144,
      228,
      186,
      164,
      229,
      176,
      177,
      228,
      184,
      154,
      228,
      191,
      157,
      229,
      129,
      165,
      231,
      168,
      139,
      229,
      186,
      166,
      229,
      143,
      130,
      230,
      149,
      176,
      228,
      186,
      139,
      228,
      184,
      154,
      230,
      149,
      180,
      228,
      184,
      170,
      229,
      177,
      177,
      228,
      184,
      156,
      230,
      131,
      133,
      230,
      132,
      159,
      231,
      137,
      185,
      230,
      174,
      138,
      229,
      136,
      134,
      233,
      161,
      158,
      230,
      144,
      156,
      229,
      176,
      139,
      229,
      177,
      158,
      228,
      186,
      142,
      233,
      151,
      168,
      230,
      136,
      183,
      232,
      180,
      162,
      229,
      138,
      161,
      229,
      163,
      176,
      233,
      159,
      179,
      229,
      143,
      138,
      229,
      133,
      182,
      232,
      180,
      162,
      231,
      187,
      143,
      229,
      157,
      154,
      230,
      140,
      129,
      229,
      185,
      178,
      233,
      131,
      168,
      230,
      136,
      144,
      231,
      171,
      139,
      229,
      136,
      169,
      231,
      155,
      138,
      232,
      128,
      131,
      232,
      153,
      145,
      230,
      136,
      144,
      233,
      131,
      189,
      229,
      140,
      133,
      232,
      163,
      133,
      231,
      148,
      168,
      230,
      136,
      182,
      230,
      175,
      148,
      232,
      181,
      155,
      230,
      150,
      135,
      230,
      152,
      142,
      230,
      139,
      155,
      229,
      149,
      134,
      229,
      174,
      140,
      230,
      149,
      180,
      231,
      156,
      159,
      230,
      152,
      175,
      231,
      156,
      188,
      231,
      157,
      155,
      228,
      188,
      153,
      228,
      188,
      180,
      229,
      168,
      129,
      230,
      156,
      155,
      233,
      162,
      134,
      229,
      159,
      159,
      229,
      141,
      171,
      231,
      148,
      159,
      228,
      188,
      152,
      230,
      131,
      160,
      232,
      171,
      150,
      229,
      163,
      135,
      229,
      133,
      172,
      229,
      133,
      177,
      232,
      137,
      175,
      229,
      165,
      189,
      229,
      133,
      133,
      229,
      136,
      134,
      231,
      172,
      166,
      229,
      144,
      136,
      233,
      153,
      132,
      228,
      187,
      182,
      231,
      137,
      185,
      231,
      130,
      185,
      228,
      184,
      141,
      229,
      143,
      175,
      232,
      139,
      177,
      230,
      150,
      135,
      232,
      181,
      132,
      228,
      186,
      167,
      230,
      160,
      185,
      230,
      156,
      172,
      230,
      152,
      142,
      230,
      152,
      190,
      229,
      175,
      134,
      231,
      162,
      188,
      229,
      133,
      172,
      228,
      188,
      151,
      230,
      176,
      145,
      230,
      151,
      143,
      230,
      155,
      180,
      229,
      138,
      160,
      228,
      186,
      171,
      229,
      143,
      151,
      229,
      144,
      140,
      229,
      173,
      166,
      229,
      144,
      175,
      229,
      138,
      168,
      233,
      128,
      130,
      229,
      144,
      136,
      229,
      142,
      159,
      230,
      157,
      165,
      233,
      151,
      174,
      231,
      173,
      148,
      230,
      156,
      172,
      230,
      150,
      135,
      231,
      190,
      142,
      233,
      163,
      159,
      231,
      187,
      191,
      232,
      137,
      178,
      231,
      168,
      179,
      229,
      174,
      154,
      231,
      187,
      136,
      228,
      186,
      142,
      231,
      148,
      159,
      231,
      137,
      169,
      228,
      190,
      155,
      230,
      177,
      130,
      230,
      144,
      156,
      231,
      139,
      144,
      229,
      138,
      155,
      233,
      135,
      143,
      228,
      184,
      165,
      233,
      135,
      141,
      230,
      176,
      184,
      232,
      191,
      156,
      229,
      134,
      153,
      231,
      156,
      159,
      230,
      156,
      137,
      233,
      153,
      144,
      231,
      171,
      158,
      228,
      186,
      137,
      229,
      175,
      185,
      232,
      177,
      161,
      232,
      180,
      185,
      231,
      148,
      168,
      228,
      184,
      141,
      229,
      165,
      189,
      231,
      187,
      157,
      229,
      175,
      185,
      229,
      141,
      129,
      229,
      136,
      134,
      228,
      191,
      131,
      232,
      191,
      155,
      231,
      130,
      185,
      232,
      175,
      132,
      229,
      189,
      177,
      233,
      159,
      179,
      228,
      188,
      152,
      229,
      138,
      191,
      228,
      184,
      141,
      229,
      176,
      145,
      230,
      172,
      163,
      232,
      181,
      143,
      229,
      185,
      182,
      228,
      184,
      148,
      230,
      156,
      137,
      231,
      130,
      185,
      230,
      150,
      185,
      229,
      144,
      145,
      229,
      133,
      168,
      230,
      150,
      176,
      228,
      191,
      161,
      231,
      148,
      168,
      232,
      174,
      190,
      230,
      150,
      189,
      229,
      189,
      162,
      232,
      177,
      161,
      232,
      181,
      132,
      230,
      160,
      188,
      231,
      170,
      129,
      231,
      160,
      180,
      233,
      154,
      143,
      231,
      157,
      128,
      233,
      135,
      141,
      229,
      164,
      167,
      228,
      186,
      142,
      230,
      152,
      175,
      230,
      175,
      149,
      228,
      184,
      154,
      230,
      153,
      186,
      232,
      131,
      189,
      229,
      140,
      150,
      229,
      183,
      165,
      229,
      174,
      140,
      231,
      190,
      142,
      229,
      149,
      134,
      229,
      159,
      142,
      231,
      187,
      159,
      228,
      184,
      128,
      229,
      135,
      186,
      231,
      137,
      136,
      230,
      137,
      147,
      233,
      128,
      160,
      231,
      148,
      162,
      229,
      147,
      129,
      230,
      166,
      130,
      229,
      134,
      181,
      231,
      148,
      168,
      228,
      186,
      142,
      228,
      191,
      157,
      231,
      149,
      153,
      229,
      155,
      160,
      231,
      180,
      160,
      228,
      184,
      173,
      229,
      156,
      139,
      229,
      173,
      152,
      229,
      130,
      168,
      232,
      180,
      180,
      229,
      155,
      190,
      230,
      156,
      128,
      230,
      132,
      155,
      233,
      149,
      191,
      230,
      156,
      159,
      229,
      143,
      163,
      228,
      187,
      183,
      231,
      144,
      134,
      232,
      180,
      162,
      229,
      159,
      186,
      229,
      156,
      176,
      229,
      174,
      137,
      230,
      142,
      146,
      230,
      173,
      166,
      230,
      177,
      137,
      233,
      135,
      140,
      233,
      157,
      162,
      229,
      136,
      155,
      229,
      187,
      186,
      229,
      164,
      169,
      231,
      169,
      186,
      233,
      166,
      150,
      229,
      133,
      136,
      229,
      174,
      140,
      229,
      150,
      132,
      233,
      169,
      177,
      229,
      138,
      168,
      228,
      184,
      139,
      233,
      157,
      162,
      228,
      184,
      141,
      229,
      134,
      141,
      232,
      175,
      154,
      228,
      191,
      161,
      230,
      132,
      143,
      228,
      185,
      137,
      233,
      152,
      179,
      229,
      133,
      137,
      232,
      139,
      177,
      229,
      155,
      189,
      230,
      188,
      130,
      228,
      186,
      174,
      229,
      134,
      155,
      228,
      186,
      139,
      231,
      142,
      169,
      229,
      174,
      182,
      231,
      190,
      164,
      228,
      188,
      151,
      229,
      134,
      156,
      230,
      176,
      145,
      229,
      141,
      179,
      229,
      143,
      175,
      229,
      144,
      141,
      231,
      168,
      177,
      229,
      174,
      182,
      229,
      133,
      183,
      229,
      138,
      168,
      231,
      148,
      187,
      230,
      131,
      179,
      229,
      136,
      176,
      230,
      179,
      168,
      230,
      152,
      142,
      229,
      176,
      143,
      229,
      173,
      166,
      230,
      128,
      167,
      232,
      131,
      189,
      232,
      128,
      131,
      231,
      160,
      148,
      231,
      161,
      172,
      228,
      187,
      182,
      232,
      167,
      130,
      231,
      156,
      139,
      230,
      184,
      133,
      230,
      165,
      154,
      230,
      144,
      158,
      231,
      172,
      145,
      233,
      166,
      150,
      233,
      160,
      129,
      233,
      187,
      132,
      233,
      135,
      145,
      233,
      128,
      130,
      231,
      148,
      168,
      230,
      177,
      159,
      232,
      139,
      143,
      231,
      156,
      159,
      229,
      174,
      158,
      228,
      184,
      187,
      231,
      174,
      161,
      233,
      152,
      182,
      230,
      174,
      181,
      232,
      168,
      187,
      229,
      134,
      138,
      231,
      191,
      187,
      232,
      175,
      145,
      230,
      157,
      131,
      229,
      136,
      169,
      229,
      129,
      154,
      229,
      165,
      189,
      228,
      188,
      188,
      228,
      185,
      142,
      233,
      128,
      154,
      232,
      174,
      175,
      230,
      150,
      189,
      229,
      183,
      165,
      231,
      139,
      128,
      230,
      133,
      139,
      228,
      185,
      159,
      232,
      174,
      184,
      231,
      142,
      175,
      228,
      191,
      157,
      229,
      159,
      185,
      229,
      133,
      187,
      230,
      166,
      130,
      229,
      191,
      181,
      229,
      164,
      167,
      229,
      158,
      139,
      230,
      156,
      186,
      231,
      165,
      168,
      231,
      144,
      134,
      232,
      167,
      163,
      229,
      140,
      191,
      229,
      144,
      141,
      99,
      117,
      97,
      110,
      100,
      111,
      101,
      110,
      118,
      105,
      97,
      114,
      109,
      97,
      100,
      114,
      105,
      100,
      98,
      117,
      115,
      99,
      97,
      114,
      105,
      110,
      105,
      99,
      105,
      111,
      116,
      105,
      101,
      109,
      112,
      111,
      112,
      111,
      114,
      113,
      117,
      101,
      99,
      117,
      101,
      110,
      116,
      97,
      101,
      115,
      116,
      97,
      100,
      111,
      112,
      117,
      101,
      100,
      101,
      110,
      106,
      117,
      101,
      103,
      111,
      115,
      99,
      111,
      110,
      116,
      114,
      97,
      101,
      115,
      116,
      195,
      161,
      110,
      110,
      111,
      109,
      98,
      114,
      101,
      116,
      105,
      101,
      110,
      101,
      110,
      112,
      101,
      114,
      102,
      105,
      108,
      109,
      97,
      110,
      101,
      114,
      97,
      97,
      109,
      105,
      103,
      111,
      115,
      99,
      105,
      117,
      100,
      97,
      100,
      99,
      101,
      110,
      116,
      114,
      111,
      97,
      117,
      110,
      113,
      117,
      101,
      112,
      117,
      101,
      100,
      101,
      115,
      100,
      101,
      110,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      101,
      103,
      195,
      186,
      110,
      98,
      117,
      101,
      110,
      111,
      115,
      118,
      111,
      108,
      118,
      101,
      114,
      112,
      117,
      110,
      116,
      111,
      115,
      115,
      101,
      109,
      97,
      110,
      97,
      104,
      97,
      98,
      195,
      173,
      97,
      97,
      103,
      111,
      115,
      116,
      111,
      110,
      117,
      101,
      118,
      111,
      115,
      117,
      110,
      105,
      100,
      111,
      115,
      99,
      97,
      114,
      108,
      111,
      115,
      101,
      113,
      117,
      105,
      112,
      111,
      110,
      105,
      195,
      177,
      111,
      115,
      109,
      117,
      99,
      104,
      111,
      115,
      97,
      108,
      103,
      117,
      110,
      97,
      99,
      111,
      114,
      114,
      101,
      111,
      105,
      109,
      97,
      103,
      101,
      110,
      112,
      97,
      114,
      116,
      105,
      114,
      97,
      114,
      114,
      105,
      98,
      97,
      109,
      97,
      114,
      195,
      173,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      101,
      109,
      112,
      108,
      101,
      111,
      118,
      101,
      114,
      100,
      97,
      100,
      99,
      97,
      109,
      98,
      105,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      102,
      117,
      101,
      114,
      111,
      110,
      112,
      97,
      115,
      97,
      100,
      111,
      108,
      195,
      173,
      110,
      101,
      97,
      112,
      97,
      114,
      101,
      99,
      101,
      110,
      117,
      101,
      118,
      97,
      115,
      99,
      117,
      114,
      115,
      111,
      115,
      101,
      115,
      116,
      97,
      98,
      97,
      113,
      117,
      105,
      101,
      114,
      111,
      108,
      105,
      98,
      114,
      111,
      115,
      99,
      117,
      97,
      110,
      116,
      111,
      97,
      99,
      99,
      101,
      115,
      111,
      109,
      105,
      103,
      117,
      101,
      108,
      118,
      97,
      114,
      105,
      111,
      115,
      99,
      117,
      97,
      116,
      114,
      111,
      116,
      105,
      101,
      110,
      101,
      115,
      103,
      114,
      117,
      112,
      111,
      115,
      115,
      101,
      114,
      195,
      161,
      110,
      101,
      117,
      114,
      111,
      112,
      97,
      109,
      101,
      100,
      105,
      111,
      115,
      102,
      114,
      101,
      110,
      116,
      101,
      97,
      99,
      101,
      114,
      99,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      111,
      102,
      101,
      114,
      116,
      97,
      99,
      111,
      99,
      104,
      101,
      115,
      109,
      111,
      100,
      101,
      108,
      111,
      105,
      116,
      97,
      108,
      105,
      97,
      108,
      101,
      116,
      114,
      97,
      115,
      97,
      108,
      103,
      195,
      186,
      110,
      99,
      111,
      109,
      112,
      114,
      97,
      99,
      117,
      97,
      108,
      101,
      115,
      101,
      120,
      105,
      115,
      116,
      101,
      99,
      117,
      101,
      114,
      112,
      111,
      115,
      105,
      101,
      110,
      100,
      111,
      112,
      114,
      101,
      110,
      115,
      97,
      108,
      108,
      101,
      103,
      97,
      114,
      118,
      105,
      97,
      106,
      101,
      115,
      100,
      105,
      110,
      101,
      114,
      111,
      109,
      117,
      114,
      99,
      105,
      97,
      112,
      111,
      100,
      114,
      195,
      161,
      112,
      117,
      101,
      115,
      116,
      111,
      100,
      105,
      97,
      114,
      105,
      111,
      112,
      117,
      101,
      98,
      108,
      111,
      113,
      117,
      105,
      101,
      114,
      101,
      109,
      97,
      110,
      117,
      101,
      108,
      112,
      114,
      111,
      112,
      105,
      111,
      99,
      114,
      105,
      115,
      105,
      115,
      99,
      105,
      101,
      114,
      116,
      111,
      115,
      101,
      103,
      117,
      114,
      111,
      109,
      117,
      101,
      114,
      116,
      101,
      102,
      117,
      101,
      110,
      116,
      101,
      99,
      101,
      114,
      114,
      97,
      114,
      103,
      114,
      97,
      110,
      100,
      101,
      101,
      102,
      101,
      99,
      116,
      111,
      112,
      97,
      114,
      116,
      101,
      115,
      109,
      101,
      100,
      105,
      100,
      97,
      112,
      114,
      111,
      112,
      105,
      97,
      111,
      102,
      114,
      101,
      99,
      101,
      116,
      105,
      101,
      114,
      114,
      97,
      101,
      45,
      109,
      97,
      105,
      108,
      118,
      97,
      114,
      105,
      97,
      115,
      102,
      111,
      114,
      109,
      97,
      115,
      102,
      117,
      116,
      117,
      114,
      111,
      111,
      98,
      106,
      101,
      116,
      111,
      115,
      101,
      103,
      117,
      105,
      114,
      114,
      105,
      101,
      115,
      103,
      111,
      110,
      111,
      114,
      109,
      97,
      115,
      109,
      105,
      115,
      109,
      111,
      115,
      195,
      186,
      110,
      105,
      99,
      111,
      99,
      97,
      109,
      105,
      110,
      111,
      115,
      105,
      116,
      105,
      111,
      115,
      114,
      97,
      122,
      195,
      179,
      110,
      100,
      101,
      98,
      105,
      100,
      111,
      112,
      114,
      117,
      101,
      98,
      97,
      116,
      111,
      108,
      101,
      100,
      111,
      116,
      101,
      110,
      195,
      173,
      97,
      106,
      101,
      115,
      195,
      186,
      115,
      101,
      115,
      112,
      101,
      114,
      111,
      99,
      111,
      99,
      105,
      110,
      97,
      111,
      114,
      105,
      103,
      101,
      110,
      116,
      105,
      101,
      110,
      100,
      97,
      99,
      105,
      101,
      110,
      116,
      111,
      99,
      195,
      161,
      100,
      105,
      122,
      104,
      97,
      98,
      108,
      97,
      114,
      115,
      101,
      114,
      195,
      173,
      97,
      108,
      97,
      116,
      105,
      110,
      97,
      102,
      117,
      101,
      114,
      122,
      97,
      101,
      115,
      116,
      105,
      108,
      111,
      103,
      117,
      101,
      114,
      114,
      97,
      101,
      110,
      116,
      114,
      97,
      114,
      195,
      169,
      120,
      105,
      116,
      111,
      108,
      195,
      179,
      112,
      101,
      122,
      97,
      103,
      101,
      110,
      100,
      97,
      118,
      195,
      173,
      100,
      101,
      111,
      101,
      118,
      105,
      116,
      97,
      114,
      112,
      97,
      103,
      105,
      110,
      97,
      109,
      101,
      116,
      114,
      111,
      115,
      106,
      97,
      118,
      105,
      101,
      114,
      112,
      97,
      100,
      114,
      101,
      115,
      102,
      195,
      161,
      99,
      105,
      108,
      99,
      97,
      98,
      101,
      122,
      97,
      195,
      161,
      114,
      101,
      97,
      115,
      115,
      97,
      108,
      105,
      100,
      97,
      101,
      110,
      118,
      195,
      173,
      111,
      106,
      97,
      112,
      195,
      179,
      110,
      97,
      98,
      117,
      115,
      111,
      115,
      98,
      105,
      101,
      110,
      101,
      115,
      116,
      101,
      120,
      116,
      111,
      115,
      108,
      108,
      101,
      118,
      97,
      114,
      112,
      117,
      101,
      100,
      97,
      110,
      102,
      117,
      101,
      114,
      116,
      101,
      99,
      111,
      109,
      195,
      186,
      110,
      99,
      108,
      97,
      115,
      101,
      115,
      104,
      117,
      109,
      97,
      110,
      111,
      116,
      101,
      110,
      105,
      100,
      111,
      98,
      105,
      108,
      98,
      97,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      116,
      195,
      161,
      115,
      101,
      100,
      105,
      116,
      97,
      114,
      99,
      114,
      101,
      97,
      100,
      111,
      208,
      180,
      208,
      187,
      209,
      143,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      187,
      208,
      184,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      181,
      209,
      137,
      208,
      181,
      209,
      131,
      208,
      182,
      208,
      181,
      208,
      154,
      208,
      176,
      208,
      186,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      184,
      208,
      146,
      209,
      129,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      180,
      208,
      173,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      135,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      187,
      208,
      181,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      180,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      208,
      148,
      208,
      187,
      209,
      143,
      208,
      159,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      209,
      133,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      186,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      178,
      208,
      190,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      188,
      208,
      161,
      208,
      168,
      208,
      144,
      208,
      188,
      208,
      176,
      209,
      143,
      208,
      167,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      129,
      208,
      178,
      208,
      176,
      208,
      188,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      162,
      208,
      176,
      208,
      186,
      208,
      180,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      141,
      209,
      130,
      209,
      131,
      208,
      146,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      181,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      209,
      131,
      209,
      130,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      180,
      208,
      189,
      209,
      143,
      208,
      146,
      208,
      190,
      209,
      130,
      209,
      130,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      146,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      190,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      189,
      208,
      181,
      208,
      181,
      208,
      158,
      208,
      158,
      208,
      158,
      208,
      187,
      208,
      184,
      209,
      134,
      209,
      141,
      209,
      130,
      208,
      176,
      208,
      158,
      208,
      189,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      188,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      178,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      131,
      208,
      180,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      148,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      143,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      165,
      224,
      164,
      190,
      106,
      97,
      103,
      114,
      97,
      110,
      224,
      164,
      134,
      224,
      164,
      156,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      133,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      136,
      224,
      164,
      168,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      147,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      154,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      178,
      224,
      165,
      128,
      216,
      185,
      217,
      132,
      217,
      137,
      216,
      165,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      216,
      167,
      216,
      162,
      216,
      174,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      217,
      135,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      186,
      217,
      138,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      134,
      217,
      136,
      217,
      132,
      216,
      167,
      216,
      168,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      176,
      217,
      132,
      217,
      131,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      138,
      217,
      136,
      217,
      133,
      217,
      130,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      138,
      216,
      167,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      173,
      216,
      170,
      217,
      137,
      217,
      130,
      216,
      168,
      217,
      132,
      217,
      136,
      216,
      173,
      216,
      169,
      216,
      167,
      216,
      174,
      216,
      177,
      217,
      129,
      217,
      130,
      216,
      183,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      177,
      217,
      131,
      217,
      134,
      216,
      165,
      216,
      176,
      216,
      167,
      217,
      131,
      217,
      133,
      216,
      167,
      216,
      167,
      216,
      173,
      216,
      175,
      216,
      165,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      168,
      216,
      185,
      216,
      182,
      217,
      131,
      217,
      138,
      217,
      129,
      216,
      168,
      216,
      173,
      216,
      171,
      217,
      136,
      217,
      133,
      217,
      134,
      217,
      136,
      217,
      135,
      217,
      136,
      216,
      163,
      217,
      134,
      216,
      167,
      216,
      172,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      135,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      132,
      217,
      138,
      216,
      179,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      181,
      217,
      132,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      176,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      171,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      138,
      216,
      171,
      217,
      133,
      216,
      181,
      216,
      177,
      216,
      180,
      216,
      177,
      216,
      173,
      216,
      173,
      217,
      136,
      217,
      132,
      217,
      136,
      217,
      129,
      217,
      138,
      216,
      167,
      216,
      176,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      168,
      217,
      136,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      163,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      134,
      217,
      135,
      216,
      167,
      217,
      132,
      217,
      138,
      216,
      185,
      216,
      182,
      217,
      136,
      217,
      136,
      217,
      130,
      216,
      175,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      168,
      217,
      134,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      161,
      217,
      136,
      217,
      135,
      217,
      138,
      216,
      167,
      216,
      168,
      217,
      136,
      217,
      130,
      216,
      181,
      216,
      181,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      177,
      217,
      130,
      217,
      133,
      216,
      163,
      216,
      173,
      216,
      175,
      217,
      134,
      216,
      173,
      217,
      134,
      216,
      185,
      216,
      175,
      217,
      133,
      216,
      177,
      216,
      163,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      217,
      138,
      216,
      172,
      216,
      168,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      170,
      216,
      173,
      216,
      170,
      216,
      172,
      217,
      135,
      216,
      169,
      216,
      179,
      217,
      134,
      216,
      169,
      217,
      138,
      216,
      170,
      217,
      133,
      217,
      131,
      216,
      177,
      216,
      169,
      216,
      186,
      216,
      178,
      216,
      169,
      217,
      134,
      217,
      129,
      216,
      179,
      216,
      168,
      217,
      138,
      216,
      170,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      185,
      217,
      134,
      217,
      135,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      161,
      217,
      134,
      217,
      136,
      216,
      177,
      216,
      163,
      217,
      133,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      168,
      217,
      131,
      217,
      132,
      216,
      176,
      216,
      167,
      216,
      170,
      216,
      177,
      216,
      170,
      216,
      168,
      216,
      168,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      179,
      216,
      167,
      217,
      134,
      217,
      131,
      216,
      168,
      217,
      138,
      216,
      185,
      217,
      129,
      217,
      130,
      216,
      175,
      216,
      173,
      216,
      179,
      217,
      134,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      217,
      135,
      217,
      132,
      216,
      180,
      217,
      135,
      216,
      177,
      217,
      130,
      216,
      183,
      216,
      177,
      216,
      183,
      217,
      132,
      216,
      168,
      112,
      114,
      111,
      102,
      105,
      108,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      104,
      105,
      109,
      115,
      101,
      108,
      102,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      97,
      115,
      104,
      105,
      111,
      110,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      114,
      117,
      110,
      110,
      105,
      110,
      103,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      111,
      98,
      106,
      101,
      99,
      116,
      115,
      118,
      105,
      115,
      105,
      98,
      108,
      101,
      119,
      101,
      108,
      99,
      111,
      109,
      101,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      117,
      110,
      107,
      110,
      111,
      119,
      110,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      100,
      121,
      110,
      97,
      109,
      105,
      99,
      98,
      114,
      111,
      119,
      115,
      101,
      114,
      112,
      114,
      105,
      118,
      97,
      99,
      121,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      118,
      105,
      115,
      105,
      116,
      101,
      100,
      119,
      101,
      97,
      116,
      104,
      101,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      102,
      111,
      114,
      119,
      97,
      114,
      100,
      121,
      111,
      117,
      32,
      99,
      97,
      110,
      114,
      101,
      109,
      111,
      118,
      101,
      100,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      114,
      101,
      97,
      100,
      105,
      110,
      103,
      108,
      105,
      98,
      114,
      97,
      114,
      121,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      109,
      97,
      110,
      97,
      103,
      101,
      114,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      115,
      117,
      109,
      109,
      97,
      114,
      121,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      109,
      105,
      110,
      117,
      116,
      101,
      115,
      112,
      114,
      105,
      118,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      111,
      99,
      105,
      101,
      116,
      121,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      101,
      110,
      97,
      98,
      108,
      101,
      100,
      116,
      114,
      105,
      103,
      103,
      101,
      114,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      108,
      111,
      97,
      100,
      105,
      110,
      103,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      102,
      101,
      99,
      116,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      115,
      121,
      115,
      116,
      101,
      109,
      115,
      107,
      101,
      101,
      112,
      105,
      110,
      103,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      44,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      112,
      105,
      114,
      101,
      115,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      98,
      97,
      108,
      97,
      110,
      99,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      80,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      118,
      105,
      108,
      108,
      97,
      103,
      101,
      83,
      112,
      97,
      110,
      105,
      115,
      104,
      103,
      97,
      108,
      108,
      101,
      114,
      121,
      100,
      101,
      99,
      108,
      105,
      110,
      101,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      115,
      112,
      101,
      99,
      105,
      101,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      119,
      114,
      105,
      116,
      101,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      114,
      101,
      112,
      111,
      114,
      116,
      115,
      102,
      105,
      103,
      117,
      114,
      101,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      111,
      108,
      100,
      105,
      110,
      103,
      100,
      105,
      115,
      112,
      117,
      116,
      101,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      100,
      105,
      103,
      105,
      116,
      97,
      108,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      65,
      110,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      114,
      114,
      105,
      101,
      100,
      116,
      114,
      97,
      102,
      102,
      105,
      99,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      115,
      116,
      117,
      100,
      105,
      101,
      115,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      109,
      117,
      115,
      116,
      32,
      98,
      101,
      115,
      99,
      104,
      111,
      111,
      108,
      115,
      86,
      101,
      114,
      115,
      105,
      111,
      110,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      101,
      112,
      105,
      115,
      111,
      100,
      101,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      103,
      114,
      111,
      119,
      105,
      110,
      103,
      111,
      98,
      118,
      105,
      111,
      117,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      121,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      117,
      108,
      62,
      13,
      10,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      108,
      105,
      116,
      121,
      115,
      116,
      111,
      114,
      97,
      103,
      101,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      100,
      101,
      115,
      107,
      116,
      111,
      112,
      111,
      102,
      102,
      101,
      114,
      101,
      100,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      117,
      110,
      117,
      115,
      117,
      97,
      108,
      68,
      105,
      103,
      105,
      116,
      97,
      108,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      87,
      101,
      98,
      115,
      105,
      116,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      114,
      101,
      100,
      117,
      99,
      101,
      100,
      65,
      110,
      100,
      114,
      111,
      105,
      100,
      100,
      101,
      99,
      97,
      100,
      101,
      115,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      32,
      38,
      97,
      109,
      112,
      59,
      32,
      97,
      110,
      105,
      109,
      97,
      108,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      65,
      117,
      116,
      111,
      109,
      97,
      116,
      103,
      101,
      116,
      116,
      105,
      110,
      103,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      110,
      111,
      116,
      104,
      105,
      110,
      103,
      80,
      111,
      112,
      117,
      108,
      97,
      114,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      61,
      49,
      38,
      97,
      109,
      112,
      59,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      61,
      32,
      110,
      101,
      119,
      32,
      67,
      101,
      110,
      116,
      114,
      97,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      100,
      83,
      112,
      101,
      99,
      105,
      97,
      108,
      78,
      101,
      116,
      119,
      111,
      114,
      107,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      119,
      97,
      114,
      110,
      105,
      110,
      103,
      67,
      111,
      108,
      108,
      101,
      103,
      101,
      116,
      111,
      111,
      108,
      98,
      97,
      114,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      68,
      101,
      117,
      116,
      115,
      99,
      104,
      102,
      105,
      110,
      97,
      110,
      99,
      101,
      119,
      111,
      114,
      107,
      101,
      114,
      115,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      108,
      121,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      100,
      105,
      115,
      101,
      97,
      115,
      101,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      119,
      101,
      97,
      112,
      111,
      110,
      115,
      101,
      120,
      104,
      105,
      98,
      105,
      116,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      67,
      111,
      110,
      116,
      114,
      111,
      108,
      99,
      108,
      97,
      115,
      115,
      101,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      111,
      117,
      116,
      108,
      105,
      110,
      101,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      40,
      119,
      105,
      110,
      100,
      111,
      119,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      77,
      111,
      98,
      105,
      108,
      101,
      32,
      107,
      105,
      108,
      108,
      105,
      110,
      103,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      100,
      114,
      111,
      112,
      112,
      101,
      100,
      104,
      101,
      97,
      118,
      105,
      108,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      45,
      49,
      39,
      93,
      41,
      59,
      10,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      115,
      104,
      97,
      114,
      105,
      110,
      103,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      100,
      114,
      97,
      119,
      105,
      110,
      103,
      98,
      105,
      108,
      108,
      105,
      111,
      110,
      111,
      114,
      100,
      101,
      114,
      101,
      100,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      99,
      97,
      116,
      97,
      108,
      111,
      103,
      65,
      114,
      116,
      105,
      99,
      108,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      117,
      110,
      105,
      102,
      111,
      114,
      109,
      106,
      111,
      117,
      114,
      110,
      101,
      121,
      115,
      105,
      100,
      101,
      98,
      97,
      114,
      67,
      104,
      105,
      99,
      97,
      103,
      111,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      97,
      115,
      115,
      97,
      103,
      101,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      110,
      105,
      109,
      97,
      116,
      101,
      102,
      101,
      101,
      108,
      105,
      110,
      103,
      97,
      114,
      114,
      105,
      118,
      101,
      100,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      114,
      111,
      117,
      103,
      104,
      108,
      121,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      98,
      117,
      116,
      32,
      110,
      111,
      116,
      100,
      101,
      110,
      115,
      105,
      116,
      121,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      67,
      104,
      105,
      110,
      101,
      115,
      101,
      108,
      97,
      99,
      107,
      32,
      111,
      102,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      102,
      97,
      99,
      116,
      111,
      114,
      115,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      116,
      104,
      97,
      116,
      32,
      105,
      115,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      104,
      117,
      115,
      98,
      97,
      110,
      100,
      105,
      110,
      32,
      102,
      97,
      99,
      116,
      97,
      102,
      102,
      97,
      105,
      114,
      115,
      67,
      104,
      97,
      114,
      108,
      101,
      115,
      114,
      97,
      100,
      105,
      99,
      97,
      108,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      108,
      97,
      110,
      100,
      105,
      110,
      103,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      112,
      108,
      97,
      110,
      110,
      101,
      100,
      112,
      114,
      101,
      109,
      105,
      117,
      109,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      69,
      100,
      105,
      116,
      105,
      111,
      110,
      93,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      101,
      115,
      115,
      97,
      103,
      101,
      110,
      101,
      101,
      100,
      32,
      116,
      111,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      45,
      109,
      111,
      98,
      105,
      108,
      101,
      114,
      101,
      99,
      111,
      114,
      100,
      115,
      119,
      97,
      110,
      116,
      32,
      116,
      111,
      107,
      105,
      110,
      100,
      32,
      111,
      102,
      70,
      105,
      114,
      101,
      102,
      111,
      120,
      121,
      111,
      117,
      32,
      97,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      115,
      116,
      117,
      100,
      105,
      101,
      100,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      105,
      110,
      103,
      114,
      97,
      112,
      105,
      100,
      108,
      121,
      99,
      108,
      105,
      109,
      97,
      116,
      101,
      107,
      105,
      110,
      103,
      100,
      111,
      109,
      101,
      109,
      101,
      114,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      115,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      112,
      105,
      111,
      110,
      101,
      101,
      114,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      100,
      121,
      110,
      97,
      115,
      116,
      121,
      104,
      111,
      119,
      32,
      116,
      111,
      32,
      83,
      117,
      112,
      112,
      111,
      114,
      116,
      114,
      101,
      118,
      101,
      110,
      117,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      82,
      101,
      115,
      117,
      108,
      116,
      115,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      111,
      108,
      100,
      105,
      101,
      114,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      99,
      97,
      108,
      108,
      105,
      110,
      103,
      46,
      38,
      113,
      117,
      111,
      116,
      59,
      65,
      99,
      99,
      111,
      117,
      110,
      116,
      69,
      100,
      119,
      97,
      114,
      100,
      32,
      115,
      101,
      103,
      109,
      101,
      110,
      116,
      82,
      111,
      98,
      101,
      114,
      116,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      80,
      97,
      99,
      105,
      102,
      105,
      99,
      108,
      101,
      97,
      114,
      110,
      101,
      100,
      117,
      112,
      32,
      119,
      105,
      116,
      104,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      119,
      101,
      32,
      104,
      97,
      118,
      101,
      65,
      110,
      103,
      101,
      108,
      101,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      95,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      97,
      99,
      113,
      117,
      105,
      114,
      101,
      109,
      97,
      115,
      115,
      105,
      118,
      101,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      58,
      32,
      102,
      97,
      108,
      115,
      101,
      116,
      114,
      101,
      97,
      116,
      101,
      100,
      98,
      105,
      103,
      103,
      101,
      115,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      100,
      114,
      105,
      118,
      105,
      110,
      103,
      83,
      116,
      117,
      100,
      105,
      101,
      115,
      109,
      105,
      110,
      105,
      109,
      117,
      109,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      109,
      111,
      114,
      110,
      105,
      110,
      103,
      115,
      101,
      108,
      108,
      105,
      110,
      103,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      118,
      101,
      114,
      115,
      101,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      109,
      105,
      115,
      115,
      105,
      110,
      103,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      112,
      114,
      111,
      109,
      111,
      116,
      101,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      111,
      109,
      101,
      111,
      110,
      101,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      114,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      97,
      108,
      108,
      32,
      116,
      104,
      101,
      115,
      105,
      116,
      101,
      109,
      97,
      112,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      119,
      97,
      121,
      32,
      116,
      111,
      32,
      32,
      65,
      117,
      103,
      117,
      115,
      116,
      115,
      121,
      109,
      98,
      111,
      108,
      115,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      109,
      97,
      116,
      116,
      101,
      114,
      115,
      109,
      117,
      115,
      105,
      99,
      97,
      108,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      115,
      101,
      114,
      118,
      105,
      110,
      103,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      116,
      114,
      111,
      117,
      98,
      108,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      116,
      115,
      112,
      108,
      97,
      121,
      101,
      114,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      32,
      39,
      39,
      84,
      104,
      101,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      100,
      97,
      112,
      116,
      101,
      100,
      71,
      97,
      108,
      108,
      101,
      114,
      121,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      101,
      110,
      104,
      97,
      110,
      99,
      101,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      41,
      46,
      32,
      84,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      101,
      120,
      105,
      115,
      116,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      108,
      101,
      114,
      112,
      114,
      105,
      110,
      116,
      101,
      100,
      99,
      111,
      110,
      115,
      111,
      108,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      110,
      101,
      120,
      112,
      111,
      114,
      116,
      115,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      67,
      104,
      97,
      110,
      110,
      101,
      108,
      105,
      108,
      108,
      101,
      103,
      97,
      108,
      110,
      101,
      117,
      116,
      114,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      95,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      105,
      103,
      110,
      105,
      110,
      103,
      46,
      104,
      116,
      109,
      108,
      34,
      62,
      115,
      101,
      116,
      116,
      108,
      101,
      100,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      99,
      97,
      117,
      115,
      105,
      110,
      103,
      45,
      119,
      101,
      98,
      107,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      74,
      117,
      115,
      116,
      105,
      99,
      101,
      99,
      104,
      97,
      112,
      116,
      101,
      114,
      118,
      105,
      99,
      116,
      105,
      109,
      115,
      84,
      104,
      111,
      109,
      97,
      115,
      32,
      109,
      111,
      122,
      105,
      108,
      108,
      97,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      58,
      102,
      97,
      108,
      115,
      101,
      44,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      79,
      108,
      121,
      109,
      112,
      105,
      99,
      95,
      98,
      117,
      116,
      116,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      99,
      104,
      114,
      111,
      110,
      105,
      99,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      101,
      105,
      116,
      104,
      101,
      114,
      103,
      114,
      101,
      97,
      116,
      108,
      121,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      111,
      118,
      101,
      114,
      97,
      108,
      108,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      119,
      111,
      114,
      115,
      104,
      105,
      112,
      102,
      117,
      110,
      100,
      105,
      110,
      103,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      117,
      116,
      105,
      108,
      105,
      116,
      121,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      67,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      101,
      115,
      116,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      108,
      121,
      101,
      120,
      112,
      111,
      115,
      101,
      100,
      66,
      114,
      111,
      119,
      115,
      101,
      114,
      108,
      105,
      98,
      101,
      114,
      97,
      108,
      125,
      32,
      99,
      97,
      116,
      99,
      104,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      104,
      105,
      100,
      101,
      40,
      41,
      59,
      70,
      108,
      111,
      114,
      105,
      100,
      97,
      97,
      110,
      115,
      119,
      101,
      114,
      115,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      100,
      101,
      102,
      101,
      110,
      115,
      101,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      83,
      101,
      118,
      101,
      114,
      97,
      108,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      33,
      61,
      32,
      110,
      117,
      108,
      108,
      116,
      114,
      97,
      105,
      110,
      101,
      100,
      68,
      101,
      110,
      109,
      97,
      114,
      107,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      47,
      97,
      108,
      108,
      46,
      106,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      83,
      116,
      101,
      112,
      104,
      101,
      110,
      10,
      10,
      87,
      104,
      101,
      110,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      60,
      47,
      104,
      50,
      62,
      13,
      10,
      77,
      111,
      100,
      101,
      114,
      110,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      115,
      46,
      10,
      10,
      70,
      111,
      114,
      32,
      10,
      10,
      77,
      97,
      110,
      121,
      32,
      97,
      114,
      116,
      105,
      115,
      116,
      115,
      112,
      111,
      119,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      109,
      101,
      100,
      105,
      99,
      97,
      108,
      116,
      105,
      99,
      107,
      101,
      116,
      115,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      119,
      105,
      116,
      110,
      101,
      115,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      101,
      71,
      101,
      111,
      114,
      103,
      101,
      32,
      66,
      101,
      108,
      103,
      105,
      117,
      109,
      46,
      46,
      46,
      60,
      47,
      97,
      62,
      116,
      119,
      105,
      116,
      116,
      101,
      114,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      119,
      97,
      105,
      116,
      105,
      110,
      103,
      119,
      97,
      114,
      102,
      97,
      114,
      101,
      32,
      79,
      116,
      104,
      101,
      114,
      32,
      114,
      97,
      110,
      107,
      105,
      110,
      103,
      112,
      104,
      114,
      97,
      115,
      101,
      115,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      118,
      105,
      118,
      101,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      60,
      47,
      112,
      62,
      13,
      10,
      32,
      67,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      103,
      110,
      111,
      114,
      101,
      100,
      108,
      111,
      115,
      115,
      32,
      111,
      102,
      106,
      117,
      115,
      116,
      32,
      97,
      115,
      71,
      101,
      111,
      114,
      103,
      105,
      97,
      115,
      116,
      114,
      97,
      110,
      103,
      101,
      60,
      104,
      101,
      97,
      100,
      62,
      60,
      115,
      116,
      111,
      112,
      112,
      101,
      100,
      49,
      39,
      93,
      41,
      59,
      13,
      10,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      49,
      48,
      48,
      44,
      48,
      48,
      48,
      60,
      47,
      104,
      51,
      62,
      10,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      98,
      101,
      99,
      111,
      109,
      101,
      115,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      119,
      101,
      100,
      100,
      105,
      110,
      103,
      48,
      48,
      46,
      104,
      116,
      109,
      108,
      109,
      111,
      110,
      97,
      114,
      99,
      104,
      111,
      102,
      102,
      32,
      116,
      104,
      101,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      104,
      105,
      103,
      104,
      108,
      121,
      32,
      98,
      105,
      111,
      108,
      111,
      103,
      121,
      108,
      105,
      102,
      101,
      32,
      111,
      102,
      111,
      114,
      32,
      101,
      118,
      101,
      110,
      114,
      105,
      115,
      101,
      32,
      111,
      102,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      112,
      108,
      117,
      115,
      111,
      110,
      101,
      104,
      117,
      110,
      116,
      105,
      110,
      103,
      40,
      116,
      104,
      111,
      117,
      103,
      104,
      68,
      111,
      117,
      103,
      108,
      97,
      115,
      106,
      111,
      105,
      110,
      105,
      110,
      103,
      99,
      105,
      114,
      99,
      108,
      101,
      115,
      70,
      111,
      114,
      32,
      116,
      104,
      101,
      65,
      110,
      99,
      105,
      101,
      110,
      116,
      86,
      105,
      101,
      116,
      110,
      97,
      109,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      99,
      114,
      121,
      115,
      116,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      32,
      61,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      101,
      110,
      106,
      111,
      121,
      101,
      100,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      60,
      97,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      65,
      108,
      108,
      32,
      114,
      105,
      104,
      111,
      119,
      32,
      116,
      104,
      101,
      68,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      116,
      105,
      114,
      101,
      100,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      98,
      97,
      116,
      116,
      108,
      101,
      115,
      115,
      101,
      101,
      107,
      105,
      110,
      103,
      99,
      97,
      98,
      105,
      110,
      101,
      116,
      119,
      97,
      115,
      32,
      110,
      111,
      116,
      108,
      111,
      111,
      107,
      32,
      97,
      116,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      103,
      101,
      116,
      32,
      116,
      104,
      101,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      115,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      97,
      58,
      104,
      111,
      118,
      101,
      114,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      32,
      108,
      97,
      99,
      107,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      101,
      120,
      116,
      114,
      97,
      99,
      116,
      101,
      110,
      101,
      109,
      105,
      101,
      115,
      101,
      118,
      101,
      110,
      32,
      105,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      47,
      115,
      101,
      97,
      114,
      99,
      104,
      98,
      101,
      108,
      105,
      101,
      102,
      115,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      115,
      116,
      97,
      116,
      105,
      99,
      46,
      108,
      111,
      103,
      105,
      110,
      34,
      62,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      118,
      105,
      111,
      108,
      101,
      110,
      116,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      102,
      105,
      114,
      115,
      116,
      34,
      62,
      99,
      105,
      114,
      99,
      117,
      105,
      116,
      70,
      105,
      110,
      108,
      97,
      110,
      100,
      99,
      104,
      101,
      109,
      105,
      115,
      116,
      115,
      104,
      101,
      32,
      119,
      97,
      115,
      49,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      115,
      32,
      115,
      117,
      99,
      104,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      108,
      105,
      110,
      101,
      32,
      111,
      102,
      97,
      32,
      103,
      114,
      101,
      97,
      116,
      109,
      121,
      115,
      116,
      101,
      114,
      121,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      102,
      97,
      108,
      108,
      105,
      110,
      103,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      114,
      97,
      105,
      108,
      119,
      97,
      121,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      109,
      111,
      110,
      115,
      116,
      101,
      114,
      100,
      101,
      115,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      119,
      105,
      116,
      104,
      110,
      117,
      99,
      108,
      101,
      97,
      114,
      74,
      101,
      119,
      105,
      115,
      104,
      32,
      112,
      114,
      111,
      116,
      101,
      115,
      116,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      102,
      108,
      111,
      119,
      101,
      114,
      115,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      114,
      101,
      102,
      111,
      114,
      109,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      119,
      104,
      111,
      32,
      119,
      97,
      115,
      108,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      116,
      115,
      117,
      105,
      99,
      105,
      100,
      101,
      103,
      101,
      110,
      101,
      114,
      105,
      99,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      109,
      97,
      114,
      107,
      101,
      116,
      115,
      83,
      111,
      99,
      105,
      97,
      108,
      32,
      102,
      105,
      115,
      104,
      105,
      110,
      103,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      119,
      105,
      110,
      110,
      101,
      114,
      115,
      60,
      98,
      114,
      32,
      47,
      62,
      60,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      117,
      114,
      97,
      108,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      99,
      111,
      111,
      107,
      105,
      101,
      115,
      111,
      117,
      116,
      99,
      111,
      109,
      101,
      114,
      101,
      115,
      111,
      108,
      118,
      101,
      83,
      119,
      101,
      100,
      105,
      115,
      104,
      98,
      114,
      105,
      101,
      102,
      108,
      121,
      80,
      101,
      114,
      115,
      105,
      97,
      110,
      115,
      111,
      32,
      109,
      117,
      99,
      104,
      67,
      101,
      110,
      116,
      117,
      114,
      121,
      100,
      101,
      112,
      105,
      99,
      116,
      115,
      99,
      111,
      108,
      117,
      109,
      110,
      115,
      104,
      111,
      117,
      115,
      105,
      110,
      103,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      110,
      101,
      120,
      116,
      32,
      116,
      111,
      98,
      101,
      97,
      114,
      105,
      110,
      103,
      109,
      97,
      112,
      112,
      105,
      110,
      103,
      114,
      101,
      118,
      105,
      115,
      101,
      100,
      106,
      81,
      117,
      101,
      114,
      121,
      40,
      45,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      83,
      101,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      115,
      84,
      117,
      114,
      107,
      105,
      115,
      104,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      46,
      109,
      97,
      116,
      99,
      104,
      40,
      125,
      41,
      40,
      41,
      59,
      10,
      10,
      98,
      117,
      114,
      110,
      105,
      110,
      103,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      61,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      112,
      108,
      97,
      115,
      116,
      105,
      99,
      101,
      110,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      10,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      112,
      104,
      121,
      115,
      105,
      99,
      115,
      102,
      97,
      105,
      108,
      105,
      110,
      103,
      101,
      120,
      101,
      99,
      117,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      115,
      116,
      108,
      105,
      110,
      107,
      32,
      116,
      111,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      60,
      98,
      114,
      32,
      47,
      62,
      10,
      58,
      32,
      116,
      114,
      117,
      101,
      44,
      99,
      104,
      97,
      114,
      116,
      101,
      114,
      116,
      111,
      117,
      114,
      105,
      115,
      109,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      60,
      47,
      104,
      49,
      62,
      13,
      10,
      111,
      110,
      108,
      105,
      110,
      101,
      46,
      63,
      120,
      109,
      108,
      32,
      118,
      101,
      104,
      101,
      108,
      112,
      105,
      110,
      103,
      100,
      105,
      97,
      109,
      111,
      110,
      100,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      97,
      105,
      114,
      108,
      105,
      110,
      101,
      101,
      110,
      100,
      32,
      45,
      45,
      62,
      41,
      46,
      97,
      116,
      116,
      114,
      40,
      114,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      115,
      116,
      105,
      110,
      103,
      35,
      102,
      102,
      102,
      102,
      102,
      102,
      114,
      101,
      97,
      108,
      105,
      122,
      101,
      86,
      105,
      110,
      99,
      101,
      110,
      116,
      115,
      105,
      103,
      110,
      97,
      108,
      115,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      100,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      108,
      108,
      105,
      110,
      103,
      80,
      117,
      98,
      108,
      105,
      99,
      32,
      104,
      101,
      108,
      100,
      32,
      105,
      110,
      74,
      111,
      115,
      101,
      112,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      114,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      115,
      60,
      115,
      116,
      121,
      108,
      101,
      62,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      100,
      111,
      101,
      115,
      110,
      39,
      116,
      108,
      97,
      116,
      101,
      114,
      44,
      32,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      99,
      114,
      101,
      97,
      116,
      111,
      114,
      72,
      117,
      110,
      103,
      97,
      114,
      121,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      115,
      101,
      101,
      32,
      116,
      104,
      101,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      83,
      121,
      115,
      116,
      101,
      109,
      115,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      44,
      32,
      97,
      110,
      100,
      32,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      114,
      97,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      10,
      112,
      101,
      114,
      115,
      111,
      110,
      115,
      71,
      111,
      108,
      100,
      101,
      110,
      32,
      65,
      102,
      102,
      97,
      105,
      114,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      111,
      108,
      100,
      101,
      115,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      99,
      97,
      114,
      116,
      111,
      111,
      110,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      67,
      111,
      109,
      109,
      111,
      110,
      115,
      77,
      117,
      115,
      108,
      105,
      109,
      115,
      87,
      104,
      97,
      116,
      32,
      105,
      115,
      105,
      110,
      32,
      109,
      97,
      110,
      121,
      109,
      97,
      114,
      107,
      105,
      110,
      103,
      114,
      101,
      118,
      101,
      97,
      108,
      115,
      73,
      110,
      100,
      101,
      101,
      100,
      44,
      101,
      113,
      117,
      97,
      108,
      108,
      121,
      47,
      115,
      104,
      111,
      119,
      95,
      97,
      111,
      117,
      116,
      100,
      111,
      111,
      114,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      65,
      117,
      115,
      116,
      114,
      105,
      97,
      103,
      101,
      110,
      101,
      116,
      105,
      99,
      115,
      121,
      115,
      116,
      101,
      109,
      44,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      116,
      105,
      110,
      103,
      72,
      101,
      32,
      97,
      108,
      115,
      111,
      73,
      115,
      108,
      97,
      110,
      100,
      115,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      10,
      9,
      9,
      60,
      33,
      45,
      45,
      68,
      97,
      110,
      105,
      101,
      108,
      32,
      98,
      105,
      110,
      100,
      105,
      110,
      103,
      98,
      108,
      111,
      99,
      107,
      34,
      62,
      105,
      109,
      112,
      111,
      115,
      101,
      100,
      117,
      116,
      105,
      108,
      105,
      122,
      101,
      65,
      98,
      114,
      97,
      104,
      97,
      109,
      40,
      101,
      120,
      99,
      101,
      112,
      116,
      123,
      119,
      105,
      100,
      116,
      104,
      58,
      112,
      117,
      116,
      116,
      105,
      110,
      103,
      41,
      46,
      104,
      116,
      109,
      108,
      40,
      124,
      124,
      32,
      91,
      93,
      59,
      10,
      68,
      65,
      84,
      65,
      91,
      32,
      42,
      107,
      105,
      116,
      99,
      104,
      101,
      110,
      109,
      111,
      117,
      110,
      116,
      101,
      100,
      97,
      99,
      116,
      117,
      97,
      108,
      32,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      109,
      97,
      105,
      110,
      108,
      121,
      32,
      95,
      98,
      108,
      97,
      110,
      107,
      39,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      120,
      112,
      101,
      114,
      116,
      115,
      105,
      102,
      40,
      116,
      121,
      112,
      101,
      73,
      116,
      32,
      97,
      108,
      115,
      111,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      34,
      62,
      84,
      101,
      114,
      109,
      115,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      101,
      97,
      115,
      116,
      101,
      114,
      110,
      116,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      103,
      97,
      105,
      110,
      101,
      100,
      32,
      111,
      110,
      103,
      111,
      105,
      110,
      103,
      106,
      117,
      115,
      116,
      105,
      102,
      121,
      99,
      114,
      105,
      116,
      105,
      99,
      115,
      102,
      97,
      99,
      116,
      111,
      114,
      121,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      97,
      115,
      115,
      97,
      117,
      108,
      116,
      105,
      110,
      118,
      105,
      116,
      101,
      100,
      108,
      97,
      115,
      116,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      111,
      119,
      110,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      99,
      111,
      110,
      99,
      101,
      114,
      116,
      100,
      105,
      97,
      103,
      114,
      97,
      109,
      100,
      111,
      108,
      108,
      97,
      114,
      115,
      99,
      108,
      117,
      115,
      116,
      101,
      114,
      112,
      104,
      112,
      63,
      105,
      100,
      61,
      97,
      108,
      99,
      111,
      104,
      111,
      108,
      41,
      59,
      125,
      41,
      40,
      41,
      59,
      117,
      115,
      105,
      110,
      103,
      32,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      115,
      115,
      101,
      108,
      115,
      114,
      101,
      118,
      105,
      118,
      97,
      108,
      65,
      100,
      100,
      114,
      101,
      115,
      115,
      97,
      109,
      97,
      116,
      101,
      117,
      114,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      105,
      108,
      108,
      110,
      101,
      115,
      115,
      119,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      113,
      117,
      97,
      108,
      105,
      102,
      121,
      109,
      97,
      116,
      99,
      104,
      101,
      115,
      117,
      110,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      116,
      105,
      110,
      99,
      116,
      68,
      101,
      102,
      101,
      110,
      115,
      101,
      100,
      105,
      101,
      100,
      32,
      105,
      110,
      10,
      9,
      60,
      33,
      45,
      45,
      32,
      99,
      117,
      115,
      116,
      111,
      109,
      115,
      108,
      105,
      110,
      107,
      105,
      110,
      103,
      76,
      105,
      116,
      116,
      108,
      101,
      32,
      66,
      111,
      111,
      107,
      32,
      111,
      102,
      101,
      118,
      101,
      110,
      105,
      110,
      103,
      109,
      105,
      110,
      46,
      106,
      115,
      63,
      97,
      114,
      101,
      32,
      116,
      104,
      101,
      107,
      111,
      110,
      116,
      97,
      107,
      116,
      116,
      111,
      100,
      97,
      121,
      39,
      115,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      119,
      101,
      97,
      114,
      105,
      110,
      103,
      65,
      108,
      108,
      32,
      82,
      105,
      103,
      59,
      10,
      125,
      41,
      40,
      41,
      59,
      114,
      97,
      105,
      115,
      105,
      110,
      103,
      32,
      65,
      108,
      115,
      111,
      44,
      32,
      99,
      114,
      117,
      99,
      105,
      97,
      108,
      97,
      98,
      111,
      117,
      116,
      34,
      62,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      45,
      45,
      62,
      10,
      60,
      115,
      99,
      102,
      105,
      114,
      101,
      102,
      111,
      120,
      97,
      115,
      32,
      109,
      117,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      115,
      105,
      110,
      100,
      101,
      120,
      44,
      32,
      115,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      10,
      13,
      10,
      60,
      33,
      45,
      45,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      82,
      101,
      99,
      111,
      114,
      100,
      115,
      80,
      114,
      105,
      118,
      97,
      116,
      101,
      70,
      111,
      114,
      101,
      105,
      103,
      110,
      80,
      114,
      101,
      109,
      105,
      101,
      114,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      86,
      105,
      114,
      116,
      117,
      97,
      108,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      67,
      111,
      109,
      109,
      101,
      110,
      116,
      80,
      111,
      119,
      101,
      114,
      101,
      100,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      112,
      111,
      118,
      101,
      114,
      116,
      121,
      99,
      104,
      97,
      109,
      98,
      101,
      114,
      76,
      105,
      118,
      105,
      110,
      103,
      32,
      118,
      111,
      108,
      117,
      109,
      101,
      115,
      65,
      110,
      116,
      104,
      111,
      110,
      121,
      108,
      111,
      103,
      105,
      110,
      34,
      32,
      82,
      101,
      108,
      97,
      116,
      101,
      100,
      69,
      99,
      111,
      110,
      111,
      109,
      121,
      114,
      101,
      97,
      99,
      104,
      101,
      115,
      99,
      117,
      116,
      116,
      105,
      110,
      103,
      103,
      114,
      97,
      118,
      105,
      116,
      121,
      108,
      105,
      102,
      101,
      32,
      105,
      110,
      67,
      104,
      97,
      112,
      116,
      101,
      114,
      45,
      115,
      104,
      97,
      100,
      111,
      119,
      78,
      111,
      116,
      97,
      98,
      108,
      101,
      60,
      47,
      116,
      100,
      62,
      13,
      10,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      97,
      100,
      105,
      117,
      109,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      116,
      114,
      97,
      118,
      101,
      108,
      115,
      104,
      101,
      108,
      100,
      32,
      98,
      121,
      119,
      104,
      111,
      32,
      97,
      114,
      101,
      119,
      111,
      114,
      107,
      32,
      105,
      110,
      102,
      97,
      99,
      117,
      108,
      116,
      121,
      97,
      110,
      103,
      117,
      108,
      97,
      114,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      97,
      105,
      114,
      112,
      111,
      114,
      116,
      116,
      111,
      119,
      110,
      32,
      111,
      102,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      39,
      99,
      108,
      105,
      99,
      107,
      39,
      99,
      104,
      97,
      114,
      103,
      101,
      115,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      105,
      116,
      32,
      119,
      105,
      108,
      108,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      40,
      116,
      104,
      105,
      115,
      41,
      59,
      65,
      110,
      100,
      114,
      101,
      119,
      32,
      117,
      110,
      105,
      113,
      117,
      101,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      51,
      48,
      48,
      112,
      120,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      59,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      104,
      101,
      114,
      115,
      101,
      108,
      102,
      83,
      116,
      97,
      116,
      105,
      111,
      110,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      115,
      101,
      110,
      116,
      32,
      116,
      111,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      99,
      116,
      114,
      101,
      115,
      115,
      99,
      111,
      109,
      101,
      32,
      116,
      111,
      102,
      105,
      110,
      103,
      101,
      114,
      115,
      68,
      117,
      107,
      101,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      44,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      104,
      97,
      114,
      109,
      111,
      110,
      121,
      97,
      32,
      109,
      97,
      106,
      111,
      114,
      34,
      58,
      34,
      104,
      116,
      116,
      112,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      109,
      101,
      110,
      117,
      34,
      62,
      10,
      109,
      111,
      110,
      116,
      104,
      108,
      121,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      99,
      111,
      117,
      110,
      99,
      105,
      108,
      103,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      118,
      101,
      110,
      32,
      105,
      110,
      83,
      117,
      109,
      109,
      97,
      114,
      121,
      100,
      97,
      116,
      101,
      32,
      111,
      102,
      108,
      111,
      121,
      97,
      108,
      116,
      121,
      102,
      105,
      116,
      110,
      101,
      115,
      115,
      97,
      110,
      100,
      32,
      119,
      97,
      115,
      101,
      109,
      112,
      101,
      114,
      111,
      114,
      115,
      117,
      112,
      114,
      101,
      109,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      101,
      97,
      114,
      105,
      110,
      103,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      108,
      111,
      110,
      103,
      101,
      115,
      116,
      65,
      108,
      98,
      101,
      114,
      116,
      97,
      108,
      97,
      116,
      101,
      114,
      97,
      108,
      115,
      101,
      116,
      32,
      111,
      102,
      32,
      115,
      109,
      97,
      108,
      108,
      34,
      62,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      100,
      111,
      32,
      119,
      105,
      116,
      104,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      98,
      97,
      110,
      107,
      32,
      111,
      102,
      98,
      101,
      110,
      101,
      97,
      116,
      104,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      67,
      97,
      112,
      105,
      116,
      97,
      108,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      41,
      44,
      32,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      102,
      114,
      111,
      109,
      99,
      108,
      111,
      115,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      73,
      110,
      115,
      116,
      101,
      97,
      100,
      102,
      105,
      102,
      116,
      101,
      101,
      110,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      46,
      121,
      97,
      104,
      111,
      111,
      46,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      102,
      105,
      103,
      104,
      116,
      101,
      114,
      111,
      98,
      115,
      99,
      117,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      99,
      61,
      32,
      77,
      97,
      116,
      104,
      46,
      101,
      100,
      105,
      116,
      105,
      110,
      103,
      111,
      110,
      108,
      105,
      110,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      97,
      32,
      119,
      104,
      111,
      108,
      101,
      111,
      110,
      101,
      114,
      114,
      111,
      114,
      121,
      101,
      97,
      114,
      32,
      111,
      102,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      97,
      114,
      114,
      105,
      101,
      114,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      104,
      101,
      97,
      100,
      101,
      114,
      32,
      104,
      111,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      115,
      117,
      109,
      101,
      100,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      104,
      101,
      97,
      116,
      105,
      110,
      103,
      114,
      101,
      116,
      97,
      105,
      110,
      115,
      99,
      108,
      111,
      117,
      100,
      102,
      114,
      119,
      97,
      121,
      32,
      111,
      102,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      49,
      107,
      110,
      111,
      119,
      105,
      110,
      103,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      66,
      101,
      116,
      119,
      101,
      101,
      110,
      108,
      101,
      115,
      115,
      111,
      110,
      115,
      99,
      108,
      111,
      115,
      101,
      115,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      99,
      114,
      111,
      115,
      115,
      101,
      100,
      69,
      78,
      68,
      32,
      45,
      45,
      62,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      76,
      105,
      99,
      101,
      110,
      115,
      101,
      72,
      101,
      97,
      108,
      116,
      104,
      32,
      102,
      97,
      105,
      114,
      108,
      121,
      32,
      119,
      101,
      97,
      108,
      116,
      104,
      121,
      109,
      105,
      110,
      105,
      109,
      97,
      108,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      108,
      97,
      98,
      101,
      108,
      34,
      62,
      115,
      105,
      110,
      103,
      105,
      110,
      103,
      102,
      97,
      114,
      109,
      101,
      114,
      115,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      71,
      114,
      101,
      103,
      111,
      114,
      121,
      102,
      111,
      110,
      116,
      32,
      99,
      111,
      112,
      117,
      114,
      115,
      117,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      109,
      97,
      107,
      101,
      32,
      117,
      112,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      98,
      111,
      116,
      104,
      32,
      111,
      102,
      98,
      108,
      111,
      99,
      107,
      101,
      100,
      115,
      97,
      119,
      32,
      116,
      104,
      101,
      111,
      102,
      102,
      105,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      117,
      114,
      115,
      105,
      102,
      40,
      100,
      111,
      99,
      117,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      112,
      117,
      115,
      104,
      40,
      102,
      117,
      65,
      117,
      103,
      117,
      115,
      116,
      32,
      85,
      84,
      70,
      45,
      56,
      34,
      62,
      70,
      97,
      110,
      116,
      97,
      115,
      121,
      105,
      110,
      32,
      109,
      111,
      115,
      116,
      105,
      110,
      106,
      117,
      114,
      101,
      100,
      85,
      115,
      117,
      97,
      108,
      108,
      121,
      102,
      97,
      114,
      109,
      105,
      110,
      103,
      99,
      108,
      111,
      115,
      117,
      114,
      101,
      111,
      98,
      106,
      101,
      99,
      116,
      32,
      100,
      101,
      102,
      101,
      110,
      99,
      101,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      77,
      101,
      100,
      105,
      99,
      97,
      108,
      60,
      98,
      111,
      100,
      121,
      62,
      10,
      101,
      118,
      105,
      100,
      101,
      110,
      116,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      107,
      101,
      121,
      67,
      111,
      100,
      101,
      115,
      105,
      120,
      116,
      101,
      101,
      110,
      73,
      115,
      108,
      97,
      109,
      105,
      99,
      35,
      48,
      48,
      48,
      48,
      48,
      48,
      101,
      110,
      116,
      105,
      114,
      101,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      111,
      110,
      101,
      32,
      99,
      97,
      110,
      99,
      111,
      108,
      111,
      114,
      32,
      61,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      101,
      120,
      116,
      101,
      110,
      100,
      115,
      80,
      104,
      121,
      115,
      105,
      99,
      115,
      116,
      101,
      114,
      114,
      97,
      105,
      110,
      60,
      116,
      98,
      111,
      100,
      121,
      62,
      102,
      117,
      110,
      101,
      114,
      97,
      108,
      118,
      105,
      101,
      119,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      99,
      114,
      105,
      99,
      107,
      101,
      116,
      112,
      114,
      111,
      112,
      104,
      101,
      116,
      115,
      104,
      105,
      102,
      116,
      101,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      115,
      82,
      117,
      115,
      115,
      101,
      108,
      108,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      99,
      111,
      109,
      112,
      97,
      99,
      116,
      97,
      108,
      103,
      101,
      98,
      114,
      97,
      115,
      111,
      99,
      105,
      97,
      108,
      45,
      98,
      117,
      108,
      107,
      32,
      111,
      102,
      109,
      97,
      110,
      32,
      97,
      110,
      100,
      60,
      47,
      116,
      100,
      62,
      10,
      32,
      104,
      101,
      32,
      108,
      101,
      102,
      116,
      41,
      46,
      118,
      97,
      108,
      40,
      41,
      102,
      97,
      108,
      115,
      101,
      41,
      59,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      97,
      110,
      107,
      105,
      110,
      103,
      104,
      111,
      109,
      101,
      32,
      116,
      111,
      110,
      97,
      109,
      105,
      110,
      103,
      32,
      65,
      114,
      105,
      122,
      111,
      110,
      97,
      99,
      114,
      101,
      100,
      105,
      116,
      115,
      41,
      59,
      10,
      125,
      41,
      59,
      10,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      105,
      110,
      32,
      116,
      117,
      114,
      110,
      67,
      111,
      108,
      108,
      105,
      110,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      66,
      117,
      116,
      32,
      116,
      104,
      101,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      84,
      105,
      116,
      108,
      101,
      34,
      62,
      67,
      97,
      112,
      116,
      97,
      105,
      110,
      115,
      112,
      101,
      108,
      108,
      101,
      100,
      103,
      111,
      100,
      100,
      101,
      115,
      115,
      84,
      97,
      103,
      32,
      45,
      45,
      62,
      65,
      100,
      100,
      105,
      110,
      103,
      58,
      98,
      117,
      116,
      32,
      119,
      97,
      115,
      82,
      101,
      99,
      101,
      110,
      116,
      32,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      61,
      102,
      97,
      108,
      115,
      101,
      38,
      76,
      105,
      110,
      99,
      111,
      108,
      110,
      119,
      101,
      32,
      107,
      110,
      111,
      119,
      67,
      111,
      117,
      110,
      116,
      101,
      114,
      74,
      117,
      100,
      97,
      105,
      115,
      109,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      97,
      108,
      116,
      101,
      114,
      101,
      100,
      39,
      93,
      41,
      59,
      10,
      32,
      32,
      104,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      99,
      108,
      101,
      97,
      114,
      69,
      118,
      101,
      110,
      116,
      39,
      44,
      98,
      111,
      116,
      104,
      32,
      105,
      110,
      110,
      111,
      116,
      32,
      97,
      108,
      108,
      10,
      10,
      60,
      33,
      45,
      45,
      32,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      104,
      97,
      114,
      100,
      32,
      116,
      111,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      111,
      114,
      116,
      32,
      111,
      102,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      115,
      116,
      114,
      101,
      101,
      116,
      115,
      66,
      101,
      114,
      110,
      97,
      114,
      100,
      97,
      115,
      115,
      101,
      114,
      116,
      115,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      102,
      97,
      110,
      116,
      97,
      115,
      121,
      100,
      111,
      119,
      110,
      32,
      105,
      110,
      104,
      97,
      114,
      98,
      111,
      117,
      114,
      70,
      114,
      101,
      101,
      100,
      111,
      109,
      106,
      101,
      119,
      101,
      108,
      114,
      121,
      47,
      97,
      98,
      111,
      117,
      116,
      46,
      46,
      115,
      101,
      97,
      114,
      99,
      104,
      108,
      101,
      103,
      101,
      110,
      100,
      115,
      105,
      115,
      32,
      109,
      97,
      100,
      101,
      109,
      111,
      100,
      101,
      114,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      111,
      110,
      111,
      110,
      108,
      121,
      32,
      116,
      111,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      108,
      105,
      110,
      101,
      97,
      114,
      32,
      112,
      97,
      105,
      110,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      110,
      111,
      116,
      114,
      97,
      114,
      101,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      110,
      121,
      109,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      101,
      114,
      48,
      48,
      38,
      97,
      109,
      112,
      59,
      97,
      115,
      32,
      109,
      97,
      110,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      47,
      42,
      32,
      60,
      33,
      91,
      67,
      116,
      105,
      116,
      108,
      101,
      32,
      61,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      108,
      111,
      119,
      101,
      115,
      116,
      32,
      112,
      105,
      99,
      107,
      101,
      100,
      32,
      101,
      115,
      99,
      97,
      112,
      101,
      100,
      117,
      115,
      101,
      115,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      32,
      80,
      117,
      98,
      108,
      105,
      99,
      77,
      97,
      116,
      116,
      104,
      101,
      119,
      116,
      97,
      99,
      116,
      105,
      99,
      115,
      100,
      97,
      109,
      97,
      103,
      101,
      100,
      119,
      97,
      121,
      32,
      102,
      111,
      114,
      108,
      97,
      119,
      115,
      32,
      111,
      102,
      101,
      97,
      115,
      121,
      32,
      116,
      111,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      32,
      115,
      105,
      109,
      112,
      108,
      101,
      125,
      99,
      97,
      116,
      99,
      104,
      40,
      115,
      101,
      118,
      101,
      110,
      116,
      104,
      105,
      110,
      102,
      111,
      98,
      111,
      120,
      119,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      97,
      105,
      110,
      116,
      101,
      100,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      73,
      32,
      100,
      111,
      110,
      39,
      116,
      114,
      101,
      116,
      114,
      101,
      97,
      116,
      46,
      32,
      83,
      111,
      109,
      101,
      32,
      119,
      119,
      46,
      34,
      41,
      59,
      10,
      98,
      111,
      109,
      98,
      105,
      110,
      103,
      109,
      97,
      105,
      108,
      116,
      111,
      58,
      109,
      97,
      100,
      101,
      32,
      105,
      110,
      46,
      32,
      77,
      97,
      110,
      121,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      115,
      124,
      124,
      123,
      125,
      59,
      119,
      105,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      100,
      101,
      102,
      101,
      97,
      116,
      115,
      102,
      97,
      118,
      111,
      114,
      101,
      100,
      111,
      112,
      116,
      105,
      99,
      97,
      108,
      112,
      97,
      103,
      101,
      84,
      114,
      97,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      115,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      60,
      99,
      111,
      109,
      83,
      99,
      111,
      114,
      65,
      108,
      108,
      32,
      116,
      104,
      101,
      106,
      81,
      117,
      101,
      114,
      121,
      46,
      116,
      111,
      117,
      114,
      105,
      115,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      102,
      97,
      108,
      115,
      101,
      34,
      32,
      87,
      105,
      108,
      104,
      101,
      108,
      109,
      115,
      117,
      98,
      117,
      114,
      98,
      115,
      103,
      101,
      110,
      117,
      105,
      110,
      101,
      98,
      105,
      115,
      104,
      111,
      112,
      115,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      103,
      108,
      111,
      98,
      97,
      108,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      110,
      111,
      109,
      105,
      110,
      97,
      108,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      101,
      99,
      117,
      108,
      97,
      114,
      108,
      101,
      102,
      116,
      32,
      116,
      111,
      99,
      104,
      105,
      101,
      102,
      108,
      121,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      45,
      98,
      97,
      110,
      110,
      101,
      114,
      60,
      47,
      108,
      105,
      62,
      10,
      10,
      46,
      32,
      87,
      104,
      101,
      110,
      32,
      105,
      110,
      32,
      98,
      111,
      116,
      104,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      118,
      105,
      97,
      32,
      116,
      104,
      101,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      119,
      101,
      108,
      102,
      97,
      114,
      101,
      114,
      117,
      108,
      105,
      110,
      103,
      32,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      99,
      97,
      112,
      116,
      97,
      105,
      110,
      104,
      105,
      115,
      32,
      115,
      111,
      110,
      114,
      117,
      108,
      101,
      32,
      111,
      102,
      104,
      101,
      32,
      116,
      111,
      111,
      107,
      105,
      116,
      115,
      101,
      108,
      102,
      44,
      61,
      48,
      38,
      97,
      109,
      112,
      59,
      40,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      97,
      109,
      112,
      108,
      101,
      115,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      99,
      111,
      109,
      47,
      112,
      97,
      103,
      77,
      97,
      114,
      116,
      105,
      110,
      32,
      75,
      101,
      110,
      110,
      101,
      100,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      102,
      117,
      108,
      108,
      32,
      111,
      102,
      104,
      97,
      110,
      100,
      108,
      101,
      100,
      66,
      101,
      115,
      105,
      100,
      101,
      115,
      47,
      47,
      45,
      45,
      62,
      60,
      47,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      101,
      115,
      115,
      101,
      110,
      99,
      101,
      104,
      105,
      109,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      32,
      98,
      121,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      46,
      109,
      105,
      110,
      101,
      114,
      97,
      108,
      116,
      111,
      32,
      116,
      97,
      107,
      101,
      119,
      97,
      121,
      115,
      32,
      116,
      111,
      115,
      46,
      111,
      114,
      103,
      47,
      108,
      97,
      100,
      118,
      105,
      115,
      101,
      100,
      112,
      101,
      110,
      97,
      108,
      116,
      121,
      115,
      105,
      109,
      112,
      108,
      101,
      58,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      76,
      101,
      116,
      116,
      101,
      114,
      115,
      97,
      32,
      115,
      104,
      111,
      114,
      116,
      72,
      101,
      114,
      98,
      101,
      114,
      116,
      115,
      116,
      114,
      105,
      107,
      101,
      115,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      108,
      105,
      103,
      104,
      116,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      112,
      115,
      108,
      111,
      119,
      108,
      121,
      32,
      108,
      101,
      115,
      115,
      101,
      114,
      32,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      60,
      47,
      112,
      62,
      10,
      9,
      9,
      105,
      116,
      32,
      105,
      110,
      116,
      111,
      114,
      97,
      110,
      107,
      101,
      100,
      32,
      114,
      97,
      116,
      101,
      32,
      111,
      102,
      117,
      108,
      62,
      13,
      10,
      32,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      112,
      97,
      105,
      114,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      32,
      105,
      116,
      75,
      111,
      110,
      116,
      97,
      107,
      116,
      65,
      110,
      116,
      111,
      110,
      105,
      111,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      114,
      101,
      97,
      109,
      115,
      116,
      114,
      97,
      112,
      112,
      101,
      100,
      34,
      41,
      46,
      99,
      115,
      115,
      40,
      104,
      111,
      115,
      116,
      105,
      108,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      108,
      105,
      116,
      116,
      108,
      101,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      44,
      80,
      105,
      99,
      116,
      117,
      114,
      101,
      45,
      45,
      62,
      13,
      10,
      13,
      10,
      32,
      114,
      111,
      119,
      115,
      61,
      34,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      110,
      118,
      101,
      114,
      115,
      101,
      60,
      102,
      111,
      111,
      116,
      101,
      114,
      67,
      117,
      115,
      116,
      111,
      109,
      86,
      62,
      60,
      92,
      47,
      115,
      99,
      114,
      115,
      111,
      108,
      118,
      105,
      110,
      103,
      67,
      104,
      97,
      109,
      98,
      101,
      114,
      115,
      108,
      97,
      118,
      101,
      114,
      121,
      119,
      111,
      117,
      110,
      100,
      101,
      100,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      33,
      61,
      32,
      39,
      117,
      110,
      100,
      102,
      111,
      114,
      32,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      108,
      121,
      32,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      65,
      114,
      97,
      98,
      105,
      97,
      110,
      98,
      97,
      99,
      107,
      101,
      100,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      105,
      116,
      32,
      111,
      102,
      109,
      111,
      98,
      105,
      108,
      101,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      44,
      105,
      115,
      32,
      104,
      111,
      109,
      101,
      114,
      105,
      115,
      107,
      32,
      111,
      102,
      100,
      101,
      115,
      105,
      114,
      101,
      100,
      67,
      108,
      105,
      110,
      116,
      111,
      110,
      99,
      111,
      115,
      116,
      32,
      111,
      102,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      110,
      111,
      110,
      101,
      32,
      111,
      102,
      112,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      101,
      97,
      100,
      39,
      41,
      91,
      48,
      67,
      114,
      105,
      116,
      105,
      99,
      115,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      62,
      38,
      99,
      111,
      112,
      121,
      59,
      103,
      114,
      111,
      117,
      112,
      34,
      62,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      105,
      100,
      103,
      101,
      116,
      46,
      112,
      115,
      58,
      34,
      32,
      63,
      32,
      114,
      101,
      98,
      117,
      105,
      108,
      116,
      98,
      121,
      32,
      115,
      111,
      109,
      101,
      70,
      111,
      114,
      109,
      101,
      114,
      32,
      101,
      100,
      105,
      116,
      111,
      114,
      115,
      100,
      101,
      108,
      97,
      121,
      101,
      100,
      67,
      97,
      110,
      111,
      110,
      105,
      99,
      104,
      97,
      100,
      32,
      116,
      104,
      101,
      112,
      117,
      115,
      104,
      105,
      110,
      103,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      32,
      97,
      114,
      101,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      66,
      97,
      98,
      121,
      108,
      111,
      110,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      114,
      67,
      111,
      109,
      109,
      97,
      110,
      100,
      105,
      116,
      115,
      32,
      117,
      115,
      101,
      65,
      115,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      117,
      114,
      115,
      101,
      115,
      97,
      32,
      116,
      104,
      105,
      114,
      100,
      100,
      101,
      110,
      111,
      116,
      101,
      115,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      72,
      111,
      117,
      115,
      116,
      111,
      110,
      50,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      100,
      111,
      117,
      98,
      108,
      101,
      32,
      103,
      111,
      97,
      108,
      32,
      111,
      102,
      70,
      97,
      109,
      111,
      117,
      115,
      32,
      41,
      46,
      98,
      105,
      110,
      100,
      40,
      112,
      114,
      105,
      101,
      115,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      105,
      110,
      32,
      74,
      117,
      108,
      121,
      115,
      116,
      32,
      43,
      32,
      34,
      103,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      100,
      101,
      99,
      105,
      109,
      97,
      108,
      104,
      101,
      108,
      112,
      102,
      117,
      108,
      114,
      101,
      118,
      105,
      118,
      101,
      100,
      105,
      115,
      32,
      118,
      101,
      114,
      121,
      114,
      39,
      43,
      39,
      105,
      112,
      116,
      108,
      111,
      115,
      105,
      110,
      103,
      32,
      102,
      101,
      109,
      97,
      108,
      101,
      115,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      115,
      116,
      114,
      105,
      110,
      103,
      115,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      32,
      60,
      111,
      98,
      106,
      101,
      99,
      116,
      102,
      111,
      114,
      99,
      105,
      110,
      103,
      83,
      116,
      114,
      105,
      110,
      103,
      40,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      101,
      110,
      99,
      111,
      100,
      101,
      100,
      46,
      32,
      32,
      84,
      104,
      101,
      32,
      98,
      97,
      108,
      108,
      111,
      111,
      110,
      100,
      111,
      110,
      101,
      32,
      98,
      121,
      47,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      108,
      97,
      119,
      32,
      111,
      102,
      32,
      73,
      110,
      100,
      105,
      97,
      110,
      97,
      97,
      118,
      111,
      105,
      100,
      101,
      100,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      50,
      112,
      120,
      32,
      51,
      112,
      120,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      97,
      102,
      116,
      101,
      114,
      32,
      97,
      112,
      111,
      108,
      105,
      99,
      121,
      46,
      109,
      101,
      110,
      32,
      97,
      110,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      45,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      102,
      111,
      114,
      32,
      117,
      115,
      101,
      115,
      99,
      114,
      101,
      101,
      110,
      46,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      105,
      109,
      97,
      103,
      101,
      32,
      61,
      102,
      97,
      109,
      105,
      108,
      121,
      44,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      100,
      114,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      114,
      110,
      97,
      108,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      110,
      111,
      116,
      105,
      99,
      101,
      100,
      118,
      105,
      101,
      119,
      101,
      114,
      115,
      125,
      41,
      40,
      41,
      59,
      10,
      32,
      105,
      115,
      32,
      109,
      111,
      114,
      101,
      115,
      101,
      97,
      115,
      111,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      119,
      105,
      115,
      32,
      106,
      117,
      115,
      116,
      99,
      111,
      110,
      115,
      101,
      110,
      116,
      32,
      83,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      119,
      104,
      121,
      32,
      116,
      104,
      101,
      115,
      104,
      105,
      112,
      112,
      101,
      100,
      98,
      114,
      62,
      60,
      98,
      114,
      62,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      109,
      97,
      100,
      101,
      32,
      111,
      102,
      99,
      117,
      105,
      115,
      105,
      110,
      101,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      32,
      118,
      101,
      114,
      121,
      32,
      65,
      100,
      109,
      105,
      114,
      97,
      108,
      32,
      102,
      105,
      120,
      101,
      100,
      59,
      110,
      111,
      114,
      109,
      97,
      108,
      32,
      77,
      105,
      115,
      115,
      105,
      111,
      110,
      80,
      114,
      101,
      115,
      115,
      44,
      32,
      111,
      110,
      116,
      97,
      114,
      105,
      111,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      114,
      121,
      32,
      116,
      111,
      32,
      105,
      110,
      118,
      97,
      100,
      101,
      100,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      105,
      115,
      32,
      109,
      111,
      115,
      116,
      97,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      108,
      121,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      125,
      41,
      59,
      13,
      10,
      32,
      32,
      105,
      109,
      109,
      101,
      110,
      115,
      101,
      116,
      105,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      116,
      32,
      111,
      117,
      116,
      115,
      97,
      116,
      105,
      115,
      102,
      121,
      116,
      111,
      32,
      102,
      105,
      110,
      100,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      108,
      111,
      116,
      32,
      111,
      102,
      32,
      80,
      108,
      97,
      121,
      101,
      114,
      115,
      105,
      110,
      32,
      74,
      117,
      110,
      101,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      110,
      111,
      116,
      32,
      116,
      104,
      101,
      116,
      105,
      109,
      101,
      32,
      116,
      111,
      100,
      105,
      115,
      116,
      97,
      110,
      116,
      70,
      105,
      110,
      110,
      105,
      115,
      104,
      115,
      114,
      99,
      32,
      61,
      32,
      40,
      115,
      105,
      110,
      103,
      108,
      101,
      32,
      104,
      101,
      108,
      112,
      32,
      111,
      102,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      119,
      32,
      97,
      110,
      100,
      108,
      97,
      98,
      101,
      108,
      101,
      100,
      102,
      111,
      114,
      101,
      115,
      116,
      115,
      99,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      112,
      97,
      99,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      45,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      83,
      116,
      97,
      110,
      108,
      101,
      121,
      98,
      114,
      105,
      100,
      103,
      101,
      115,
      47,
      103,
      108,
      111,
      98,
      97,
      108,
      67,
      114,
      111,
      97,
      116,
      105,
      97,
      32,
      65,
      98,
      111,
      117,
      116,
      32,
      91,
      48,
      93,
      59,
      10,
      32,
      32,
      105,
      116,
      44,
      32,
      97,
      110,
      100,
      103,
      114,
      111,
      117,
      112,
      101,
      100,
      98,
      101,
      105,
      110,
      103,
      32,
      97,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      104,
      101,
      32,
      109,
      97,
      100,
      101,
      108,
      105,
      103,
      104,
      116,
      101,
      114,
      101,
      116,
      104,
      105,
      99,
      97,
      108,
      70,
      70,
      70,
      70,
      70,
      70,
      34,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      108,
      105,
      107,
      101,
      32,
      97,
      32,
      101,
      109,
      112,
      108,
      111,
      121,
      115,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      112,
      114,
      105,
      110,
      116,
      101,
      114,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      117,
      98,
      45,
      108,
      105,
      110,
      107,
      114,
      101,
      106,
      101,
      99,
      116,
      115,
      97,
      110,
      100,
      32,
      117,
      115,
      101,
      105,
      109,
      97,
      103,
      101,
      34,
      62,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      102,
      101,
      101,
      100,
      105,
      110,
      103,
      78,
      117,
      99,
      108,
      101,
      97,
      114,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      111,
      32,
      104,
      101,
      108,
      112,
      87,
      111,
      109,
      101,
      110,
      39,
      115,
      78,
      101,
      105,
      116,
      104,
      101,
      114,
      77,
      101,
      120,
      105,
      99,
      97,
      110,
      112,
      114,
      111,
      116,
      101,
      105,
      110,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      121,
      32,
      109,
      97,
      110,
      121,
      104,
      101,
      97,
      108,
      116,
      104,
      121,
      108,
      97,
      119,
      115,
      117,
      105,
      116,
      100,
      101,
      118,
      105,
      115,
      101,
      100,
      46,
      112,
      117,
      115,
      104,
      40,
      123,
      115,
      101,
      108,
      108,
      101,
      114,
      115,
      115,
      105,
      109,
      112,
      108,
      121,
      32,
      84,
      104,
      114,
      111,
      117,
      103,
      104,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      32,
      73,
      109,
      97,
      103,
      101,
      40,
      111,
      108,
      100,
      101,
      114,
      34,
      62,
      117,
      115,
      46,
      106,
      115,
      34,
      62,
      32,
      83,
      105,
      110,
      99,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      111,
      112,
      101,
      110,
      32,
      116,
      111,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      108,
      105,
      101,
      115,
      32,
      105,
      110,
      39,
      93,
      41,
      59,
      13,
      10,
      32,
      32,
      109,
      97,
      114,
      107,
      101,
      116,
      119,
      104,
      111,
      32,
      105,
      115,
      32,
      40,
      34,
      68,
      79,
      77,
      67,
      111,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      111,
      110,
      101,
      32,
      102,
      111,
      114,
      116,
      121,
      112,
      101,
      111,
      102,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      112,
      114,
      111,
      102,
      105,
      116,
      115,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      116,
      111,
      32,
      115,
      104,
      111,
      119,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      109,
      97,
      100,
      101,
      32,
      105,
      116,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      105,
      110,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      97,
      114,
      105,
      115,
      105,
      110,
      103,
      115,
      114,
      99,
      32,
      61,
      32,
      39,
      109,
      97,
      107,
      101,
      32,
      97,
      32,
      115,
      101,
      99,
      117,
      114,
      101,
      100,
      66,
      97,
      112,
      116,
      105,
      115,
      116,
      118,
      111,
      116,
      105,
      110,
      103,
      32,
      10,
      9,
      9,
      118,
      97,
      114,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      50,
      103,
      114,
      101,
      119,
      32,
      117,
      112,
      67,
      108,
      105,
      109,
      97,
      116,
      101,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      119,
      97,
      121,
      32,
      116,
      104,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      97,
      99,
      116,
      105,
      110,
      103,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      116,
      111,
      32,
      119,
      111,
      114,
      107,
      114,
      101,
      100,
      117,
      99,
      101,
      115,
      104,
      97,
      115,
      32,
      104,
      97,
      100,
      101,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      98,
      111,
      111,
      107,
      32,
      111,
      102,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      61,
      61,
      32,
      34,
      104,
      116,
      116,
      60,
      104,
      101,
      97,
      100,
      101,
      114,
      10,
      60,
      104,
      116,
      109,
      108,
      62,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      102,
      97,
      99,
      105,
      110,
      103,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      46,
      114,
      101,
      108,
      121,
      32,
      111,
      110,
      104,
      111,
      115,
      116,
      101,
      100,
      32,
      46,
      99,
      117,
      115,
      116,
      111,
      109,
      104,
      101,
      32,
      119,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      102,
      111,
      114,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      70,
      97,
      109,
      105,
      108,
      121,
      32,
      97,
      32,
      109,
      101,
      97,
      110,
      115,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      117,
      109,
      115,
      46,
      102,
      111,
      111,
      116,
      97,
      103,
      101,
      34,
      62,
      77,
      111,
      98,
      105,
      108,
      67,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      34,
      32,
      105,
      100,
      61,
      34,
      97,
      115,
      32,
      104,
      105,
      103,
      104,
      105,
      110,
      116,
      101,
      110,
      115,
      101,
      45,
      45,
      62,
      60,
      33,
      45,
      45,
      102,
      101,
      109,
      97,
      108,
      101,
      32,
      105,
      115,
      32,
      115,
      101,
      101,
      110,
      105,
      109,
      112,
      108,
      105,
      101,
      100,
      115,
      101,
      116,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      102,
      97,
      115,
      116,
      101,
      115,
      116,
      98,
      101,
      115,
      105,
      100,
      101,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      95,
      98,
      111,
      117,
      110,
      100,
      101,
      100,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      73,
      110,
      102,
      111,
      98,
      111,
      120,
      101,
      118,
      101,
      110,
      116,
      115,
      44,
      97,
      32,
      121,
      111,
      117,
      110,
      103,
      97,
      110,
      100,
      32,
      97,
      114,
      101,
      78,
      97,
      116,
      105,
      118,
      101,
      32,
      99,
      104,
      101,
      97,
      112,
      101,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      97,
      110,
      100,
      32,
      104,
      97,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      119,
      111,
      110,
      32,
      116,
      104,
      101,
      40,
      109,
      111,
      115,
      116,
      108,
      121,
      114,
      105,
      103,
      104,
      116,
      58,
      32,
      102,
      105,
      110,
      100,
      32,
      97,
      32,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      80,
      114,
      105,
      110,
      99,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      111,
      102,
      115,
      101,
      97,
      114,
      99,
      104,
      95,
      110,
      97,
      116,
      117,
      114,
      101,
      44,
      108,
      101,
      103,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      105,
      111,
      100,
      44,
      108,
      97,
      110,
      100,
      32,
      111,
      102,
      111,
      114,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      100,
      117,
      99,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      108,
      101,
      108,
      111,
      99,
      97,
      108,
      108,
      121,
      65,
      103,
      97,
      105,
      110,
      115,
      116,
      116,
      104,
      101,
      32,
      119,
      97,
      121,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      112,
      120,
      59,
      34,
      62,
      13,
      10,
      112,
      117,
      115,
      104,
      101,
      100,
      32,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      110,
      117,
      109,
      101,
      114,
      97,
      108,
      67,
      101,
      114,
      116,
      97,
      105,
      110,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      111,
      114,
      32,
      115,
      111,
      109,
      101,
      110,
      97,
      109,
      101,
      32,
      105,
      115,
      97,
      110,
      100,
      44,
      32,
      105,
      110,
      99,
      114,
      111,
      119,
      110,
      101,
      100,
      73,
      83,
      66,
      78,
      32,
      48,
      45,
      99,
      114,
      101,
      97,
      116,
      101,
      115,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      108,
      97,
      116,
      101,
      32,
      105,
      110,
      68,
      101,
      102,
      101,
      110,
      99,
      101,
      101,
      110,
      97,
      99,
      116,
      101,
      100,
      119,
      105,
      115,
      104,
      32,
      116,
      111,
      98,
      114,
      111,
      97,
      100,
      108,
      121,
      99,
      111,
      111,
      108,
      105,
      110,
      103,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      105,
      116,
      46,
      32,
      84,
      104,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      77,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      115,
      60,
      104,
      116,
      109,
      108,
      62,
      10,
      112,
      101,
      111,
      112,
      108,
      101,
      46,
      105,
      110,
      32,
      111,
      110,
      101,
      32,
      61,
      119,
      105,
      110,
      100,
      111,
      119,
      102,
      111,
      111,
      116,
      101,
      114,
      95,
      97,
      32,
      103,
      111,
      111,
      100,
      32,
      114,
      101,
      107,
      108,
      97,
      109,
      97,
      111,
      116,
      104,
      101,
      114,
      115,
      44,
      116,
      111,
      32,
      116,
      104,
      105,
      115,
      95,
      99,
      111,
      111,
      107,
      105,
      101,
      112,
      97,
      110,
      101,
      108,
      34,
      62,
      76,
      111,
      110,
      100,
      111,
      110,
      44,
      100,
      101,
      102,
      105,
      110,
      101,
      115,
      99,
      114,
      117,
      115,
      104,
      101,
      100,
      98,
      97,
      112,
      116,
      105,
      115,
      109,
      99,
      111,
      97,
      115,
      116,
      97,
      108,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      109,
      111,
      118,
      101,
      32,
      116,
      111,
      108,
      111,
      115,
      116,
      32,
      105,
      110,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      114,
      105,
      118,
      97,
      108,
      114,
      121,
      115,
      101,
      114,
      118,
      101,
      114,
      115,
      32,
      83,
      121,
      115,
      116,
      101,
      109,
      80,
      101,
      114,
      104,
      97,
      112,
      115,
      101,
      115,
      32,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      100,
      102,
      108,
      111,
      119,
      105,
      110,
      103,
      108,
      97,
      115,
      116,
      101,
      100,
      32,
      114,
      105,
      115,
      101,
      32,
      105,
      110,
      71,
      101,
      110,
      101,
      115,
      105,
      115,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      114,
      105,
      115,
      105,
      110,
      103,
      32,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      98,
      97,
      99,
      107,
      105,
      110,
      103,
      104,
      101,
      32,
      119,
      105,
      108,
      108,
      103,
      105,
      118,
      101,
      110,
      32,
      97,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      99,
      105,
      116,
      105,
      101,
      115,
      46,
      102,
      108,
      111,
      119,
      32,
      111,
      102,
      32,
      76,
      97,
      116,
      101,
      114,
      32,
      97,
      108,
      108,
      32,
      98,
      117,
      116,
      72,
      105,
      103,
      104,
      119,
      97,
      121,
      111,
      110,
      108,
      121,
      32,
      98,
      121,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      104,
      101,
      32,
      100,
      111,
      101,
      115,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      98,
      97,
      116,
      116,
      101,
      114,
      121,
      38,
      97,
      109,
      112,
      59,
      108,
      97,
      115,
      105,
      110,
      103,
      108,
      101,
      115,
      116,
      104,
      114,
      101,
      97,
      116,
      115,
      105,
      110,
      116,
      101,
      103,
      101,
      114,
      116,
      97,
      107,
      101,
      32,
      111,
      110,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      61,
      85,
      83,
      38,
      97,
      109,
      112,
      83,
      101,
      101,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      105,
      118,
      101,
      115,
      98,
      121,
      32,
      116,
      104,
      105,
      115,
      115,
      121,
      115,
      116,
      101,
      109,
      46,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      58,
      104,
      111,
      118,
      101,
      114,
      44,
      108,
      101,
      115,
      98,
      105,
      97,
      110,
      115,
      117,
      114,
      110,
      97,
      109,
      101,
      97,
      110,
      100,
      32,
      97,
      108,
      108,
      99,
      111,
      109,
      109,
      111,
      110,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      95,
      95,
      112,
      97,
      114,
      97,
      109,
      115,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      47,
      112,
      105,
      120,
      101,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      115,
      111,
      32,
      108,
      111,
      110,
      103,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      106,
      111,
      105,
      110,
      116,
      108,
      121,
      115,
      107,
      121,
      115,
      99,
      114,
      97,
      85,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      65,
      116,
      108,
      97,
      110,
      116,
      97,
      110,
      117,
      99,
      108,
      101,
      117,
      115,
      67,
      111,
      117,
      110,
      116,
      121,
      44,
      112,
      117,
      114,
      101,
      108,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      34,
      62,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      98,
      117,
      105,
      108,
      100,
      32,
      97,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      97,
      32,
      103,
      105,
      118,
      101,
      110,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      104,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      118,
      101,
      110,
      116,
      115,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      111,
      119,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      105,
      116,
      104,
      32,
      109,
      97,
      110,
      32,
      119,
      104,
      111,
      111,
      114,
      103,
      47,
      87,
      101,
      98,
      111,
      110,
      101,
      32,
      97,
      110,
      100,
      99,
      97,
      118,
      97,
      108,
      114,
      121,
      72,
      101,
      32,
      100,
      105,
      101,
      100,
      115,
      101,
      97,
      116,
      116,
      108,
      101,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      123,
      119,
      105,
      110,
      100,
      111,
      119,
      104,
      97,
      118,
      101,
      32,
      116,
      111,
      105,
      102,
      40,
      119,
      105,
      110,
      100,
      97,
      110,
      100,
      32,
      105,
      116,
      115,
      115,
      111,
      108,
      101,
      108,
      121,
      32,
      109,
      38,
      113,
      117,
      111,
      116,
      59,
      114,
      101,
      110,
      101,
      119,
      101,
      100,
      68,
      101,
      116,
      114,
      111,
      105,
      116,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      101,
      105,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      32,
      105,
      110,
      83,
      101,
      110,
      97,
      116,
      111,
      114,
      85,
      115,
      60,
      47,
      97,
      62,
      60,
      75,
      105,
      110,
      103,
      32,
      111,
      102,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      45,
      112,
      114,
      111,
      100,
      117,
      99,
      104,
      101,
      32,
      117,
      115,
      101,
      100,
      97,
      114,
      116,
      32,
      97,
      110,
      100,
      104,
      105,
      109,
      32,
      97,
      110,
      100,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      115,
      99,
      111,
      114,
      105,
      110,
      103,
      97,
      116,
      32,
      104,
      111,
      109,
      101,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      114,
      101,
      108,
      97,
      116,
      101,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      66,
      117,
      102,
      102,
      97,
      108,
      111,
      108,
      105,
      110,
      107,
      34,
      62,
      60,
      119,
      104,
      97,
      116,
      32,
      104,
      101,
      102,
      114,
      101,
      101,
      32,
      116,
      111,
      67,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      99,
      116,
      111,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      100,
      111,
      110,
      101,
      32,
      100,
      97,
      121,
      110,
      101,
      114,
      118,
      111,
      117,
      115,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      125,
      59,
      105,
      102,
      40,
      103,
      111,
      105,
      110,
      32,
      119,
      104,
      97,
      116,
      105,
      109,
      103,
      34,
      32,
      97,
      108,
      105,
      115,
      32,
      111,
      110,
      108,
      121,
      115,
      101,
      97,
      114,
      99,
      104,
      47,
      116,
      117,
      101,
      115,
      100,
      97,
      121,
      108,
      111,
      111,
      115,
      101,
      108,
      121,
      83,
      111,
      108,
      111,
      109,
      111,
      110,
      115,
      101,
      120,
      117,
      97,
      108,
      32,
      45,
      32,
      60,
      97,
      32,
      104,
      114,
      109,
      101,
      100,
      105,
      117,
      109,
      34,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      70,
      114,
      97,
      110,
      99,
      101,
      44,
      119,
      105,
      116,
      104,
      32,
      97,
      32,
      119,
      97,
      114,
      32,
      97,
      110,
      100,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      116,
      97,
      107,
      101,
      32,
      97,
      32,
      62,
      13,
      10,
      13,
      10,
      13,
      10,
      109,
      97,
      114,
      107,
      101,
      116,
      46,
      104,
      105,
      103,
      104,
      119,
      97,
      121,
      100,
      111,
      110,
      101,
      32,
      105,
      110,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      34,
      108,
      97,
      115,
      116,
      34,
      62,
      111,
      98,
      108,
      105,
      103,
      101,
      100,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      34,
      117,
      110,
      100,
      101,
      102,
      105,
      109,
      97,
      100,
      101,
      32,
      116,
      111,
      32,
      69,
      97,
      114,
      108,
      121,
      32,
      112,
      114,
      97,
      105,
      115,
      101,
      100,
      105,
      110,
      32,
      105,
      116,
      115,
      32,
      102,
      111,
      114,
      32,
      104,
      105,
      115,
      97,
      116,
      104,
      108,
      101,
      116,
      101,
      74,
      117,
      112,
      105,
      116,
      101,
      114,
      89,
      97,
      104,
      111,
      111,
      33,
      32,
      116,
      101,
      114,
      109,
      101,
      100,
      32,
      115,
      111,
      32,
      109,
      97,
      110,
      121,
      114,
      101,
      97,
      108,
      108,
      121,
      32,
      115,
      46,
      32,
      84,
      104,
      101,
      32,
      97,
      32,
      119,
      111,
      109,
      97,
      110,
      63,
      118,
      97,
      108,
      117,
      101,
      61,
      100,
      105,
      114,
      101,
      99,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      98,
      105,
      99,
      121,
      99,
      108,
      101,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      100,
      97,
      121,
      32,
      97,
      110,
      100,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      82,
      97,
      116,
      104,
      101,
      114,
      44,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      79,
      102,
      102,
      105,
      99,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      116,
      105,
      109,
      101,
      115,
      44,
      32,
      119,
      104,
      101,
      110,
      32,
      97,
      32,
      112,
      97,
      121,
      32,
      102,
      111,
      114,
      111,
      110,
      32,
      116,
      104,
      105,
      115,
      45,
      108,
      105,
      110,
      107,
      34,
      62,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      97,
      110,
      110,
      117,
      97,
      108,
      32,
      116,
      104,
      101,
      32,
      78,
      101,
      119,
      112,
      117,
      116,
      32,
      116,
      104,
      101,
      46,
      99,
      111,
      109,
      34,
      32,
      116,
      97,
      107,
      105,
      110,
      32,
      116,
      111,
      97,
      32,
      98,
      114,
      105,
      101,
      102,
      40,
      105,
      110,
      32,
      116,
      104,
      101,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      101,
      110,
      122,
      121,
      109,
      101,
      115,
      115,
      105,
      109,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      108,
      97,
      116,
      101,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      116,
      104,
      101,
      114,
      97,
      112,
      121,
      97,
      32,
      112,
      111,
      105,
      110,
      116,
      98,
      97,
      110,
      110,
      105,
      110,
      103,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      40,
      41,
      59,
      34,
      32,
      114,
      101,
      97,
      32,
      112,
      108,
      97,
      99,
      101,
      92,
      117,
      48,
      48,
      51,
      67,
      97,
      97,
      98,
      111,
      117,
      116,
      32,
      97,
      116,
      114,
      62,
      13,
      10,
      9,
      9,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      103,
      105,
      118,
      101,
      115,
      32,
      97,
      60,
      83,
      67,
      82,
      73,
      80,
      84,
      82,
      97,
      105,
      108,
      119,
      97,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      116,
      111,
      111,
      108,
      98,
      111,
      120,
      66,
      121,
      73,
      100,
      40,
      34,
      120,
      104,
      117,
      109,
      97,
      110,
      115,
      44,
      119,
      97,
      116,
      99,
      104,
      101,
      115,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      105,
      102,
      32,
      40,
      119,
      105,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      109,
      97,
      116,
      115,
      32,
      85,
      110,
      100,
      101,
      114,
      32,
      98,
      117,
      116,
      32,
      104,
      97,
      115,
      104,
      97,
      110,
      100,
      101,
      100,
      32,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      116,
      104,
      97,
      110,
      32,
      105,
      110,
      102,
      101,
      97,
      114,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      116,
      101,
      100,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      108,
      101,
      102,
      116,
      32,
      105,
      110,
      118,
      111,
      108,
      116,
      97,
      103,
      101,
      105,
      110,
      32,
      101,
      97,
      99,
      104,
      97,
      38,
      113,
      117,
      111,
      116,
      59,
      98,
      97,
      115,
      101,
      32,
      111,
      102,
      73,
      110,
      32,
      109,
      97,
      110,
      121,
      117,
      110,
      100,
      101,
      114,
      103,
      111,
      114,
      101,
      103,
      105,
      109,
      101,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      60,
      47,
      112,
      62,
      13,
      10,
      60,
      117,
      115,
      116,
      111,
      109,
      86,
      97,
      59,
      38,
      103,
      116,
      59,
      60,
      47,
      105,
      109,
      112,
      111,
      114,
      116,
      115,
      111,
      114,
      32,
      116,
      104,
      97,
      116,
      109,
      111,
      115,
      116,
      108,
      121,
      32,
      38,
      97,
      109,
      112,
      59,
      114,
      101,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      112,
      97,
      115,
      115,
      105,
      118,
      101,
      72,
      111,
      115,
      116,
      32,
      61,
      32,
      87,
      104,
      101,
      116,
      104,
      101,
      114,
      102,
      101,
      114,
      116,
      105,
      108,
      101,
      86,
      97,
      114,
      105,
      111,
      117,
      115,
      61,
      91,
      93,
      59,
      40,
      102,
      117,
      99,
      97,
      109,
      101,
      114,
      97,
      115,
      47,
      62,
      60,
      47,
      116,
      100,
      62,
      97,
      99,
      116,
      115,
      32,
      97,
      115,
      73,
      110,
      32,
      115,
      111,
      109,
      101,
      62,
      13,
      10,
      13,
      10,
      60,
      33,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      32,
      60,
      98,
      114,
      32,
      47,
      62,
      66,
      101,
      105,
      106,
      105,
      110,
      103,
      99,
      97,
      116,
      97,
      108,
      195,
      160,
      100,
      101,
      117,
      116,
      115,
      99,
      104,
      101,
      117,
      114,
      111,
      112,
      101,
      117,
      101,
      117,
      115,
      107,
      97,
      114,
      97,
      103,
      97,
      101,
      105,
      108,
      103,
      101,
      115,
      118,
      101,
      110,
      115,
      107,
      97,
      101,
      115,
      112,
      97,
      195,
      177,
      97,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      109,
      195,
      169,
      120,
      105,
      99,
      111,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      105,
      101,
      109,
      112,
      114,
      101,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      111,
      99,
      116,
      117,
      98,
      114,
      101,
      100,
      117,
      114,
      97,
      110,
      116,
      101,
      97,
      195,
      177,
      97,
      100,
      105,
      114,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      97,
      116,
      114,
      97,
      118,
      195,
      169,
      115,
      103,
      114,
      97,
      99,
      105,
      97,
      115,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      101,
      115,
      116,
      97,
      100,
      111,
      115,
      99,
      97,
      108,
      105,
      100,
      97,
      100,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      110,
      195,
      186,
      109,
      101,
      114,
      111,
      97,
      99,
      117,
      101,
      114,
      100,
      111,
      109,
      195,
      186,
      115,
      105,
      99,
      97,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      111,
      102,
      101,
      114,
      116,
      97,
      115,
      97,
      108,
      103,
      117,
      110,
      111,
      115,
      112,
      97,
      195,
      173,
      115,
      101,
      115,
      101,
      106,
      101,
      109,
      112,
      108,
      111,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      112,
      114,
      105,
      118,
      97,
      100,
      111,
      97,
      103,
      114,
      101,
      103,
      97,
      114,
      101,
      110,
      108,
      97,
      99,
      101,
      115,
      112,
      111,
      115,
      105,
      98,
      108,
      101,
      104,
      111,
      116,
      101,
      108,
      101,
      115,
      115,
      101,
      118,
      105,
      108,
      108,
      97,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      101,
      118,
      101,
      110,
      116,
      111,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      109,
      117,
      106,
      101,
      114,
      101,
      115,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      101,
      109,
      98,
      97,
      114,
      103,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      103,
      114,
      97,
      110,
      100,
      101,
      115,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      109,
      101,
      106,
      111,
      114,
      101,
      115,
      102,
      101,
      98,
      114,
      101,
      114,
      111,
      100,
      105,
      115,
      101,
      195,
      177,
      111,
      116,
      117,
      114,
      105,
      115,
      109,
      111,
      99,
      195,
      179,
      100,
      105,
      103,
      111,
      112,
      111,
      114,
      116,
      97,
      100,
      97,
      101,
      115,
      112,
      97,
      99,
      105,
      111,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      97,
      110,
      116,
      111,
      110,
      105,
      111,
      112,
      101,
      114,
      109,
      105,
      116,
      101,
      103,
      117,
      97,
      114,
      100,
      97,
      114,
      97,
      108,
      103,
      117,
      110,
      97,
      115,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      97,
      108,
      103,
      117,
      105,
      101,
      110,
      115,
      101,
      110,
      116,
      105,
      100,
      111,
      118,
      105,
      115,
      105,
      116,
      97,
      115,
      116,
      195,
      173,
      116,
      117,
      108,
      111,
      99,
      111,
      110,
      111,
      99,
      101,
      114,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      102,
      114,
      97,
      110,
      99,
      105,
      97,
      109,
      105,
      110,
      117,
      116,
      111,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      97,
      116,
      101,
      110,
      101,
      109,
      111,
      115,
      101,
      102,
      101,
      99,
      116,
      111,
      115,
      109,
      195,
      161,
      108,
      97,
      103,
      97,
      115,
      101,
      115,
      105,
      195,
      179,
      110,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      103,
      114,
      97,
      110,
      97,
      100,
      97,
      99,
      111,
      109,
      112,
      114,
      97,
      114,
      105,
      110,
      103,
      114,
      101,
      115,
      111,
      103,
      97,
      114,
      99,
      195,
      173,
      97,
      97,
      99,
      99,
      105,
      195,
      179,
      110,
      101,
      99,
      117,
      97,
      100,
      111,
      114,
      113,
      117,
      105,
      101,
      110,
      101,
      115,
      105,
      110,
      99,
      108,
      117,
      115,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      115,
      109,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      111,
      100,
      114,
      195,
      173,
      97,
      109,
      97,
      195,
      177,
      97,
      110,
      97,
      195,
      186,
      108,
      116,
      105,
      109,
      97,
      101,
      115,
      116,
      97,
      109,
      111,
      115,
      111,
      102,
      105,
      99,
      105,
      97,
      108,
      116,
      97,
      109,
      98,
      105,
      101,
      110,
      110,
      105,
      110,
      103,
      195,
      186,
      110,
      115,
      97,
      108,
      117,
      100,
      111,
      115,
      112,
      111,
      100,
      101,
      109,
      111,
      115,
      109,
      101,
      106,
      111,
      114,
      97,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      104,
      111,
      109,
      101,
      112,
      97,
      103,
      101,
      115,
      101,
      99,
      117,
      114,
      105,
      116,
      121,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      99,
      97,
      109,
      112,
      97,
      105,
      103,
      110,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      114,
      110,
      97,
      108,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      100,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      120,
      99,
      104,
      97,
      110,
      103,
      101,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      121,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      122,
      45,
      105,
      110,
      100,
      101,
      120,
      58,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      115,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      115,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      110,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      102,
      101,
      101,
      100,
      98,
      97,
      99,
      107,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      115,
      100,
      105,
      115,
      97,
      98,
      108,
      101,
      100,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      97,
      117,
      100,
      105,
      101,
      110,
      99,
      101,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      101,
      97,
      114,
      110,
      105,
      110,
      103,
      97,
      110,
      121,
      116,
      104,
      105,
      110,
      103,
      97,
      98,
      115,
      116,
      114,
      97,
      99,
      116,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      111,
      118,
      101,
      114,
      118,
      105,
      101,
      119,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      116,
      114,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      115,
      117,
      114,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      115,
      104,
      111,
      112,
      112,
      105,
      110,
      103,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      102,
      111,
      111,
      116,
      98,
      97,
      108,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      76,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      114,
      97,
      99,
      107,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      109,
      111,
      100,
      105,
      102,
      105,
      101,
      100,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      102,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      110,
      111,
      114,
      116,
      104,
      101,
      114,
      110,
      100,
      97,
      116,
      97,
      98,
      97,
      115,
      101,
      102,
      101,
      115,
      116,
      105,
      118,
      97,
      108,
      98,
      114,
      101,
      97,
      107,
      105,
      110,
      103,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      100,
      114,
      111,
      112,
      100,
      111,
      119,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      109,
      97,
      114,
      114,
      105,
      97,
      103,
      101,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      110,
      101,
      103,
      97,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      98,
      97,
      110,
      110,
      101,
      114,
      34,
      62,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      112,
      111,
      108,
      105,
      99,
      105,
      101,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      97,
      108,
      99,
      114,
      101,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      98,
      111,
      111,
      107,
      109,
      97,
      114,
      107,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      114,
      99,
      104,
      101,
      109,
      105,
      99,
      97,
      108,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      98,
      97,
      99,
      107,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      104,
      97,
      114,
      100,
      119,
      97,
      114,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      121,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      111,
      98,
      116,
      97,
      105,
      110,
      101,
      100,
      61,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      102,
      111,
      114,
      40,
      118,
      97,
      114,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      99,
      97,
      112,
      97,
      99,
      105,
      116,
      121,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      105,
      100,
      101,
      110,
      116,
      105,
      116,
      121,
      97,
      105,
      114,
      99,
      114,
      97,
      102,
      116,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      100,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      100,
      111,
      109,
      101,
      115,
      116,
      105,
      99,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      104,
      111,
      115,
      112,
      105,
      116,
      97,
      108,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      108,
      111,
      103,
      111,
      34,
      62,
      60,
      97,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      97,
      117,
      116,
      104,
      111,
      114,
      34,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      121,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      116,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      102,
      105,
      110,
      105,
      115,
      104,
      101,
      100,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      111,
      109,
      105,
      110,
      103,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      115,
      97,
      99,
      97,
      100,
      101,
      109,
      105,
      99,
      101,
      120,
      101,
      114,
      99,
      105,
      115,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      101,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      77,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      62,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      100,
      58,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      83,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      100,
      101,
      116,
      97,
      105,
      108,
      101,
      100,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      112,
      108,
      97,
      110,
      110,
      105,
      110,
      103,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      121,
      101,
      118,
      101,
      114,
      121,
      111,
      110,
      101,
      115,
      116,
      114,
      97,
      105,
      103,
      104,
      116,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      104,
      101,
      114,
      105,
      116,
      97,
      103,
      101,
      115,
      104,
      105,
      112,
      112,
      105,
      110,
      103,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      114,
      101,
      108,
      101,
      118,
      97,
      110,
      116,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      118,
      105,
      111,
      108,
      101,
      110,
      99,
      101,
      97,
      110,
      121,
      119,
      104,
      101,
      114,
      101,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      115,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      98,
      117,
      108,
      108,
      101,
      116,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      108,
      36,
      40,
      116,
      104,
      105,
      115,
      41,
      46,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      62,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      72,
      111,
      109,
      101,
      60,
      47,
      97,
      62,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      115,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      115,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      109,
      101,
      109,
      111,
      114,
      105,
      97,
      108,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      97,
      99,
      116,
      105,
      118,
      101,
      34,
      62,
      115,
      111,
      109,
      101,
      119,
      104,
      97,
      116,
      118,
      105,
      99,
      116,
      111,
      114,
      105,
      97,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      76,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      99,
      116,
      118,
      105,
      115,
      105,
      116,
      111,
      114,
      115,
      68,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      10,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      119,
      105,
      100,
      116,
      104,
      32,
      61,
      32,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      118,
      105,
      114,
      103,
      105,
      110,
      105,
      97,
      110,
      111,
      114,
      109,
      97,
      108,
      108,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      101,
      100,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      82,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      100,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      115,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      98,
      105,
      114,
      116,
      104,
      100,
      97,
      121,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      121,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      108,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      99,
      111,
      110,
      115,
      117,
      109,
      101,
      114,
      80,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      100,
      46,
      106,
      112,
      103,
      34,
      32,
      47,
      62,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      115,
      60,
      47,
      104,
      50,
      62,
      10,
      32,
      32,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      121,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      97,
      100,
      101,
      113,
      117,
      97,
      116,
      101,
      112,
      97,
      107,
      105,
      115,
      116,
      97,
      110,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      118,
      97,
      108,
      117,
      97,
      98,
      108,
      101,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      98,
      114,
      105,
      110,
      103,
      105,
      110,
      103,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      47,
      76,
      105,
      115,
      116,
      32,
      111,
      102,
      32,
      72,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      32,
      40,
      38,
      113,
      117,
      111,
      116,
      59,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      101,
      109,
      97,
      108,
      97,
      121,
      115,
      105,
      97,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      99,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      115,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      115,
      114,
      101,
      108,
      105,
      97,
      98,
      108,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      9,
      9,
      60,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      99,
      108,
      111,
      116,
      104,
      105,
      110,
      103,
      119,
      97,
      116,
      99,
      104,
      105,
      110,
      103,
      60,
      108,
      105,
      32,
      105,
      100,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      99,
      97,
      114,
      114,
      121,
      105,
      110,
      103,
      115,
      101,
      110,
      116,
      101,
      110,
      99,
      101,
      60,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      116,
      104,
      105,
      110,
      107,
      105,
      110,
      103,
      99,
      97,
      116,
      99,
      104,
      40,
      101,
      41,
      115,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      32,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      116,
      99,
      97,
      114,
      111,
      117,
      115,
      101,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      34,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      32,
      41,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      100,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      99,
      111,
      118,
      101,
      114,
      97,
      103,
      101,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      47,
      62,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      115,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      32,
      119,
      104,
      97,
      116,
      101,
      118,
      101,
      114,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      121,
      98,
      97,
      115,
      101,
      98,
      97,
      108,
      108,
      106,
      117,
      100,
      103,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      46,
      46,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      34,
      47,
      62,
      60,
      47,
      97,
      62,
      13,
      10,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      115,
      99,
      111,
      116,
      108,
      97,
      110,
      100,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      46,
      32,
      73,
      83,
      66,
      78,
      32,
      48,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      45,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      115,
      67,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      115,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      111,
      117,
      110,
      116,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      99,
      114,
      105,
      116,
      101,
      114,
      105,
      97,
      115,
      116,
      114,
      111,
      110,
      103,
      108,
      121,
      58,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      99,
      111,
      118,
      101,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      110,
      100,
      108,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      87,
      105,
      108,
      108,
      105,
      97,
      109,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      114,
      95,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      97,
      99,
      99,
      117,
      114,
      97,
      99,
      121,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      101,
      114,
      115,
      111,
      110,
      102,
      108,
      101,
      120,
      105,
      98,
      108,
      101,
      67,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      108,
      97,
      119,
      114,
      101,
      110,
      99,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      108,
      97,
      121,
      111,
      117,
      116,
      61,
      34,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      104,
      97,
      109,
      105,
      108,
      116,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      32,
      99,
      97,
      110,
      97,
      100,
      105,
      97,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      115,
      47,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      47,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      111,
      112,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      111,
      114,
      116,
      117,
      103,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      105,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      119,
      105,
      114,
      101,
      108,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      97,
      103,
      101,
      110,
      99,
      105,
      101,
      115,
      83,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      38,
      104,
      101,
      108,
      108,
      105,
      112,
      59,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      34,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      112,
      97,
      103,
      101,
      78,
      97,
      109,
      101,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      32,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      62,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      115,
      105,
      108,
      108,
      105,
      110,
      111,
      105,
      115,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      9,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      115,
      97,
      116,
      117,
      114,
      100,
      97,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      108,
      105,
      116,
      101,
      109,
      112,
      114,
      111,
      112,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      114,
      112,
      114,
      111,
      112,
      111,
      115,
      97,
      108,
      61,
      34,
      102,
      97,
      108,
      115,
      101,
      34,
      69,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      121,
      109,
      112,
      116,
      111,
      109,
      115,
      111,
      114,
      105,
      101,
      110,
      116,
      101,
      100,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      60,
      112,
      108,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      46,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      46,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      98,
      117,
      108,
      103,
      97,
      114,
      105,
      97,
      46,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      119,
      105,
      108,
      108,
      105,
      97,
      109,
      115,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      111,
      114,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      97,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      68,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      46,
      32,
      10,
      10,
      84,
      104,
      101,
      32,
      121,
      111,
      117,
      114,
      115,
      101,
      108,
      102,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      109,
      105,
      99,
      104,
      105,
      103,
      97,
      110,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      99,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      112,
      114,
      105,
      111,
      114,
      105,
      116,
      121,
      112,
      114,
      105,
      110,
      116,
      105,
      110,
      103,
      100,
      114,
      105,
      110,
      107,
      105,
      110,
      103,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      121,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      115,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      45,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      112,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      101,
      108,
      105,
      103,
      105,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      115,
      97,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      34,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      100,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      115,
      103,
      108,
      111,
      115,
      115,
      97,
      114,
      121,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      103,
      117,
      105,
      100,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      100,
      62,
      60,
      116,
      100,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      62,
      99,
      97,
      109,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      115,
      115,
      99,
      111,
      116,
      116,
      105,
      115,
      104,
      106,
      111,
      110,
      97,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      46,
      99,
      108,
      105,
      110,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      105,
      108,
      97,
      110,
      100,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      115,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      9,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      83,
      116,
      114,
      105,
      110,
      103,
      60,
      47,
      115,
      109,
      97,
      108,
      108,
      62,
      111,
      107,
      108,
      97,
      104,
      111,
      109,
      97,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      32,
      105,
      110,
      118,
      101,
      115,
      116,
      111,
      114,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      115,
      82,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      100,
      32,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      46,
      32,
      65,
      102,
      116,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      32,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      34,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      32,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      115,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      44,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      102,
      111,
      114,
      101,
      99,
      97,
      115,
      116,
      46,
      32,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      117,
      114,
      115,
      100,
      97,
      121,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      38,
      101,
      97,
      99,
      117,
      116,
      101,
      59,
      104,
      97,
      115,
      67,
      108,
      97,
      115,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      101,
      111,
      114,
      100,
      101,
      114,
      105,
      110,
      103,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      99,
      111,
      108,
      111,
      114,
      97,
      100,
      111,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      34,
      99,
      97,
      109,
      112,
      98,
      101,
      108,
      108,
      60,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      60,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      95,
      112,
      111,
      112,
      117,
      112,
      115,
      124,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      32,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      60,
      98,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      32,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      109,
      97,
      114,
      115,
      104,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      108,
      121,
      41,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      116,
      97,
      120,
      111,
      110,
      111,
      109,
      121,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      115,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      115,
      99,
      114,
      111,
      108,
      108,
      84,
      111,
      32,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      97,
      116,
      116,
      111,
      114,
      110,
      101,
      121,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      115,
      102,
      97,
      110,
      99,
      121,
      98,
      111,
      120,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      119,
      105,
      108,
      100,
      108,
      105,
      102,
      101,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      61,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      112,
      120,
      59,
      102,
      111,
      110,
      116,
      45,
      32,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      118,
      97,
      99,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      111,
      109,
      112,
      115,
      111,
      110,
      108,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      48,
      99,
      104,
      101,
      99,
      107,
      105,
      110,
      103,
      60,
      47,
      116,
      98,
      111,
      100,
      121,
      62,
      60,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      60,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      115,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      99,
      108,
      105,
      99,
      107,
      105,
      110,
      103,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      32,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      111,
      110,
      83,
      117,
      98,
      109,
      105,
      116,
      109,
      97,
      114,
      121,
      108,
      97,
      110,
      100,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      115,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      46,
      108,
      111,
      103,
      103,
      101,
      100,
      73,
      110,
      97,
      100,
      118,
      105,
      115,
      111,
      114,
      121,
      115,
      105,
      98,
      108,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      41,
      115,
      46,
      32,
      84,
      104,
      105,
      115,
      32,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      115,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      112,
      114,
      101,
      103,
      110,
      97,
      110,
      116,
      116,
      111,
      109,
      111,
      114,
      114,
      111,
      119,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      105,
      99,
      111,
      110,
      46,
      112,
      110,
      103,
      106,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      99,
      111,
      100,
      101,
      98,
      97,
      115,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      62,
      103,
      97,
      109,
      98,
      108,
      105,
      110,
      103,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      44,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      109,
      105,
      115,
      115,
      111,
      117,
      114,
      105,
      115,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      111,
      112,
      58,
      49,
      112,
      120,
      32,
      46,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      50,
      108,
      97,
      122,
      121,
      108,
      111,
      97,
      100,
      110,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      10,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      50,
      47,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      32,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      60,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      105,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      114,
      111,
      109,
      195,
      162,
      110,
      196,
      131,
      116,
      195,
      188,
      114,
      107,
      195,
      167,
      101,
      216,
      167,
      216,
      177,
      216,
      175,
      217,
      136,
      116,
      97,
      109,
      98,
      105,
      195,
      169,
      110,
      110,
      111,
      116,
      105,
      99,
      105,
      97,
      115,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      115,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      115,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      103,
      111,
      98,
      105,
      101,
      114,
      110,
      111,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      115,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      115,
      118,
      97,
      108,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      108,
      111,
      109,
      98,
      105,
      97,
      100,
      101,
      115,
      112,
      117,
      195,
      169,
      115,
      100,
      101,
      112,
      111,
      114,
      116,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      111,
      110,
      111,
      115,
      111,
      116,
      114,
      111,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      109,
      105,
      108,
      108,
      111,
      110,
      101,
      115,
      109,
      101,
      100,
      105,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      114,
      101,
      99,
      117,
      114,
      115,
      111,
      115,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      97,
      110,
      116,
      105,
      97,
      103,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      115,
      111,
      112,
      105,
      110,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      114,
      105,
      109,
      105,
      114,
      109,
      105,
      101,
      110,
      116,
      114,
      97,
      115,
      97,
      109,
      195,
      169,
      114,
      105,
      99,
      97,
      118,
      101,
      110,
      100,
      101,
      100,
      111,
      114,
      115,
      111,
      99,
      105,
      101,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      111,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      114,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      111,
      112,
      97,
      108,
      97,
      98,
      114,
      97,
      115,
      105,
      110,
      116,
      101,
      114,
      195,
      169,
      115,
      101,
      110,
      116,
      111,
      110,
      99,
      101,
      115,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      115,
      114,
      101,
      97,
      108,
      105,
      100,
      97,
      100,
      99,
      195,
      179,
      114,
      100,
      111,
      98,
      97,
      122,
      97,
      114,
      97,
      103,
      111,
      122,
      97,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      108,
      101,
      115,
      98,
      108,
      111,
      113,
      117,
      101,
      97,
      114,
      103,
      101,
      115,
      116,
      105,
      195,
      179,
      110,
      97,
      108,
      113,
      117,
      105,
      108,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      115,
      99,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      111,
      118,
      101,
      114,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      97,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      97,
      108,
      105,
      99,
      97,
      110,
      116,
      101,
      98,
      117,
      115,
      99,
      97,
      100,
      111,
      114,
      99,
      97,
      110,
      116,
      105,
      100,
      97,
      100,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      115,
      97,
      99,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      115,
      115,
      117,
      112,
      101,
      114,
      105,
      111,
      114,
      109,
      97,
      121,
      111,
      114,
      195,
      173,
      97,
      97,
      108,
      101,
      109,
      97,
      110,
      105,
      97,
      102,
      117,
      110,
      99,
      105,
      195,
      179,
      110,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      115,
      104,
      97,
      99,
      105,
      101,
      110,
      100,
      111,
      97,
      113,
      117,
      101,
      108,
      108,
      111,
      115,
      101,
      100,
      105,
      99,
      105,
      195,
      179,
      110,
      102,
      101,
      114,
      110,
      97,
      110,
      100,
      111,
      97,
      109,
      98,
      105,
      101,
      110,
      116,
      101,
      102,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      115,
      99,
      108,
      105,
      101,
      110,
      116,
      101,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      115,
      98,
      97,
      115,
      116,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      114,
      101,
      112,
      111,
      114,
      116,
      97,
      114,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      114,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      114,
      97,
      116,
      111,
      106,
      195,
      179,
      118,
      101,
      110,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      116,
      111,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      99,
      111,
      110,
      106,
      117,
      110,
      116,
      111,
      101,
      110,
      101,
      114,
      103,
      195,
      173,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      114,
      97,
      115,
      116,
      117,
      114,
      105,
      97,
      115,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      114,
      98,
      111,
      108,
      101,
      116,
      195,
      173,
      110,
      115,
      97,
      108,
      118,
      97,
      100,
      111,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      115,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      115,
      110,
      101,
      103,
      111,
      99,
      105,
      111,
      115,
      108,
      105,
      98,
      101,
      114,
      116,
      97,
      100,
      100,
      101,
      116,
      97,
      108,
      108,
      101,
      115,
      112,
      97,
      110,
      116,
      97,
      108,
      108,
      97,
      112,
      114,
      195,
      179,
      120,
      105,
      109,
      111,
      97,
      108,
      109,
      101,
      114,
      195,
      173,
      97,
      97,
      110,
      105,
      109,
      97,
      108,
      101,
      115,
      113,
      117,
      105,
      195,
      169,
      110,
      101,
      115,
      99,
      111,
      114,
      97,
      122,
      195,
      179,
      110,
      115,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      98,
      117,
      115,
      99,
      97,
      110,
      100,
      111,
      111,
      112,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      120,
      116,
      101,
      114,
      105,
      111,
      114,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      111,
      116,
      111,
      100,
      97,
      118,
      195,
      173,
      97,
      103,
      97,
      108,
      101,
      114,
      195,
      173,
      97,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      97,
      108,
      105,
      99,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      97,
      115,
      112,
      101,
      99,
      116,
      111,
      115,
      99,
      114,
      195,
      173,
      116,
      105,
      99,
      97,
      100,
      195,
      179,
      108,
      97,
      114,
      101,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      105,
      97,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      110,
      112,
      101,
      114,
      195,
      173,
      111,
      100,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      116,
      97,
      109,
      97,
      110,
      116,
      101,
      110,
      101,
      114,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      111,
      114,
      101,
      99,
      105,
      98,
      105,
      100,
      97,
      116,
      114,
      105,
      98,
      117,
      110,
      97,
      108,
      116,
      101,
      110,
      101,
      114,
      105,
      102,
      101,
      99,
      97,
      110,
      99,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      97,
      114,
      105,
      97,
      115,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      100,
      105,
      118,
      101,
      114,
      115,
      111,
      115,
      109,
      97,
      108,
      108,
      111,
      114,
      99,
      97,
      114,
      101,
      113,
      117,
      105,
      101,
      114,
      101,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      173,
      97,
      118,
      105,
      118,
      105,
      101,
      110,
      100,
      97,
      102,
      105,
      110,
      97,
      110,
      122,
      97,
      115,
      97,
      100,
      101,
      108,
      97,
      110,
      116,
      101,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      97,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      115,
      100,
      105,
      102,
      195,
      173,
      99,
      105,
      108,
      99,
      105,
      117,
      100,
      97,
      100,
      101,
      115,
      97,
      110,
      116,
      105,
      103,
      117,
      97,
      115,
      97,
      118,
      97,
      110,
      122,
      97,
      100,
      97,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      195,
      161,
      110,
      99,
      104,
      101,
      122,
      99,
      97,
      109,
      112,
      97,
      195,
      177,
      97,
      115,
      111,
      102,
      116,
      111,
      110,
      105,
      99,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      105,
      101,
      110,
      101,
      115,
      101,
      99,
      116,
      111,
      114,
      101,
      115,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      97,
      99,
      117,
      108,
      116,
      97,
      100,
      99,
      114,
      195,
      169,
      100,
      105,
      116,
      111,
      100,
      105,
      118,
      101,
      114,
      115,
      97,
      115,
      115,
      117,
      112,
      117,
      101,
      115,
      116,
      111,
      102,
      97,
      99,
      116,
      111,
      114,
      101,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      115,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      97,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      187,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      177,
      209,
      139,
      209,
      130,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      149,
      209,
      129,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      143,
      208,
      178,
      209,
      129,
      208,
      181,
      209,
      133,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      176,
      208,
      182,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      184,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      177,
      209,
      143,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      189,
      209,
      129,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      189,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      185,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      139,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      209,
      129,
      208,
      178,
      208,
      190,
      209,
      142,
      208,
      187,
      208,
      184,
      209,
      136,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      133,
      208,
      191,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      180,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      131,
      209,
      133,
      208,
      190,
      209,
      130,
      209,
      143,
      208,
      180,
      208,
      178,
      209,
      131,
      209,
      133,
      209,
      129,
      208,
      181,
      209,
      130,
      208,
      184,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      177,
      209,
      143,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      184,
      208,
      188,
      209,
      129,
      209,
      135,
      208,
      181,
      209,
      130,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      139,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      140,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      139,
      209,
      130,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      178,
      209,
      139,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      130,
      208,
      184,
      208,
      191,
      208,
      176,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      184,
      209,
      134,
      208,
      176,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      139,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      142,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      185,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      190,
      208,
      186,
      208,
      184,
      209,
      142,
      208,
      189,
      209,
      143,
      208,
      178,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      149,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      138,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      216,
      170,
      216,
      173,
      217,
      131,
      217,
      133,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      138,
      217,
      138,
      217,
      131,
      217,
      136,
      217,
      134,
      216,
      180,
      216,
      168,
      217,
      131,
      216,
      169,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      161,
      216,
      163,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      174,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      168,
      216,
      175,
      217,
      132,
      217,
      138,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      170,
      217,
      131,
      217,
      136,
      217,
      134,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      131,
      216,
      179,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      134,
      216,
      167,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      183,
      216,
      168,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      216,
      180,
      217,
      131,
      216,
      177,
      216,
      167,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      180,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      134,
      216,
      180,
      217,
      138,
      216,
      183,
      217,
      133,
      216,
      167,
      216,
      176,
      216,
      167,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      177,
      216,
      173,
      217,
      133,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      169,
      217,
      138,
      217,
      130,
      217,
      136,
      217,
      132,
      217,
      133,
      216,
      177,
      217,
      131,
      216,
      178,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      169,
      216,
      163,
      216,
      173,
      217,
      133,
      216,
      175,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      138,
      217,
      138,
      216,
      185,
      217,
      134,
      217,
      138,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      169,
      216,
      183,
      216,
      177,
      217,
      138,
      217,
      130,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      177,
      217,
      137,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      167,
      216,
      167,
      216,
      168,
      216,
      173,
      216,
      171,
      216,
      185,
      216,
      177,
      217,
      136,
      216,
      182,
      216,
      168,
      216,
      180,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      172,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      217,
      134,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      217,
      131,
      217,
      132,
      217,
      138,
      216,
      169,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      163,
      217,
      138,
      216,
      182,
      216,
      167,
      217,
      138,
      217,
      136,
      216,
      172,
      216,
      175,
      217,
      129,
      216,
      177,
      217,
      138,
      217,
      130,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      170,
      216,
      163,
      217,
      129,
      216,
      182,
      217,
      132,
      217,
      133,
      216,
      183,
      216,
      168,
      216,
      174,
      216,
      167,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      168,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      182,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      132,
      217,
      137,
      217,
      134,
      217,
      129,
      216,
      179,
      217,
      135,
      216,
      163,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      163,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      167,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      217,
      133,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      133,
      216,
      175,
      216,
      167,
      216,
      174,
      217,
      132,
      217,
      133,
      217,
      133,
      217,
      131,
      217,
      134,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      7,
      6,
      5,
      4,
      3,
      2,
      1,
      0,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      15,
      14,
      13,
      12,
      11,
      10,
      9,
      8,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      23,
      22,
      21,
      20,
      19,
      18,
      17,
      16,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      31,
      30,
      29,
      28,
      27,
      26,
      25,
      24,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      1,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      0,
      0,
      1,
      0,
      2,
      0,
      3,
      0,
      4,
      0,
      5,
      0,
      6,
      0,
      7,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      101,
      113,
      117,
      105,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      104,
      105,
      103,
      104,
      108,
      105,
      103,
      104,
      116,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      109,
      97,
      114,
      107,
      101,
      116,
      105,
      110,
      103,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      98,
      101,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      60,
      47,
      115,
      101,
      108,
      101,
      99,
      116,
      62,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      97,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      115,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      97,
      114,
      121,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      13,
      10,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      66,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      125,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      115,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      115,
      100,
      97,
      110,
      103,
      101,
      114,
      111,
      117,
      115,
      115,
      97,
      116,
      101,
      108,
      108,
      105,
      116,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      112,
      114,
      111,
      116,
      111,
      116,
      121,
      112,
      101,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      60,
      47,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      98,
      101,
      97,
      117,
      116,
      105,
      102,
      117,
      108,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      101,
      100,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      116,
      104,
      117,
      109,
      98,
      110,
      97,
      105,
      108,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      46,
      102,
      111,
      99,
      117,
      115,
      40,
      41,
      59,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      10,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      97,
      110,
      101,
      120,
      112,
      101,
      110,
      115,
      105,
      118,
      101,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      102,
      114,
      97,
      109,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      99,
      108,
      97,
      115,
      115,
      78,
      97,
      109,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      101,
      108,
      115,
      101,
      119,
      104,
      101,
      114,
      101,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      101,
      114,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      115,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      47,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      98,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      70,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      72,
      111,
      108,
      108,
      121,
      119,
      111,
      111,
      100,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      115,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      114,
      101,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      32,
      112,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      67,
      97,
      109,
      98,
      114,
      105,
      100,
      103,
      101,
      111,
      112,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      66,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      105,
      111,
      110,
      62,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      101,
      100,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      105,
      110,
      116,
      101,
      114,
      102,
      97,
      99,
      101,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      10,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      115,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      101,
      100,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      115,
      101,
      73,
      110,
      116,
      40,
      115,
      116,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      117,
      110,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      78,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      116,
      119,
      111,
      32,
      121,
      101,
      97,
      114,
      115,
      83,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      100,
      66,
      97,
      116,
      116,
      108,
      101,
      32,
      111,
      102,
      112,
      101,
      114,
      99,
      101,
      105,
      118,
      101,
      100,
      116,
      114,
      121,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      112,
      111,
      114,
      116,
      114,
      97,
      121,
      101,
      100,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      69,
      108,
      105,
      122,
      97,
      98,
      101,
      116,
      104,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      105,
      110,
      115,
      117,
      114,
      97,
      110,
      99,
      101,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      108,
      101,
      103,
      101,
      110,
      100,
      97,
      114,
      121,
      71,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      46,
      105,
      110,
      104,
      101,
      114,
      105,
      116,
      101,
      100,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      67,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      115,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      110,
      111,
      32,
      108,
      111,
      110,
      103,
      101,
      114,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      99,
      97,
      110,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      121,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      105,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      105,
      110,
      101,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      116,
      101,
      108,
      101,
      112,
      104,
      111,
      110,
      101,
      105,
      116,
      101,
      109,
      115,
      99,
      111,
      112,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      115,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      41,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      70,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      112,
      114,
      111,
      118,
      105,
      100,
      105,
      110,
      103,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      99,
      121,
      98,
      111,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      115,
      117,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      115,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      115,
      97,
      105,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      116,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      60,
      47,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      100,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      115,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      10,
      115,
      117,
      115,
      112,
      101,
      99,
      116,
      101,
      100,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      32,
      48,
      115,
      112,
      105,
      114,
      105,
      116,
      117,
      97,
      108,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      10,
      109,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      103,
      114,
      97,
      100,
      117,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      101,
      100,
      104,
      101,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      106,
      115,
      104,
      111,
      117,
      115,
      101,
      104,
      111,
      108,
      100,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      101,
      100,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      100,
      108,
      105,
      116,
      101,
      114,
      97,
      108,
      108,
      121,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      117,
      112,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      105,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      117,
      114,
      105,
      101,
      115,
      74,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      32,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      97,
      108,
      103,
      111,
      114,
      105,
      116,
      104,
      109,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      115,
      114,
      101,
      98,
      101,
      108,
      108,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      114,
      101,
      115,
      105,
      122,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      105,
      110,
      103,
      115,
      101,
      110,
      115,
      105,
      116,
      105,
      118,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      112,
      114,
      111,
      118,
      105,
      115,
      105,
      111,
      110,
      40,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      102,
      101,
      97,
      116,
      117,
      114,
      105,
      110,
      103,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      101,
      100,
      41,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      45,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      32,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      102,
      114,
      97,
      103,
      109,
      101,
      110,
      116,
      115,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      110,
      101,
      97,
      114,
      32,
      116,
      104,
      101,
      32,
      65,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      72,
      111,
      110,
      103,
      32,
      75,
      111,
      110,
      103,
      32,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      101,
      108,
      101,
      118,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      9,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      116,
      104,
      111,
      115,
      101,
      32,
      119,
      104,
      111,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      101,
      115,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      115,
      117,
      98,
      109,
      105,
      116,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      99,
      111,
      110,
      118,
      105,
      110,
      99,
      101,
      100,
      112,
      114,
      111,
      109,
      111,
      116,
      105,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      99,
      111,
      97,
      108,
      105,
      116,
      105,
      111,
      110,
      104,
      105,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      45,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      101,
      110,
      111,
      117,
      103,
      104,
      32,
      116,
      111,
      97,
      108,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      101,
      100,
      45,
      45,
      62,
      13,
      10,
      60,
      33,
      45,
      45,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      101,
      100,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      60,
      102,
      117,
      114,
      110,
      105,
      116,
      117,
      114,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      32,
      111,
      110,
      98,
      108,
      117,
      114,
      61,
      34,
      115,
      117,
      115,
      112,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      105,
      112,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      77,
      111,
      114,
      101,
      111,
      118,
      101,
      114,
      44,
      97,
      98,
      111,
      108,
      105,
      115,
      104,
      101,
      100,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      109,
      97,
      100,
      101,
      101,
      109,
      111,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      121,
      110,
      97,
      114,
      114,
      97,
      116,
      105,
      118,
      101,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      115,
      112,
      120,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      100,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      34,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      101,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      115,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      101,
      100,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      97,
      110,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      101,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      101,
      83,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      108,
      121,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      114,
      115,
      74,
      101,
      114,
      117,
      115,
      97,
      108,
      101,
      109,
      116,
      104,
      101,
      121,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      105,
      110,
      103,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      115,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      97,
      114,
      98,
      105,
      116,
      114,
      97,
      114,
      121,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      119,
      97,
      110,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      120,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      111,
      102,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      117,
      114,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      98,
      101,
      103,
      97,
      110,
      32,
      116,
      111,
      32,
      105,
      116,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      109,
      97,
      103,
      110,
      105,
      116,
      117,
      100,
      101,
      109,
      117,
      115,
      116,
      32,
      104,
      97,
      118,
      101,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      108,
      121,
      111,
      99,
      99,
      117,
      114,
      114,
      105,
      110,
      103,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      115,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      46,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      60,
      102,
      97,
      105,
      108,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      111,
      117,
      110,
      100,
      115,
      107,
      105,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      115,
      111,
      99,
      105,
      101,
      116,
      105,
      101,
      115,
      97,
      108,
      111,
      110,
      103,
      115,
      105,
      100,
      101,
      32,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      115,
      111,
      117,
      116,
      104,
      119,
      101,
      115,
      116,
      116,
      104,
      101,
      32,
      114,
      105,
      103,
      104,
      116,
      114,
      97,
      100,
      105,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      115,
      112,
      111,
      107,
      101,
      110,
      32,
      105,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      111,
      110,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      98,
      117,
      114,
      105,
      101,
      100,
      32,
      105,
      110,
      97,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      116,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      60,
      47,
      102,
      111,
      110,
      116,
      62,
      60,
      47,
      78,
      111,
      114,
      119,
      101,
      103,
      105,
      97,
      110,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      101,
      100,
      112,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      101,
      113,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      46,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      97,
      98,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      108,
      105,
      110,
      107,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      97,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      34,
      62,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      115,
      112,
      101,
      99,
      116,
      32,
      111,
      102,
      65,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      65,
      105,
      114,
      32,
      70,
      111,
      114,
      99,
      101,
      115,
      121,
      115,
      116,
      101,
      109,
      32,
      111,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      105,
      116,
      112,
      97,
      105,
      110,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      113,
      117,
      101,
      114,
      101,
      100,
      97,
      114,
      101,
      32,
      115,
      116,
      105,
      108,
      108,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      101,
      100,
      32,
      98,
      121,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      101,
      115,
      102,
      114,
      97,
      110,
      99,
      104,
      105,
      115,
      101,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      101,
      100,
      99,
      104,
      105,
      108,
      100,
      104,
      111,
      111,
      100,
      97,
      108,
      115,
      111,
      32,
      117,
      115,
      101,
      100,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      115,
      105,
      110,
      103,
      97,
      112,
      111,
      114,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      32,
      111,
      102,
      102,
      97,
      116,
      104,
      101,
      114,
      32,
      111,
      102,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      115,
      60,
      47,
      97,
      62,
      60,
      47,
      112,
      62,
      10,
      99,
      97,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      119,
      101,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      110,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      99,
      101,
      105,
      118,
      105,
      110,
      103,
      69,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      101,
      118,
      101,
      110,
      32,
      109,
      111,
      114,
      101,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      80,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      109,
      117,
      115,
      105,
      99,
      105,
      97,
      110,
      115,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      114,
      115,
      97,
      100,
      118,
      101,
      110,
      116,
      32,
      111,
      102,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      47,
      62,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      34,
      62,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      83,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      46,
      32,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      105,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      46,
      97,
      112,
      112,
      101,
      97,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      115,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      108,
      121,
      45,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      105,
      110,
      105,
      116,
      105,
      97,
      116,
      101,
      100,
      101,
      120,
      116,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      45,
      116,
      101,
      114,
      109,
      105,
      110,
      102,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      99,
      104,
      32,
      116,
      104,
      97,
      116,
      103,
      101,
      116,
      67,
      111,
      111,
      107,
      105,
      101,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      98,
      121,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      105,
      115,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      115,
      100,
      111,
      119,
      110,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      105,
      110,
      103,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      45,
      45,
      62,
      10,
      60,
      33,
      45,
      45,
      32,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      87,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      112,
      105,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      101,
      110,
      115,
      117,
      115,
      119,
      97,
      115,
      32,
      98,
      117,
      105,
      108,
      116,
      86,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      40,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      116,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      110,
      101,
      108,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      99,
      102,
      97,
      118,
      111,
      117,
      114,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      87,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      115,
      104,
      111,
      119,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      105,
      109,
      105,
      116,
      105,
      118,
      101,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      97,
      114,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      108,
      121,
      100,
      105,
      115,
      115,
      111,
      108,
      118,
      101,
      100,
      85,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      73,
      116,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      119,
      105,
      108,
      108,
      32,
      104,
      97,
      118,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      109,
      115,
      115,
      111,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      70,
      114,
      105,
      101,
      100,
      114,
      105,
      99,
      104,
      119,
      97,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      101,
      99,
      101,
      100,
      105,
      110,
      103,
      84,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      112,
      104,
      121,
      115,
      105,
      99,
      105,
      115,
      116,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      105,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      115,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      98,
      101,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      115,
      117,
      114,
      118,
      105,
      118,
      105,
      110,
      103,
      125,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      97,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      108,
      121,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      97,
      32,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      108,
      101,
      118,
      101,
      108,
      115,
      32,
      111,
      102,
      110,
      111,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      101,
      100,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      101,
      115,
      100,
      117,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      101,
      120,
      112,
      108,
      111,
      115,
      105,
      118,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      97,
      108,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      103,
      97,
      108,
      108,
      101,
      114,
      105,
      101,
      115,
      123,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      111,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      105,
      110,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      109,
      101,
      116,
      104,
      111,
      100,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      105,
      109,
      101,
      115,
      116,
      97,
      109,
      112,
      110,
      101,
      101,
      100,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      71,
      114,
      101,
      97,
      116,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      115,
      101,
      101,
      109,
      101,
      100,
      32,
      116,
      111,
      118,
      105,
      101,
      119,
      101,
      100,
      32,
      97,
      115,
      105,
      109,
      112,
      97,
      99,
      116,
      32,
      111,
      110,
      105,
      100,
      101,
      97,
      32,
      116,
      104,
      97,
      116,
      116,
      104,
      101,
      32,
      87,
      111,
      114,
      108,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      111,
      102,
      101,
      120,
      112,
      97,
      110,
      100,
      105,
      110,
      103,
      84,
      104,
      101,
      115,
      101,
      32,
      97,
      114,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      34,
      62,
      99,
      97,
      114,
      101,
      102,
      117,
      108,
      108,
      121,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      32,
      111,
      102,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      101,
      100,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      13,
      10,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      99,
      101,
      108,
      101,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      32,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      100,
      115,
      97,
      121,
      115,
      32,
      116,
      104,
      97,
      116,
      104,
      97,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      105,
      110,
      72,
      117,
      110,
      103,
      97,
      114,
      105,
      97,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      111,
      102,
      115,
      101,
      114,
      118,
      101,
      115,
      32,
      97,
      115,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      97,
      103,
      103,
      114,
      101,
      103,
      97,
      116,
      101,
      102,
      111,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      105,
      110,
      102,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      103,
      114,
      101,
      101,
      100,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      34,
      62,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      111,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      108,
      101,
      99,
      116,
      111,
      114,
      97,
      108,
      115,
      121,
      109,
      98,
      111,
      108,
      32,
      111,
      102,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      32,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      101,
      97,
      115,
      105,
      101,
      114,
      32,
      116,
      111,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      102,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      119,
      97,
      115,
      32,
      116,
      97,
      107,
      101,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      111,
      107,
      32,
      111,
      118,
      101,
      114,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      105,
      110,
      65,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      97,
      115,
      32,
      102,
      97,
      114,
      32,
      97,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      101,
      100,
      119,
      111,
      114,
      107,
      32,
      119,
      105,
      116,
      104,
      97,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      109,
      97,
      115,
      82,
      101,
      116,
      114,
      105,
      101,
      118,
      101,
      100,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      116,
      111,
      110,
      111,
      114,
      116,
      104,
      101,
      97,
      115,
      116,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      115,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      105,
      110,
      103,
      103,
      114,
      111,
      117,
      112,
      115,
      32,
      111,
      102,
      115,
      116,
      111,
      114,
      101,
      100,
      32,
      105,
      110,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      97,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      116,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      101,
      100,
      97,
      110,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      67,
      97,
      114,
      105,
      98,
      98,
      101,
      97,
      110,
      97,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      115,
      119,
      105,
      115,
      99,
      111,
      110,
      115,
      105,
      110,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      101,
      100,
      83,
      111,
      99,
      105,
      97,
      108,
      105,
      115,
      116,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      49,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      62,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      32,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      84,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      32,
      100,
      101,
      115,
      105,
      114,
      101,
      32,
      116,
      111,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      99,
      111,
      110,
      99,
      101,
      105,
      118,
      101,
      100,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      110,
      103,
      97,
      103,
      101,
      32,
      105,
      110,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      44,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      101,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      99,
      105,
      116,
      105,
      101,
      115,
      32,
      105,
      110,
      97,
      99,
      99,
      101,
      115,
      115,
      107,
      101,
      121,
      99,
      111,
      110,
      100,
      101,
      109,
      110,
      101,
      100,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      44,
      102,
      97,
      109,
      105,
      108,
      121,
      32,
      111,
      102,
      83,
      99,
      104,
      111,
      111,
      108,
      32,
      111,
      102,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      115,
      60,
      47,
      111,
      98,
      106,
      101,
      99,
      116,
      62,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      100,
      84,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      61,
      101,
      110,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      97,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      97,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      121,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      119,
      101,
      100,
      110,
      101,
      115,
      100,
      97,
      121,
      116,
      104,
      101,
      32,
      116,
      104,
      105,
      114,
      100,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      50,
      119,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      121,
      97,
      32,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      111,
      114,
      97,
      102,
      116,
      101,
      114,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      108,
      97,
      115,
      116,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      100,
      101,
      112,
      101,
      110,
      100,
      32,
      111,
      110,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      10,
      112,
      105,
      101,
      99,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      110,
      103,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      116,
      101,
      110,
      110,
      101,
      115,
      115,
      101,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      60,
      60,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      62,
      103,
      105,
      118,
      101,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      62,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      48,
      118,
      105,
      101,
      119,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      44,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      115,
      117,
      98,
      115,
      101,
      116,
      32,
      111,
      102,
      97,
      116,
      116,
      97,
      99,
      107,
      32,
      111,
      110,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      44,
      112,
      111,
      105,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      108,
      121,
      67,
      108,
      101,
      118,
      101,
      108,
      97,
      110,
      100,
      119,
      97,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      97,
      114,
      101,
      32,
      103,
      105,
      118,
      101,
      110,
      119,
      97,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      115,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      101,
      115,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      46,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      77,
      117,
      115,
      101,
      117,
      109,
      32,
      111,
      102,
      108,
      111,
      117,
      105,
      115,
      105,
      97,
      110,
      97,
      40,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      105,
      110,
      110,
      101,
      115,
      111,
      116,
      97,
      112,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      97,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      118,
      111,
      108,
      117,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      100,
      101,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      48,
      48,
      112,
      120,
      124,
      114,
      105,
      103,
      104,
      109,
      97,
      100,
      101,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      111,
      102,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      119,
      105,
      116,
      104,
      32,
      115,
      111,
      109,
      101,
      119,
      104,
      111,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      105,
      116,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      32,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      102,
      116,
      101,
      110,
      109,
      101,
      97,
      115,
      117,
      114,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      105,
      115,
      112,
      97,
      112,
      101,
      114,
      98,
      97,
      99,
      107,
      118,
      97,
      108,
      117,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      112,
      108,
      97,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      100,
      32,
      101,
      97,
      114,
      108,
      121,
      60,
      47,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      101,
      112,
      111,
      119,
      101,
      114,
      32,
      97,
      110,
      100,
      111,
      102,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      118,
      101,
      110,
      116,
      118,
      101,
      114,
      121,
      32,
      104,
      105,
      103,
      104,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      47,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      97,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      101,
      115,
      112,
      101,
      114,
      97,
      110,
      116,
      111,
      102,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      108,
      97,
      116,
      118,
      105,
      101,
      197,
      161,
      117,
      108,
      105,
      101,
      116,
      117,
      118,
      105,
      197,
      179,
      196,
      140,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      196,
      141,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      230,
      151,
      165,
      230,
      156,
      172,
      232,
      170,
      158,
      231,
      174,
      128,
      228,
      189,
      147,
      229,
      173,
      151,
      231,
      185,
      129,
      233,
      171,
      148,
      229,
      173,
      151,
      237,
      149,
      156,
      234,
      181,
      173,
      236,
      150,
      180,
      228,
      184,
      186,
      228,
      187,
      128,
      228,
      185,
      136,
      232,
      174,
      161,
      231,
      174,
      151,
      230,
      156,
      186,
      231,
      172,
      148,
      232,
      174,
      176,
      230,
      156,
      172,
      232,
      168,
      142,
      232,
      171,
      150,
      229,
      141,
      128,
      230,
      156,
      141,
      229,
      138,
      161,
      229,
      153,
      168,
      228,
      186,
      146,
      232,
      129,
      148,
      231,
      189,
      145,
      230,
      136,
      191,
      229,
      156,
      176,
      228,
      186,
      167,
      228,
      191,
      177,
      228,
      185,
      144,
      233,
      131,
      168,
      229,
      135,
      186,
      231,
      137,
      136,
      231,
      164,
      190,
      230,
      142,
      146,
      232,
      161,
      140,
      230,
      166,
      156,
      233,
      131,
      168,
      232,
      144,
      189,
      230,
      160,
      188,
      232,
      191,
      155,
      228,
      184,
      128,
      230,
      173,
      165,
      230,
      148,
      175,
      228,
      187,
      152,
      229,
      174,
      157,
      233,
      170,
      140,
      232,
      175,
      129,
      231,
      160,
      129,
      229,
      167,
      148,
      229,
      145,
      152,
      228,
      188,
      154,
      230,
      149,
      176,
      230,
      141,
      174,
      229,
      186,
      147,
      230,
      182,
      136,
      232,
      180,
      185,
      232,
      128,
      133,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      174,
      164,
      232,
      174,
      168,
      232,
      174,
      186,
      229,
      140,
      186,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      184,
      130,
      230,
      146,
      173,
      230,
      148,
      190,
      229,
      153,
      168,
      229,
      140,
      151,
      228,
      186,
      172,
      229,
      184,
      130,
      229,
      164,
      167,
      229,
      173,
      166,
      231,
      148,
      159,
      232,
      182,
      138,
      230,
      157,
      165,
      232,
      182,
      138,
      231,
      174,
      161,
      231,
      144,
      134,
      229,
      145,
      152,
      228,
      191,
      161,
      230,
      129,
      175,
      231,
      189,
      145,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      97,
      114,
      103,
      101,
      110,
      116,
      105,
      110,
      97,
      98,
      97,
      114,
      99,
      101,
      108,
      111,
      110,
      97,
      99,
      117,
      97,
      108,
      113,
      117,
      105,
      101,
      114,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      100,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      115,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      119,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      98,
      195,
      186,
      115,
      113,
      117,
      101,
      100,
      97,
      99,
      111,
      109,
      117,
      110,
      105,
      100,
      97,
      100,
      115,
      101,
      103,
      117,
      114,
      105,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      114,
      118,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      100,
      105,
      99,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      110,
      111,
      118,
      105,
      101,
      109,
      98,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      111,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      101,
      99,
      111,
      110,
      111,
      109,
      195,
      173,
      97,
      105,
      109,
      195,
      161,
      103,
      101,
      110,
      101,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      114,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      114,
      110,
      101,
      99,
      101,
      115,
      97,
      114,
      105,
      111,
      97,
      116,
      101,
      110,
      99,
      105,
      195,
      179,
      110,
      116,
      101,
      108,
      195,
      169,
      102,
      111,
      110,
      111,
      99,
      111,
      109,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      112,
      97,
      99,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      97,
      110,
      195,
      161,
      108,
      105,
      115,
      105,
      115,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      111,
      115,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      115,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      105,
      97,
      101,
      116,
      105,
      113,
      117,
      101,
      116,
      97,
      115,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      99,
      97,
      114,
      195,
      161,
      99,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      105,
      101,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      105,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      109,
      117,
      110,
      105,
      99,
      105,
      112,
      97,
      108,
      99,
      114,
      101,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      101,
      115,
      101,
      106,
      101,
      114,
      99,
      105,
      99,
      105,
      111,
      101,
      100,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      115,
      97,
      108,
      97,
      109,
      97,
      110,
      99,
      97,
      103,
      111,
      110,
      122,
      195,
      161,
      108,
      101,
      122,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      112,
      101,
      108,
      195,
      173,
      99,
      117,
      108,
      97,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      101,
      115,
      116,
      97,
      114,
      114,
      97,
      103,
      111,
      110,
      97,
      112,
      114,
      195,
      161,
      99,
      116,
      105,
      99,
      97,
      110,
      111,
      118,
      101,
      100,
      97,
      100,
      101,
      115,
      112,
      114,
      111,
      112,
      117,
      101,
      115,
      116,
      97,
      112,
      97,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      115,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      115,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      136,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      155,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      143,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      164,
      100,
      105,
      112,
      108,
      111,
      100,
      111,
      99,
      115,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      164,
      148,
      224,
      164,
      184,
      224,
      164,
      164,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      134,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      136,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      174,
      224,
      165,
      140,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      137,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      164,
      164,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      149,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      129,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      138,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      160,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      165,
      140,
      224,
      164,
      168,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      150,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      128,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      13,
      10,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      32,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      118,
      101,
      114,
      121,
      116,
      104,
      105,
      110,
      103,
      60,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      50,
      48,
      49,
      106,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      115,
      98,
      114,
      101,
      97,
      100,
      99,
      114,
      117,
      109,
      98,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      104,
      111,
      114,
      105,
      122,
      111,
      110,
      116,
      97,
      108,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      78,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      60,
      109,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      97,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      117,
      110,
      116,
      39,
      44,
      32,
      39,
      85,
      65,
      45,
      114,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      101,
      100,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      46,
      32,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      105,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      38,
      108,
      116,
      59,
      98,
      114,
      38,
      103,
      116,
      59,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      35,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      105,
      112,
      84,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      80,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      105,
      115,
      111,
      110,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      34,
      99,
      111,
      110,
      99,
      108,
      117,
      115,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      98,
      105,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      95,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      111,
      111,
      100,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      112,
      101,
      114,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      101,
      32,
      111,
      110,
      102,
      111,
      99,
      117,
      115,
      61,
      34,
      60,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      105,
      115,
      46,
      118,
      97,
      108,
      117,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      119,
      101,
      108,
      108,
      45,
      107,
      110,
      111,
      119,
      110,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      111,
      110,
      100,
      105,
      115,
      99,
      105,
      112,
      108,
      105,
      110,
      101,
      108,
      111,
      103,
      111,
      46,
      112,
      110,
      103,
      34,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      44,
      98,
      111,
      117,
      110,
      100,
      97,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      40,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      34,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      34,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      34,
      32,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      10,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      105,
      112,
      108,
      105,
      110,
      103,
      117,
      105,
      115,
      116,
      105,
      99,
      112,
      120,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      112,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      105,
      102,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      118,
      111,
      99,
      97,
      98,
      117,
      108,
      97,
      114,
      121,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      115,
      105,
      115,
      46,
      115,
      117,
      98,
      109,
      105,
      116,
      40,
      41,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      97,
      110,
      110,
      111,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      104,
      105,
      110,
      100,
      32,
      116,
      104,
      101,
      70,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      34,
      97,
      115,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      111,
      114,
      114,
      117,
      112,
      116,
      105,
      111,
      110,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      115,
      101,
      120,
      112,
      108,
      105,
      99,
      105,
      116,
      108,
      121,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      67,
      108,
      105,
      99,
      107,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      100,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      111,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      110,
      118,
      101,
      115,
      116,
      109,
      101,
      110,
      116,
      112,
      114,
      111,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      77,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      47,
      100,
      101,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      112,
      117,
      110,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      100,
      97,
      112,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      119,
      101,
      108,
      108,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      117,
      112,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      112,
      120,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      97,
      108,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      101,
      100,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      10,
      10,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      115,
      97,
      114,
      116,
      105,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      101,
      100,
      67,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      109,
      101,
      110,
      116,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      101,
      114,
      101,
      78,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      98,
      101,
      121,
      111,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      105,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      34,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      13,
      10,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      32,
      109,
      97,
      105,
      110,
      115,
      116,
      114,
      101,
      97,
      109,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      13,
      10,
      32,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      32,
      32,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      112,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      101,
      100,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      80,
      111,
      114,
      116,
      117,
      103,
      117,
      101,
      115,
      101,
      115,
      117,
      98,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      117,
      108,
      116,
      105,
      109,
      101,
      100,
      105,
      97,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      108,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      97,
      112,
      97,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      101,
      120,
      99,
      101,
      112,
      116,
      32,
      102,
      111,
      114,
      103,
      117,
      105,
      100,
      101,
      108,
      105,
      110,
      101,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      115,
      101,
      99,
      111,
      110,
      100,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      97,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      112,
      97,
      114,
      97,
      109,
      101,
      116,
      101,
      114,
      115,
      112,
      114,
      111,
      104,
      105,
      98,
      105,
      116,
      101,
      100,
      61,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      101,
      114,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      120,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      114,
      115,
      109,
      105,
      108,
      108,
      101,
      110,
      110,
      105,
      117,
      109,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      116,
      104,
      101,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      59,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      117,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      99,
      121,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      100,
      105,
      115,
      99,
      108,
      97,
      105,
      109,
      101,
      114,
      101,
      120,
      112,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      115,
      105,
      109,
      112,
      108,
      105,
      102,
      105,
      101,
      100,
      108,
      101,
      103,
      105,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      48,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      108,
      121,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      102,
      105,
      118,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      80,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      49,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      121,
      99,
      111,
      110,
      102,
      105,
      100,
      101,
      110,
      99,
      101,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      97,
      98,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      111,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      110,
      106,
      111,
      105,
      110,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      115,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      111,
      110,
      99,
      101,
      32,
      97,
      103,
      97,
      105,
      110,
      98,
      117,
      116,
      32,
      114,
      97,
      116,
      104,
      101,
      114,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      110,
      116,
      115,
      111,
      102,
      32,
      99,
      111,
      117,
      114,
      115,
      101,
      44,
      97,
      32,
      103,
      114,
      111,
      117,
      112,
      32,
      111,
      102,
      76,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      85,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      60,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      109,
      111,
      98,
      105,
      108,
      101,
      80,
      114,
      111,
      116,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      103,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      83,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      44,
      34,
      32,
      47,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      13,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      104,
      101,
      32,
      117,
      115,
      101,
      32,
      111,
      102,
      118,
      111,
      108,
      117,
      110,
      116,
      101,
      101,
      114,
      115,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      97,
      116,
      101,
      110,
      101,
      100,
      42,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      116,
      101,
      114,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      60,
      47,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      39,
      105,
      32,
      61,
      32,
      48,
      59,
      32,
      105,
      32,
      60,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      100,
      101,
      118,
      111,
      116,
      101,
      100,
      32,
      116,
      111,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      102,
      111,
      114,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      116,
      111,
      117,
      114,
      110,
      97,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      115,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      125,
      10,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      122,
      101,
      100,
      97,
      99,
      99,
      101,
      115,
      115,
      105,
      98,
      108,
      101,
      60,
      47,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      62,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      77,
      101,
      97,
      110,
      119,
      104,
      105,
      108,
      101,
      44,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      97,
      62,
      60,
      98,
      114,
      32,
      47,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      84,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      98,
      111,
      116,
      104,
      32,
      115,
      105,
      100,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      105,
      110,
      103,
      97,
      110,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      60,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      97,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      104,
      105,
      115,
      32,
      109,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      110,
      99,
      104,
      101,
      115,
      116,
      101,
      114,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      32,
      116,
      111,
      34,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      115,
      74,
      111,
      117,
      114,
      110,
      97,
      108,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      97,
      116,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      98,
      108,
      101,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      34,
      9,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      62,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      101,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      112,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      105,
      110,
      32,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      105,
      110,
      103,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      9,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      73,
      116,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      32,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      76,
      117,
      120,
      101,
      109,
      98,
      111,
      117,
      114,
      103,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      101,
      110,
      103,
      97,
      103,
      101,
      100,
      32,
      105,
      110,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      10,
      60,
      33,
      45,
      45,
      32,
      69,
      110,
      100,
      32,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      97,
      108,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      116,
      111,
      112,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      110,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      115,
      101,
      100,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      105,
      122,
      101,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      32,
      116,
      111,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      114,
      105,
      97,
      114,
      101,
      116,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      65,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      102,
      111,
      117,
      114,
      32,
      121,
      101,
      97,
      114,
      115,
      10,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      105,
      103,
      105,
      110,
      115,
      32,
      111,
      102,
      111,
      98,
      108,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      115,
      98,
      101,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      115,
      60,
      98,
      97,
      115,
      101,
      32,
      104,
      114,
      101,
      102,
      114,
      101,
      112,
      101,
      97,
      116,
      101,
      100,
      108,
      121,
      119,
      105,
      108,
      108,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      98,
      108,
      101,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      101,
      100,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      118,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      122,
      101,
      100,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      32,
      112,
      108,
      97,
      99,
      101,
      97,
      117,
      116,
      111,
      110,
      111,
      109,
      111,
      117,
      115,
      99,
      111,
      109,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      116,
      119,
      111,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      50,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      119,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      46,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      110,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      108,
      108,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      98,
      121,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      119,
      105,
      116,
      104,
      100,
      114,
      97,
      119,
      97,
      108,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      105,
      115,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      109,
      121,
      115,
      116,
      101,
      114,
      105,
      111,
      117,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      99,
      111,
      110,
      118,
      101,
      110,
      105,
      101,
      110,
      116,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      101,
      100,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      116,
      105,
      99,
      104,
      97,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      97,
      103,
      97,
      110,
      100,
      97,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      99,
      101,
      114,
      101,
      109,
      111,
      110,
      105,
      97,
      108,
      112,
      114,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      80,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      83,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      45,
      116,
      114,
      97,
      100,
      101,
      109,
      97,
      114,
      107,
      115,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      76,
      105,
      98,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      100,
      97,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      108,
      111,
      110,
      103,
      32,
      97,
      115,
      105,
      109,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      100,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      109,
      76,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      50,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      102,
      108,
      111,
      97,
      116,
      58,
      32,
      108,
      101,
      102,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      101,
      115,
      115,
      109,
      101,
      110,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      97,
      108,
      115,
      32,
      119,
      105,
      116,
      104,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      101,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      116,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      101,
      114,
      101,
      111,
      118,
      101,
      114,
      32,
      116,
      105,
      109,
      101,
      44,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      112,
      114,
      101,
      115,
      117,
      109,
      97,
      98,
      108,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      109,
      105,
      108,
      121,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      46,
      117,
      110,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      97,
      32,
      109,
      105,
      110,
      111,
      114,
      105,
      116,
      121,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      34,
      98,
      101,
      108,
      111,
      110,
      103,
      115,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      110,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      32,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      114,
      111,
      119,
      115,
      112,
      97,
      110,
      61,
      34,
      111,
      110,
      108,
      121,
      32,
      97,
      32,
      102,
      101,
      119,
      109,
      101,
      97,
      110,
      116,
      32,
      116,
      104,
      97,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      45,
      45,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      65,
      114,
      99,
      104,
      98,
      105,
      115,
      104,
      111,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      98,
      101,
      105,
      110,
      103,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      101,
      115,
      112,
      114,
      105,
      118,
      105,
      108,
      101,
      103,
      101,
      115,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      32,
      105,
      110,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      116,
      104,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      32,
      101,
      103,
      103,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      97,
      98,
      108,
      101,
      80,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      34,
      62,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      32,
      111,
      102,
      45,
      106,
      115,
      115,
      100,
      107,
      39,
      41,
      41,
      59,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      115,
      117,
      97,
      108,
      116,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      105,
      111,
      110,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      115,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      32,
      97,
      114,
      105,
      116,
      104,
      109,
      101,
      116,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      115,
      109,
      105,
      103,
      104,
      116,
      32,
      104,
      97,
      118,
      101,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      105,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      80,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      104,
      105,
      112,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      116,
      111,
      119,
      97,
      114,
      100,
      32,
      116,
      104,
      101,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      48,
      48,
      118,
      105,
      100,
      101,
      111,
      32,
      103,
      97,
      109,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      111,
      110,
      107,
      101,
      121,
      112,
      114,
      101,
      115,
      115,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      121,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      44,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      114,
      99,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      118,
      101,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      105,
      110,
      103,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      111,
      119,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      104,
      111,
      119,
      115,
      32,
      116,
      104,
      97,
      116,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      9,
      9,
      99,
      111,
      109,
      112,
      108,
      97,
      105,
      110,
      116,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      101,
      114,
      104,
      101,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      32,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      102,
      117,
      116,
      117,
      114,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      84,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      44,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      110,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      109,
      101,
      100,
      69,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      101,
      114,
      115,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      101,
      114,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      115,
      105,
      100,
      105,
      97,
      114,
      121,
      99,
      111,
      110,
      115,
      112,
      105,
      114,
      97,
      99,
      121,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      102,
      102,
      111,
      114,
      100,
      97,
      98,
      108,
      101,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      32,
      102,
      111,
      114,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      105,
      116,
      101,
      109,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      108,
      121,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      108,
      121,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      97,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      116,
      114,
      97,
      118,
      101,
      108,
      108,
      105,
      110,
      103,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      121,
      102,
      111,
      99,
      117,
      115,
      101,
      115,
      32,
      111,
      110,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      98,
      108,
      101,
      102,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      116,
      97,
      110,
      100,
      115,
      32,
      102,
      111,
      114,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      40,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      67,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      117,
      110,
      100,
      101,
      114,
      116,
      97,
      107,
      101,
      110,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      108,
      121,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      10,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      98,
      101,
      115,
      116,
      45,
      107,
      110,
      111,
      119,
      110,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      97,
      34,
      32,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      76,
      105,
      101,
      117,
      116,
      101,
      110,
      97,
      110,
      116,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      121,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      100,
      101,
      32,
      117,
      112,
      32,
      111,
      102,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      108,
      101,
      97,
      114,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      39,
      115,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      101,
      100,
      98,
      97,
      115,
      101,
      100,
      32,
      117,
      112,
      111,
      110,
      116,
      104,
      101,
      32,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      115,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      46,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      46,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      105,
      115,
      109,
      105,
      110,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      105,
      103,
      104,
      116,
      45,
      119,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      58,
      119,
      101,
      110,
      116,
      32,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      97,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      32,
      97,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      118,
      101,
      105,
      110,
      103,
      114,
      101,
      100,
      105,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      100,
      97,
      110,
      99,
      101,
      67,
      101,
      110,
      116,
      101,
      114,
      32,
      102,
      111,
      114,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      99,
      101,
      114,
      101,
      97,
      100,
      121,
      83,
      116,
      97,
      116,
      101,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      101,
      115,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      32,
      111,
      102,
      44,
      32,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      98,
      101,
      103,
      97,
      110,
      32,
      119,
      105,
      116,
      104,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      102,
      114,
      111,
      109,
      32,
      119,
      104,
      105,
      99,
      104,
      47,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      103,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      102,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      104,
      111,
      108,
      100,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      103,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      116,
      111,
      112,
      116,
      104,
      101,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      115,
      32,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      114,
      116,
      104,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      110,
      103,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      98,
      117,
      105,
      108,
      116,
      119,
      97,
      115,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      115,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      32,
      68,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      49,
      48,
      48,
      115,
      111,
      109,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      102,
      111,
      114,
      116,
      111,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      104,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      97,
      110,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      34,
      62,
      105,
      115,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      108,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      100,
      117,
      109,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      116,
      101,
      110,
      97,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      45,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      32,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      46,
      97,
      114,
      105,
      97,
      45,
      108,
      97,
      98,
      101,
      108,
      116,
      104,
      101,
      32,
      112,
      108,
      97,
      110,
      101,
      116,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      100,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      97,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      99,
      105,
      97,
      108,
      97,
      114,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      105,
      110,
      103,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      108,
      121,
      116,
      104,
      101,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      111,
      110,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      111,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      115,
      111,
      117,
      110,
      100,
      116,
      114,
      97,
      99,
      107,
      115,
      101,
      97,
      114,
      99,
      104,
      70,
      111,
      114,
      109,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      97,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      32,
      111,
      102,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      111,
      102,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      32,
      118,
      101,
      114,
      121,
      32,
      108,
      97,
      114,
      103,
      101,
      97,
      117,
      116,
      111,
      109,
      111,
      116,
      105,
      118,
      101,
      98,
      121,
      32,
      102,
      97,
      114,
      32,
      116,
      104,
      101,
      114,
      97,
      110,
      103,
      101,
      32,
      102,
      114,
      111,
      109,
      112,
      117,
      114,
      115,
      117,
      105,
      116,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      97,
      103,
      114,
      101,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      104,
      105,
      115,
      32,
      111,
      114,
      32,
      104,
      101,
      114,
      116,
      114,
      101,
      109,
      101,
      110,
      100,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      32,
      111,
      102,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      48,
      32,
      49,
      101,
      109,
      32,
      49,
      101,
      109,
      59,
      66,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      47,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      97,
      110,
      32,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      118,
      101,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      47,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      46,
      99,
      111,
      109,
      47,
      105,
      110,
      100,
      101,
      120,
      116,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      112,
      105,
      116,
      116,
      115,
      98,
      117,
      114,
      103,
      104,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      13,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      40,
      102,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      111,
      117,
      116,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      13,
      10,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      108,
      121,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      44,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      100,
      105,
      115,
      97,
      115,
      116,
      114,
      111,
      117,
      115,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      115,
      32,
      97,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      60,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      102,
      111,
      114,
      115,
      105,
      110,
      103,
      101,
      114,
      32,
      97,
      110,
      100,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      34,
      47,
      47,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      105,
      115,
      32,
      112,
      111,
      105,
      110,
      116,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      108,
      121,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      115,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      110,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      215,
      162,
      215,
      145,
      215,
      168,
      215,
      153,
      215,
      170,
      217,
      129,
      216,
      167,
      216,
      177,
      216,
      179,
      219,
      140,
      100,
      101,
      115,
      97,
      114,
      114,
      111,
      108,
      108,
      111,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      101,
      100,
      117,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      115,
      101,
      112,
      116,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      100,
      105,
      114,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      117,
      98,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      100,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      116,
      101,
      115,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      115,
      114,
      101,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      115,
      105,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      105,
      111,
      112,
      114,
      105,
      118,
      97,
      99,
      105,
      100,
      97,
      100,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      105,
      111,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      111,
      98,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      115,
      97,
      99,
      99,
      101,
      115,
      111,
      114,
      105,
      111,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      114,
      97,
      116,
      105,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      105,
      100,
      97,
      100,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      118,
      97,
      108,
      108,
      97,
      100,
      111,
      108,
      105,
      100,
      98,
      105,
      98,
      108,
      105,
      111,
      116,
      101,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      105,
      111,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      115,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      101,
      115,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      101,
      122,
      97,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      101,
      99,
      111,
      110,
      195,
      179,
      109,
      105,
      99,
      97,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      101,
      114,
      111,
      100,
      114,
      195,
      173,
      103,
      117,
      101,
      122,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      114,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      102,
      117,
      110,
      100,
      97,
      99,
      105,
      195,
      179,
      110,
      102,
      114,
      101,
      99,
      117,
      101,
      110,
      116,
      101,
      115,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      101,
      116,
      111,
      116,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      208,
      177,
      209,
      131,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      209,
      143,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      182,
      208,
      181,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      177,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      209,
      130,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      176,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      182,
      208,
      180,
      209,
      131,
      208,
      177,
      209,
      131,
      208,
      180,
      209,
      131,
      209,
      130,
      208,
      159,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      183,
      208,
      180,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      190,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      208,
      184,
      208,
      189,
      209,
      131,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      185,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      181,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      128,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      185,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      176,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      181,
      209,
      130,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      209,
      140,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      187,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      177,
      208,
      190,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      181,
      209,
      135,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      180,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      181,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      135,
      209,
      130,
      208,
      184,
      208,
      159,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      209,
      133,
      209,
      129,
      209,
      128,
      208,
      176,
      208,
      183,
      209,
      131,
      208,
      161,
      208,
      176,
      208,
      189,
      208,
      186,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      154,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      186,
      208,
      189,
      208,
      184,
      208,
      179,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      181,
      208,
      185,
      208,
      189,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      209,
      140,
      208,
      187,
      209,
      142,
      208,
      177,
      208,
      190,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      208,
      184,
      208,
      154,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      164,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      191,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      209,
      130,
      209,
      139,
      209,
      129,
      209,
      143,
      209,
      135,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      130,
      209,
      128,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      180,
      208,
      176,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      139,
      209,
      133,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      176,
      208,
      157,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      190,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      208,
      188,
      208,
      176,
      209,
      128,
      209,
      130,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      186,
      209,
      129,
      209,
      130,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      209,
      133,
      208,
      188,
      208,
      184,
      208,
      189,
      209,
      131,
      209,
      130,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      142,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      129,
      208,
      176,
      208,
      188,
      208,
      190,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      186,
      208,
      190,
      208,
      189,
      209,
      134,
      208,
      181,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      188,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      144,
      209,
      128,
      209,
      133,
      208,
      184,
      208,
      178,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      216,
      165,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      138,
      217,
      136,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      182,
      217,
      136,
      216,
      165,
      216,
      182,
      216,
      167,
      217,
      129,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      179,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      173,
      217,
      133,
      217,
      138,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      167,
      216,
      170,
      217,
      133,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      137,
      216,
      170,
      216,
      185,
      216,
      175,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      170,
      216,
      183,
      217,
      136,
      217,
      138,
      216,
      177,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      217,
      133,
      216,
      165,
      216,
      177,
      217,
      129,
      216,
      167,
      217,
      130,
      216,
      183,
      217,
      132,
      216,
      168,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      216,
      186,
      216,
      169,
      216,
      170,
      216,
      177,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      174,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      181,
      216,
      181,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      170,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      133,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      169,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      183,
      217,
      129,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      165,
      216,
      175,
      216,
      167,
      216,
      177,
      216,
      169,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      216,
      169,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      136,
      217,
      130,
      216,
      170,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      169,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      163,
      216,
      177,
      216,
      180,
      217,
      138,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      129,
      216,
      177,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      131,
      217,
      132,
      216,
      170,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      134,
      216,
      169,
      216,
      172,
      216,
      167,
      217,
      133,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      134,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      130,
      217,
      132,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      133,
      217,
      130,
      216,
      167,
      216,
      183,
      216,
      185,
      217,
      133,
      216,
      177,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      183,
      217,
      130,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      172,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      175,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      183,
      217,
      138,
      217,
      131,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      46,
      106,
      112,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      49,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      46,
      103,
      105,
      102,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      105,
      110,
      103,
      46,
      112,
      110,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      114,
      111,
      112,
      114,
      105,
      97,
      116,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      108,
      121,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      60,
      47,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      58,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      101,
      118,
      101,
      110,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      115,
      116,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      115,
      112,
      101,
      114,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      117,
      114,
      108,
      40,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      115,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      41,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      46,
      74,
      80,
      71,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      47,
      104,
      101,
      97,
      100,
      62,
      60,
      98,
      111,
      100,
      121,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      115,
      32,
      111,
      102,
      10,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      111,
      116,
      104,
      59,
      99,
      111,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      116,
      111,
      112,
      58,
      78,
      101,
      119,
      32,
      90,
      101,
      97,
      108,
      97,
      110,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      101,
      100,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      121,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      115,
      119,
      105,
      116,
      122,
      101,
      114,
      108,
      97,
      110,
      100,
      68,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      10,
      10,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      60,
      47,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      62,
      116,
      104,
      117,
      110,
      100,
      101,
      114,
      98,
      105,
      114,
      100,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      115,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      101,
      115,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      54,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      59,
      99,
      97,
      112,
      97,
      98,
      108,
      101,
      32,
      111,
      102,
      32,
      100,
      105,
      115,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      105,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      65,
      102,
      103,
      104,
      97,
      110,
      105,
      115,
      116,
      97,
      110,
      119,
      97,
      115,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      77,
      97,
      116,
      104,
      46,
      102,
      108,
      111,
      111,
      114,
      40,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      99,
      97,
      110,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      105,
      110,
      116,
      101,
      110,
      97,
      110,
      99,
      101,
      101,
      110,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      101,
      100,
      60,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      97,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      97,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      32,
      61,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      68,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      46,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      101,
      97,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      116,
      105,
      97,
      108,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      110,
      121,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      69,
      97,
      115,
      116,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      109,
      111,
      115,
      116,
      32,
      102,
      97,
      109,
      111,
      117,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      108,
      105,
      109,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      115,
      111,
      118,
      101,
      114,
      101,
      105,
      103,
      110,
      116,
      121,
      45,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      60,
      116,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      110,
      100,
      112,
      97,
      114,
      97,
      108,
      108,
      101,
      108,
      32,
      116,
      111,
      100,
      111,
      99,
      116,
      114,
      105,
      110,
      101,
      32,
      111,
      102,
      111,
      99,
      99,
      117,
      112,
      105,
      101,
      100,
      32,
      98,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      111,
      108,
      111,
      103,
      121,
      82,
      101,
      110,
      97,
      105,
      115,
      115,
      97,
      110,
      99,
      101,
      97,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      100,
      101,
      99,
      101,
      115,
      115,
      111,
      114,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      60,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      105,
      122,
      101,
      100,
      60,
      47,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      46,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      65,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      114,
      115,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      32,
      116,
      104,
      101,
      77,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      40,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      60,
      116,
      100,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      60,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      111,
      110,
      99,
      104,
      97,
      110,
      103,
      101,
      61,
      34,
      41,
      46,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      79,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      105,
      101,
      115,
      98,
      114,
      97,
      110,
      99,
      104,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      105,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      34,
      62,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      115,
      101,
      101,
      110,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      119,
      97,
      115,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      112,
      120,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      100,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      60,
      104,
      52,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      60,
      47,
      112,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      99,
      113,
      117,
      105,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      115,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      100,
      109,
      111,
      115,
      116,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      108,
      121,
      73,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      116,
      32,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      121,
      32,
      116,
      111,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      115,
      104,
      105,
      112,
      99,
      111,
      110,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      112,
      120,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      32,
      100,
      101,
      114,
      105,
      118,
      97,
      116,
      105,
      118,
      101,
      115,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      104,
      101,
      109,
      101,
      115,
      116,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      101,
      114,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      61,
      34,
      104,
      105,
      103,
      104,
      32,
      115,
      99,
      104,
      111,
      111,
      108,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      99,
      111,
      109,
      102,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      97,
      100,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      114,
      101,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      104,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      110,
      32,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      104,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      98,
      121,
      60,
      112,
      97,
      114,
      97,
      109,
      32,
      110,
      97,
      109,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      32,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      109,
      101,
      110,
      116,
      73,
      83,
      79,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      119,
      97,
      115,
      32,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      105,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      116,
      116,
      101,
      100,
      47,
      106,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      105,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      105,
      116,
      32,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      98,
      101,
      101,
      110,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      84,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      105,
      108,
      97,
      116,
      105,
      111,
      110,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      98,
      121,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      116,
      111,
      32,
      115,
      97,
      121,
      32,
      116,
      104,
      97,
      116,
      69,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      97,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      116,
      104,
      97,
      116,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      105,
      110,
      103,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      112,
      114,
      111,
      98,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      108,
      121,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      112,
      101,
      99,
      116,
      97,
      99,
      117,
      108,
      97,
      114,
      102,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      105,
      116,
      121,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      115,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      32,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      115,
      104,
      97,
      114,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      115,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      102,
      105,
      108,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      116,
      32,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      34,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      58,
      109,
      101,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      32,
      111,
      117,
      116,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      104,
      101,
      32,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      115,
      101,
      116,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      105,
      110,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      97,
      110,
      100,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      67,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      67,
      104,
      114,
      105,
      115,
      116,
      111,
      112,
      104,
      101,
      114,
      77,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      50,
      115,
      105,
      122,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      118,
      101,
      32,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      32,
      111,
      102,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      118,
      101,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      116,
      101,
      110,
      100,
      101,
      110,
      99,
      121,
      32,
      116,
      111,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      32,
      111,
      102,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      111,
      117,
      108,
      100,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      32,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      117,
      114,
      101,
      46,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      97,
      108,
      108,
      101,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      65,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      119,
      97,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      32,
      116,
      111,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      116,
      121,
      101,
      97,
      114,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      44,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      105,
      110,
      103,
      80,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      115,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      72,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      104,
      105,
      115,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      116,
      32,
      105,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      99,
      97,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      98,
      101,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      116,
      111,
      71,
      77,
      84,
      83,
      116,
      114,
      105,
      110,
      103,
      65,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      69,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      44,
      119,
      97,
      115,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      32,
      105,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      101,
      115,
      116,
      114,
      105,
      97,
      108,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      32,
      111,
      102,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      119,
      101,
      114,
      101,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      115,
      99,
      114,
      101,
      101,
      110,
      32,
      97,
      110,
      100,
      32,
      73,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      97,
      114,
      101,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      109,
      111,
      115,
      116,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      104,
      101,
      32,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      121,
      32,
      100,
      111,
      32,
      110,
      111,
      116,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      104,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      105,
      110,
      103,
      115,
      104,
      111,
      114,
      116,
      45,
      108,
      105,
      118,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      118,
      101,
      114,
      121,
      32,
      108,
      105,
      116,
      116,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      32,
      111,
      102,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      51,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      45,
      115,
      99,
      97,
      108,
      101,
      46,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      116,
      119,
      111,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      97,
      110,
      100,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      13,
      10,
      67,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      32,
      111,
      102,
      105,
      110,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      32,
      97,
      109,
      105,
      115,
      115,
      105,
      115,
      115,
      105,
      112,
      112,
      105,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      111,
      117,
      116,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      119,
      115,
      105,
      116,
      117,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      84,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      105,
      99,
      105,
      100,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      115,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      110,
      103,
      101,
      97,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      110,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      112,
      97,
      103,
      101,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      100,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      119,
      97,
      115,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      102,
      97,
      118,
      111,
      114,
      32,
      111,
      102,
      77,
      105,
      110,
      105,
      115,
      116,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      122,
      101,
      100,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      100,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      104,
      97,
      116,
      80,
      97,
      108,
      101,
      115,
      116,
      105,
      110,
      105,
      97,
      110,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      108,
      121,
      73,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      44,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      115,
      117,
      98,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      108,
      121,
      119,
      97,
      115,
      32,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      111,
      117,
      116,
      98,
      114,
      101,
      97,
      107,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      115,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      97,
      32,
      120,
      109,
      108,
      110,
      115,
      58,
      111,
      103,
      61,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      120,
      116,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      98,
      101,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      10,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      97,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      115,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      32,
      97,
      32,
      116,
      105,
      109,
      101,
      32,
      119,
      104,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      59,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      44,
      119,
      97,
      115,
      32,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      116,
      111,
      32,
      107,
      101,
      101,
      112,
      32,
      116,
      104,
      101,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      105,
      118,
      101,
      32,
      98,
      105,
      114,
      116,
      104,
      115,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      67,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      99,
      117,
      116,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      38,
      97,
      109,
      112,
      59,
      116,
      105,
      109,
      101,
      115,
      59,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      102,
      111,
      114,
      97,
      108,
      105,
      103,
      110,
      61,
      114,
      105,
      103,
      104,
      116,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      32,
      99,
      111,
      110,
      102,
      105,
      110,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      105,
      115,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      13,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      101,
      108,
      121,
      44,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      105,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      115,
      58,
      110,
      111,
      110,
      101,
      59,
      32,
      111,
      118,
      101,
      114,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      118,
      97,
      108,
      105,
      100,
      105,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      32,
      116,
      111,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      100,
      111,
      119,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      101,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      101,
      116,
      104,
      101,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      34,
      62,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      97,
      110,
      100,
      32,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      97,
      32,
      109,
      97,
      116,
      116,
      101,
      114,
      32,
      111,
      102,
      13,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      102,
      97,
      115,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      102,
      116,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      116,
      111,
      32,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      114,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      105,
      114,
      32,
      102,
      105,
      114,
      115,
      116,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      98,
      101,
      103,
      105,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      101,
      110,
      116,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      101,
      113,
      117,
      105,
      108,
      105,
      98,
      114,
      105,
      117,
      109,
      97,
      115,
      115,
      117,
      109,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      110,
      101,
      101,
      100,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      115,
      116,
      104,
      101,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      97,
      114,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      111,
      110,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      97,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      105,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      45,
      100,
      97,
      121,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      108,
      121,
      116,
      111,
      32,
      102,
      111,
      114,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      105,
      115,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      32,
      102,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      109,
      97,
      100,
      101,
      119,
      97,
      115,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      101,
      97,
      110,
      115,
      98,
      117,
      116,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      111,
      110,
      77,
      111,
      117,
      115,
      101,
      79,
      118,
      101,
      114,
      97,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      97,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      97,
      114,
      103,
      101,
      114,
      10,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      119,
      97,
      115,
      32,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      111,
      102,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      119,
      97,
      114,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      98,
      121,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      112,
      114,
      105,
      101,
      116,
      97,
      114,
      121,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      116,
      105,
      103,
      105,
      111,
      117,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      46,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      111,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      46,
      83,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      32,
      104,
      111,
      110,
      111,
      114,
      32,
      111,
      102,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      32,
      105,
      110,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      107,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      49,
      115,
      116,
      32,
      69,
      97,
      114,
      108,
      32,
      111,
      102,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      108,
      121,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      32,
      32,
      116,
      104,
      101,
      121,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      100,
      100,
      70,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      104,
      105,
      112,
      112,
      97,
      114,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      116,
      111,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      105,
      110,
      117,
      115,
      59,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      105,
      110,
      103,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      48,
      34,
      32,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      98,
      111,
      111,
      107,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      32,
      116,
      104,
      101,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      105,
      110,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      116,
      116,
      104,
      101,
      32,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      97,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      119,
      101,
      114,
      101,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      110,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      32,
      105,
      110,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      105,
      110,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      111,
      102,
      116,
      117,
      114,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      76,
      111,
      114,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      44,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      97,
      110,
      100,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      111,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      32,
      105,
      110,
      98,
      108,
      97,
      99,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      99,
      97,
      110,
      32,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      97,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      105,
      116,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      9,
      9,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      109,
      111,
      114,
      101,
      114,
      97,
      100,
      105,
      111,
      97,
      99,
      116,
      105,
      118,
      101,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      110,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      44,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      117,
      108,
      100,
      99,
      111,
      112,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      97,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      115,
      119,
      111,
      114,
      107,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      101,
      114,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      111,
      102,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      99,
      108,
      105,
      101,
      110,
      116,
      87,
      105,
      100,
      116,
      104,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      76,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      108,
      121,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      105,
      110,
      104,
      97,
      115,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      102,
      111,
      114,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      32,
      116,
      104,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      119,
      104,
      101,
      114,
      101,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      32,
      116,
      104,
      101,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      44,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      104,
      105,
      108,
      100,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      98,
      121,
      119,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      83,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      44,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      114,
      115,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      119,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      71,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      109,
      111,
      115,
      116,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      119,
      111,
      117,
      108,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      119,
      104,
      101,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      46,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      116,
      104,
      101,
      32,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      101,
      115,
      101,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      50,
      32,
      124,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      121,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      111,
      112,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      32,
      116,
      111,
      105,
      115,
      32,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      111,
      102,
      84,
      104,
      105,
      115,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      100,
      105,
      115,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      110,
      111,
      32,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      105,
      110,
      38,
      113,
      117,
      111,
      116,
      59,
      46,
      32,
      84,
      104,
      101,
      99,
      111,
      109,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      97,
      107,
      101,
      115,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      44,
      105,
      115,
      32,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      116,
      104,
      101,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      105,
      110,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      32,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      44,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      97,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      97,
      115,
      32,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      32,
      97,
      115,
      97,
      110,
      100,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      32,
      98,
      121,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      115,
      116,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      46,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      116,
      111,
      32,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      119,
      97,
      115,
      32,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      97,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      32,
      105,
      110,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      110,
      100,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      119,
      111,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      116,
      104,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      97,
      110,
      100,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      44,
      116,
      104,
      97,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      46,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      32,
      111,
      102,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      116,
      111,
      32,
      106,
      111,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      108,
      97,
      115,
      116,
      73,
      110,
      100,
      101,
      120,
      79,
      102,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      104,
      105,
      115,
      105,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      116,
      101,
      114,
      109,
      32,
      105,
      115,
      105,
      115,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      110,
      103,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      84,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      44,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      116,
      104,
      101,
      121,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      115,
      108,
      111,
      118,
      101,
      110,
      196,
      141,
      105,
      110,
      97,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      115,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      100,
      97,
      100,
      99,
      111,
      110,
      100,
      105,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      116,
      101,
      99,
      110,
      111,
      108,
      111,
      103,
      195,
      173,
      97,
      112,
      114,
      111,
      100,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      110,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      101,
      195,
      177,
      97,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      115,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      114,
      115,
      101,
      112,
      114,
      111,
      102,
      101,
      115,
      105,
      111,
      110,
      97,
      108,
      116,
      114,
      97,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      103,
      195,
      173,
      115,
      116,
      114,
      97,
      116,
      101,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      195,
      173,
      97,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      105,
      97,
      112,
      111,
      115,
      105,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      97,
      110,
      116,
      101,
      99,
      114,
      101,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      117,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      115,
      101,
      97,
      115,
      111,
      99,
      105,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      117,
      100,
      105,
      97,
      110,
      116,
      101,
      115,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      108,
      101,
      114,
      101,
      115,
      111,
      108,
      117,
      99,
      105,
      195,
      179,
      110,
      103,
      117,
      97,
      100,
      97,
      108,
      97,
      106,
      97,
      114,
      97,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      115,
      111,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      100,
      97,
      100,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      101,
      115,
      102,
      111,
      116,
      111,
      103,
      114,
      97,
      102,
      195,
      173,
      97,
      97,
      117,
      116,
      111,
      114,
      105,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      103,
      101,
      110,
      105,
      101,
      114,
      195,
      173,
      97,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      110,
      99,
      105,
      97,
      111,
      112,
      101,
      114,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      101,
      99,
      105,
      100,
      111,
      115,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      110,
      97,
      118,
      101,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      105,
      100,
      97,
      100,
      108,
      105,
      110,
      101,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      102,
      111,
      110,
      116,
      45,
      102,
      97,
      109,
      105,
      108,
      121,
      58,
      34,
      32,
      58,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      105,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      108,
      108,
      121,
      47,
      47,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      10,
      79,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      48,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      100,
      101,
      118,
      105,
      99,
      101,
      45,
      119,
      105,
      100,
      116,
      104,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      111,
      112,
      101,
      110,
      40,
      32,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      47,
      47,
      119,
      119,
      119,
      46,
      103,
      111,
      111,
      103,
      108,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      110,
      116,
      101,
      108,
      108,
      101,
      99,
      116,
      117,
      97,
      108,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      49,
      56,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      110,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      100,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      45,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      111,
      115,
      116,
      32,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      110,
      111,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      39,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      39,
      41,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      109,
      111,
      114,
      101,
      44,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      61,
      32,
      112,
      114,
      105,
      111,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      100,
      114,
      97,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      114,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      117,
      110,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      80,
      101,
      110,
      110,
      115,
      121,
      108,
      118,
      97,
      110,
      105,
      97,
      65,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      44,
      60,
      104,
      116,
      109,
      108,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      38,
      108,
      116,
      59,
      47,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      100,
      101,
      97,
      108,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      112,
      104,
      105,
      108,
      97,
      100,
      101,
      108,
      112,
      104,
      105,
      97,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      108,
      121,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      116,
      111,
      112,
      58,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      97,
      108,
      103,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      101,
      115,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      61,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      13,
      10,
      60,
      104,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      97,
      108,
      67,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      39,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      49,
      97,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      108,
      105,
      115,
      104,
      101,
      100,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      105,
      101,
      115,
      68,
      101,
      109,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      115,
      97,
      116,
      105,
      115,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      115,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      34,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      105,
      103,
      104,
      116,
      59,
      67,
      111,
      109,
      109,
      111,
      110,
      119,
      101,
      97,
      108,
      116,
      104,
      114,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      111,
      110,
      101,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      101,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      59,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      105,
      109,
      101,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      43,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      60,
      105,
      109,
      103,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      62,
      99,
      111,
      109,
      112,
      101,
      110,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      97,
      108,
      108,
      34,
      32,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      114,
      117,
      101,
      59,
      83,
      116,
      114,
      105,
      99,
      116,
      47,
      47,
      69,
      78,
      34,
      32,
      116,
      114,
      97,
      110,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      105,
      101,
      115,
      67,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      125,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      105,
      116,
      121,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      32,
      116,
      104,
      97,
      116,
      119,
      97,
      115,
      32,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      40,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      117,
      110,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      111,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      71,
      117,
      105,
      100,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      118,
      101,
      114,
      119,
      104,
      101,
      108,
      109,
      105,
      110,
      103,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      101,
      100,
      44,
      10,
      46,
      110,
      111,
      110,
      116,
      111,
      117,
      99,
      104,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      32,
      49,
      112,
      120,
      32,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      110,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      99,
      101,
      66,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      10,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      32,
      111,
      102,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      116,
      104,
      101,
      32,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      101,
      34,
      32,
      120,
      109,
      108,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      105,
      110,
      74,
      101,
      115,
      117,
      115,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      80,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      105,
      115,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      114,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      105,
      116,
      105,
      101,
      115,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      105,
      115,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      105,
      99,
      97,
      108,
      105,
      115,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      105,
      110,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      32,
      116,
      104,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      108,
      108,
      32,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      104,
      111,
      111,
      100,
      97,
      114,
      109,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      101,
      115,
      114,
      101,
      100,
      117,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      32,
      116,
      111,
      78,
      111,
      110,
      101,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      115,
      10,
      9,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      108,
      111,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      32,
      105,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      40,
      115,
      101,
      101,
      32,
      98,
      101,
      108,
      111,
      119,
      41,
      46,
      34,
      32,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      9,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      97,
      99,
      99,
      101,
      108,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      72,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      70,
      97,
      109,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      118,
      101,
      114,
      121,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      65,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      32,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      62,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      115,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      117,
      114,
      105,
      110,
      103,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      100,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      97,
      108,
      83,
      111,
      118,
      105,
      101,
      116,
      32,
      85,
      110,
      105,
      111,
      110,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      110,
      97,
      109,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      115,
      73,
      110,
      32,
      102,
      97,
      99,
      116,
      44,
      32,
      116,
      104,
      101,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      111,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      99,
      97,
      110,
      99,
      101,
      108,
      66,
      117,
      98,
      98,
      108,
      101,
      32,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      114,
      101,
      32,
      111,
      114,
      32,
      108,
      101,
      115,
      115,
      105,
      110,
      32,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      73,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      104,
      117,
      109,
      97,
      110,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      97,
      108,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      104,
      117,
      109,
      97,
      110,
      32,
      98,
      101,
      105,
      110,
      103,
      115,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      32,
      119,
      104,
      111,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      114,
      103,
      117,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      110,
      111,
      119,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      101,
      97,
      114,
      108,
      121,
      105,
      110,
      116,
      101,
      114,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      83,
      99,
      97,
      110,
      100,
      105,
      110,
      97,
      118,
      105,
      97,
      110,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      112,
      97,
      103,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      100,
      97,
      110,
      97,
      108,
      111,
      103,
      111,
      117,
      115,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      119,
      97,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      97,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      119,
      97,
      115,
      32,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      100,
      110,
      111,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      32,
      116,
      111,
      32,
      62,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      119,
      101,
      114,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      109,
      111,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      109,
      112,
      101,
      114,
      105,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      67,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      105,
      116,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      105,
      110,
      116,
      111,
      32,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      116,
      104,
      105,
      115,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      32,
      111,
      102,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      119,
      104,
      105,
      99,
      104,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      73,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      97,
      110,
      32,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      32,
      102,
      114,
      111,
      109,
      65,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      107,
      110,
      111,
      119,
      110,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      110,
      97,
      116,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      111,
      115,
      111,
      117,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      105,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      32,
      73,
      73,
      116,
      101,
      115,
      116,
      105,
      109,
      111,
      110,
      105,
      97,
      108,
      115,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      121,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      98,
      121,
      116,
      104,
      101,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      67,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      100,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      80,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      111,
      110,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      34,
      119,
      97,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      118,
      97,
      114,
      105,
      101,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      112,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      32,
      97,
      110,
      100,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      110,
      111,
      110,
      101,
      59,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      98,
      101,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      114,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      115,
      34,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      97,
      108,
      108,
      111,
      119,
      115,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      98,
      121,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      111,
      110,
      32,
      98,
      101,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      104,
      105,
      108,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      115,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      116,
      105,
      99,
      97,
      108,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      115,
      112,
      111,
      119,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      119,
      101,
      114,
      101,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      111,
      114,
      114,
      101,
      106,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      119,
      97,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      108,
      105,
      110,
      107,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      79,
      99,
      101,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      115,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      121,
      101,
      97,
      114,
      115,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      84,
      104,
      105,
      115,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      118,
      97,
      108,
      117,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      97,
      110,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      32,
      116,
      111,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      115,
      111,
      117,
      116,
      104,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      108,
      121,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      101,
      97,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      120,
      116,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      97,
      110,
      100,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      97,
      110,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      101,
      120,
      112,
      101,
      110,
      100,
      105,
      116,
      117,
      114,
      101,
      115,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      10,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      97,
      116,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      105,
      109,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      111,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      44,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      101,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      110,
      111,
      114,
      116,
      104,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      32,
      32,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      116,
      104,
      101,
      32,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      117,
      112,
      101,
      114,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      111,
      110,
      105,
      115,
      32,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      97,
      116,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      72,
      117,
      109,
      97,
      110,
      32,
      82,
      105,
      103,
      104,
      116,
      115,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      100,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      111,
      102,
      32,
      97,
      103,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      119,
      104,
      101,
      114,
      101,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      34,
      62,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      73,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      44,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      97,
      110,
      100,
      105,
      115,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      32,
      119,
      105,
      102,
      101,
      40,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      62,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      110,
      111,
      97,
      110,
      32,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      98,
      121,
      73,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      44,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      108,
      121,
      115,
      101,
      116,
      84,
      97,
      114,
      103,
      101,
      116,
      105,
      110,
      103,
      97,
      114,
      101,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      32,
      111,
      118,
      101,
      114,
      40,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      108,
      121,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      102,
      111,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      97,
      110,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      111,
      114,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      115,
      111,
      109,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      104,
      97,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      32,
      116,
      104,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      44,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      108,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      101,
      108,
      100,
      32,
      111,
      102,
      116,
      104,
      105,
      115,
      32,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      116,
      105,
      116,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      105,
      114,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      97,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      102,
      111,
      114,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      105,
      122,
      101,
      100,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      84,
      101,
      120,
      116,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      101,
      97,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      32,
      105,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      101,
      110,
      115,
      101,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      102,
      111,
      114,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      116,
      119,
      111,
      119,
      97,
      115,
      32,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      98,
      101,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      49,
      47,
      94,
      92,
      115,
      43,
      124,
      92,
      115,
      43,
      36,
      47,
      103,
      101,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      32,
      101,
      125,
      59,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      116,
      119,
      111,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      97,
      110,
      100,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      97,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      75,
      41,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      208,
      156,
      208,
      190,
      208,
      189,
      208,
      179,
      208,
      190,
      208,
      187,
      208,
      161,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      190,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      185,
      129,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      230,
      156,
      137,
      233,
      153,
      144,
      229,
      133,
      172,
      229,
      143,
      184,
      228,
      186,
      186,
      230,
      176,
      145,
      230,
      148,
      191,
      229,
      186,
      156,
      233,
      152,
      191,
      233,
      135,
      140,
      229,
      183,
      180,
      229,
      183,
      180,
      231,
      164,
      190,
      228,
      188,
      154,
      228,
      184,
      187,
      228,
      185,
      137,
      230,
      147,
      141,
      228,
      189,
      156,
      231,
      179,
      187,
      231,
      187,
      159,
      230,
      148,
      191,
      231,
      173,
      150,
      230,
      179,
      149,
      232,
      167,
      132,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      104,
      101,
      114,
      114,
      97,
      109,
      105,
      101,
      110,
      116,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      99,
      105,
      195,
      179,
      110,
      99,
      108,
      97,
      115,
      105,
      102,
      105,
      99,
      97,
      100,
      111,
      115,
      99,
      111,
      110,
      111,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      97,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      195,
      161,
      116,
      105,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      111,
      115,
      100,
      101,
      112,
      97,
      114,
      116,
      97,
      109,
      101,
      110,
      116,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      100,
      111,
      114,
      101,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      97,
      109,
      101,
      110,
      116,
      101,
      97,
      121,
      117,
      110,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      76,
      105,
      98,
      114,
      101,
      99,
      111,
      110,
      116,
      195,
      161,
      99,
      116,
      101,
      110,
      111,
      115,
      104,
      97,
      98,
      105,
      116,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      117,
      109,
      112,
      108,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      115,
      105,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      101,
      110,
      99,
      105,
      97,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      97,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      100,
      101,
      115,
      99,
      111,
      110,
      101,
      99,
      116,
      97,
      100,
      111,
      105,
      110,
      115,
      116,
      97,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      110,
      99,
      105,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      101,
      110,
      102,
      101,
      114,
      109,
      101,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      115,
      115,
      117,
      98,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      97,
      209,
      130,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      133,
      209,
      129,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      209,
      143,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      209,
      139,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      209,
      139,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      185,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      209,
      139,
      208,
      189,
      208,
      184,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      181,
      208,
      189,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      130,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      158,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      131,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      181,
      208,
      187,
      209,
      143,
      208,
      178,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      184,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      185,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      181,
      209,
      133,
      208,
      190,
      209,
      128,
      208,
      190,
      209,
      136,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      178,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      176,
      208,
      182,
      208,
      180,
      209,
      139,
      208,
      185,
      208,
      178,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      131,
      208,
      191,
      208,
      191,
      209,
      139,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      187,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      178,
      209,
      139,
      208,
      185,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      208,
      179,
      208,
      184,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      190,
      208,
      180,
      208,
      177,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      190,
      209,
      129,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      188,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      130,
      208,
      186,
      209,
      131,
      208,
      191,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      186,
      208,
      176,
      209,
      133,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      160,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      208,
      162,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      208,
      178,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      191,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      186,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      182,
      208,
      177,
      209,
      139,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      191,
      208,
      181,
      209,
      135,
      208,
      176,
      209,
      130,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      208,
      184,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      191,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      139,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      186,
      209,
      130,
      208,
      161,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      188,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      190,
      208,
      189,
      208,
      187,
      208,
      176,
      208,
      185,
      208,
      189,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      178,
      208,
      181,
      209,
      128,
      209,
      129,
      208,
      184,
      209,
      143,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      181,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      209,
      139,
      209,
      131,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      189,
      209,
      143,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      181,
      208,
      180,
      208,
      181,
      208,
      187,
      209,
      142,
      209,
      143,
      208,
      189,
      208,
      178,
      208,
      176,
      209,
      128,
      209,
      143,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      209,
      133,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      184,
      209,
      130,
      208,
      189,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      183,
      209,
      143,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      176,
      208,
      162,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      137,
      208,
      184,
      209,
      130,
      209,
      139,
      208,
      155,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      184,
      208,
      181,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      130,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      157,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      178,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      168,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      160,
      224,
      164,
      149,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      166,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      156,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      151,
      224,
      165,
      130,
      224,
      164,
      151,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      159,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      133,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      134,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      140,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      183,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      185,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      216,
      170,
      216,
      179,
      216,
      170,
      216,
      183,
      217,
      138,
      216,
      185,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      179,
      216,
      183,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      178,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      168,
      216,
      177,
      217,
      134,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      177,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      130,
      217,
      136,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      177,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      167,
      217,
      130,
      217,
      133,
      216,
      173,
      217,
      129,
      217,
      136,
      216,
      184,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      134,
      217,
      138,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      163,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      177,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      179,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      217,
      133,
      216,
      172,
      217,
      133,
      217,
      136,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      173,
      217,
      133,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      134,
      217,
      130,
      216,
      167,
      216,
      183,
      217,
      129,
      217,
      132,
      216,
      179,
      216,
      183,
      217,
      138,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      136,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      134,
      217,
      138,
      216,
      167,
      216,
      168,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      170,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      170,
      217,
      136,
      217,
      130,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      174,
      216,
      181,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      132,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      132,
      217,
      138,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      167,
      216,
      185,
      216,
      169,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      174,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      216,
      177,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      179,
      216,
      170,
      216,
      186,
      216,
      177,
      217,
      130,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      184,
      217,
      138,
      217,
      133,
      101,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      61,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      46,
      106,
      112,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      111,
      110,
      102,
      105,
      103,
      117,
      114,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      98,
      111,
      100,
      121,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      99,
      105,
      114,
      99,
      117,
      109,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      77,
      97,
      115,
      115,
      97,
      99,
      104,
      117,
      115,
      101,
      116,
      116,
      115,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      112,
      114,
      111,
      110,
      117,
      110,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      35,
      102,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      108,
      101,
      102,
      116,
      58,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      109,
      105,
      115,
      99,
      101,
      108,
      108,
      97,
      110,
      101,
      111,
      117,
      115,
      38,
      108,
      116,
      59,
      47,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      97,
      115,
      32,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      83,
      117,
      112,
      114,
      101,
      109,
      101,
      32,
      67,
      111,
      117,
      114,
      116,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      112,
      120,
      59,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      46,
      116,
      111,
      76,
      111,
      119,
      101,
      114,
      67,
      97,
      115,
      101,
      40,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      105,
      110,
      103,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      70,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      111,
      102,
      34,
      32,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      77,
      101,
      100,
      105,
      116,
      101,
      114,
      114,
      97,
      110,
      101,
      97,
      110,
      101,
      120,
      116,
      114,
      97,
      111,
      114,
      100,
      105,
      110,
      97,
      114,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      119,
      97,
      115,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      83,
      97,
      110,
      32,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      105,
      110,
      115,
      111,
      112,
      104,
      105,
      115,
      116,
      105,
      99,
      97,
      116,
      101,
      100,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      32,
      116,
      104,
      97,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      115,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      40,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      84,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      97,
      115,
      101,
      115,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      71,
      114,
      101,
      97,
      116,
      32,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      59,
      32,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      106,
      117,
      115,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      117,
      102,
      102,
      101,
      114,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      97,
      114,
      101,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      10,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      101,
      100,
      32,
      105,
      110,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      99,
      114,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      109,
      111,
      114,
      101,
      32,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      108,
      121,
      38,
      110,
      98,
      115,
      112,
      59,
      124,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      111,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      47,
      120,
      45,
      115,
      104,
      111,
      99,
      107,
      119,
      97,
      118,
      101,
      45,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      97,
      115,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      32,
      116,
      111,
      32,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      102,
      32,
      118,
      105,
      101,
      119,
      104,
      111,
      109,
      111,
      115,
      101,
      120,
      117,
      97,
      108,
      105,
      116,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      35,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      32,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      62,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      119,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      73,
      110,
      100,
      111,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      118,
      117,
      108,
      110,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      99,
      108,
      111,
      115,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      67,
      105,
      116,
      121,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      117,
      114,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      98,
      114,
      97,
      110,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      116,
      104,
      97,
      116,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      111,
      102,
      32,
      105,
      110,
      116,
      111,
      32,
      97,
      32,
      115,
      105,
      110,
      103,
      108,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      46,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      119,
      104,
      105,
      99,
      104,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      115,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      108,
      121,
      101,
      113,
      117,
      105,
      112,
      112,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      84,
      104,
      101,
      115,
      101,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      116,
      105,
      109,
      101,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      116,
      119,
      111,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      98,
      101,
      108,
      111,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      114,
      101,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      32,
      111,
      102,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      119,
      97,
      115,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      32,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      97,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      119,
      105,
      116,
      104,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      119,
      105,
      116,
      104,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      60,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      105,
      110,
      32,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      103,
      114,
      101,
      97,
      116,
      32,
      100,
      101,
      97,
      108,
      32,
      111,
      102,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      108,
      121,
      32,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      97,
      108,
      108,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      115,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      84,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      109,
      97,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      58,
      67,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      44,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      115,
      111,
      109,
      101,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      32,
      97,
      115,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      40,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      114,
      101,
      100,
      117,
      99,
      101,
      32,
      116,
      104,
      101,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      117,
      116,
      61,
      34,
      78,
      101,
      119,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      102,
      105,
      108,
      109,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      105,
      115,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      117,
      110,
      112,
      114,
      101,
      99,
      101,
      100,
      101,
      110,
      116,
      101,
      100,
      105,
      115,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      105,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      9,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      114,
      101,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      99,
      111,
      110,
      115,
      116,
      101,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      102,
      111,
      114,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      97,
      110,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      121,
      101,
      97,
      114,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      104,
      97,
      118,
      101,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      121,
      101,
      97,
      114,
      115,
      99,
      111,
      109,
      109,
      105,
      116,
      109,
      101,
      110,
      116,
      32,
      116,
      111,
      9,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      118,
      105,
      115,
      117,
      97,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      97,
      99,
      116,
      105,
      116,
      105,
      111,
      110,
      101,
      114,
      115,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      115,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      62,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      97,
      116,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      97,
      98,
      111,
      117,
      116,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      32,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      111,
      102,
      32,
      97,
      115,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      115,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      108,
      97,
      114,
      103,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      102,
      111,
      114,
      116,
      104,
      101,
      32,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      32,
      99,
      97,
      115,
      101,
      44,
      119,
      97,
      115,
      32,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      105,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      119,
      97,
      121,
      115,
      97,
      114,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      73,
      110,
      100,
      101,
      120,
      99,
      97,
      110,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      105,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      116,
      104,
      101,
      32,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      116,
      114,
      97,
      99,
      101,
      100,
      105,
      115,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      105,
      115,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      105,
      115,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      111,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      32,
      105,
      116,
      115,
      119,
      97,
      115,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      105,
      115,
      32,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      97,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      32,
      97,
      115,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      97,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      116,
      119,
      111,
      103,
      114,
      97,
      118,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      116,
      111,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      44,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      97,
      110,
      100,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      108,
      111,
      97,
      100,
      67,
      104,
      97,
      114,
      116,
      98,
      101,
      97,
      116,
      116,
      111,
      32,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      115,
      116,
      97,
      116,
      101,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      102,
      105,
      114,
      115,
      116,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      32,
      97,
      110,
      100,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      97,
      108,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      99,
      108,
      101,
      97,
      114,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      97,
      116,
      105,
      118,
      101,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      116,
      104,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      102,
      114,
      101,
      101,
      32,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      32,
      97,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      97,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      109,
      97,
      110,
      121,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      111,
      109,
      101,
      105,
      115,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      119,
      97,
      115,
      32,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      97,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      65,
      76,
      84,
      69,
      82,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      63,
      115,
      111,
      114,
      116,
      61,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      104,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      109,
      109,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      111,
      115,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      111,
      116,
      104,
      101,
      114,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      115,
      101,
      59,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      59,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      77,
      101,
      108,
      97,
      121,
      117,
      110,
      111,
      114,
      115,
      107,
      32,
      98,
      111,
      107,
      109,
      195,
      165,
      108,
      110,
      111,
      114,
      115,
      107,
      32,
      110,
      121,
      110,
      111,
      114,
      115,
      107,
      115,
      108,
      111,
      118,
      101,
      110,
      197,
      161,
      196,
      141,
      105,
      110,
      97,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      99,
      97,
      108,
      105,
      102,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      117,
      110,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      97,
      109,
      98,
      105,
      103,
      117,
      97,
      116,
      105,
      111,
      110,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      39,
      44,
      32,
      39,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      117,
      108,
      116,
      97,
      110,
      101,
      111,
      117,
      115,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      60,
      47,
      62,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      102,
      114,
      97,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      62,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      60,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      125,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      46,
      115,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      40,
      65,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      61,
      32,
      110,
      101,
      119,
      32,
      65,
      114,
      114,
      97,
      121,
      40,
      41,
      59,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      59,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      62,
      61,
      39,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      39,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      32,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      110,
      32,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      100,
      121,
      46,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      45,
      45,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      60,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      116,
      104,
      101,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      97,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      10,
      100,
      101,
      112,
      101,
      110,
      100,
      115,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      105,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      32,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      32,
      98,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      105,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      115,
      41,
      59,
      32,
      106,
      115,
      46,
      105,
      100,
      32,
      61,
      32,
      105,
      100,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      67,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      97,
      110,
      32,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      116,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      100,
      105,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      99,
      104,
      97,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      112,
      114,
      105,
      109,
      101,
      32,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      119,
      46,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      40,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      97,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      67,
      122,
      101,
      99,
      104,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      118,
      101,
      114,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      40,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      99,
      97,
      114,
      98,
      111,
      110,
      32,
      100,
      105,
      111,
      120,
      105,
      100,
      101,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      84,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      119,
      97,
      115,
      32,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      101,
      99,
      99,
      108,
      101,
      115,
      105,
      97,
      115,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      97,
      115,
      32,
      110,
      101,
      118,
      101,
      114,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      105,
      110,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      119,
      97,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      45,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      111,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      111,
      114,
      32,
      110,
      111,
      116,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      109,
      97,
      110,
      121,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      111,
      116,
      104,
      101,
      114,
      32,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      65,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      105,
      116,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      32,
      116,
      104,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      111,
      114,
      101,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      105,
      110,
      104,
      97,
      118,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      115,
      32,
      116,
      111,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      109,
      97,
      110,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      102,
      111,
      114,
      32,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      101,
      97,
      114,
      108,
      105,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      121,
      101,
      97,
      114,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      110,
      100,
      97,
      32,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      114,
      101,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      111,
      110,
      101,
      32,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      97,
      110,
      100,
      32,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      98,
      101,
      101,
      110,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      85,
      110,
      105,
      111,
      110,
      114,
      101,
      109,
      105,
      110,
      105,
      115,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      86,
      105,
      99,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      100,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      109,
      111,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      49,
      112,
      120,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      9,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      40,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      109,
      111,
      115,
      116,
      32,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      111,
      112,
      108,
      101,
      119,
      101,
      114,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      32,
      119,
      105,
      116,
      104,
      95,
      105,
      100,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      117,
      116,
      32,
      116,
      104,
      97,
      116,
      120,
      77,
      76,
      72,
      116,
      116,
      112,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      97,
      110,
      100,
      32,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      118,
      101,
      114,
      121,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      112,
      111,
      108,
      105,
      99,
      121,
      95,
      115,
      101,
      116,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      111,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      68,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      102,
      111,
      114,
      109,
      115,
      32,
      111,
      102,
      104,
      101,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      13,
      105,
      102,
      32,
      97,
      110,
      100,
      32,
      111,
      110,
      108,
      121,
      32,
      105,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      104,
      97,
      110,
      32,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      104,
      101,
      32,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      102,
      102,
      102,
      125,
      10,
      46,
      10,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      62,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      62,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      105,
      110,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      119,
      97,
      115,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      32,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      13,
      10,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      116,
      111,
      32,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      102,
      111,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      109,
      97,
      100,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      32,
      97,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      115,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      73,
      73,
      44,
      32,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      105,
      115,
      32,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      116,
      111,
      32,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      97,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      116,
      121,
      112,
      101,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      32,
      98,
      121,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      105,
      110,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      116,
      111,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      32,
      115,
      114,
      112,
      115,
      107,
      111,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      116,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      208,
      160,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      209,
      128,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      99,
      105,
      195,
      179,
      110,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      181,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      157,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      209,
      133,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      176,
      209,
      143,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      189,
      209,
      143,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      208,
      184,
      208,
      189,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      139,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      209,
      129,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      209,
      142,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      188,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      189,
      209,
      139,
      209,
      131,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      181,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      147,
      208,
      187,
      208,
      176,
      208,
      178,
      208,
      189,
      208,
      176,
      209,
      143,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      176,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      161,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      209,
      131,
      208,
      181,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      130,
      209,
      140,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      208,
      189,
      208,
      181,
      209,
      135,
      208,
      189,
      208,
      190,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      160,
      208,
      181,
      208,
      186,
      208,
      187,
      208,
      176,
      208,
      188,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      182,
      217,
      136,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      170,
      216,
      167,
      216,
      166,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      130,
      216,
      179,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      173,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      136,
      216,
      167,
      216,
      183,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      172,
      216,
      170,
      217,
      133,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      131,
      217,
      136,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      216,
      173,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      186,
      216,
      167,
      217,
      134,
      217,
      138,
      99,
      117,
      114,
      115,
      111,
      114,
      58,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      47,
      97,
      62,
      32,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      33,
      100,
      111,
      99,
      116,
      121,
      112,
      101,
      32,
      104,
      116,
      109,
      108,
      62,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      115,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      10,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      60,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      34,
      62,
      41,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      125,
      98,
      111,
      100,
      121,
      123,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      32,
      111,
      102,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      118,
      101,
      32,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      111,
      116,
      104,
      101,
      114,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      34,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      73,
      110,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      119,
      111,
      114,
      100,
      115,
      44,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      98,
      108,
      111,
      99,
      107,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      13,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      115,
      116,
      32,
      80,
      97,
      114,
      116,
      121,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      34,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      110,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      79,
      114,
      116,
      104,
      111,
      100,
      111,
      120,
      32,
      67,
      104,
      117,
      114,
      99,
      104,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      117,
      110,
      116,
      105,
      108,
      32,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      116,
      104,
      101,
      114,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      117,
      114,
      108,
      40,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      97,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      118,
      101,
      114,
      121,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      105,
      115,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      109,
      97,
      103,
      101,
      95,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      32,
      61,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      102,
      111,
      114,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      109,
      111,
      115,
      116,
      32,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      85,
      110,
      115,
      111,
      117,
      114,
      99,
      101,
      100,
      32,
      105,
      109,
      97,
      103,
      101,
      62,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      111,
      112,
      80,
      114,
      111,
      112,
      97,
      103,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      118,
      97,
      114,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      105,
      110,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      97,
      116,
      104,
      119,
      105,
      116,
      104,
      32,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      32,
      116,
      111,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      115,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      105,
      115,
      32,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      99,
      105,
      195,
      179,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      101,
      110,
      116,
      101,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      173,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      131,
      224,
      164,
      183,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      172,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      150,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      166,
      224,
      165,
      140,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      191,
      224,
      164,
      155,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      183,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      170,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      155,
      224,
      164,
      190,
      224,
      164,
      155,
      224,
      165,
      130,
      224,
      164,
      159,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      152,
      224,
      164,
      163,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      136,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      183,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      129,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      131,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      139,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      130,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      136,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      114,
      115,
      115,
      43,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      45,
      116,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      46,
      99,
      108,
      105,
      99,
      107,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      41,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      58,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      66,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      116,
      101,
      120,
      116,
      32,
      120,
      109,
      108,
      58,
      115,
      112,
      97,
      99,
      101,
      61,
      46,
      103,
      105,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      115,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      83,
      116,
      97,
      116,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      108,
      101,
      102,
      116,
      59,
      10,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      44,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      59,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      34,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      10,
      32,
      32,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      116,
      104,
      101,
      32,
      49,
      53,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      40,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      66,
      121,
      122,
      97,
      110,
      116,
      105,
      110,
      101,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      108,
      101,
      102,
      116,
      124,
      118,
      97,
      115,
      116,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      80,
      114,
      101,
      115,
      115,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      32,
      98,
      121,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      100,
      101,
      114,
      105,
      118,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      45,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      68,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      32,
      80,
      97,
      114,
      116,
      121,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      70,
      111,
      114,
      32,
      116,
      104,
      105,
      115,
      32,
      114,
      101,
      97,
      115,
      111,
      110,
      44,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      9,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      41,
      91,
      48,
      93,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      105,
      99,
      111,
      110,
      34,
      32,
      39,
      32,
      97,
      108,
      116,
      61,
      39,
      39,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      39,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      112,
      97,
      103,
      101,
      62,
      10,
      32,
      32,
      60,
      112,
      97,
      103,
      101,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      115,
      105,
      109,
      112,
      108,
      101,
      41,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      209,
      133,
      209,
      128,
      208,
      178,
      208,
      176,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      148,
      208,
      190,
      208,
      177,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      178,
      208,
      184,
      209,
      130,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      158,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      134,
      209,
      139,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      209,
      143,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      209,
      142,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      189,
      208,
      176,
      208,
      184,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      217,
      136,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      185,
      217,
      136,
      216,
      175,
      217,
      138,
      216,
      169,
      216,
      167,
      216,
      173,
      216,
      181,
      216,
      167,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      170,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      177,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      106,
      112,
      103,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      115,
      34,
      32,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      97,
      110,
      100,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      119,
      101,
      110,
      116,
      105,
      101,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      62,
      10,
      32,
      32,
      60,
      47,
      112,
      97,
      103,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      97,
      46,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      13,
      10,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      98,
      111,
      117,
      116,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      65,
      114,
      105,
      97,
      108,
      44,
      32,
      72,
      101,
      108,
      118,
      101,
      116,
      105,
      99,
      97,
      44,
      60,
      47,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      10,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      118,
      101,
      97,
      108,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      99,
      108,
      97,
      105,
      109,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      109,
      97,
      110,
      105,
      102,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      32,
      111,
      102,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      116,
      104,
      114,
      101,
      101,
      45,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      108,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      111,
      102,
      32,
      78,
      111,
      114,
      116,
      104,
      32,
      67,
      97,
      114,
      111,
      108,
      105,
      110,
      97,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      114,
      101,
      115,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      80,
      104,
      111,
      110,
      101,
      116,
      105,
      99,
      32,
      65,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      66,
      101,
      110,
      106,
      97,
      109,
      105,
      110,
      32,
      70,
      114,
      97,
      110,
      107,
      108,
      105,
      110,
      114,
      111,
      108,
      101,
      45,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      103,
      97,
      109,
      101,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      32,
      71,
      117,
      116,
      101,
      110,
      98,
      101,
      114,
      103,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      32,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      115,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      32,
      116,
      104,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      103,
      111,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      10,
      116,
      97,
      107,
      101,
      32,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      110,
      100,
      44,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      77,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      116,
      101,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      46,
      114,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      32,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      115,
      111,
      108,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      79,
      108,
      100,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      105,
      110,
      115,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      109,
      97,
      107,
      101,
      115,
      32,
      105,
      116,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      99,
      111,
      105,
      110,
      99,
      105,
      100,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      116,
      119,
      111,
      45,
      116,
      104,
      105,
      114,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      44,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      32,
      97,
      110,
      100,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      106,
      97,
      120,
      47,
      108,
      105,
      98,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      49,
      46,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      101,
      40,
      34,
      37,
      51,
      67,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      39,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      79,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      44,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      50,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      110,
      105,
      110,
      101,
      116,
      101,
      101,
      110,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      34,
      32,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      104,
      116,
      109,
      108,
      52,
      47,
      108,
      111,
      111,
      115,
      101,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      59,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      111,
      110,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      32,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      109,
      97,
      105,
      110,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      32,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      110,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      116,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      97,
      116,
      105,
      99,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      84,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      116,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      83,
      116,
      97,
      116,
      101,
      99,
      117,
      108,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      67,
      73,
      65,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      70,
      97,
      99,
      116,
      98,
      111,
      111,
      107,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      60,
      108,
      105,
      62,
      60,
      101,
      109,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      65,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      32,
      79,
      99,
      101,
      97,
      110,
      115,
      116,
      114,
      105,
      99,
      116,
      108,
      121,
      32,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      44,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      116,
      121,
      112,
      101,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      79,
      116,
      116,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      65,
      110,
      32,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      112,
      97,
      114,
      116,
      117,
      114,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      102,
      101,
      100,
      101,
      114,
      97,
      116,
      101,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      80,
      114,
      111,
      99,
      101,
      101,
      100,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      114,
      101,
      101,
      97,
      100,
      106,
      97,
      99,
      101,
      110,
      116,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      105,
      115,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      100,
      105,
      115,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      104,
      105,
      115,
      32,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      101,
      115,
      102,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      117,
      110,
      100,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      115,
      32,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      112,
      97,
      115,
      115,
      101,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      97,
      110,
      100,
      32,
      118,
      105,
      100,
      101,
      111,
      71,
      101,
      114,
      109,
      97,
      110,
      105,
      99,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      66,
      111,
      97,
      114,
      100,
      32,
      111,
      102,
      32,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      115,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      116,
      104,
      101,
      77,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      102,
      111,
      111,
      116,
      110,
      111,
      116,
      101,
      115,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      108,
      101,
      102,
      116,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      48,
      59,
      32,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      116,
      104,
      101,
      32,
      109,
      111,
      116,
      105,
      111,
      110,
      32,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      164,
      208,
      181,
      208,
      180,
      208,
      181,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      209,
      139,
      208,
      158,
      209,
      130,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      177,
      208,
      181,
      209,
      129,
      208,
      191,
      208,
      187,
      208,
      176,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      186,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      208,
      176,
      208,
      191,
      208,
      190,
      208,
      187,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      142,
      208,
      189,
      208,
      176,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      181,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      186,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      144,
      208,
      187,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      176,
      208,
      189,
      208,
      180,
      209,
      128,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      166,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      145,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      136,
      224,
      164,
      182,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      163,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      154,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      167,
      224,
      164,
      174,
      224,
      164,
      130,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      137,
      224,
      164,
      174,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      167,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      136,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      143,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      139,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      178,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      139,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      168,
      217,
      138,
      217,
      136,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      167,
      216,
      170,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      136,
      216,
      170,
      217,
      136,
      216,
      180,
      217,
      136,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      167,
      216,
      168,
      217,
      130,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      217,
      132,
      216,
      179,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      177,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      62,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      116,
      101,
      120,
      116,
      47,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      32,
      108,
      97,
      115,
      116,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      98,
      121,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      35,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      115,
      99,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      10,
      13,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      47,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      63,
      62,
      10,
      119,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      63,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      116,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      116,
      111,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      103,
      98,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      67,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      109,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      32,
      111,
      102,
      32,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      105,
      100,
      41,
      105,
      110,
      32,
      99,
      111,
      110,
      106,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      59,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      10,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      62,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      105,
      110,
      103,
      108,
      101,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      32,
      68,
      46,
      67,
      46,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      105,
      110,
      103,
      115,
      44,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      32,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      109,
      105,
      115,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      101,
      120,
      112,
      97,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      114,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      78,
      111,
      116,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      97,
      116,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      111,
      102,
      32,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      104,
      105,
      115,
      32,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      111,
      102,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      40,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      114,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      115,
      32,
      104,
      101,
      114,
      101,
      46,
      32,
      70,
      111,
      114,
      104,
      97,
      118,
      101,
      32,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      117,
      110,
      100,
      101,
      114,
      37,
      51,
      69,
      37,
      51,
      67,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      37,
      51,
      69,
      34,
      41,
      41,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      105,
      116,
      101,
      95,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      110,
      111,
      110,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      40,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      45,
      45,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      97,
      108,
      108,
      111,
      119,
      84,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      54,
      62,
      60,
      117,
      108,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      97,
      108,
      108,
      111,
      119,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      13,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      70,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      60,
      104,
      116,
      109,
      108,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      59,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      99,
      111,
      109,
      109,
      111,
      110,
      32,
      109,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      116,
      105,
      109,
      101,
      44,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      113,
      117,
      105,
      116,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      105,
      116,
      104,
      32,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      32,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      104,
      97,
      118,
      101,
      32,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      105,
      110,
      116,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      97,
      98,
      108,
      121,
      32,
      119,
      105,
      116,
      104,
      109,
      111,
      114,
      101,
      32,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      112,
      101,
      110,
      100,
      105,
      99,
      117,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      32,
      114,
      101,
      115,
      105,
      100,
      105,
      110,
      103,
      32,
      105,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      111,
      110,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      69,
      117,
      114,
      111,
      112,
      101,
      117,
      41,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      209,
      131,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      185,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      189,
      208,
      181,
      208,
      190,
      208,
      177,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      188,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      160,
      208,
      181,
      209,
      129,
      208,
      191,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      184,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      142,
      209,
      130,
      208,
      181,
      209,
      128,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      180,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      208,
      190,
      209,
      135,
      208,
      189,
      208,
      190,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      217,
      136,
      216,
      167,
      216,
      172,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      130,
      216,
      170,
      216,
      177,
      216,
      167,
      216,
      173,
      216,
      167,
      216,
      170,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      125,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      80,
      101,
      111,
      112,
      108,
      101,
      39,
      115,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      117,
      110,
      100,
      101,
      114,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      35,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      123,
      109,
      105,
      110,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      111,
      102,
      116,
      101,
      110,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      33,
      45,
      45,
      91,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      224,
      184,
      160,
      224,
      184,
      178,
      224,
      184,
      169,
      224,
      184,
      178,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      225,
      131,
      165,
      225,
      131,
      144,
      225,
      131,
      160,
      225,
      131,
      151,
      225,
      131,
      163,
      225,
      131,
      154,
      225,
      131,
      152,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      161,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      191,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      173,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      163,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      161,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      58,
      117,
      114,
      108,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      120,
      109,
      108,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      32,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      47,
      62,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      46,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      115,
      112,
      97,
      110,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      115,
      10,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      61,
      39,
      43,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      10,
      98,
      111,
      100,
      121,
      44,
      32,
      116,
      114,
      44,
      32,
      105,
      110,
      112,
      117,
      116,
      44,
      32,
      116,
      101,
      120,
      116,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      62,
      194,
      183,
      60,
      114,
      105,
      112,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      108,
      61,
      48,
      59,
      125,
      41,
      40,
      41,
      59,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      32,
      117,
      114,
      108,
      40,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      9,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      114,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      101,
      61,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      100,
      111,
      32,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      183,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      209,
      128,
      208,
      181,
      208,
      179,
      208,
      184,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      190,
      208,
      177,
      209,
      143,
      208,
      183,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      176,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      32,
      80,
      85,
      66,
      76,
      73,
      67,
      32,
      34,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      84,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      45,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      84,
      82,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      47,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      59,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      46,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      101,
      102,
      111,
      114,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      106,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      41,
      46,
      114,
      101,
      97,
      100,
      121,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      97,
      46,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      61,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      110,
      105,
      99,
      97,
      108,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      114,
      97,
      110,
      115,
      105,
      116,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      10,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      105,
      111,
      110,
      97,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      60,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      62,
      208,
      180,
      208,
      181,
      209,
      143,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      184,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      190,
      208,
      191,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      167,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      165,
      137,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190
    ]);
    exports.init = function() {
      return exports.dictionary;
    };
  }
});

// ../../node_modules/brotli/dec/dictionary.js
var require_dictionary = __commonJS({
  "../../node_modules/brotli/dec/dictionary.js"(exports) {
    "use strict";
    var data = require_dictionary_data();
    exports.init = function() {
      exports.dictionary = data.init();
    };
    exports.offsetsByLength = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      4096,
      9216,
      21504,
      35840,
      44032,
      53248,
      63488,
      74752,
      87040,
      93696,
      100864,
      104704,
      106752,
      108928,
      113536,
      115968,
      118528,
      119872,
      121280,
      122016
    ]);
    exports.sizeBitsByLength = new Uint8Array([
      0,
      0,
      0,
      0,
      10,
      10,
      11,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      9,
      8,
      7,
      7,
      8,
      7,
      7,
      6,
      6,
      5,
      5
    ]);
    exports.minDictionaryWordLength = 4;
    exports.maxDictionaryWordLength = 24;
  }
});

// ../../node_modules/brotli/dec/huffman.js
var require_huffman = __commonJS({
  "../../node_modules/brotli/dec/huffman.js"(exports) {
    "use strict";
    function HuffmanCode(bits, value) {
      this.bits = bits;
      this.value = value;
    }
    exports.HuffmanCode = HuffmanCode;
    var MAX_LENGTH = 15;
    function GetNextKey(key, len) {
      var step = 1 << len - 1;
      while (key & step) {
        step >>= 1;
      }
      return (key & step - 1) + step;
    }
    function ReplicateValue(table, i, step, end, code) {
      do {
        end -= step;
        table[i + end] = new HuffmanCode(code.bits, code.value);
      } while (end > 0);
    }
    function NextTableBitSize(count, len, root_bits) {
      var left = 1 << len - root_bits;
      while (len < MAX_LENGTH) {
        left -= count[len];
        if (left <= 0) break;
        ++len;
        left <<= 1;
      }
      return len - root_bits;
    }
    exports.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
      var start_table = table;
      var code;
      var len;
      var symbol;
      var key;
      var step;
      var low;
      var mask;
      var table_bits;
      var table_size;
      var total_size;
      var sorted;
      var count = new Int32Array(MAX_LENGTH + 1);
      var offset = new Int32Array(MAX_LENGTH + 1);
      sorted = new Int32Array(code_lengths_size);
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        count[code_lengths[symbol]]++;
      }
      offset[1] = 0;
      for (len = 1; len < MAX_LENGTH; len++) {
        offset[len + 1] = offset[len] + count[len];
      }
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        if (code_lengths[symbol] !== 0) {
          sorted[offset[code_lengths[symbol]]++] = symbol;
        }
      }
      table_bits = root_bits;
      table_size = 1 << table_bits;
      total_size = table_size;
      if (offset[MAX_LENGTH] === 1) {
        for (key = 0; key < total_size; ++key) {
          root_table[table + key] = new HuffmanCode(0, sorted[0] & 65535);
        }
        return total_size;
      }
      key = 0;
      symbol = 0;
      for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          code = new HuffmanCode(len & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + key, step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      mask = total_size - 1;
      low = -1;
      for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          if ((key & mask) !== low) {
            table += table_size;
            table_bits = NextTableBitSize(count, len, root_bits);
            table_size = 1 << table_bits;
            total_size += table_size;
            low = key & mask;
            root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 255, table - start_table - low & 65535);
          }
          code = new HuffmanCode(len - root_bits & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      return total_size;
    };
  }
});

// ../../node_modules/brotli/dec/context.js
var require_context = __commonJS({
  "../../node_modules/brotli/dec/context.js"(exports) {
    "use strict";
    exports.lookup = new Uint8Array([
      /* CONTEXT_UTF8, last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      4,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      8,
      12,
      16,
      12,
      12,
      20,
      12,
      16,
      24,
      28,
      12,
      12,
      32,
      12,
      36,
      12,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      32,
      32,
      24,
      40,
      28,
      12,
      12,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      24,
      12,
      28,
      12,
      12,
      12,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      24,
      12,
      28,
      12,
      0,
      /* UTF8 continuation byte range. */
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      /* UTF8 lead byte range. */
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      /* CONTEXT_UTF8 second last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      1,
      1,
      1,
      1,
      0,
      /* UTF8 continuation byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      /* UTF8 lead byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      /* CONTEXT_SIGNED, second last byte. */
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
      0,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      56,
      /* CONTEXT_LSB6, last byte. */
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      /* CONTEXT_MSB6, last byte. */
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      8,
      8,
      8,
      8,
      9,
      9,
      9,
      9,
      10,
      10,
      10,
      10,
      11,
      11,
      11,
      11,
      12,
      12,
      12,
      12,
      13,
      13,
      13,
      13,
      14,
      14,
      14,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      22,
      22,
      22,
      22,
      23,
      23,
      23,
      23,
      24,
      24,
      24,
      24,
      25,
      25,
      25,
      25,
      26,
      26,
      26,
      26,
      27,
      27,
      27,
      27,
      28,
      28,
      28,
      28,
      29,
      29,
      29,
      29,
      30,
      30,
      30,
      30,
      31,
      31,
      31,
      31,
      32,
      32,
      32,
      32,
      33,
      33,
      33,
      33,
      34,
      34,
      34,
      34,
      35,
      35,
      35,
      35,
      36,
      36,
      36,
      36,
      37,
      37,
      37,
      37,
      38,
      38,
      38,
      38,
      39,
      39,
      39,
      39,
      40,
      40,
      40,
      40,
      41,
      41,
      41,
      41,
      42,
      42,
      42,
      42,
      43,
      43,
      43,
      43,
      44,
      44,
      44,
      44,
      45,
      45,
      45,
      45,
      46,
      46,
      46,
      46,
      47,
      47,
      47,
      47,
      48,
      48,
      48,
      48,
      49,
      49,
      49,
      49,
      50,
      50,
      50,
      50,
      51,
      51,
      51,
      51,
      52,
      52,
      52,
      52,
      53,
      53,
      53,
      53,
      54,
      54,
      54,
      54,
      55,
      55,
      55,
      55,
      56,
      56,
      56,
      56,
      57,
      57,
      57,
      57,
      58,
      58,
      58,
      58,
      59,
      59,
      59,
      59,
      60,
      60,
      60,
      60,
      61,
      61,
      61,
      61,
      62,
      62,
      62,
      62,
      63,
      63,
      63,
      63,
      /* CONTEXT_{M,L}SB6, second last byte, */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    exports.lookupOffsets = new Uint16Array([
      /* CONTEXT_LSB6 */
      1024,
      1536,
      /* CONTEXT_MSB6 */
      1280,
      1536,
      /* CONTEXT_UTF8 */
      0,
      256,
      /* CONTEXT_SIGNED */
      768,
      512
    ]);
  }
});

// ../../node_modules/brotli/dec/prefix.js
var require_prefix = __commonJS({
  "../../node_modules/brotli/dec/prefix.js"(exports) {
    "use strict";
    function PrefixCodeRange(offset, nbits) {
      this.offset = offset;
      this.nbits = nbits;
    }
    exports.kBlockLengthPrefixCode = [
      new PrefixCodeRange(1, 2),
      new PrefixCodeRange(5, 2),
      new PrefixCodeRange(9, 2),
      new PrefixCodeRange(13, 2),
      new PrefixCodeRange(17, 3),
      new PrefixCodeRange(25, 3),
      new PrefixCodeRange(33, 3),
      new PrefixCodeRange(41, 3),
      new PrefixCodeRange(49, 4),
      new PrefixCodeRange(65, 4),
      new PrefixCodeRange(81, 4),
      new PrefixCodeRange(97, 4),
      new PrefixCodeRange(113, 5),
      new PrefixCodeRange(145, 5),
      new PrefixCodeRange(177, 5),
      new PrefixCodeRange(209, 5),
      new PrefixCodeRange(241, 6),
      new PrefixCodeRange(305, 6),
      new PrefixCodeRange(369, 7),
      new PrefixCodeRange(497, 8),
      new PrefixCodeRange(753, 9),
      new PrefixCodeRange(1265, 10),
      new PrefixCodeRange(2289, 11),
      new PrefixCodeRange(4337, 12),
      new PrefixCodeRange(8433, 13),
      new PrefixCodeRange(16625, 24)
    ];
    exports.kInsertLengthPrefixCode = [
      new PrefixCodeRange(0, 0),
      new PrefixCodeRange(1, 0),
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 1),
      new PrefixCodeRange(8, 1),
      new PrefixCodeRange(10, 2),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 3),
      new PrefixCodeRange(26, 3),
      new PrefixCodeRange(34, 4),
      new PrefixCodeRange(50, 4),
      new PrefixCodeRange(66, 5),
      new PrefixCodeRange(98, 5),
      new PrefixCodeRange(130, 6),
      new PrefixCodeRange(194, 7),
      new PrefixCodeRange(322, 8),
      new PrefixCodeRange(578, 9),
      new PrefixCodeRange(1090, 10),
      new PrefixCodeRange(2114, 12),
      new PrefixCodeRange(6210, 14),
      new PrefixCodeRange(22594, 24)
    ];
    exports.kCopyLengthPrefixCode = [
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 0),
      new PrefixCodeRange(7, 0),
      new PrefixCodeRange(8, 0),
      new PrefixCodeRange(9, 0),
      new PrefixCodeRange(10, 1),
      new PrefixCodeRange(12, 1),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 2),
      new PrefixCodeRange(22, 3),
      new PrefixCodeRange(30, 3),
      new PrefixCodeRange(38, 4),
      new PrefixCodeRange(54, 4),
      new PrefixCodeRange(70, 5),
      new PrefixCodeRange(102, 5),
      new PrefixCodeRange(134, 6),
      new PrefixCodeRange(198, 7),
      new PrefixCodeRange(326, 8),
      new PrefixCodeRange(582, 9),
      new PrefixCodeRange(1094, 10),
      new PrefixCodeRange(2118, 24)
    ];
    exports.kInsertRangeLut = [
      0,
      0,
      8,
      8,
      0,
      16,
      8,
      16,
      16
    ];
    exports.kCopyRangeLut = [
      0,
      8,
      0,
      8,
      16,
      0,
      16,
      8,
      16
    ];
  }
});

// ../../node_modules/brotli/dec/transform.js
var require_transform = __commonJS({
  "../../node_modules/brotli/dec/transform.js"(exports) {
    "use strict";
    var BrotliDictionary = require_dictionary();
    var kIdentity = 0;
    var kOmitLast1 = 1;
    var kOmitLast2 = 2;
    var kOmitLast3 = 3;
    var kOmitLast4 = 4;
    var kOmitLast5 = 5;
    var kOmitLast6 = 6;
    var kOmitLast7 = 7;
    var kOmitLast8 = 8;
    var kOmitLast9 = 9;
    var kUppercaseFirst = 10;
    var kUppercaseAll = 11;
    var kOmitFirst1 = 12;
    var kOmitFirst2 = 13;
    var kOmitFirst3 = 14;
    var kOmitFirst4 = 15;
    var kOmitFirst5 = 16;
    var kOmitFirst6 = 17;
    var kOmitFirst7 = 18;
    var kOmitFirst9 = 20;
    function Transform(prefix, transform, suffix) {
      this.prefix = new Uint8Array(prefix.length);
      this.transform = transform;
      this.suffix = new Uint8Array(suffix.length);
      for (var i = 0; i < prefix.length; i++)
        this.prefix[i] = prefix.charCodeAt(i);
      for (var i = 0; i < suffix.length; i++)
        this.suffix[i] = suffix.charCodeAt(i);
    }
    var kTransforms = [
      new Transform("", kIdentity, ""),
      new Transform("", kIdentity, " "),
      new Transform(" ", kIdentity, " "),
      new Transform("", kOmitFirst1, ""),
      new Transform("", kUppercaseFirst, " "),
      new Transform("", kIdentity, " the "),
      new Transform(" ", kIdentity, ""),
      new Transform("s ", kIdentity, " "),
      new Transform("", kIdentity, " of "),
      new Transform("", kUppercaseFirst, ""),
      new Transform("", kIdentity, " and "),
      new Transform("", kOmitFirst2, ""),
      new Transform("", kOmitLast1, ""),
      new Transform(", ", kIdentity, " "),
      new Transform("", kIdentity, ", "),
      new Transform(" ", kUppercaseFirst, " "),
      new Transform("", kIdentity, " in "),
      new Transform("", kIdentity, " to "),
      new Transform("e ", kIdentity, " "),
      new Transform("", kIdentity, '"'),
      new Transform("", kIdentity, "."),
      new Transform("", kIdentity, '">'),
      new Transform("", kIdentity, "\n"),
      new Transform("", kOmitLast3, ""),
      new Transform("", kIdentity, "]"),
      new Transform("", kIdentity, " for "),
      new Transform("", kOmitFirst3, ""),
      new Transform("", kOmitLast2, ""),
      new Transform("", kIdentity, " a "),
      new Transform("", kIdentity, " that "),
      new Transform(" ", kUppercaseFirst, ""),
      new Transform("", kIdentity, ". "),
      new Transform(".", kIdentity, ""),
      new Transform(" ", kIdentity, ", "),
      new Transform("", kOmitFirst4, ""),
      new Transform("", kIdentity, " with "),
      new Transform("", kIdentity, "'"),
      new Transform("", kIdentity, " from "),
      new Transform("", kIdentity, " by "),
      new Transform("", kOmitFirst5, ""),
      new Transform("", kOmitFirst6, ""),
      new Transform(" the ", kIdentity, ""),
      new Transform("", kOmitLast4, ""),
      new Transform("", kIdentity, ". The "),
      new Transform("", kUppercaseAll, ""),
      new Transform("", kIdentity, " on "),
      new Transform("", kIdentity, " as "),
      new Transform("", kIdentity, " is "),
      new Transform("", kOmitLast7, ""),
      new Transform("", kOmitLast1, "ing "),
      new Transform("", kIdentity, "\n	"),
      new Transform("", kIdentity, ":"),
      new Transform(" ", kIdentity, ". "),
      new Transform("", kIdentity, "ed "),
      new Transform("", kOmitFirst9, ""),
      new Transform("", kOmitFirst7, ""),
      new Transform("", kOmitLast6, ""),
      new Transform("", kIdentity, "("),
      new Transform("", kUppercaseFirst, ", "),
      new Transform("", kOmitLast8, ""),
      new Transform("", kIdentity, " at "),
      new Transform("", kIdentity, "ly "),
      new Transform(" the ", kIdentity, " of "),
      new Transform("", kOmitLast5, ""),
      new Transform("", kOmitLast9, ""),
      new Transform(" ", kUppercaseFirst, ", "),
      new Transform("", kUppercaseFirst, '"'),
      new Transform(".", kIdentity, "("),
      new Transform("", kUppercaseAll, " "),
      new Transform("", kUppercaseFirst, '">'),
      new Transform("", kIdentity, '="'),
      new Transform(" ", kIdentity, "."),
      new Transform(".com/", kIdentity, ""),
      new Transform(" the ", kIdentity, " of the "),
      new Transform("", kUppercaseFirst, "'"),
      new Transform("", kIdentity, ". This "),
      new Transform("", kIdentity, ","),
      new Transform(".", kIdentity, " "),
      new Transform("", kUppercaseFirst, "("),
      new Transform("", kUppercaseFirst, "."),
      new Transform("", kIdentity, " not "),
      new Transform(" ", kIdentity, '="'),
      new Transform("", kIdentity, "er "),
      new Transform(" ", kUppercaseAll, " "),
      new Transform("", kIdentity, "al "),
      new Transform(" ", kUppercaseAll, ""),
      new Transform("", kIdentity, "='"),
      new Transform("", kUppercaseAll, '"'),
      new Transform("", kUppercaseFirst, ". "),
      new Transform(" ", kIdentity, "("),
      new Transform("", kIdentity, "ful "),
      new Transform(" ", kUppercaseFirst, ". "),
      new Transform("", kIdentity, "ive "),
      new Transform("", kIdentity, "less "),
      new Transform("", kUppercaseAll, "'"),
      new Transform("", kIdentity, "est "),
      new Transform(" ", kUppercaseFirst, "."),
      new Transform("", kUppercaseAll, '">'),
      new Transform(" ", kIdentity, "='"),
      new Transform("", kUppercaseFirst, ","),
      new Transform("", kIdentity, "ize "),
      new Transform("", kUppercaseAll, "."),
      new Transform("\xC2\xA0", kIdentity, ""),
      new Transform(" ", kIdentity, ","),
      new Transform("", kUppercaseFirst, '="'),
      new Transform("", kUppercaseAll, '="'),
      new Transform("", kIdentity, "ous "),
      new Transform("", kUppercaseAll, ", "),
      new Transform("", kUppercaseFirst, "='"),
      new Transform(" ", kUppercaseFirst, ","),
      new Transform(" ", kUppercaseAll, '="'),
      new Transform(" ", kUppercaseAll, ", "),
      new Transform("", kUppercaseAll, ","),
      new Transform("", kUppercaseAll, "("),
      new Transform("", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseAll, "."),
      new Transform("", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseFirst, '="'),
      new Transform(" ", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseFirst, "='")
    ];
    exports.kTransforms = kTransforms;
    exports.kNumTransforms = kTransforms.length;
    function ToUpperCase(p, i) {
      if (p[i] < 192) {
        if (p[i] >= 97 && p[i] <= 122) {
          p[i] ^= 32;
        }
        return 1;
      }
      if (p[i] < 224) {
        p[i + 1] ^= 32;
        return 2;
      }
      p[i + 2] ^= 5;
      return 3;
    }
    exports.transformDictionaryWord = function(dst, idx, word, len, transform) {
      var prefix = kTransforms[transform].prefix;
      var suffix = kTransforms[transform].suffix;
      var t = kTransforms[transform].transform;
      var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
      var i = 0;
      var start_idx = idx;
      var uppercase;
      if (skip > len) {
        skip = len;
      }
      var prefix_pos = 0;
      while (prefix_pos < prefix.length) {
        dst[idx++] = prefix[prefix_pos++];
      }
      word += skip;
      len -= skip;
      if (t <= kOmitLast9) {
        len -= t;
      }
      for (i = 0; i < len; i++) {
        dst[idx++] = BrotliDictionary.dictionary[word + i];
      }
      uppercase = idx - len;
      if (t === kUppercaseFirst) {
        ToUpperCase(dst, uppercase);
      } else if (t === kUppercaseAll) {
        while (len > 0) {
          var step = ToUpperCase(dst, uppercase);
          uppercase += step;
          len -= step;
        }
      }
      var suffix_pos = 0;
      while (suffix_pos < suffix.length) {
        dst[idx++] = suffix[suffix_pos++];
      }
      return idx - start_idx;
    };
  }
});

// ../../node_modules/brotli/dec/decode.js
var require_decode = __commonJS({
  "../../node_modules/brotli/dec/decode.js"(exports) {
    "use strict";
    var BrotliInput = require_streams2().BrotliInput;
    var BrotliOutput = require_streams2().BrotliOutput;
    var BrotliBitReader = require_bit_reader();
    var BrotliDictionary = require_dictionary();
    var HuffmanCode = require_huffman().HuffmanCode;
    var BrotliBuildHuffmanTable = require_huffman().BrotliBuildHuffmanTable;
    var Context = require_context();
    var Prefix = require_prefix();
    var Transform = require_transform();
    var kDefaultCodeLength = 8;
    var kCodeLengthRepeatCode = 16;
    var kNumLiteralCodes = 256;
    var kNumInsertAndCopyCodes = 704;
    var kNumBlockLengthCodes = 26;
    var kLiteralContextBits = 6;
    var kDistanceContextBits = 2;
    var HUFFMAN_TABLE_BITS = 8;
    var HUFFMAN_TABLE_MASK = 255;
    var HUFFMAN_MAX_TABLE_SIZE = 1080;
    var CODE_LENGTH_CODES = 18;
    var kCodeLengthCodeOrder = new Uint8Array([
      1,
      2,
      3,
      4,
      0,
      5,
      17,
      6,
      16,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    ]);
    var NUM_DISTANCE_SHORT_CODES = 16;
    var kDistanceShortCodeIndexOffset = new Uint8Array([
      3,
      2,
      1,
      0,
      3,
      3,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2
    ]);
    var kDistanceShortCodeValueOffset = new Int8Array([
      0,
      0,
      0,
      0,
      -1,
      1,
      -2,
      2,
      -3,
      3,
      -1,
      1,
      -2,
      2,
      -3,
      3
    ]);
    var kMaxHuffmanTableSize = new Uint16Array([
      256,
      402,
      436,
      468,
      500,
      534,
      566,
      598,
      630,
      662,
      694,
      726,
      758,
      790,
      822,
      854,
      886,
      920,
      952,
      984,
      1016,
      1048,
      1080
    ]);
    function DecodeWindowBits(br) {
      var n;
      if (br.readBits(1) === 0) {
        return 16;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 17 + n;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 8 + n;
      }
      return 17;
    }
    function DecodeVarLenUint8(br) {
      if (br.readBits(1)) {
        var nbits = br.readBits(3);
        if (nbits === 0) {
          return 1;
        } else {
          return br.readBits(nbits) + (1 << nbits);
        }
      }
      return 0;
    }
    function MetaBlockLength() {
      this.meta_block_length = 0;
      this.input_end = 0;
      this.is_uncompressed = 0;
      this.is_metadata = false;
    }
    function DecodeMetaBlockLength(br) {
      var out = new MetaBlockLength();
      var size_nibbles;
      var size_bytes;
      var i;
      out.input_end = br.readBits(1);
      if (out.input_end && br.readBits(1)) {
        return out;
      }
      size_nibbles = br.readBits(2) + 4;
      if (size_nibbles === 7) {
        out.is_metadata = true;
        if (br.readBits(1) !== 0)
          throw new Error("Invalid reserved bit");
        size_bytes = br.readBits(2);
        if (size_bytes === 0)
          return out;
        for (i = 0; i < size_bytes; i++) {
          var next_byte = br.readBits(8);
          if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
            throw new Error("Invalid size byte");
          out.meta_block_length |= next_byte << i * 8;
        }
      } else {
        for (i = 0; i < size_nibbles; ++i) {
          var next_nibble = br.readBits(4);
          if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
            throw new Error("Invalid size nibble");
          out.meta_block_length |= next_nibble << i * 4;
        }
      }
      ++out.meta_block_length;
      if (!out.input_end && !out.is_metadata) {
        out.is_uncompressed = br.readBits(1);
      }
      return out;
    }
    function ReadSymbol(table, index, br) {
      var start_index = index;
      var nbits;
      br.fillBitWindow();
      index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
      nbits = table[index].bits - HUFFMAN_TABLE_BITS;
      if (nbits > 0) {
        br.bit_pos_ += HUFFMAN_TABLE_BITS;
        index += table[index].value;
        index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
      }
      br.bit_pos_ += table[index].bits;
      return table[index].value;
    }
    function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
      var symbol = 0;
      var prev_code_len = kDefaultCodeLength;
      var repeat = 0;
      var repeat_code_len = 0;
      var space = 32768;
      var table = [];
      for (var i = 0; i < 32; i++)
        table.push(new HuffmanCode(0, 0));
      BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
      while (symbol < num_symbols && space > 0) {
        var p = 0;
        var code_len;
        br.readMoreInput();
        br.fillBitWindow();
        p += br.val_ >>> br.bit_pos_ & 31;
        br.bit_pos_ += table[p].bits;
        code_len = table[p].value & 255;
        if (code_len < kCodeLengthRepeatCode) {
          repeat = 0;
          code_lengths[symbol++] = code_len;
          if (code_len !== 0) {
            prev_code_len = code_len;
            space -= 32768 >> code_len;
          }
        } else {
          var extra_bits = code_len - 14;
          var old_repeat;
          var repeat_delta;
          var new_len = 0;
          if (code_len === kCodeLengthRepeatCode) {
            new_len = prev_code_len;
          }
          if (repeat_code_len !== new_len) {
            repeat = 0;
            repeat_code_len = new_len;
          }
          old_repeat = repeat;
          if (repeat > 0) {
            repeat -= 2;
            repeat <<= extra_bits;
          }
          repeat += br.readBits(extra_bits) + 3;
          repeat_delta = repeat - old_repeat;
          if (symbol + repeat_delta > num_symbols) {
            throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
          }
          for (var x = 0; x < repeat_delta; x++)
            code_lengths[symbol + x] = repeat_code_len;
          symbol += repeat_delta;
          if (repeat_code_len !== 0) {
            space -= repeat_delta << 15 - repeat_code_len;
          }
        }
      }
      if (space !== 0) {
        throw new Error("[ReadHuffmanCodeLengths] space = " + space);
      }
      for (; symbol < num_symbols; symbol++)
        code_lengths[symbol] = 0;
    }
    function ReadHuffmanCode(alphabet_size, tables, table, br) {
      var table_size = 0;
      var simple_code_or_skip;
      var code_lengths = new Uint8Array(alphabet_size);
      br.readMoreInput();
      simple_code_or_skip = br.readBits(2);
      if (simple_code_or_skip === 1) {
        var i;
        var max_bits_counter = alphabet_size - 1;
        var max_bits = 0;
        var symbols = new Int32Array(4);
        var num_symbols = br.readBits(2) + 1;
        while (max_bits_counter) {
          max_bits_counter >>= 1;
          ++max_bits;
        }
        for (i = 0; i < num_symbols; ++i) {
          symbols[i] = br.readBits(max_bits) % alphabet_size;
          code_lengths[symbols[i]] = 2;
        }
        code_lengths[symbols[0]] = 1;
        switch (num_symbols) {
          case 1:
            break;
          case 3:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            break;
          case 2:
            if (symbols[0] === symbols[1]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            code_lengths[symbols[1]] = 1;
            break;
          case 4:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            if (br.readBits(1)) {
              code_lengths[symbols[2]] = 3;
              code_lengths[symbols[3]] = 3;
            } else {
              code_lengths[symbols[0]] = 2;
            }
            break;
        }
      } else {
        var i;
        var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
        var space = 32;
        var num_codes = 0;
        var huff = [
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 1),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 5)
        ];
        for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
          var code_len_idx = kCodeLengthCodeOrder[i];
          var p = 0;
          var v;
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 15;
          br.bit_pos_ += huff[p].bits;
          v = huff[p].value;
          code_length_code_lengths[code_len_idx] = v;
          if (v !== 0) {
            space -= 32 >> v;
            ++num_codes;
          }
        }
        if (!(num_codes === 1 || space === 0))
          throw new Error("[ReadHuffmanCode] invalid num_codes or space");
        ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
      }
      table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
      if (table_size === 0) {
        throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
      }
      return table_size;
    }
    function ReadBlockLength(table, index, br) {
      var code;
      var nbits;
      code = ReadSymbol(table, index, br);
      nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
      return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
    }
    function TranslateShortCodes(code, ringbuffer, index) {
      var val;
      if (code < NUM_DISTANCE_SHORT_CODES) {
        index += kDistanceShortCodeIndexOffset[code];
        index &= 3;
        val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
      } else {
        val = code - NUM_DISTANCE_SHORT_CODES + 1;
      }
      return val;
    }
    function MoveToFront(v, index) {
      var value = v[index];
      var i = index;
      for (; i; --i) v[i] = v[i - 1];
      v[0] = value;
    }
    function InverseMoveToFrontTransform(v, v_len) {
      var mtf = new Uint8Array(256);
      var i;
      for (i = 0; i < 256; ++i) {
        mtf[i] = i;
      }
      for (i = 0; i < v_len; ++i) {
        var index = v[i];
        v[i] = mtf[index];
        if (index) MoveToFront(mtf, index);
      }
    }
    function HuffmanTreeGroup(alphabet_size, num_htrees) {
      this.alphabet_size = alphabet_size;
      this.num_htrees = num_htrees;
      this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
      this.htrees = new Uint32Array(num_htrees);
    }
    HuffmanTreeGroup.prototype.decode = function(br) {
      var i;
      var table_size;
      var next = 0;
      for (i = 0; i < this.num_htrees; ++i) {
        this.htrees[i] = next;
        table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
        next += table_size;
      }
    };
    function DecodeContextMap(context_map_size, br) {
      var out = { num_htrees: null, context_map: null };
      var use_rle_for_zeros;
      var max_run_length_prefix = 0;
      var table;
      var i;
      br.readMoreInput();
      var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
      var context_map = out.context_map = new Uint8Array(context_map_size);
      if (num_htrees <= 1) {
        return out;
      }
      use_rle_for_zeros = br.readBits(1);
      if (use_rle_for_zeros) {
        max_run_length_prefix = br.readBits(4) + 1;
      }
      table = [];
      for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
        table[i] = new HuffmanCode(0, 0);
      }
      ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
      for (i = 0; i < context_map_size; ) {
        var code;
        br.readMoreInput();
        code = ReadSymbol(table, 0, br);
        if (code === 0) {
          context_map[i] = 0;
          ++i;
        } else if (code <= max_run_length_prefix) {
          var reps = 1 + (1 << code) + br.readBits(code);
          while (--reps) {
            if (i >= context_map_size) {
              throw new Error("[DecodeContextMap] i >= context_map_size");
            }
            context_map[i] = 0;
            ++i;
          }
        } else {
          context_map[i] = code - max_run_length_prefix;
          ++i;
        }
      }
      if (br.readBits(1)) {
        InverseMoveToFrontTransform(context_map, context_map_size);
      }
      return out;
    }
    function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
      var ringbuffer = tree_type * 2;
      var index = tree_type;
      var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
      var block_type;
      if (type_code === 0) {
        block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
      } else if (type_code === 1) {
        block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
      } else {
        block_type = type_code - 2;
      }
      if (block_type >= max_block_type) {
        block_type -= max_block_type;
      }
      block_types[tree_type] = block_type;
      ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
      ++indexes[index];
    }
    function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
      var rb_size = ringbuffer_mask + 1;
      var rb_pos = pos & ringbuffer_mask;
      var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
      var nbytes;
      if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
        while (len-- > 0) {
          br.readMoreInput();
          ringbuffer[rb_pos++] = br.readBits(8);
          if (rb_pos === rb_size) {
            output.write(ringbuffer, rb_size);
            rb_pos = 0;
          }
        }
        return;
      }
      if (br.bit_end_pos_ < 32) {
        throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
      }
      while (br.bit_pos_ < 32) {
        ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
        br.bit_pos_ += 8;
        ++rb_pos;
        --len;
      }
      nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
      if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
        var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
        for (var x = 0; x < tail; x++)
          ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        nbytes -= tail;
        rb_pos += tail;
        len -= tail;
        br_pos = 0;
      }
      for (var x = 0; x < nbytes; x++)
        ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
      rb_pos += nbytes;
      len -= nbytes;
      if (rb_pos >= rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos -= rb_size;
        for (var x = 0; x < rb_pos; x++)
          ringbuffer[x] = ringbuffer[rb_size + x];
      }
      while (rb_pos + len >= rb_size) {
        nbytes = rb_size - rb_pos;
        if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
          throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
        }
        output.write(ringbuffer, rb_size);
        len -= nbytes;
        rb_pos = 0;
      }
      if (br.input_.read(ringbuffer, rb_pos, len) < len) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      }
      br.reset();
    }
    function JumpToByteBoundary(br) {
      var new_bit_pos = br.bit_pos_ + 7 & ~7;
      var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
      return pad_bits == 0;
    }
    function BrotliDecompressedSize(buffer) {
      var input = new BrotliInput(buffer);
      var br = new BrotliBitReader(input);
      DecodeWindowBits(br);
      var out = DecodeMetaBlockLength(br);
      return out.meta_block_length;
    }
    exports.BrotliDecompressedSize = BrotliDecompressedSize;
    function BrotliDecompressBuffer(buffer, output_size) {
      var input = new BrotliInput(buffer);
      if (output_size == null) {
        output_size = BrotliDecompressedSize(buffer);
      }
      var output_buffer = new Uint8Array(output_size);
      var output = new BrotliOutput(output_buffer);
      BrotliDecompress(input, output);
      if (output.pos < output.buffer.length) {
        output.buffer = output.buffer.subarray(0, output.pos);
      }
      return output.buffer;
    }
    exports.BrotliDecompressBuffer = BrotliDecompressBuffer;
    function BrotliDecompress(input, output) {
      var i;
      var pos = 0;
      var input_end = 0;
      var window_bits = 0;
      var max_backward_distance;
      var max_distance = 0;
      var ringbuffer_size;
      var ringbuffer_mask;
      var ringbuffer;
      var ringbuffer_end;
      var dist_rb = [16, 15, 11, 4];
      var dist_rb_idx = 0;
      var prev_byte1 = 0;
      var prev_byte2 = 0;
      var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
      var block_type_trees;
      var block_len_trees;
      var br;
      var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
      br = new BrotliBitReader(input);
      window_bits = DecodeWindowBits(br);
      max_backward_distance = (1 << window_bits) - 16;
      ringbuffer_size = 1 << window_bits;
      ringbuffer_mask = ringbuffer_size - 1;
      ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
      ringbuffer_end = ringbuffer_size;
      block_type_trees = [];
      block_len_trees = [];
      for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
        block_type_trees[x] = new HuffmanCode(0, 0);
        block_len_trees[x] = new HuffmanCode(0, 0);
      }
      while (!input_end) {
        var meta_block_remaining_len = 0;
        var is_uncompressed;
        var block_length = [1 << 28, 1 << 28, 1 << 28];
        var block_type = [0];
        var num_block_types = [1, 1, 1];
        var block_type_rb = [0, 1, 0, 1, 0, 1];
        var block_type_rb_index = [0];
        var distance_postfix_bits;
        var num_direct_distance_codes;
        var distance_postfix_mask;
        var num_distance_codes;
        var context_map = null;
        var context_modes = null;
        var num_literal_htrees;
        var dist_context_map = null;
        var num_dist_htrees;
        var context_offset = 0;
        var context_map_slice = null;
        var literal_htree_index = 0;
        var dist_context_offset = 0;
        var dist_context_map_slice = null;
        var dist_htree_index = 0;
        var context_lookup_offset1 = 0;
        var context_lookup_offset2 = 0;
        var context_mode;
        var htree_command;
        for (i = 0; i < 3; ++i) {
          hgroup[i].codes = null;
          hgroup[i].htrees = null;
        }
        br.readMoreInput();
        var _out = DecodeMetaBlockLength(br);
        meta_block_remaining_len = _out.meta_block_length;
        if (pos + meta_block_remaining_len > output.buffer.length) {
          var tmp = new Uint8Array(pos + meta_block_remaining_len);
          tmp.set(output.buffer);
          output.buffer = tmp;
        }
        input_end = _out.input_end;
        is_uncompressed = _out.is_uncompressed;
        if (_out.is_metadata) {
          JumpToByteBoundary(br);
          for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
            br.readMoreInput();
            br.readBits(8);
          }
          continue;
        }
        if (meta_block_remaining_len === 0) {
          continue;
        }
        if (is_uncompressed) {
          br.bit_pos_ = br.bit_pos_ + 7 & ~7;
          CopyUncompressedBlockToOutput(
            output,
            meta_block_remaining_len,
            pos,
            ringbuffer,
            ringbuffer_mask,
            br
          );
          pos += meta_block_remaining_len;
          continue;
        }
        for (i = 0; i < 3; ++i) {
          num_block_types[i] = DecodeVarLenUint8(br) + 1;
          if (num_block_types[i] >= 2) {
            ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            block_type_rb_index[i] = 1;
          }
        }
        br.readMoreInput();
        distance_postfix_bits = br.readBits(2);
        num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
        distance_postfix_mask = (1 << distance_postfix_bits) - 1;
        num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
        context_modes = new Uint8Array(num_block_types[0]);
        for (i = 0; i < num_block_types[0]; ++i) {
          br.readMoreInput();
          context_modes[i] = br.readBits(2) << 1;
        }
        var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
        num_literal_htrees = _o1.num_htrees;
        context_map = _o1.context_map;
        var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
        num_dist_htrees = _o2.num_htrees;
        dist_context_map = _o2.context_map;
        hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
        hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
        hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
        for (i = 0; i < 3; ++i) {
          hgroup[i].decode(br);
        }
        context_map_slice = 0;
        dist_context_map_slice = 0;
        context_mode = context_modes[block_type[0]];
        context_lookup_offset1 = Context.lookupOffsets[context_mode];
        context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        htree_command = hgroup[1].htrees[0];
        while (meta_block_remaining_len > 0) {
          var cmd_code;
          var range_idx;
          var insert_code;
          var copy_code;
          var insert_length;
          var copy_length;
          var distance_code;
          var distance;
          var context;
          var j;
          var copy_dst;
          br.readMoreInput();
          if (block_length[1] === 0) {
            DecodeBlockType(
              num_block_types[1],
              block_type_trees,
              1,
              block_type,
              block_type_rb,
              block_type_rb_index,
              br
            );
            block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
            htree_command = hgroup[1].htrees[block_type[1]];
          }
          --block_length[1];
          cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
          range_idx = cmd_code >> 6;
          if (range_idx >= 2) {
            range_idx -= 2;
            distance_code = -1;
          } else {
            distance_code = 0;
          }
          insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
          copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
          insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
          copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          for (j = 0; j < insert_length; ++j) {
            br.readMoreInput();
            if (block_length[0] === 0) {
              DecodeBlockType(
                num_block_types[0],
                block_type_trees,
                0,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[0] = ReadBlockLength(block_len_trees, 0, br);
              context_offset = block_type[0] << kLiteralContextBits;
              context_map_slice = context_offset;
              context_mode = context_modes[block_type[0]];
              context_lookup_offset1 = Context.lookupOffsets[context_mode];
              context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
            }
            context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
            literal_htree_index = context_map[context_map_slice + context];
            --block_length[0];
            prev_byte2 = prev_byte1;
            prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
            ringbuffer[pos & ringbuffer_mask] = prev_byte1;
            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
              output.write(ringbuffer, ringbuffer_size);
            }
            ++pos;
          }
          meta_block_remaining_len -= insert_length;
          if (meta_block_remaining_len <= 0) break;
          if (distance_code < 0) {
            var context;
            br.readMoreInput();
            if (block_length[2] === 0) {
              DecodeBlockType(
                num_block_types[2],
                block_type_trees,
                2,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
              dist_context_offset = block_type[2] << kDistanceContextBits;
              dist_context_map_slice = dist_context_offset;
            }
            --block_length[2];
            context = (copy_length > 4 ? 3 : copy_length - 2) & 255;
            dist_htree_index = dist_context_map[dist_context_map_slice + context];
            distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
            if (distance_code >= num_direct_distance_codes) {
              var nbits;
              var postfix;
              var offset;
              distance_code -= num_direct_distance_codes;
              postfix = distance_code & distance_postfix_mask;
              distance_code >>= distance_postfix_bits;
              nbits = (distance_code >> 1) + 1;
              offset = (2 + (distance_code & 1) << nbits) - 4;
              distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
            }
          }
          distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
          if (distance < 0) {
            throw new Error("[BrotliDecompress] invalid distance");
          }
          if (pos < max_backward_distance && max_distance !== max_backward_distance) {
            max_distance = pos;
          } else {
            max_distance = max_backward_distance;
          }
          copy_dst = pos & ringbuffer_mask;
          if (distance > max_distance) {
            if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
              var offset = BrotliDictionary.offsetsByLength[copy_length];
              var word_id = distance - max_distance - 1;
              var shift = BrotliDictionary.sizeBitsByLength[copy_length];
              var mask = (1 << shift) - 1;
              var word_idx = word_id & mask;
              var transform_idx = word_id >> shift;
              offset += word_idx * copy_length;
              if (transform_idx < Transform.kNumTransforms) {
                var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                copy_dst += len;
                pos += len;
                meta_block_remaining_len -= len;
                if (copy_dst >= ringbuffer_end) {
                  output.write(ringbuffer, ringbuffer_size);
                  for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++)
                    ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
          } else {
            if (distance_code > 0) {
              dist_rb[dist_rb_idx & 3] = distance;
              ++dist_rb_idx;
            }
            if (copy_length > meta_block_remaining_len) {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
            for (j = 0; j < copy_length; ++j) {
              ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }
              ++pos;
              --meta_block_remaining_len;
            }
          }
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        }
        pos &= 1073741823;
      }
      output.write(ringbuffer, pos & ringbuffer_mask);
    }
    exports.BrotliDecompress = BrotliDecompress;
    BrotliDictionary.init();
  }
});

// ../../node_modules/brotli/decompress.js
var require_decompress = __commonJS({
  "../../node_modules/brotli/decompress.js"(exports, module) {
    "use strict";
    module.exports = require_decode().BrotliDecompressBuffer;
  }
});

// ../../node_modules/linebreak/node_modules/base64-js/lib/b64.js
var require_b64 = __commonJS({
  "../../node_modules/linebreak/node_modules/base64-js/lib/b64.js"(exports) {
    "use strict";
    var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    (function(exports2) {
      "use strict";
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var PLUS = "+".charCodeAt(0);
      var SLASH = "/".charCodeAt(0);
      var NUMBER = "0".charCodeAt(0);
      var LOWER = "a".charCodeAt(0);
      var UPPER = "A".charCodeAt(0);
      var PLUS_URL_SAFE = "-".charCodeAt(0);
      var SLASH_URL_SAFE = "_".charCodeAt(0);
      function decode(elt) {
        var code = elt.charCodeAt(0);
        if (code === PLUS || code === PLUS_URL_SAFE)
          return 62;
        if (code === SLASH || code === SLASH_URL_SAFE)
          return 63;
        if (code < NUMBER)
          return -1;
        if (code < NUMBER + 10)
          return code - NUMBER + 26 + 26;
        if (code < UPPER + 26)
          return code - UPPER;
        if (code < LOWER + 26)
          return code - LOWER + 26;
      }
      function b64ToByteArray(b64) {
        var i, j, l, tmp, placeHolders, arr;
        if (b64.length % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var len = b64.length;
        placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
        arr = new Arr(b64.length * 3 / 4 - placeHolders);
        l = placeHolders > 0 ? b64.length - 4 : b64.length;
        var L = 0;
        function push(v) {
          arr[L++] = v;
        }
        for (i = 0, j = 0; i < l; i += 4, j += 3) {
          tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
          push((tmp & 16711680) >> 16);
          push((tmp & 65280) >> 8);
          push(tmp & 255);
        }
        if (placeHolders === 2) {
          tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
          push(tmp & 255);
        } else if (placeHolders === 1) {
          tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
          push(tmp >> 8 & 255);
          push(tmp & 255);
        }
        return arr;
      }
      function uint8ToBase64(uint8) {
        var i, extraBytes = uint8.length % 3, output = "", temp, length;
        function encode(num) {
          return lookup.charAt(num);
        }
        function tripletToBase64(num) {
          return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
        }
        for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
          temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
          output += tripletToBase64(temp);
        }
        switch (extraBytes) {
          case 1:
            temp = uint8[uint8.length - 1];
            output += encode(temp >> 2);
            output += encode(temp << 4 & 63);
            output += "==";
            break;
          case 2:
            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
            output += encode(temp >> 10);
            output += encode(temp >> 4 & 63);
            output += encode(temp << 2 & 63);
            output += "=";
            break;
        }
        return output;
      }
      exports2.toByteArray = b64ToByteArray;
      exports2.fromByteArray = uint8ToBase64;
    })(typeof exports === "undefined" ? exports.base64js = {} : exports);
  }
});

// ../../node_modules/jpeg-exif/lib/tags.json
var require_tags = __commonJS({
  "../../node_modules/jpeg-exif/lib/tags.json"(exports, module) {
    module.exports = {
      ifd: {
        "010e": "ImageDescription",
        "010f": "Make",
        "011a": "XResolution",
        "011b": "YResolution",
        "011c": "PlanarConfiguration",
        "012d": "TransferFunction",
        "013b": "Artist",
        "013e": "WhitePoint",
        "013f": "PrimaryChromaticities",
        "0100": "ImageWidth",
        "0101": "ImageHeight",
        "0102": "BitsPerSample",
        "0103": "Compression",
        "0106": "PhotometricInterpretation",
        "0110": "Model",
        "0111": "StripOffsets",
        "0112": "Orientation",
        "0115": "SamplesPerPixel",
        "0116": "RowsPerStrip",
        "0117": "StripByteCounts",
        "0128": "ResolutionUnit",
        "0131": "Software",
        "0132": "DateTime",
        "0201": "JPEGInterchangeFormat",
        "0202": "JPEGInterchangeFormatLength",
        "0211": "YCbCrCoefficients",
        "0212": "YCbCrSubSampling",
        "0213": "YCbCrPositioning",
        "0214": "ReferenceBlackWhite",
        "829a": "ExposureTime",
        "829d": "FNumber",
        "920a": "FocalLength",
        "927c": "MakerNote",
        "8298": "Copyright",
        "8769": "ExifIFDPointer",
        "8822": "ExposureProgram",
        "8824": "SpectralSensitivity",
        "8825": "GPSInfoIFDPointer",
        "8827": "PhotographicSensitivity",
        "8828": "OECF",
        "8830": "SensitivityType",
        "8831": "StandardOutputSensitivity",
        "8832": "RecommendedExposureIndex",
        "8833": "ISOSpeed",
        "8834": "ISOSpeedLatitudeyyy",
        "8835": "ISOSpeedLatitudezzz",
        "9000": "ExifVersion",
        "9003": "DateTimeOriginal",
        "9004": "DateTimeDigitized",
        "9101": "ComponentsConfiguration",
        "9102": "CompressedBitsPerPixel",
        "9201": "ShutterSpeedValue",
        "9202": "ApertureValue",
        "9203": "BrightnessValue",
        "9204": "ExposureBiasValue",
        "9205": "MaxApertureValue",
        "9206": "SubjectDistance",
        "9207": "MeteringMode",
        "9208": "LightSource",
        "9209": "Flash",
        "9214": "SubjectArea",
        "9286": "UserComment",
        "9290": "SubSecTime",
        "9291": "SubSecTimeOriginal",
        "9292": "SubSecTimeDigitized",
        a000: "FlashpixVersion",
        a001: "ColorSpace",
        a002: "PixelXDimension",
        a003: "PixelYDimension",
        a004: "RelatedSoundFile",
        a005: "InteroperabilityIFDPointer",
        a20b: "FlashEnergy",
        a20c: "SpatialFrequencyResponse",
        a20e: "FocalPlaneXResolution",
        a20f: "FocalPlaneYResolution",
        a40a: "Sharpness",
        a40b: "DeviceSettingDescription",
        a40c: "SubjectDistanceRange",
        a210: "FocalPlaneResolutionUnit",
        a214: "SubjectLocation",
        a215: "ExposureIndex",
        a217: "SensingMethod",
        a300: "FileSource",
        a301: "SceneType",
        a302: "CFAPattern",
        a401: "CustomRendered",
        a402: "ExposureMode",
        a403: "WhiteBalance",
        a404: "DigitalZoomRatio",
        a405: "FocalLengthIn35mmFilm",
        a406: "SceneCaptureType",
        a407: "GainControl",
        a408: "Contrast",
        a409: "Saturation",
        a420: "ImageUniqueID",
        a430: "CameraOwnerName",
        a431: "BodySerialNumber",
        a432: "LensSpecification",
        a433: "LensMake",
        a434: "LensModel",
        a435: "LensSerialNumber",
        a500: "Gamma"
      },
      gps: {
        "0000": "GPSVersionID",
        "0001": "GPSLatitudeRef",
        "0002": "GPSLatitude",
        "0003": "GPSLongitudeRef",
        "0004": "GPSLongitude",
        "0005": "GPSAltitudeRef",
        "0006": "GPSAltitude",
        "0007": "GPSTimeStamp",
        "0008": "GPSSatellites",
        "0009": "GPSStatus",
        "000a": "GPSMeasureMode",
        "000b": "GPSDOP",
        "000c": "GPSSpeedRef",
        "000d": "GPSSpeed",
        "000e": "GPSTrackRef",
        "000f": "GPSTrack",
        "0010": "GPSImgDirectionRef",
        "0011": "GPSImgDirection",
        "0012": "GPSMapDatum",
        "0013": "GPSDestLatitudeRef",
        "0014": "GPSDestLatitude",
        "0015": "GPSDestLongitudeRef",
        "0016": "GPSDestLongitude",
        "0017": "GPSDestBearingRef",
        "0018": "GPSDestBearing",
        "0019": "GPSDestDistanceRef",
        "001a": "GPSDestDistance",
        "001b": "GPSProcessingMethod",
        "001c": "GPSAreaInformation",
        "001d": "GPSDateStamp",
        "001e": "GPSDifferential",
        "001f": "GPSHPositioningError"
      }
    };
  }
});

// ../../node_modules/jpeg-exif/lib/index.js
var require_lib3 = __commonJS({
  "../../node_modules/jpeg-exif/lib/index.js"(exports) {
    "use strict";
    var _fs = __require("fs");
    var _fs2 = _interopRequireDefault(_fs);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var tags = require_tags();
    var bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];
    var SOIMarkerLength = 2;
    var JPEGSOIMarker = 65496;
    var TIFFINTEL = 18761;
    var TIFFMOTOROLA = 19789;
    var APPMarkerLength = 2;
    var APPMarkerBegin = 65504;
    var APPMarkerEnd = 65519;
    var data = void 0;
    var isValid = function isValid2(buffer) {
      try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === JPEGSOIMarker;
      } catch (e) {
        throw new Error("Unsupport file format.");
      }
    };
    var isTiff = function isTiff2(buffer) {
      try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === TIFFINTEL || SOIMarker === TIFFMOTOROLA;
      } catch (e) {
        throw new Error("Unsupport file format.");
      }
    };
    var checkAPPn = function checkAPPn2(buffer) {
      try {
        var APPMarkerTag = buffer.readUInt16BE(0);
        var isInRange = APPMarkerTag >= APPMarkerBegin && APPMarkerTag <= APPMarkerEnd;
        return isInRange ? APPMarkerTag - APPMarkerBegin : false;
      } catch (e) {
        throw new Error("Invalid APP Tag.");
      }
    };
    var IFDHandler = function IFDHandler2(buffer, tagCollection, order, offset) {
      var entriesNumber = order ? buffer.readUInt16BE(0) : buffer.readUInt16LE(0);
      if (entriesNumber === 0) {
        return {};
      }
      var entriesNumberLength = 2;
      var entries = buffer.slice(entriesNumberLength);
      var entryLength = 12;
      var exif2 = {};
      var entryCount = 0;
      for (entryCount; entryCount < entriesNumber; entryCount += 1) {
        var entryBegin = entryCount * entryLength;
        var entry = entries.slice(entryBegin, entryBegin + entryLength);
        var tagBegin = 0;
        var tagLength = 2;
        var dataFormatBegin = tagBegin + tagLength;
        var dataFormatLength = 2;
        var componentsBegin = dataFormatBegin + dataFormatLength;
        var componentsNumberLength = 4;
        var dataValueBegin = componentsBegin + componentsNumberLength;
        var dataValueLength = 4;
        var tagAddress = entry.slice(tagBegin, dataFormatBegin);
        var tagNumber = order ? tagAddress.toString("hex") : tagAddress.reverse().toString("hex");
        var tagName = tagCollection[tagNumber];
        var bigDataFormat = entry.readUInt16BE(dataFormatBegin);
        var littleDataFormat = entry.readUInt16LE(dataFormatBegin);
        var dataFormat = order ? bigDataFormat : littleDataFormat;
        var componentsByte = bytes[dataFormat];
        var bigComponentsNumber = entry.readUInt32BE(componentsBegin);
        var littleComponentNumber = entry.readUInt32LE(componentsBegin);
        var componentsNumber = order ? bigComponentsNumber : littleComponentNumber;
        var dataLength = componentsNumber * componentsByte;
        var dataValue = entry.slice(dataValueBegin, dataValueBegin + dataValueLength);
        if (dataLength > 4) {
          var dataOffset = (order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0)) - offset;
          dataValue = buffer.slice(dataOffset, dataOffset + dataLength);
        }
        var tagValue = void 0;
        if (tagName) {
          switch (dataFormat) {
            case 1:
              tagValue = dataValue.readUInt8(0);
              break;
            case 2:
              tagValue = dataValue.toString("ascii").replace(/\0+$/, "");
              break;
            case 3:
              tagValue = order ? dataValue.readUInt16BE(0) : dataValue.readUInt16LE(0);
              break;
            case 4:
              tagValue = order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0);
              break;
            case 5:
              tagValue = [];
              for (var i = 0; i < dataValue.length; i += 8) {
                var bigTagValue = dataValue.readUInt32BE(i) / dataValue.readUInt32BE(i + 4);
                var littleTagValue = dataValue.readUInt32LE(i) / dataValue.readUInt32LE(i + 4);
                tagValue.push(order ? bigTagValue : littleTagValue);
              }
              break;
            case 7:
              switch (tagName) {
                case "ExifVersion":
                  tagValue = dataValue.toString();
                  break;
                case "FlashPixVersion":
                  tagValue = dataValue.toString();
                  break;
                case "SceneType":
                  tagValue = dataValue.readUInt8(0);
                  break;
                default:
                  tagValue = "0x" + dataValue.toString("hex", 0, 15);
                  break;
              }
              break;
            case 10: {
              var bigOrder = dataValue.readInt32BE(0) / dataValue.readInt32BE(4);
              var littleOrder = dataValue.readInt32LE(0) / dataValue.readInt32LE(4);
              tagValue = order ? bigOrder : littleOrder;
              break;
            }
            default:
              tagValue = "0x" + dataValue.toString("hex");
              break;
          }
          exif2[tagName] = tagValue;
        }
      }
      return exif2;
    };
    var EXIFHandler = function EXIFHandler2(buf) {
      var pad2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var buffer = buf;
      if (pad2) {
        buffer = buf.slice(APPMarkerLength);
        var length = buffer.readUInt16BE(0);
        buffer = buffer.slice(0, length);
        var lengthLength = 2;
        buffer = buffer.slice(lengthLength);
        var identifierLength = 5;
        buffer = buffer.slice(identifierLength);
        var padLength = 1;
        buffer = buffer.slice(padLength);
      }
      var byteOrderLength = 2;
      var byteOrder = buffer.toString("ascii", 0, byteOrderLength) === "MM";
      var fortyTwoLength = 2;
      var fortyTwoEnd = byteOrderLength + fortyTwoLength;
      var big42 = buffer.readUInt32BE(fortyTwoEnd);
      var little42 = buffer.readUInt32LE(fortyTwoEnd);
      var offsetOfIFD = byteOrder ? big42 : little42;
      buffer = buffer.slice(offsetOfIFD);
      if (buffer.length > 0) {
        data = IFDHandler(buffer, tags.ifd, byteOrder, offsetOfIFD);
        if (data.ExifIFDPointer) {
          buffer = buffer.slice(data.ExifIFDPointer - offsetOfIFD);
          data.SubExif = IFDHandler(buffer, tags.ifd, byteOrder, data.ExifIFDPointer);
        }
        if (data.GPSInfoIFDPointer) {
          var gps = data.GPSInfoIFDPointer;
          buffer = buffer.slice(data.ExifIFDPointer ? gps - data.ExifIFDPointer : gps - offsetOfIFD);
          data.GPSInfo = IFDHandler(buffer, tags.gps, byteOrder, gps);
        }
      }
    };
    var APPnHandler = function APPnHandler2(buffer) {
      var APPMarkerTag = checkAPPn(buffer);
      if (APPMarkerTag !== false) {
        var length = buffer.readUInt16BE(APPMarkerLength);
        switch (APPMarkerTag) {
          case 1:
            EXIFHandler(buffer);
            break;
          default:
            APPnHandler2(buffer.slice(APPMarkerLength + length));
            break;
        }
      }
    };
    var fromBuffer = function fromBuffer2(buffer) {
      if (!buffer) {
        throw new Error("buffer not found");
      }
      data = void 0;
      if (isValid(buffer)) {
        buffer = buffer.slice(SOIMarkerLength);
        data = {};
        APPnHandler(buffer);
      } else if (isTiff(buffer)) {
        data = {};
        EXIFHandler(buffer, false);
      }
      return data;
    };
    var sync = function sync2(file) {
      if (!file) {
        throw new Error("File not found");
      }
      var buffer = _fs2.default.readFileSync(file);
      return fromBuffer(buffer);
    };
    var async = function async2(file, callback) {
      data = void 0;
      new Promise(function(resolve, reject) {
        if (!file) {
          reject(new Error("\u2753File not found."));
        }
        _fs2.default.readFile(file, function(err, buffer) {
          if (err) {
            reject(err);
          } else {
            try {
              if (isValid(buffer)) {
                var buf = buffer.slice(SOIMarkerLength);
                data = {};
                APPnHandler(buf);
                resolve(data);
              } else if (isTiff(buffer)) {
                data = {};
                EXIFHandler(buffer, false);
                resolve(data);
              } else {
                reject(new Error("\u{1F631}Unsupport file type."));
              }
            } catch (e) {
              reject(e);
            }
          }
        });
      }, function(error) {
        callback(error, void 0);
      }).then(function(d) {
        callback(void 0, d);
      }).catch(function(error) {
        callback(error, void 0);
      });
    };
    exports.fromBuffer = fromBuffer;
    exports.parse = async;
    exports.parseSync = sync;
  }
});

// ../../node_modules/png-js/png-node.js
var require_png_node = __commonJS({
  "../../node_modules/png-js/png-node.js"(exports, module) {
    "use strict";
    var fs3 = __require("fs");
    var zlib2 = __require("zlib");
    module.exports = class PNG2 {
      static decode(path3, fn) {
        return fs3.readFile(path3, function(err, file) {
          const png = new PNG2(file);
          return png.decode((pixels) => fn(pixels));
        });
      }
      static load(path3) {
        const file = fs3.readFileSync(path3);
        return new PNG2(file);
      }
      constructor(data) {
        let i;
        this.data = data;
        this.pos = 8;
        this.palette = [];
        this.imgData = [];
        this.transparency = {};
        this.text = {};
        while (true) {
          const chunkSize = this.readUInt32();
          let section = "";
          for (i = 0; i < 4; i++) {
            section += String.fromCharCode(this.data[this.pos++]);
          }
          switch (section) {
            case "IHDR":
              this.width = this.readUInt32();
              this.height = this.readUInt32();
              this.bits = this.data[this.pos++];
              this.colorType = this.data[this.pos++];
              this.compressionMethod = this.data[this.pos++];
              this.filterMethod = this.data[this.pos++];
              this.interlaceMethod = this.data[this.pos++];
              break;
            case "PLTE":
              this.palette = this.read(chunkSize);
              break;
            case "IDAT":
              for (i = 0; i < chunkSize; i++) {
                this.imgData.push(this.data[this.pos++]);
              }
              break;
            case "tRNS":
              this.transparency = {};
              switch (this.colorType) {
                case 3:
                  this.transparency.indexed = this.read(chunkSize);
                  var short = 255 - this.transparency.indexed.length;
                  if (short > 0) {
                    for (i = 0; i < short; i++) {
                      this.transparency.indexed.push(255);
                    }
                  }
                  break;
                case 0:
                  this.transparency.grayscale = this.read(chunkSize)[0];
                  break;
                case 2:
                  this.transparency.rgb = this.read(chunkSize);
                  break;
              }
              break;
            case "tEXt":
              var text = this.read(chunkSize);
              var index = text.indexOf(0);
              var key = String.fromCharCode.apply(String, text.slice(0, index));
              this.text[key] = String.fromCharCode.apply(
                String,
                text.slice(index + 1)
              );
              break;
            case "IEND":
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  this.colors = 1;
                  break;
                case 2:
                case 6:
                  this.colors = 3;
                  break;
              }
              this.hasAlphaChannel = [4, 6].includes(this.colorType);
              var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
              this.pixelBitlength = this.bits * colors;
              switch (this.colors) {
                case 1:
                  this.colorSpace = "DeviceGray";
                  break;
                case 3:
                  this.colorSpace = "DeviceRGB";
                  break;
              }
              this.imgData = new Buffer(this.imgData);
              return;
              break;
            default:
              this.pos += chunkSize;
          }
          this.pos += 4;
          if (this.pos > this.data.length) {
            throw new Error("Incomplete or corrupt PNG file");
          }
        }
      }
      read(bytes) {
        const result = new Array(bytes);
        for (let i = 0; i < bytes; i++) {
          result[i] = this.data[this.pos++];
        }
        return result;
      }
      readUInt32() {
        const b1 = this.data[this.pos++] << 24;
        const b2 = this.data[this.pos++] << 16;
        const b3 = this.data[this.pos++] << 8;
        const b4 = this.data[this.pos++];
        return b1 | b2 | b3 | b4;
      }
      readUInt16() {
        const b1 = this.data[this.pos++] << 8;
        const b2 = this.data[this.pos++];
        return b1 | b2;
      }
      decodePixels(fn) {
        return zlib2.inflate(this.imgData, (err, data) => {
          if (err) {
            throw err;
          }
          const { width, height } = this;
          const pixelBytes = this.pixelBitlength / 8;
          const pixels = new Buffer(width * height * pixelBytes);
          const { length } = data;
          let pos = 0;
          function pass(x0, y0, dx, dy, singlePass = false) {
            const w = Math.ceil((width - x0) / dx);
            const h = Math.ceil((height - y0) / dy);
            const scanlineLength = pixelBytes * w;
            const buffer = singlePass ? pixels : new Buffer(scanlineLength * h);
            let row = 0;
            let c = 0;
            while (row < h && pos < length) {
              var byte, col, i, left, upper;
              switch (data[pos++]) {
                case 0:
                  for (i = 0; i < scanlineLength; i++) {
                    buffer[c++] = data[pos++];
                  }
                  break;
                case 1:
                  for (i = 0; i < scanlineLength; i++) {
                    byte = data[pos++];
                    left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                    buffer[c++] = (byte + left) % 256;
                  }
                  break;
                case 2:
                  for (i = 0; i < scanlineLength; i++) {
                    byte = data[pos++];
                    col = (i - i % pixelBytes) / pixelBytes;
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                    buffer[c++] = (upper + byte) % 256;
                  }
                  break;
                case 3:
                  for (i = 0; i < scanlineLength; i++) {
                    byte = data[pos++];
                    col = (i - i % pixelBytes) / pixelBytes;
                    left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                    buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                  }
                  break;
                case 4:
                  for (i = 0; i < scanlineLength; i++) {
                    var paeth, upperLeft;
                    byte = data[pos++];
                    col = (i - i % pixelBytes) / pixelBytes;
                    left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                    if (row === 0) {
                      upper = upperLeft = 0;
                    } else {
                      upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                      upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                    }
                    const p = left + upper - upperLeft;
                    const pa = Math.abs(p - left);
                    const pb = Math.abs(p - upper);
                    const pc = Math.abs(p - upperLeft);
                    if (pa <= pb && pa <= pc) {
                      paeth = left;
                    } else if (pb <= pc) {
                      paeth = upper;
                    } else {
                      paeth = upperLeft;
                    }
                    buffer[c++] = (byte + paeth) % 256;
                  }
                  break;
                default:
                  throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
              }
              if (!singlePass) {
                let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
                let bufferPos = row * scanlineLength;
                for (i = 0; i < w; i++) {
                  for (let j = 0; j < pixelBytes; j++)
                    pixels[pixelsPos++] = buffer[bufferPos++];
                  pixelsPos += (dx - 1) * pixelBytes;
                }
              }
              row++;
            }
          }
          if (this.interlaceMethod === 1) {
            pass(0, 0, 8, 8);
            pass(4, 0, 8, 8);
            pass(0, 4, 4, 8);
            pass(2, 0, 4, 4);
            pass(0, 2, 2, 4);
            pass(1, 0, 2, 2);
            pass(0, 1, 1, 2);
          } else {
            pass(0, 0, 1, 1, true);
          }
          return fn(pixels);
        });
      }
      decodePalette() {
        const { palette } = this;
        const { length } = palette;
        const transparency = this.transparency.indexed || [];
        const ret = new Buffer(transparency.length + length);
        let pos = 0;
        let c = 0;
        for (let i = 0; i < length; i += 3) {
          var left;
          ret[pos++] = palette[i];
          ret[pos++] = palette[i + 1];
          ret[pos++] = palette[i + 2];
          ret[pos++] = (left = transparency[c++]) != null ? left : 255;
        }
        return ret;
      }
      copyToImageData(imageData, pixels) {
        let j, k;
        let { colors } = this;
        let palette = null;
        let alpha = this.hasAlphaChannel;
        if (this.palette.length) {
          palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
          colors = 4;
          alpha = true;
        }
        const data = imageData.data || imageData;
        const { length } = data;
        const input = palette || pixels;
        let i = j = 0;
        if (colors === 1) {
          while (i < length) {
            k = palette ? pixels[i / 4] * 4 : j;
            const v = input[k++];
            data[i++] = v;
            data[i++] = v;
            data[i++] = v;
            data[i++] = alpha ? input[k++] : 255;
            j = k;
          }
        } else {
          while (i < length) {
            k = palette ? pixels[i / 4] * 4 : j;
            data[i++] = input[k++];
            data[i++] = input[k++];
            data[i++] = input[k++];
            data[i++] = alpha ? input[k++] : 255;
            j = k;
          }
        }
      }
      decode(fn) {
        const ret = new Buffer(this.width * this.height * 4);
        return this.decodePixels((pixels) => {
          this.copyToImageData(ret, pixels);
          return fn(ret);
        });
      }
    };
  }
});

// src/index.ts
var import_express8 = __toESM(require_express2(), 1);
import cors from "cors";
import dotenv2 from "dotenv";
import path2 from "path";

// src/routes/invoices.ts
var import_express = __toESM(require_express2(), 1);

// src/controllers/invoices.ts
import mongoose3 from "mongoose";

// src/models/invoiceModel.ts
import mongoose from "mongoose";
var InvoiceSchema = new mongoose.Schema({
  dueDate: Date,
  currency: String,
  items: [
    {
      inventoryItem: { type: mongoose.Schema.Types.ObjectId, ref: "InventoryModel" },
      // Link to InventoryModel
      quantity: {
        type: Number,
        required: true
      },
      discount: {
        type: Number,
        default: 0
      }
    }
  ],
  rates: String,
  vat: Number,
  total: Number,
  subTotal: Number,
  notes: String,
  status: String,
  invoiceNumber: String,
  type: String,
  creator: String,
  totalAmountReceived: Number,
  client: { name: String, email: String, phone: String, address: String },
  paymentRecords: [
    {
      amountPaid: Number,
      datePaid: Date,
      paymentMethod: String,
      note: String,
      paidBy: String
    }
  ],
  createdAt: {
    type: Date,
    default: /* @__PURE__ */ new Date()
  }
});
var InvoiceModel = mongoose.model("InvoiceModel", InvoiceSchema);
var invoiceModel_default = InvoiceModel;

// src/models/inventoryModel.ts
import mongoose2 from "mongoose";
var InventorySchema = new mongoose2.Schema({
  itemName: {
    type: String,
    required: true
  },
  sku: {
    type: String,
    required: true,
    unique: true
  },
  quantity: {
    type: Number,
    required: true,
    min: 0
  },
  creator: String,
  unitPrice: {
    type: Number,
    required: true,
    min: 0
  },
  supplier: {
    name: String,
    contactEmail: String,
    phone: String,
    address: String
  },
  category: {
    type: String,
    default: "General"
  },
  threshold: {
    type: Number,
    default: 0
    // Minimum stock level for restocking alert
  },
  description: {
    type: String
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});
var InventoryModel = mongoose2.model("InventoryModel", InventorySchema);
var inventoryModel_default = InventoryModel;

// src/controllers/invoices.ts
var checkStockThreshold = async (inventoryItem) => {
  if (inventoryItem.quantity < inventoryItem.threshold) {
    console.log(
      `Alert: Stock for ${inventoryItem.itemName} is below the threshold! Current quantity: ${inventoryItem.quantity}`
    );
  }
};
var getInvoicesByUser = async (req, res) => {
  const { searchQuery } = req.query;
  console.log("Received searchQuery:", searchQuery);
  try {
    const invoices = await invoiceModel_default.find({ creator: searchQuery });
    console.log("Invoices found:", invoices.length);
    console.log("First invoice (if any):", invoices[0]);
    res.status(200).json({ data: invoices });
  } catch (error) {
    console.error("Error in getInvoicesByUser:", error);
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getTotalCount = async (req, res) => {
  const { searchQuery } = req.query;
  try {
    const totalCount = await invoiceModel_default.countDocuments({
      creator: searchQuery
    });
    res.status(200).json(totalCount);
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var createInvoice = async (req, res) => {
  const invoice = req.body;
  const session = await mongoose3.startSession();
  session.startTransaction();
  try {
    for (const item of invoice.items) {
      const inventoryItem = await inventoryModel_default.findById(
        item.inventoryItem
      ).session(session);
      if (!inventoryItem) {
        throw new Error(
          `Inventory item with ID ${item.inventoryItem} not found.`
        );
      }
      if (inventoryItem.quantity < item.quantity) {
        throw new Error(
          `Insufficient stock for item: ${inventoryItem.itemName}. Available: ${inventoryItem.quantity}, Requested: ${item.quantity}`
        );
      }
      inventoryItem.quantity -= item.quantity;
      await inventoryItem.save({ session });
      await checkStockThreshold(inventoryItem);
    }
    const newInvoice = new invoiceModel_default(invoice);
    await newInvoice.save({ session });
    await session.commitTransaction();
    session.endSession();
    res.status(201).json({ message: `${newInvoice._id} was created` });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var updateInvoice = async (req, res) => {
  const { id } = req.params;
  const invoice = req.body;
  if (!mongoose3.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "No invoice with that id" });
    return;
  }
  const session = await mongoose3.startSession();
  session.startTransaction();
  try {
    const existingInvoice = await invoiceModel_default.findById(id).session(session);
    if (!existingInvoice) throw new Error("Invoice not found");
    for (const item of existingInvoice.items) {
      const inventoryItem = await inventoryModel_default.findById(
        item.inventoryItem
      ).session(session);
      if (inventoryItem) {
        inventoryItem.quantity += item.quantity;
        await inventoryItem.save({ session });
      }
    }
    for (const item of invoice.items || []) {
      const inventoryItem = await inventoryModel_default.findById(
        item.inventoryItem
      ).session(session);
      if (!inventoryItem) {
        throw new Error(
          `Inventory item with ID ${item.inventoryItem} not found.`
        );
      }
      if (inventoryItem.quantity < item.quantity) {
        throw new Error(
          `Insufficient stock for item: ${inventoryItem.itemName}. Available: ${inventoryItem.quantity}, Requested: ${item.quantity}`
        );
      }
      inventoryItem.quantity -= item.quantity;
      await inventoryItem.save({ session });
      await checkStockThreshold(inventoryItem);
    }
    const updatedInvoice = await invoiceModel_default.findByIdAndUpdate(
      id,
      { ...invoice, _id: id },
      { new: true, session }
    );
    await session.commitTransaction();
    session.endSession();
    res.json(updatedInvoice);
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var deleteInvoice = async (req, res) => {
  const { id } = req.params;
  if (!mongoose3.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "No invoice with that id" });
    return;
  }
  const session = await mongoose3.startSession();
  session.startTransaction();
  try {
    const invoice = await invoiceModel_default.findById(id).session(session);
    if (!invoice) throw new Error("Invoice not found");
    for (const item of invoice.items) {
      const inventoryItem = await inventoryModel_default.findById(
        item.inventoryItem
      ).session(session);
      if (inventoryItem) {
        inventoryItem.quantity += item.quantity;
        await inventoryItem.save({ session });
      }
    }
    await invoiceModel_default.findByIdAndRemove(id).session(session);
    await session.commitTransaction();
    session.endSession();
    res.json({ message: "Invoice deleted successfully" });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getInvoice = async (req, res) => {
  const { id } = req.params;
  try {
    const invoice = await invoiceModel_default.findById(id);
    console.log(invoice);
    res.status(200).json({ data: invoice });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};

// src/routes/invoices.ts
var router = import_express.default.Router();
router.get("/count", getTotalCount);
router.get("/", getInvoicesByUser);
router.get("/:id", getInvoice);
router.post("/", createInvoice);
router.patch("/:id", updateInvoice);
router.delete("/:id", deleteInvoice);
var invoices_default = router;

// src/routes/clients.ts
var import_express2 = __toESM(require_express2(), 1);

// src/controllers/clients.ts
import mongoose5 from "mongoose";

// src/models/clientModel.ts
import mongoose4 from "mongoose";
var ClientSchema = new mongoose4.Schema({
  name: String,
  email: String,
  phone: String,
  address: String,
  userId: String,
  createdAt: {
    type: Date,
    default: /* @__PURE__ */ new Date()
  }
});
var ClientModel = mongoose4.model("ClientModel", ClientSchema);
var clientModel_default = ClientModel;

// src/controllers/clients.ts
var getClients = async (req, res) => {
  const { page } = req.query;
  try {
    const LIMIT = 8;
    const startIndex = (Number(page) - 1) * LIMIT;
    const total = await clientModel_default.countDocuments({});
    const clients = await clientModel_default.find().sort({ _id: -1 }).limit(LIMIT).skip(startIndex);
    res.json({
      data: clients,
      currentPage: Number(page),
      numberOfPages: Math.ceil(total / LIMIT)
    });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var createClient = async (req, res) => {
  const client = req.body;
  console.log(client);
  const newClient = new clientModel_default({
    ...client,
    createdAt: (/* @__PURE__ */ new Date()).toISOString()
  });
  try {
    await newClient.save();
    res.status(201).json({ message: `${newClient._id} was created` });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var updateClient = async (req, res) => {
  const { id } = req.params;
  const client = req.body;
  if (!mongoose5.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "No client with that id" });
    return;
  }
  try {
    const updatedClient = await clientModel_default.findByIdAndUpdate(
      id,
      { ...client, _id: id },
      { new: true }
    );
    if (!updatedClient) {
      res.status(404).json({ message: "Client not found" });
      return;
    }
    res.json({ message: `${updatedClient._id} was updated` });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var deleteClient = async (req, res) => {
  const { id } = req.params;
  if (!mongoose5.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: `No Client with ${id}` });
    return;
  }
  try {
    const result = await clientModel_default.findByIdAndRemove(id);
    if (!result) {
      res.status(404).json({ message: `${id} not found` });
      return;
    }
    res.json({ message: `${id} was deleted successfully` });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getClientsByUser = async (req, res) => {
  const { searchQuery } = req.query;
  try {
    const clients = await clientModel_default.find({ userId: searchQuery });
    res.json({ data: clients });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};

// src/routes/clients.ts
var router2 = import_express2.default.Router();
router2.get("/", getClients);
router2.get("/user", getClientsByUser);
router2.post("/", createClient);
router2.patch("/:id", updateClient);
router2.delete("/:id", deleteClient);
var clients_default = router2;

// src/routes/userRoutes.ts
var import_express3 = __toESM(require_express2(), 1);

// src/controllers/user.ts
import jwt from "jsonwebtoken";

// src/models/userModel.ts
import mongoose6 from "mongoose";
var userSchema = new mongoose6.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  resetToken: String,
  expireToken: Date
});
var User = mongoose6.model("User", userSchema);
var userModel_default = User;

// src/controllers/user.ts
import crypto from "crypto";
import bcrypt from "bcryptjs";
import dotenv from "dotenv";
import nodemailer from "nodemailer";

// src/models/profileModel.ts
import mongoose7 from "mongoose";
var profileSchema = new mongoose7.Schema({
  name: String,
  email: { type: String, required: true, unique: true },
  phoneNumber: String,
  businessName: String,
  contactAddress: String,
  paymentDetails: String,
  logo: String,
  website: String,
  userId: String
});
var Profile = mongoose7.model("Profile", profileSchema);
var profileModel_default = Profile;

// src/controllers/user.ts
dotenv.config();
var SECRET = process.env.SECRET;
var HOST = process.env.SMTP_HOST;
var PORT = process.env.SMTP_PORT;
var USER = process.env.SMTP_USER;
var PASS = process.env.SMTP_PASS;
var signin = async (req, res) => {
  const { email, password } = req.body;
  try {
    const existingUser = await userModel_default.findOne({ email });
    if (!existingUser) {
      res.status(404).json({ message: "User doesn't exist" });
      return;
    }
    const userProfile = await profileModel_default.findOne({ userId: existingUser._id });
    const isPasswordCorrect = await bcrypt.compare(password, existingUser.password);
    if (!isPasswordCorrect) {
      res.status(400).json({ message: "Invalid credentials" });
      return;
    }
    const token = jwt.sign(
      { email: existingUser.email, id: existingUser._id },
      SECRET,
      { expiresIn: "1h" }
    );
    res.status(200).json({ result: existingUser, userProfile, token });
  } catch (error) {
    res.status(500).json({
      message: error instanceof Error ? error.message : "Something went wrong"
    });
  }
};
var signup = async (req, res) => {
  const { email, password, confirmPassword, firstName, lastName, bio } = req.body;
  console.log(req.body);
  try {
    const existingUser = await userModel_default.findOne({ email });
    if (existingUser) {
      res.status(400).json({ message: "User already exists" });
      return;
    }
    if (password !== confirmPassword) {
      res.status(400).json({ message: "Passwords don't match" });
      return;
    }
    const hashedPassword = await bcrypt.hash(password, 12);
    const result = await userModel_default.create({
      email,
      password: hashedPassword,
      name: `${firstName} ${lastName}`,
      bio
    }).then((doc) => doc.toObject());
    const userProfile = await profileModel_default.findOne({ userId: result._id });
    const token = jwt.sign(
      { email: result.email, id: result._id },
      SECRET,
      { expiresIn: "1h" }
    );
    res.status(200).json({ result, userProfile, token });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: error instanceof Error ? error.message : "Something went wrong"
    });
  }
};
var forgotPassword = async (req, res) => {
  const { email } = req.body;
  const transporter2 = nodemailer.createTransport({
    host: HOST,
    port: Number(PORT),
    auth: {
      user: USER,
      pass: PASS
    },
    tls: {
      rejectUnauthorized: false
    }
  });
  try {
    const buffer = await new Promise((resolve, reject) => {
      crypto.randomBytes(32, (err, buffer2) => {
        if (err) reject(err);
        resolve(buffer2);
      });
    });
    const token = buffer.toString("hex");
    const user = await userModel_default.findOne({ email });
    if (!user) {
      res.status(422).json({ error: "User does not exist in our database" });
      return;
    }
    user.resetToken = token;
    user.expireToken = Date.now() + 36e5;
    await user.save();
    await transporter2.sendMail({
      to: user.email,
      from: "Accountill <hello@accountill.com>",
      subject: "Password reset request",
      html: `
        <p>You requested for password reset from Arc Invoicing application</p>
        <h5>Please click this <a href="https://accountill.com/reset/${token}">link</a> to reset your password</h5>
        <p>Link not clickable?, copy and paste the following url in your address bar.</p>
        <p>https://accountill.com/reset/${token}</p>
        <P>If this was a mistake, just ignore this email and nothing will happen.</P>
      `
    });
    res.json({ message: "Check your email" });
  } catch (error) {
    res.status(500).json({
      message: error instanceof Error ? error.message : "Something went wrong"
    });
  }
};
var resetPassword = async (req, res) => {
  const { password, token: sentToken } = req.body;
  try {
    const user = await userModel_default.findOne({
      resetToken: sentToken,
      expireToken: { $gt: Date.now() }
    });
    if (!user) {
      res.status(422).json({ error: "Try again session expired" });
      return;
    }
    const hashedPassword = await bcrypt.hash(password, 12);
    user.password = hashedPassword;
    user.resetToken = void 0;
    user.expireToken = void 0;
    await user.save();
    res.json({ message: "Password updated successfully" });
  } catch (error) {
    res.status(500).json({
      message: error instanceof Error ? error.message : "Something went wrong"
    });
  }
};

// src/routes/userRoutes.ts
var router3 = import_express3.default.Router();
router3.post("/signin", signin);
router3.post("/signup", signup);
router3.post("/forgot", forgotPassword);
router3.post("/reset", resetPassword);
var userRoutes_default = router3;

// src/routes/profile.ts
var import_express4 = __toESM(require_express2(), 1);

// src/controllers/profile.ts
import mongoose8 from "mongoose";
var getProfiles = async (req, res) => {
  try {
    const allProfiles = await profileModel_default.find().sort({ _id: -1 });
    res.status(200).json({ data: allProfiles });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getProfile = async (req, res) => {
  const { id } = req.params;
  if (!mongoose8.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "Invalid profile ID" });
    return;
  }
  try {
    const profile = await profileModel_default.findById(id);
    if (!profile) {
      res.status(404).json({ message: "Profile not found" });
      return;
    }
    res.status(200).json({ data: profile });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var createProfile = async (req, res) => {
  const profileData = req.body;
  const newProfile = new profileModel_default(profileData);
  try {
    const existingUser = await profileModel_default.findOne({
      email: profileData.email
    });
    if (existingUser) {
      res.status(409).json({ message: "Profile already exists" });
      return;
    }
    await newProfile.save();
    res.status(201).json({ data: profileData });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getProfilesByUser = async (req, res) => {
  const { searchQuery } = req.query;
  try {
    const profile = await profileModel_default.findOne({ userId: searchQuery });
    res.json({ data: profile });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var updateProfile = async (req, res) => {
  const { id: _id } = req.params;
  const profile = req.body;
  if (!mongoose8.Types.ObjectId.isValid(_id)) {
    res.status(404).send("No profile with that id");
    return;
  }
  try {
    const updatedProfile = await profileModel_default.findByIdAndUpdate(
      _id,
      { ...profile, _id },
      { new: true }
    );
    if (!updatedProfile) {
      res.status(404).json({ message: "Profile not found" });
      return;
    }
    res.json(updatedProfile);
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var deleteProfile = async (req, res) => {
  const { id } = req.params;
  if (!mongoose8.Types.ObjectId.isValid(id)) {
    res.status(404).send(`No profile with id: ${id}`);
    return;
  }
  try {
    const deletedProfile = await profileModel_default.findByIdAndRemove(id);
    if (!deletedProfile) {
      res.status(404).json({ message: "Profile not found" });
      return;
    }
    res.json({ message: "Profile deleted successfully." });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};

// src/routes/profile.ts
var router4 = import_express4.default.Router();
router4.get("/:id", getProfile);
router4.get("/", getProfiles);
router4.get("/", getProfilesByUser);
router4.post("/", createProfile);
router4.patch("/:id", updateProfile);
router4.delete("/:id", deleteProfile);
var profile_default = router4;

// src/routes/inventory.ts
var import_express5 = __toESM(require_express2(), 1);

// src/controllers/inventory.ts
import mongoose9 from "mongoose";
var checkStockThreshold2 = async (inventoryItem) => {
  if (inventoryItem.quantity < inventoryItem.threshold) {
    console.log(
      `Alert: Stock for ${inventoryItem.itemName} is below the threshold! Current quantity: ${inventoryItem.quantity}`
    );
  }
};
var createInventoryItem = async (req, res) => {
  const {
    itemName,
    sku,
    quantity,
    unitPrice,
    supplier,
    category,
    threshold,
    description,
    creator
  } = req.body;
  try {
    const newItem = new inventoryModel_default({
      itemName,
      sku,
      quantity,
      unitPrice,
      supplier,
      category,
      threshold,
      description,
      creator
    });
    const savedItem = await newItem.save();
    await checkStockThreshold2(savedItem);
    res.status(201).json({ message: `${savedItem._id} was created` });
  } catch (error) {
    res.status(500).json({
      message: "Error creating inventory item",
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getInventoryItems = async (req, res) => {
  try {
    const items = await inventoryModel_default.find().lean();
    res.status(200).json(items);
  } catch (error) {
    res.status(500).json({
      message: "Error fetching inventory items",
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getInventoryItemById = async (req, res) => {
  const { id } = req.params;
  if (!mongoose9.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "Invalid item ID" });
    return;
  }
  try {
    const item = await inventoryModel_default.findById(id).lean();
    if (!item) {
      res.status(404).json({ message: "Item not found" });
      return;
    }
    res.status(200).json(item);
  } catch (error) {
    res.status(500).json({
      message: "Error fetching item",
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var updateInventoryItem = async (req, res) => {
  const { id } = req.params;
  const {
    itemName,
    quantity,
    unitPrice,
    supplier,
    category,
    threshold,
    description
  } = req.body;
  if (!mongoose9.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "Invalid item ID" });
  }
  try {
    const updatedItem = await inventoryModel_default.findByIdAndUpdate(
      id,
      {
        itemName,
        quantity,
        unitPrice,
        supplier,
        category,
        threshold,
        description
      },
      { new: true }
    );
    if (!updatedItem) {
      res.status(404).json({ message: "Item not found" });
      return;
    }
    await checkStockThreshold2(updatedItem);
    res.status(200).json({ message: `${updatedItem._id} was created` });
  } catch (error) {
    res.status(500).json({
      message: "Error updating item",
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var deleteInventoryItem = async (req, res) => {
  const { id } = req.params;
  if (!mongoose9.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "Invalid item ID" });
    return;
  }
  try {
    const deletedItem = await inventoryModel_default.findByIdAndDelete(id).lean();
    if (!deletedItem) {
      res.status(404).json({ message: "Item not found" });
      return;
    }
    res.status(200).json({ message: "Item deleted successfully" });
  } catch (error) {
    res.status(500).json({
      message: "Error deleting item",
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getInventoryByUser = async (req, res) => {
  const { id } = req.params;
  if (!mongoose9.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "Invalid user ID" });
    return;
  }
  try {
    const inventoryItems = await inventoryModel_default.find({ creator: id }).lean();
    res.status(200).json({ data: inventoryItems });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};

// src/routes/inventory.ts
var router5 = import_express5.default.Router();
router5.post("/", createInventoryItem);
router5.get("/", getInventoryItems);
router5.get("/:id", getInventoryItemById);
router5.get("/user/:id", getInventoryByUser);
router5.put("/:id", updateInventoryItem);
router5.delete("/:id", deleteInventoryItem);
var inventory_default = router5;

// src/routes/expenses.ts
var import_express6 = __toESM(require_express2(), 1);

// src/controllers/expenses.ts
import mongoose11 from "mongoose";

// src/models/expenseModel.ts
import mongoose10 from "mongoose";
var ExpenseSchema = new mongoose10.Schema({
  title: String,
  date: {
    type: Date,
    required: true,
    default: /* @__PURE__ */ new Date()
  },
  category: {
    type: String,
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  description: String,
  paymentMethod: String,
  reference: String,
  creator: String,
  attachments: [String],
  createdAt: {
    type: Date,
    default: /* @__PURE__ */ new Date()
  }
});
var ExpenseModel = mongoose10.model("ExpenseModel", ExpenseSchema);
var expenseModel_default = ExpenseModel;

// src/controllers/expenses.ts
var createExpense = async (req, res) => {
  try {
    const expense = new expenseModel_default(req.body);
    console.log(req.body);
    console.log(expense);
    await expense.save();
    res.status(201).json({ message: `${expense._id} was created` });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var getExpenses = async (req, res) => {
  const { searchQuery } = req.query;
  try {
    const expenses = await expenseModel_default.find({ creator: searchQuery }).sort({ date: -1 });
    console.log(expenses);
    res.status(200).json({ data: expenses });
  } catch (error) {
    res.status(404).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var updateExpense = async (req, res, next) => {
  const { id } = req.params;
  const expense = req.body;
  if (!mongoose11.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: `No expense with ${id}` });
    return;
  }
  try {
    const updatedExpense = await expenseModel_default.findByIdAndUpdate(
      id,
      { ...expense, _id: id },
      { new: true }
    );
    if (!updatedExpense) {
      res.status(404).json({ message: `${id} not found` });
      return;
    }
    res.json(updatedExpense);
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};
var deleteExpense = async (req, res) => {
  const { id } = req.params;
  if (!mongoose11.Types.ObjectId.isValid(id)) {
    res.status(404).json({ message: "No expense with that id" });
    return;
  }
  try {
    const result = await expenseModel_default.findByIdAndRemove(id);
    if (!result) {
      res.status(404).json({ message: "Expense not found" });
      return;
    }
    res.json({ message: "Expense deleted successfully" });
  } catch (error) {
    res.status(409).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
};

// src/routes/expenses.ts
var router6 = import_express6.default.Router();
router6.post("/", createExpense);
router6.get("/", getExpenses);
router6.patch("/:id", updateExpense);
router6.delete("/:id", deleteExpense);
var expenses_default = router6;

// src/routes/pdfs.ts
var import_express7 = __toESM(require_express2(), 1);

// src/controllers/pdfs.ts
import fs2 from "fs";
import nodemailer2 from "nodemailer";

// ../../node_modules/pdfkit/js/pdfkit.es.js
var import_crypto_js = __toESM(require_crypto_js());
import stream from "stream";
import zlib from "zlib";
import fs from "fs";

// ../../node_modules/pdfkit/node_modules/fontkit/dist/module.mjs
var import_restructure = __toESM(require_restructure(), 1);
import { readFileSync as $5OpyM$readFileSync, readFile as $5OpyM$readFile } from "fs";

// ../../node_modules/pdfkit/node_modules/@swc/helpers/src/_apply_decorated_descriptor.js
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object["keys"](descriptor).forEach(function(key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator ? decorator(target, property, desc2) || desc2 : desc2;
  }, desc);
  var hasAccessor = Object.prototype.hasOwnProperty.call(desc, "get") || Object.prototype.hasOwnProperty.call(desc, "set");
  if (context && desc.initializer !== void 0 && !hasAccessor) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }
  if (hasAccessor) {
    delete desc.writable;
    delete desc.initializer;
    delete desc.value;
  }
  if (desc.initializer === void 0) {
    Object["defineProperty"](target, property, desc);
    desc = null;
  }
  return desc;
}

// ../../node_modules/pdfkit/node_modules/fontkit/dist/module.mjs
var import_utils = __toESM(require_utils3(), 1);
var import_deep_equal = __toESM(require_deep_equal(), 1);
var import_iconv_lite = __toESM(require_iconv_lite(), 1);
import { Buffer as $5OpyM$Buffer } from "buffer";

// ../../node_modules/unicode-properties/dist/module.mjs
var import_base64_js = __toESM(require_base64_js(), 1);
var import_unicode_trie = __toESM(require_unicode_trie(), 1);
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $f4087201da764553$exports = {};
$f4087201da764553$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
var $747425b437e121da$var$trie = new (0, import_unicode_trie.default)((0, import_base64_js.default).toByteArray(""));
var $747425b437e121da$var$log2 = Math.log2 || ((n) => Math.log(n) / Math.LN2);
var $747425b437e121da$var$bits = (n) => $747425b437e121da$var$log2(n) + 1 | 0;
var $747425b437e121da$var$CATEGORY_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).categories.length - 1);
var $747425b437e121da$var$COMBINING_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).combiningClasses.length - 1);
var $747425b437e121da$var$SCRIPT_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).scripts.length - 1);
var $747425b437e121da$var$EAW_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).eaw.length - 1);
var $747425b437e121da$var$NUMBER_BITS = 10;
var $747425b437e121da$var$CATEGORY_SHIFT = $747425b437e121da$var$COMBINING_BITS + $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$COMBINING_SHIFT = $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$SCRIPT_SHIFT = $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$EAW_SHIFT = $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$CATEGORY_MASK = (1 << $747425b437e121da$var$CATEGORY_BITS) - 1;
var $747425b437e121da$var$COMBINING_MASK = (1 << $747425b437e121da$var$COMBINING_BITS) - 1;
var $747425b437e121da$var$SCRIPT_MASK = (1 << $747425b437e121da$var$SCRIPT_BITS) - 1;
var $747425b437e121da$var$EAW_MASK = (1 << $747425b437e121da$var$EAW_BITS) - 1;
var $747425b437e121da$var$NUMBER_MASK = (1 << $747425b437e121da$var$NUMBER_BITS) - 1;
function $747425b437e121da$export$410364bbb673ddbc(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).categories[val >> $747425b437e121da$var$CATEGORY_SHIFT & $747425b437e121da$var$CATEGORY_MASK];
}
function $747425b437e121da$export$c03b919c6651ed55(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).combiningClasses[val >> $747425b437e121da$var$COMBINING_SHIFT & $747425b437e121da$var$COMBINING_MASK];
}
function $747425b437e121da$export$941569448d136665(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).scripts[val >> $747425b437e121da$var$SCRIPT_SHIFT & $747425b437e121da$var$SCRIPT_MASK];
}
function $747425b437e121da$export$92f6187db8ca6d26(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).eaw[val >> $747425b437e121da$var$EAW_SHIFT & $747425b437e121da$var$EAW_MASK];
}
function $747425b437e121da$export$7d1258ebb7625a0d(codePoint) {
  let val = $747425b437e121da$var$trie.get(codePoint);
  let num = val & $747425b437e121da$var$NUMBER_MASK;
  if (num === 0) return null;
  else if (num <= 50) return num - 1;
  else if (num < 480) {
    const numerator = (num >> 4) - 12;
    const denominator = (num & 15) + 1;
    return numerator / denominator;
  } else if (num < 768) {
    val = (num >> 5) - 14;
    let exp = (num & 31) + 2;
    while (exp > 0) {
      val *= 10;
      exp--;
    }
    return val;
  } else {
    val = (num >> 2) - 191;
    let exp = (num & 3) + 1;
    while (exp > 0) {
      val *= 60;
      exp--;
    }
    return val;
  }
}
function $747425b437e121da$export$52c8ea63abd07594(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
}
function $747425b437e121da$export$727d9dbc4fbb948f(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Nd";
}
function $747425b437e121da$export$a5b49f4dc6a07d2c(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
}
function $747425b437e121da$export$7b6804e8df61fcf5(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Ll";
}
function $747425b437e121da$export$aebd617640818cda(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lu";
}
function $747425b437e121da$export$de8b4ee23b2cf823(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lt";
}
function $747425b437e121da$export$3c52dd84024ae72c(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Zs" || category === "Zl" || category === "Zp";
}
function $747425b437e121da$export$a11bdcffe109e74b(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
}
function $747425b437e121da$export$e33ad6871e762338(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Mn" || category === "Me" || category === "Mc";
}
var $747425b437e121da$export$2e2bcd8739ae039 = {
  getCategory: $747425b437e121da$export$410364bbb673ddbc,
  getCombiningClass: $747425b437e121da$export$c03b919c6651ed55,
  getScript: $747425b437e121da$export$941569448d136665,
  getEastAsianWidth: $747425b437e121da$export$92f6187db8ca6d26,
  getNumericValue: $747425b437e121da$export$7d1258ebb7625a0d,
  isAlphabetic: $747425b437e121da$export$52c8ea63abd07594,
  isDigit: $747425b437e121da$export$727d9dbc4fbb948f,
  isPunctuation: $747425b437e121da$export$a5b49f4dc6a07d2c,
  isLowerCase: $747425b437e121da$export$7b6804e8df61fcf5,
  isUpperCase: $747425b437e121da$export$aebd617640818cda,
  isTitleCase: $747425b437e121da$export$de8b4ee23b2cf823,
  isWhiteSpace: $747425b437e121da$export$3c52dd84024ae72c,
  isBaseForm: $747425b437e121da$export$a11bdcffe109e74b,
  isMark: $747425b437e121da$export$e33ad6871e762338
};

// ../../node_modules/pdfkit/node_modules/fontkit/dist/module.mjs
var import_unicode_trie2 = __toESM(require_unicode_trie(), 1);
var import_dfa = __toESM(require_dfa(), 1);
var import_clone = __toESM(require_clone(), 1);
var import_tiny_inflate = __toESM(require_tiny_inflate(), 1);
var import_decompress = __toESM(require_decompress(), 1);
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
function $parcel$interopDefault2(a) {
  return a && a.__esModule ? a.default : a;
}
var $8857867ee3ddfad5$exports = {};
$parcel$export($8857867ee3ddfad5$exports, "logErrors", () => $8857867ee3ddfad5$export$bd5c5d8b8dcafd78);
$parcel$export($8857867ee3ddfad5$exports, "registerFormat", () => $8857867ee3ddfad5$export$36b2f24e97d43be);
$parcel$export($8857867ee3ddfad5$exports, "openSync", () => $8857867ee3ddfad5$export$fa5499edb1ab414a);
$parcel$export($8857867ee3ddfad5$exports, "create", () => $8857867ee3ddfad5$export$185802fd694ee1f5);
$parcel$export($8857867ee3ddfad5$exports, "open", () => $8857867ee3ddfad5$export$3ce6949f20cea765);
$parcel$export($8857867ee3ddfad5$exports, "defaultLanguage", () => $8857867ee3ddfad5$export$42940898df819940);
$parcel$export($8857867ee3ddfad5$exports, "setDefaultLanguage", () => $8857867ee3ddfad5$export$5157e7780d44cc36);
var $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 = false;
var $8857867ee3ddfad5$var$formats = [];
function $8857867ee3ddfad5$export$36b2f24e97d43be(format) {
  $8857867ee3ddfad5$var$formats.push(format);
}
function $8857867ee3ddfad5$export$fa5499edb1ab414a(filename, postscriptName) {
  let buffer = $5OpyM$readFileSync(filename);
  return $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
}
function $8857867ee3ddfad5$export$3ce6949f20cea765(filename, postscriptName, callback) {
  if (typeof postscriptName === "function") {
    callback = postscriptName;
    postscriptName = null;
  }
  $5OpyM$readFile(filename, function(err, buffer) {
    if (err) return callback(err);
    try {
      var font = $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
    } catch (e) {
      return callback(e);
    }
    return callback(null, font);
  });
  return;
}
function $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName) {
  for (let i = 0; i < $8857867ee3ddfad5$var$formats.length; i++) {
    let format = $8857867ee3ddfad5$var$formats[i];
    if (format.probe(buffer)) {
      let font = new format(new import_restructure.default.DecodeStream(buffer));
      if (postscriptName) return font.getFont(postscriptName);
      return font;
    }
  }
  throw new Error("Unknown font format");
}
var $8857867ee3ddfad5$export$42940898df819940 = "en";
function $8857867ee3ddfad5$export$5157e7780d44cc36(lang = "en") {
  $8857867ee3ddfad5$export$42940898df819940 = lang;
}
function $df9bc573962369ff$export$69a3209f1a06c04d(target, key1, descriptor) {
  if (descriptor.get) {
    let get = descriptor.get;
    descriptor.get = function() {
      let value = get.call(this);
      Object.defineProperty(this, key1, {
        value
      });
      return value;
    };
  } else if (typeof descriptor.value === "function") {
    let fn = descriptor.value;
    return {
      get() {
        let $df9bc573962369ff$export$69a3209f1a06c04d2 = /* @__PURE__ */ new Map();
        function memoized(...args) {
          let key = args.length > 0 ? args[0] : "value";
          if ($df9bc573962369ff$export$69a3209f1a06c04d2.has(key)) return $df9bc573962369ff$export$69a3209f1a06c04d2.get(key);
          let result = fn.apply(this, args);
          $df9bc573962369ff$export$69a3209f1a06c04d2.set(key, result);
          return result;
        }
        Object.defineProperty(this, key1, {
          value: memoized
        });
        return memoized;
      }
    };
  }
}
var $9aad45a64cf8e4b5$var$SubHeader = new import_restructure.default.Struct({
  firstCode: import_restructure.default.uint16,
  entryCount: import_restructure.default.uint16,
  idDelta: import_restructure.default.int16,
  idRangeOffset: import_restructure.default.uint16
});
var $9aad45a64cf8e4b5$var$CmapGroup = new import_restructure.default.Struct({
  startCharCode: import_restructure.default.uint32,
  endCharCode: import_restructure.default.uint32,
  glyphID: import_restructure.default.uint32
});
var $9aad45a64cf8e4b5$var$UnicodeValueRange = new import_restructure.default.Struct({
  startUnicodeValue: import_restructure.default.uint24,
  additionalCount: import_restructure.default.uint8
});
var $9aad45a64cf8e4b5$var$UVSMapping = new import_restructure.default.Struct({
  unicodeValue: import_restructure.default.uint24,
  glyphID: import_restructure.default.uint16
});
var $9aad45a64cf8e4b5$var$DefaultUVS = new import_restructure.default.Array($9aad45a64cf8e4b5$var$UnicodeValueRange, import_restructure.default.uint32);
var $9aad45a64cf8e4b5$var$NonDefaultUVS = new import_restructure.default.Array($9aad45a64cf8e4b5$var$UVSMapping, import_restructure.default.uint32);
var $9aad45a64cf8e4b5$var$VarSelectorRecord = new import_restructure.default.Struct({
  varSelector: import_restructure.default.uint24,
  defaultUVS: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$DefaultUVS, {
    type: "parent"
  }),
  nonDefaultUVS: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$NonDefaultUVS, {
    type: "parent"
  })
});
var $9aad45a64cf8e4b5$var$CmapSubtable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    codeMap: new import_restructure.default.LazyArray(import_restructure.default.uint8, 256)
  },
  2: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    subHeaderKeys: new import_restructure.default.Array(import_restructure.default.uint16, 256),
    subHeaderCount: (t) => Math.max.apply(Math, t.subHeaderKeys),
    subHeaders: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$SubHeader, "subHeaderCount"),
    glyphIndexArray: new import_restructure.default.LazyArray(import_restructure.default.uint16, "subHeaderCount")
  },
  4: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    segCountX2: import_restructure.default.uint16,
    segCount: (t) => t.segCountX2 >> 1,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16,
    endCode: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    reservedPad: new import_restructure.default.Reserved(import_restructure.default.uint16),
    startCode: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    idDelta: new import_restructure.default.LazyArray(import_restructure.default.int16, "segCount"),
    idRangeOffset: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    glyphIndexArray: new import_restructure.default.LazyArray(
      import_restructure.default.uint16,
      (t) => (t.length - t._currentOffset) / 2
    )
  },
  6: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    firstCode: import_restructure.default.uint16,
    entryCount: import_restructure.default.uint16,
    glyphIndices: new import_restructure.default.LazyArray(import_restructure.default.uint16, "entryCount")
  },
  8: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint16,
    is32: new import_restructure.default.LazyArray(import_restructure.default.uint8, 8192),
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  10: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    firstCode: import_restructure.default.uint32,
    entryCount: import_restructure.default.uint32,
    glyphIndices: new import_restructure.default.LazyArray(import_restructure.default.uint16, "numChars")
  },
  12: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  13: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  14: {
    length: import_restructure.default.uint32,
    numRecords: import_restructure.default.uint32,
    varSelectors: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$VarSelectorRecord, "numRecords")
  }
});
var $9aad45a64cf8e4b5$var$CmapEntry = new import_restructure.default.Struct({
  platformID: import_restructure.default.uint16,
  encodingID: import_restructure.default.uint16,
  table: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$CmapSubtable, {
    type: "parent",
    lazy: true
  })
});
var $9aad45a64cf8e4b5$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numSubtables: import_restructure.default.uint16,
  tables: new import_restructure.default.Array($9aad45a64cf8e4b5$var$CmapEntry, "numSubtables")
});
var $b41847595480ce3a$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  revision: import_restructure.default.int32,
  checkSumAdjustment: import_restructure.default.uint32,
  magicNumber: import_restructure.default.uint32,
  flags: import_restructure.default.uint16,
  unitsPerEm: import_restructure.default.uint16,
  created: new import_restructure.default.Array(import_restructure.default.int32, 2),
  modified: new import_restructure.default.Array(import_restructure.default.int32, 2),
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16,
  macStyle: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "bold",
    "italic",
    "underline",
    "outline",
    "shadow",
    "condensed",
    "extended"
  ]),
  lowestRecPPEM: import_restructure.default.uint16,
  fontDirectionHint: import_restructure.default.int16,
  indexToLocFormat: import_restructure.default.int16,
  glyphDataFormat: import_restructure.default.int16
  // 0 for current format
});
var $5fda302e2516d0c7$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  ascent: import_restructure.default.int16,
  descent: import_restructure.default.int16,
  lineGap: import_restructure.default.int16,
  advanceWidthMax: import_restructure.default.uint16,
  minLeftSideBearing: import_restructure.default.int16,
  minRightSideBearing: import_restructure.default.int16,
  xMaxExtent: import_restructure.default.int16,
  caretSlopeRise: import_restructure.default.int16,
  caretSlopeRun: import_restructure.default.int16,
  caretOffset: import_restructure.default.int16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.int16, 4),
  metricDataFormat: import_restructure.default.int16,
  numberOfMetrics: import_restructure.default.uint16
  // Number of advance widths in 'hmtx' table
});
var $28788c978325a3e1$var$HmtxEntry = new import_restructure.default.Struct({
  advance: import_restructure.default.uint16,
  bearing: import_restructure.default.int16
});
var $28788c978325a3e1$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  metrics: new import_restructure.default.LazyArray(
    $28788c978325a3e1$var$HmtxEntry,
    (t) => t.parent.hhea.numberOfMetrics
  ),
  bearings: new import_restructure.default.LazyArray(
    import_restructure.default.int16,
    (t) => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics
  )
});
var $9e68d972c1fae2a9$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  numGlyphs: import_restructure.default.uint16,
  maxPoints: import_restructure.default.uint16,
  maxContours: import_restructure.default.uint16,
  maxComponentPoints: import_restructure.default.uint16,
  maxComponentContours: import_restructure.default.uint16,
  maxZones: import_restructure.default.uint16,
  maxTwilightPoints: import_restructure.default.uint16,
  maxStorage: import_restructure.default.uint16,
  maxFunctionDefs: import_restructure.default.uint16,
  maxInstructionDefs: import_restructure.default.uint16,
  maxStackElements: import_restructure.default.uint16,
  maxSizeOfInstructions: import_restructure.default.uint16,
  maxComponentElements: import_restructure.default.uint16,
  maxComponentDepth: import_restructure.default.uint16
  // Maximum levels of recursion; 1 for simple components
});
function $111d7d948974b54a$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
  if (platformID === 1 && $111d7d948974b54a$export$479e671907f486d1[languageID]) return $111d7d948974b54a$export$479e671907f486d1[languageID];
  return $111d7d948974b54a$export$6fef87b7618bdf0b[platformID][encodingID];
}
var $111d7d948974b54a$export$6fef87b7618bdf0b = [
  // unicode
  [
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be"
  ],
  // macintosh
  // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
  // 0	Roman                 17	Malayalam
  // 1	Japanese	            18	Sinhalese
  // 2	Traditional Chinese	  19	Burmese
  // 3	Korean	              20	Khmer
  // 4	Arabic	              21	Thai
  // 5	Hebrew	              22	Laotian
  // 6	Greek	                23	Georgian
  // 7	Russian	              24	Armenian
  // 8	RSymbol	              25	Simplified Chinese
  // 9	Devanagari	          26	Tibetan
  // 10	Gurmukhi	            27	Mongolian
  // 11	Gujarati	            28	Geez
  // 12	Oriya	                29	Slavic
  // 13	Bengali	              30	Vietnamese
  // 14	Tamil	                31	Sindhi
  // 15	Telugu	              32	(Uninterpreted)
  // 16	Kannada
  [
    "macroman",
    "shift-jis",
    "big5",
    "euc-kr",
    "iso-8859-6",
    "iso-8859-8",
    "macgreek",
    "maccyrillic",
    "symbol",
    "Devanagari",
    "Gurmukhi",
    "Gujarati",
    "Oriya",
    "Bengali",
    "Tamil",
    "Telugu",
    "Kannada",
    "Malayalam",
    "Sinhalese",
    "Burmese",
    "Khmer",
    "macthai",
    "Laotian",
    "Georgian",
    "Armenian",
    "gb-2312-80",
    "Tibetan",
    "Mongolian",
    "Geez",
    "maccenteuro",
    "Vietnamese",
    "Sindhi"
  ],
  // ISO (deprecated)
  [
    "ascii"
  ],
  // windows
  // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
  [
    "symbol",
    "utf16be",
    "shift-jis",
    "gb18030",
    "big5",
    "wansung",
    "johab",
    null,
    null,
    null,
    "utf16be"
  ]
];
var $111d7d948974b54a$export$479e671907f486d1 = {
  15: "maciceland",
  17: "macturkish",
  18: "maccroatian",
  24: "maccenteuro",
  25: "maccenteuro",
  26: "maccenteuro",
  27: "maccenteuro",
  28: "maccenteuro",
  30: "maciceland",
  37: "macromania",
  38: "maccenteuro",
  39: "maccenteuro",
  40: "maccenteuro",
  143: "macinuit",
  146: "macgaelic"
  // Unsupported by iconv-lite
};
var $111d7d948974b54a$export$2092376fd002e13 = [
  // unicode
  [],
  {
    0: "en",
    30: "fo",
    60: "ks",
    90: "rw",
    1: "fr",
    31: "fa",
    61: "ku",
    91: "rn",
    2: "de",
    32: "ru",
    62: "sd",
    92: "ny",
    3: "it",
    33: "zh",
    63: "bo",
    93: "mg",
    4: "nl",
    34: "nl-BE",
    64: "ne",
    94: "eo",
    5: "sv",
    35: "ga",
    65: "sa",
    128: "cy",
    6: "es",
    36: "sq",
    66: "mr",
    129: "eu",
    7: "da",
    37: "ro",
    67: "bn",
    130: "ca",
    8: "pt",
    38: "cz",
    68: "as",
    131: "la",
    9: "no",
    39: "sk",
    69: "gu",
    132: "qu",
    10: "he",
    40: "si",
    70: "pa",
    133: "gn",
    11: "ja",
    41: "yi",
    71: "or",
    134: "ay",
    12: "ar",
    42: "sr",
    72: "ml",
    135: "tt",
    13: "fi",
    43: "mk",
    73: "kn",
    136: "ug",
    14: "el",
    44: "bg",
    74: "ta",
    137: "dz",
    15: "is",
    45: "uk",
    75: "te",
    138: "jv",
    16: "mt",
    46: "be",
    76: "si",
    139: "su",
    17: "tr",
    47: "uz",
    77: "my",
    140: "gl",
    18: "hr",
    48: "kk",
    78: "km",
    141: "af",
    19: "zh-Hant",
    49: "az-Cyrl",
    79: "lo",
    142: "br",
    20: "ur",
    50: "az-Arab",
    80: "vi",
    143: "iu",
    21: "hi",
    51: "hy",
    81: "id",
    144: "gd",
    22: "th",
    52: "ka",
    82: "tl",
    145: "gv",
    23: "ko",
    53: "mo",
    83: "ms",
    146: "ga",
    24: "lt",
    54: "ky",
    84: "ms-Arab",
    147: "to",
    25: "pl",
    55: "tg",
    85: "am",
    148: "el-polyton",
    26: "hu",
    56: "tk",
    86: "ti",
    149: "kl",
    27: "es",
    57: "mn-CN",
    87: "om",
    150: "az",
    28: "lv",
    58: "mn",
    88: "so",
    151: "nn",
    29: "se",
    59: "ps",
    89: "sw"
  },
  // ISO (deprecated)
  [],
  {
    1078: "af",
    16393: "en-IN",
    1159: "rw",
    1074: "tn",
    1052: "sq",
    6153: "en-IE",
    1089: "sw",
    1115: "si",
    1156: "gsw",
    8201: "en-JM",
    1111: "kok",
    1051: "sk",
    1118: "am",
    17417: "en-MY",
    1042: "ko",
    1060: "sl",
    5121: "ar-DZ",
    5129: "en-NZ",
    1088: "ky",
    11274: "es-AR",
    15361: "ar-BH",
    13321: "en-PH",
    1108: "lo",
    16394: "es-BO",
    3073: "ar",
    18441: "en-SG",
    1062: "lv",
    13322: "es-CL",
    2049: "ar-IQ",
    7177: "en-ZA",
    1063: "lt",
    9226: "es-CO",
    11265: "ar-JO",
    11273: "en-TT",
    2094: "dsb",
    5130: "es-CR",
    13313: "ar-KW",
    2057: "en-GB",
    1134: "lb",
    7178: "es-DO",
    12289: "ar-LB",
    1033: "en",
    1071: "mk",
    12298: "es-EC",
    4097: "ar-LY",
    12297: "en-ZW",
    2110: "ms-BN",
    17418: "es-SV",
    6145: "ary",
    1061: "et",
    1086: "ms",
    4106: "es-GT",
    8193: "ar-OM",
    1080: "fo",
    1100: "ml",
    18442: "es-HN",
    16385: "ar-QA",
    1124: "fil",
    1082: "mt",
    2058: "es-MX",
    1025: "ar-SA",
    1035: "fi",
    1153: "mi",
    19466: "es-NI",
    10241: "ar-SY",
    2060: "fr-BE",
    1146: "arn",
    6154: "es-PA",
    7169: "aeb",
    3084: "fr-CA",
    1102: "mr",
    15370: "es-PY",
    14337: "ar-AE",
    1036: "fr",
    1148: "moh",
    10250: "es-PE",
    9217: "ar-YE",
    5132: "fr-LU",
    1104: "mn",
    20490: "es-PR",
    1067: "hy",
    6156: "fr-MC",
    2128: "mn-CN",
    3082: "es",
    1101: "as",
    4108: "fr-CH",
    1121: "ne",
    1034: "es",
    2092: "az-Cyrl",
    1122: "fy",
    1044: "nb",
    21514: "es-US",
    1068: "az",
    1110: "gl",
    2068: "nn",
    14346: "es-UY",
    1133: "ba",
    1079: "ka",
    1154: "oc",
    8202: "es-VE",
    1069: "eu",
    3079: "de-AT",
    1096: "or",
    2077: "sv-FI",
    1059: "be",
    1031: "de",
    1123: "ps",
    1053: "sv",
    2117: "bn",
    5127: "de-LI",
    1045: "pl",
    1114: "syr",
    1093: "bn-IN",
    4103: "de-LU",
    1046: "pt",
    1064: "tg",
    8218: "bs-Cyrl",
    2055: "de-CH",
    2070: "pt-PT",
    2143: "tzm",
    5146: "bs",
    1032: "el",
    1094: "pa",
    1097: "ta",
    1150: "br",
    1135: "kl",
    1131: "qu-BO",
    1092: "tt",
    1026: "bg",
    1095: "gu",
    2155: "qu-EC",
    1098: "te",
    1027: "ca",
    1128: "ha",
    3179: "qu",
    1054: "th",
    3076: "zh-HK",
    1037: "he",
    1048: "ro",
    1105: "bo",
    5124: "zh-MO",
    1081: "hi",
    1047: "rm",
    1055: "tr",
    2052: "zh",
    1038: "hu",
    1049: "ru",
    1090: "tk",
    4100: "zh-SG",
    1039: "is",
    9275: "smn",
    1152: "ug",
    1028: "zh-TW",
    1136: "ig",
    4155: "smj-NO",
    1058: "uk",
    1155: "co",
    1057: "id",
    5179: "smj",
    1070: "hsb",
    1050: "hr",
    1117: "iu",
    3131: "se-FI",
    1056: "ur",
    4122: "hr-BA",
    2141: "iu-Latn",
    1083: "se",
    2115: "uz-Cyrl",
    1029: "cs",
    2108: "ga",
    2107: "se-SE",
    1091: "uz",
    1030: "da",
    1076: "xh",
    8251: "sms",
    1066: "vi",
    1164: "prs",
    1077: "zu",
    6203: "sma-NO",
    1106: "cy",
    1125: "dv",
    1040: "it",
    7227: "sms",
    1160: "wo",
    2067: "nl-BE",
    2064: "it-CH",
    1103: "sa",
    1157: "sah",
    1043: "nl",
    1041: "ja",
    7194: "sr-Cyrl-BA",
    1144: "ii",
    3081: "en-AU",
    1099: "kn",
    3098: "sr",
    1130: "yo",
    10249: "en-BZ",
    1087: "kk",
    6170: "sr-Latn-BA",
    4105: "en-CA",
    1107: "km",
    2074: "sr-Latn",
    9225: "en-029",
    1158: "quc",
    1132: "nso"
  }
];
var $866b9b7dd32d7242$require$Buffer = $5OpyM$Buffer;
var $866b9b7dd32d7242$var$NameRecord = new import_restructure.default.Struct({
  platformID: import_restructure.default.uint16,
  encodingID: import_restructure.default.uint16,
  languageID: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16,
  length: import_restructure.default.uint16,
  string: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.String(
    "length",
    (t) => $111d7d948974b54a$export$badc544e0651b6b1(t.platformID, t.encodingID, t.languageID)
  ), {
    type: "parent",
    relativeTo: (ctx) => ctx.parent.stringOffset,
    allowNull: false
  })
});
var $866b9b7dd32d7242$var$LangTagRecord = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  tag: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.String("length", "utf16be"), {
    type: "parent",
    relativeTo: (ctx) => ctx.stringOffset
  })
});
var $866b9b7dd32d7242$var$NameTable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    count: import_restructure.default.uint16,
    stringOffset: import_restructure.default.uint16,
    records: new import_restructure.default.Array($866b9b7dd32d7242$var$NameRecord, "count")
  },
  1: {
    count: import_restructure.default.uint16,
    stringOffset: import_restructure.default.uint16,
    records: new import_restructure.default.Array($866b9b7dd32d7242$var$NameRecord, "count"),
    langTagCount: import_restructure.default.uint16,
    langTags: new import_restructure.default.Array($866b9b7dd32d7242$var$LangTagRecord, "langTagCount")
  }
});
var $866b9b7dd32d7242$export$2e2bcd8739ae039 = $866b9b7dd32d7242$var$NameTable;
var $866b9b7dd32d7242$var$NAMES = [
  "copyright",
  "fontFamily",
  "fontSubfamily",
  "uniqueSubfamily",
  "fullName",
  "version",
  "postscriptName",
  "trademark",
  "manufacturer",
  "designer",
  "description",
  "vendorURL",
  "designerURL",
  "license",
  "licenseURL",
  null,
  "preferredFamily",
  "preferredSubfamily",
  "compatibleFull",
  "sampleText",
  "postscriptCIDFontName",
  "wwsFamilyName",
  "wwsSubfamilyName"
];
$866b9b7dd32d7242$var$NameTable.process = function(stream2) {
  var records = {};
  for (let record of this.records) {
    let language = $111d7d948974b54a$export$2092376fd002e13[record.platformID][record.languageID];
    if (language == null && this.langTags != null && record.languageID >= 32768) language = this.langTags[record.languageID - 32768].tag;
    if (language == null) language = record.platformID + "-" + record.languageID;
    let key = record.nameID >= 256 ? "fontFeatures" : $866b9b7dd32d7242$var$NAMES[record.nameID] || record.nameID;
    if (records[key] == null) records[key] = {};
    let obj = records[key];
    if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});
    if (typeof record.string === "string" || typeof obj[language] !== "string") obj[language] = record.string;
  }
  this.records = records;
};
$866b9b7dd32d7242$var$NameTable.preEncode = function() {
  if (Array.isArray(this.records)) return;
  this.version = 0;
  let records = [];
  for (let key in this.records) {
    let val = this.records[key];
    if (key === "fontFeatures") continue;
    records.push({
      platformID: 3,
      encodingID: 1,
      languageID: 1033,
      nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
      length: $866b9b7dd32d7242$require$Buffer.byteLength(val.en, "utf16le"),
      string: val.en
    });
    if (key === "postscriptName") records.push({
      platformID: 1,
      encodingID: 0,
      languageID: 0,
      nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
      length: val.en.length,
      string: val.en
    });
  }
  this.records = records;
  this.count = records.length;
  this.stringOffset = $866b9b7dd32d7242$var$NameTable.size(this, null, false);
};
var $268023eac606db57$var$OS2 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    xAvgCharWidth: import_restructure.default.int16,
    usWeightClass: import_restructure.default.uint16,
    usWidthClass: import_restructure.default.uint16,
    fsType: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
      null,
      "noEmbedding",
      "viewOnly",
      "editable",
      null,
      null,
      null,
      null,
      "noSubsetting",
      "bitmapOnly"
    ]),
    ySubscriptXSize: import_restructure.default.int16,
    ySubscriptYSize: import_restructure.default.int16,
    ySubscriptXOffset: import_restructure.default.int16,
    ySubscriptYOffset: import_restructure.default.int16,
    ySuperscriptXSize: import_restructure.default.int16,
    ySuperscriptYSize: import_restructure.default.int16,
    ySuperscriptXOffset: import_restructure.default.int16,
    ySuperscriptYOffset: import_restructure.default.int16,
    yStrikeoutSize: import_restructure.default.int16,
    yStrikeoutPosition: import_restructure.default.int16,
    sFamilyClass: import_restructure.default.int16,
    panose: new import_restructure.default.Array(import_restructure.default.uint8, 10),
    ulCharRange: new import_restructure.default.Array(import_restructure.default.uint32, 4),
    vendorID: new import_restructure.default.String(4),
    fsSelection: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
      "italic",
      "underscore",
      "negative",
      "outlined",
      "strikeout",
      "bold",
      "regular",
      "useTypoMetrics",
      "wws",
      "oblique"
    ]),
    usFirstCharIndex: import_restructure.default.uint16,
    usLastCharIndex: import_restructure.default.uint16
    // The maximum Unicode index in this font
  },
  // The Apple version of this table ends here, but the Microsoft one continues on...
  0: {},
  1: {
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2)
  },
  2: {
    // these should be common with version 1 somehow
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2),
    xHeight: import_restructure.default.int16,
    capHeight: import_restructure.default.int16,
    defaultChar: import_restructure.default.uint16,
    breakChar: import_restructure.default.uint16,
    maxContent: import_restructure.default.uint16
  },
  5: {
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2),
    xHeight: import_restructure.default.int16,
    capHeight: import_restructure.default.int16,
    defaultChar: import_restructure.default.uint16,
    breakChar: import_restructure.default.uint16,
    maxContent: import_restructure.default.uint16,
    usLowerOpticalPointSize: import_restructure.default.uint16,
    usUpperOpticalPointSize: import_restructure.default.uint16
  }
});
var $268023eac606db57$var$versions = $268023eac606db57$var$OS2.versions;
$268023eac606db57$var$versions[3] = $268023eac606db57$var$versions[4] = $268023eac606db57$var$versions[2];
var $268023eac606db57$export$2e2bcd8739ae039 = $268023eac606db57$var$OS2;
var $5287343c85bea17e$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.fixed32, {
  header: {
    italicAngle: import_restructure.default.fixed32,
    underlinePosition: import_restructure.default.int16,
    underlineThickness: import_restructure.default.int16,
    isFixedPitch: import_restructure.default.uint32,
    minMemType42: import_restructure.default.uint32,
    maxMemType42: import_restructure.default.uint32,
    minMemType1: import_restructure.default.uint32,
    maxMemType1: import_restructure.default.uint32
    // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
  },
  1: {},
  2: {
    numberOfGlyphs: import_restructure.default.uint16,
    glyphNameIndex: new import_restructure.default.Array(import_restructure.default.uint16, "numberOfGlyphs"),
    names: new import_restructure.default.Array(new import_restructure.default.String(import_restructure.default.uint8))
  },
  2.5: {
    numberOfGlyphs: import_restructure.default.uint16,
    offsets: new import_restructure.default.Array(import_restructure.default.uint8, "numberOfGlyphs")
  },
  3: {},
  4: {
    map: new import_restructure.default.Array(
      import_restructure.default.uint32,
      (t) => t.parent.maxp.numGlyphs
    )
  }
});
var $5768e6ef8b1a512a$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  controlValues: new import_restructure.default.Array(import_restructure.default.int16)
});
var $6f2fae1f8d2b4b41$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  instructions: new import_restructure.default.Array(import_restructure.default.uint8)
});
var $cae48a5e791773ec$var$loca = new import_restructure.default.VersionedStruct("head.indexToLocFormat", {
  0: {
    offsets: new import_restructure.default.Array(import_restructure.default.uint16)
  },
  1: {
    offsets: new import_restructure.default.Array(import_restructure.default.uint32)
  }
});
$cae48a5e791773ec$var$loca.process = function() {
  if (this.version === 0) for (let i = 0; i < this.offsets.length; i++) this.offsets[i] <<= 1;
};
$cae48a5e791773ec$var$loca.preEncode = function() {
  if (this.version === 0) for (let i = 0; i < this.offsets.length; i++) this.offsets[i] >>>= 1;
};
var $cae48a5e791773ec$export$2e2bcd8739ae039 = $cae48a5e791773ec$var$loca;
var $7b12cfca10f7f884$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  controlValueProgram: new import_restructure.default.Array(import_restructure.default.uint8)
});
var $06e9f2dae5795013$export$2e2bcd8739ae039 = new import_restructure.default.Array(new import_restructure.default.Buffer());
var $6333f51d822e64a1$export$2e2bcd8739ae039 = class {
  constructor(type) {
    this.type = type;
  }
  getCFFVersion(ctx) {
    while (ctx && !ctx.hdrSize) ctx = ctx.parent;
    return ctx ? ctx.version : -1;
  }
  decode(stream2, parent) {
    let version = this.getCFFVersion(parent);
    let count = version >= 2 ? stream2.readUInt32BE() : stream2.readUInt16BE();
    if (count === 0) return [];
    let offSize = stream2.readUInt8();
    let offsetType;
    if (offSize === 1) offsetType = import_restructure.default.uint8;
    else if (offSize === 2) offsetType = import_restructure.default.uint16;
    else if (offSize === 3) offsetType = import_restructure.default.uint24;
    else if (offSize === 4) offsetType = import_restructure.default.uint32;
    else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream2.pos}`);
    let ret = [];
    let startPos = stream2.pos + (count + 1) * offSize - 1;
    let start = offsetType.decode(stream2);
    for (let i = 0; i < count; i++) {
      let end = offsetType.decode(stream2);
      if (this.type != null) {
        let pos = stream2.pos;
        stream2.pos = startPos + start;
        parent.length = end - start;
        ret.push(this.type.decode(stream2, parent));
        stream2.pos = pos;
      } else ret.push({
        offset: startPos + start,
        length: end - start
      });
      start = end;
    }
    stream2.pos = startPos + start;
    return ret;
  }
  size(arr, parent) {
    let size = 2;
    if (arr.length === 0) return size;
    let type = this.type || new import_restructure.default.Buffer();
    let offset = 1;
    for (let i = 0; i < arr.length; i++) {
      let item = arr[i];
      offset += type.size(item, parent);
    }
    let offsetType;
    if (offset <= 255) offsetType = import_restructure.default.uint8;
    else if (offset <= 65535) offsetType = import_restructure.default.uint16;
    else if (offset <= 16777215) offsetType = import_restructure.default.uint24;
    else if (offset <= 4294967295) offsetType = import_restructure.default.uint32;
    else throw new Error("Bad offset in CFFIndex");
    size += 1 + offsetType.size() * (arr.length + 1);
    size += offset - 1;
    return size;
  }
  encode(stream2, arr, parent) {
    stream2.writeUInt16BE(arr.length);
    if (arr.length === 0) return;
    let type = this.type || new import_restructure.default.Buffer();
    let sizes = [];
    let offset = 1;
    for (let item of arr) {
      let s = type.size(item, parent);
      sizes.push(s);
      offset += s;
    }
    let offsetType;
    if (offset <= 255) offsetType = import_restructure.default.uint8;
    else if (offset <= 65535) offsetType = import_restructure.default.uint16;
    else if (offset <= 16777215) offsetType = import_restructure.default.uint24;
    else if (offset <= 4294967295) offsetType = import_restructure.default.uint32;
    else throw new Error("Bad offset in CFFIndex");
    stream2.writeUInt8(offsetType.size());
    offset = 1;
    offsetType.encode(stream2, offset);
    for (let size of sizes) {
      offset += size;
      offsetType.encode(stream2, offset);
    }
    for (let item1 of arr) type.encode(stream2, item1, parent);
    return;
  }
};
var $2e2b3208cd32b1af$var$FLOAT_EOF = 15;
var $2e2b3208cd32b1af$var$FLOAT_LOOKUP = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  ".",
  "E",
  "E-",
  null,
  "-"
];
var $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP = {
  ".": 10,
  "E": 11,
  "E-": 12,
  "-": 14
};
var $2e2b3208cd32b1af$export$2e2bcd8739ae039 = class {
  static decode(stream2, value) {
    if (32 <= value && value <= 246) return value - 139;
    if (247 <= value && value <= 250) return (value - 247) * 256 + stream2.readUInt8() + 108;
    if (251 <= value && value <= 254) return -(value - 251) * 256 - stream2.readUInt8() - 108;
    if (value === 28) return stream2.readInt16BE();
    if (value === 29) return stream2.readInt32BE();
    if (value === 30) {
      let str = "";
      while (true) {
        let b = stream2.readUInt8();
        let n1 = b >> 4;
        if (n1 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;
        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n1];
        let n2 = b & 15;
        if (n2 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;
        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n2];
      }
      return parseFloat(str);
    }
    return null;
  }
  static size(value) {
    if (value.forceLarge) value = 32768;
    if ((value | 0) !== value) {
      let str = "" + value;
      return 1 + Math.ceil((str.length + 1) / 2);
    } else if (-107 <= value && value <= 107) return 1;
    else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;
    else if (-32768 <= value && value <= 32767) return 3;
    else return 5;
  }
  static encode(stream2, value) {
    let val = Number(value);
    if (value.forceLarge) {
      stream2.writeUInt8(29);
      return stream2.writeInt32BE(val);
    } else if ((val | 0) !== val) {
      stream2.writeUInt8(30);
      let str = "" + val;
      for (let i = 0; i < str.length; i += 2) {
        let c1 = str[i];
        let n1 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;
        if (i === str.length - 1) var n2 = $2e2b3208cd32b1af$var$FLOAT_EOF;
        else {
          let c2 = str[i + 1];
          var n2 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;
        }
        stream2.writeUInt8(n1 << 4 | n2 & 15);
      }
      if (n2 !== $2e2b3208cd32b1af$var$FLOAT_EOF) return stream2.writeUInt8($2e2b3208cd32b1af$var$FLOAT_EOF << 4);
    } else if (-107 <= val && val <= 107) return stream2.writeUInt8(val + 139);
    else if (108 <= val && val <= 1131) {
      val -= 108;
      stream2.writeUInt8((val >> 8) + 247);
      return stream2.writeUInt8(val & 255);
    } else if (-1131 <= val && val <= -108) {
      val = -val - 108;
      stream2.writeUInt8((val >> 8) + 251);
      return stream2.writeUInt8(val & 255);
    } else if (-32768 <= val && val <= 32767) {
      stream2.writeUInt8(28);
      return stream2.writeInt16BE(val);
    } else {
      stream2.writeUInt8(29);
      return stream2.writeInt32BE(val);
    }
  }
};
var $1694c4b242cd1a66$export$2e2bcd8739ae039 = class {
  constructor(ops = []) {
    this.ops = ops;
    this.fields = {};
    for (let field of ops) {
      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
      this.fields[key] = field;
    }
  }
  decodeOperands(type, stream2, ret, operands) {
    if (Array.isArray(type)) return operands.map(
      (op, i) => this.decodeOperands(type[i], stream2, ret, [
        op
      ])
    );
    else if (type.decode != null) return type.decode(stream2, ret, operands);
    else switch (type) {
      case "number":
      case "offset":
      case "sid":
        return operands[0];
      case "boolean":
        return !!operands[0];
      default:
        return operands;
    }
  }
  encodeOperands(type, stream2, ctx, operands) {
    if (Array.isArray(type)) return operands.map(
      (op, i) => this.encodeOperands(type[i], stream2, ctx, op)[0]
    );
    else if (type.encode != null) return type.encode(stream2, operands, ctx);
    else if (typeof operands === "number") return [
      operands
    ];
    else if (typeof operands === "boolean") return [
      +operands
    ];
    else if (Array.isArray(operands)) return operands;
    else return [
      operands
    ];
  }
  decode(stream2, parent) {
    let end = stream2.pos + parent.length;
    let ret = {};
    let operands = [];
    Object.defineProperties(ret, {
      parent: {
        value: parent
      },
      _startOffset: {
        value: stream2.pos
      }
    });
    for (let key in this.fields) {
      let field = this.fields[key];
      ret[field[1]] = field[3];
    }
    while (stream2.pos < end) {
      let b = stream2.readUInt8();
      if (b < 28) {
        if (b === 12) b = b << 8 | stream2.readUInt8();
        let field = this.fields[b];
        if (!field) throw new Error(`Unknown operator ${b}`);
        let val = this.decodeOperands(field[2], stream2, ret, operands);
        if (val != null) {
          if (val instanceof import_utils.PropertyDescriptor) Object.defineProperty(ret, field[1], val);
          else ret[field[1]] = val;
        }
        operands = [];
      } else operands.push($2e2b3208cd32b1af$export$2e2bcd8739ae039.decode(stream2, b));
    }
    return ret;
  }
  size(dict, parent, includePointers = true) {
    let ctx = {
      parent,
      val: dict,
      pointerSize: 0,
      startOffset: parent.startOffset || 0
    };
    let len = 0;
    for (let k in this.fields) {
      let field = this.fields[k];
      let val = dict[field[1]];
      if (val == null || (0, import_deep_equal.default)(val, field[3])) continue;
      let operands = this.encodeOperands(field[2], null, ctx, val);
      for (let op of operands) len += $2e2b3208cd32b1af$export$2e2bcd8739ae039.size(op);
      let key = Array.isArray(field[0]) ? field[0] : [
        field[0]
      ];
      len += key.length;
    }
    if (includePointers) len += ctx.pointerSize;
    return len;
  }
  encode(stream2, dict, parent) {
    let ctx = {
      pointers: [],
      startOffset: stream2.pos,
      parent,
      val: dict,
      pointerSize: 0
    };
    ctx.pointerOffset = stream2.pos + this.size(dict, ctx, false);
    for (let field of this.ops) {
      let val = dict[field[1]];
      if (val == null || (0, import_deep_equal.default)(val, field[3])) continue;
      let operands = this.encodeOperands(field[2], stream2, ctx, val);
      for (let op of operands) $2e2b3208cd32b1af$export$2e2bcd8739ae039.encode(stream2, op);
      let key = Array.isArray(field[0]) ? field[0] : [
        field[0]
      ];
      for (let op1 of key) stream2.writeUInt8(op1);
    }
    let i = 0;
    while (i < ctx.pointers.length) {
      let ptr = ctx.pointers[i++];
      ptr.type.encode(stream2, ptr.val, ptr.parent);
    }
    return;
  }
};
var $6631a7581d654814$export$2e2bcd8739ae039 = class extends import_restructure.default.Pointer {
  constructor(type, options = {}) {
    if (options.type == null) options.type = "global";
    super(null, type, options);
  }
  decode(stream2, parent, operands) {
    this.offsetType = {
      decode: () => operands[0]
    };
    return super.decode(stream2, parent, operands);
  }
  encode(stream2, value, ctx) {
    if (!stream2) {
      this.offsetType = {
        size: () => 0
      };
      this.size(value, ctx);
      return [
        new $6631a7581d654814$var$Ptr(0)
      ];
    }
    let ptr = null;
    this.offsetType = {
      encode: (stream3, val) => ptr = val
    };
    super.encode(stream2, value, ctx);
    return [
      new $6631a7581d654814$var$Ptr(ptr)
    ];
  }
};
var $6631a7581d654814$var$Ptr = class {
  constructor(val) {
    this.val = val;
    this.forceLarge = true;
  }
  valueOf() {
    return this.val;
  }
};
var $94c2c7ed7c236891$var$CFFBlendOp = class {
  static decode(stream2, parent, operands) {
    let numBlends = operands.pop();
    while (operands.length > numBlends) operands.pop();
  }
};
var $94c2c7ed7c236891$export$2e2bcd8739ae039 = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  // key       name                    type                                          default
  [
    6,
    "BlueValues",
    "delta",
    null
  ],
  [
    7,
    "OtherBlues",
    "delta",
    null
  ],
  [
    8,
    "FamilyBlues",
    "delta",
    null
  ],
  [
    9,
    "FamilyOtherBlues",
    "delta",
    null
  ],
  [
    [
      12,
      9
    ],
    "BlueScale",
    "number",
    0.039625
  ],
  [
    [
      12,
      10
    ],
    "BlueShift",
    "number",
    7
  ],
  [
    [
      12,
      11
    ],
    "BlueFuzz",
    "number",
    1
  ],
  [
    10,
    "StdHW",
    "number",
    null
  ],
  [
    11,
    "StdVW",
    "number",
    null
  ],
  [
    [
      12,
      12
    ],
    "StemSnapH",
    "delta",
    null
  ],
  [
    [
      12,
      13
    ],
    "StemSnapV",
    "delta",
    null
  ],
  [
    [
      12,
      14
    ],
    "ForceBold",
    "boolean",
    false
  ],
  [
    [
      12,
      17
    ],
    "LanguageGroup",
    "number",
    0
  ],
  [
    [
      12,
      18
    ],
    "ExpansionFactor",
    "number",
    0.06
  ],
  [
    [
      12,
      19
    ],
    "initialRandomSeed",
    "number",
    0
  ],
  [
    20,
    "defaultWidthX",
    "number",
    0
  ],
  [
    21,
    "nominalWidthX",
    "number",
    0
  ],
  [
    22,
    "vsindex",
    "number",
    0
  ],
  [
    23,
    "blend",
    $94c2c7ed7c236891$var$CFFBlendOp,
    null
  ],
  [
    19,
    "Subrs",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039(), {
      type: "local"
    }),
    null
  ]
]);
var $276d3ff37a4362c9$export$2e2bcd8739ae039 = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall",
  "001.000",
  "001.001",
  "001.002",
  "001.003",
  "Black",
  "Bold",
  "Book",
  "Light",
  "Medium",
  "Regular",
  "Roman",
  "Semibold"
];
var $50148a3b88f16e26$export$dee0027060fa13bd = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "",
  "questiondown",
  "",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "",
  "ring",
  "cedilla",
  "",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "AE",
  "",
  "ordfeminine",
  "",
  "",
  "",
  "",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "",
  "",
  "",
  "",
  "",
  "ae",
  "",
  "",
  "",
  "dotlessi",
  "",
  "",
  "lslash",
  "oslash",
  "oe",
  "germandbls"
];
var $50148a3b88f16e26$export$4f58f497e14a53c3 = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "",
  "",
  "isuperior",
  "",
  "",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "",
  "",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "",
  "",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "",
  "Dotaccentsmall",
  "",
  "",
  "Macronsmall",
  "",
  "",
  "figuredash",
  "hypheninferior",
  "",
  "",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "",
  "",
  "",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "",
  "",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
];
var $a5fab60a6eadb8ed$export$c33b50336c234f16 = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron"
];
var $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489 = [
  ".notdef",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
];
var $a5fab60a6eadb8ed$export$dc28be11139d4120 = [
  ".notdef",
  "space",
  "dollaroldstyle",
  "dollarsuperior",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "hyphensuperior",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "centoldstyle",
  "figuredash",
  "hypheninferior",
  "onequarter",
  "onehalf",
  "threequarters",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior"
];
var $401800e36a580e62$var$LangSysTable = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  reqFeatureIndex: import_restructure.default.uint16,
  featureCount: import_restructure.default.uint16,
  featureIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "featureCount")
});
var $401800e36a580e62$var$LangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  langSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$LangSysTable, {
    type: "parent"
  })
});
var $401800e36a580e62$var$Script = new import_restructure.default.Struct({
  defaultLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$LangSysTable),
  count: import_restructure.default.uint16,
  langSysRecords: new import_restructure.default.Array($401800e36a580e62$var$LangSysRecord, "count")
});
var $401800e36a580e62$var$ScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$Script, {
    type: "parent"
  })
});
var $401800e36a580e62$export$3e15fc05ce864229 = new import_restructure.default.Array($401800e36a580e62$var$ScriptRecord, import_restructure.default.uint16);
var $401800e36a580e62$var$FeatureParams = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16
});
var $401800e36a580e62$export$6e91cf7616333d5 = new import_restructure.default.Struct({
  featureParams: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$FeatureParams),
  lookupCount: import_restructure.default.uint16,
  lookupListIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "lookupCount")
});
var $401800e36a580e62$var$FeatureRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  feature: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$6e91cf7616333d5, {
    type: "parent"
  })
});
var $401800e36a580e62$export$aa18130def4b6cb4 = new import_restructure.default.Array($401800e36a580e62$var$FeatureRecord, import_restructure.default.uint16);
var $401800e36a580e62$var$LookupFlags = new import_restructure.default.Struct({
  markAttachmentType: import_restructure.default.uint8,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    "rightToLeft",
    "ignoreBaseGlyphs",
    "ignoreLigatures",
    "ignoreMarks",
    "useMarkFilteringSet"
  ])
});
function $401800e36a580e62$export$df0008c6ff2da22a(SubTable) {
  let Lookup = new import_restructure.default.Struct({
    lookupType: import_restructure.default.uint16,
    flags: $401800e36a580e62$var$LookupFlags,
    subTableCount: import_restructure.default.uint16,
    subTables: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, SubTable), "subTableCount"),
    markFilteringSet: new import_restructure.default.Optional(
      import_restructure.default.uint16,
      (t) => t.flags.flags.useMarkFilteringSet
    )
  });
  return new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, Lookup), import_restructure.default.uint16);
}
var $401800e36a580e62$var$RangeRecord = new import_restructure.default.Struct({
  start: import_restructure.default.uint16,
  end: import_restructure.default.uint16,
  startCoverageIndex: import_restructure.default.uint16
});
var $401800e36a580e62$export$17608c3f81a6111 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    glyphCount: import_restructure.default.uint16,
    glyphs: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  },
  2: {
    rangeCount: import_restructure.default.uint16,
    rangeRecords: new import_restructure.default.Array($401800e36a580e62$var$RangeRecord, "rangeCount")
  }
});
var $401800e36a580e62$var$ClassRangeRecord = new import_restructure.default.Struct({
  start: import_restructure.default.uint16,
  end: import_restructure.default.uint16,
  class: import_restructure.default.uint16
});
var $401800e36a580e62$export$843d551fbbafef71 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    startGlyph: import_restructure.default.uint16,
    glyphCount: import_restructure.default.uint16,
    classValueArray: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  },
  2: {
    classRangeCount: import_restructure.default.uint16,
    classRangeRecord: new import_restructure.default.Array($401800e36a580e62$var$ClassRangeRecord, "classRangeCount")
  }
});
var $401800e36a580e62$export$8215d14a63d9fb10 = new import_restructure.default.Struct({
  a: import_restructure.default.uint16,
  b: import_restructure.default.uint16,
  deltaFormat: import_restructure.default.uint16
});
var $401800e36a580e62$var$LookupRecord = new import_restructure.default.Struct({
  sequenceIndex: import_restructure.default.uint16,
  lookupListIndex: import_restructure.default.uint16
});
var $401800e36a580e62$var$Rule = new import_restructure.default.Struct({
  glyphCount: import_restructure.default.uint16,
  lookupCount: import_restructure.default.uint16,
  input: new import_restructure.default.Array(
    import_restructure.default.uint16,
    (t) => t.glyphCount - 1
  ),
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$RuleSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$Rule), import_restructure.default.uint16);
var $401800e36a580e62$var$ClassRule = new import_restructure.default.Struct({
  glyphCount: import_restructure.default.uint16,
  lookupCount: import_restructure.default.uint16,
  classes: new import_restructure.default.Array(
    import_restructure.default.uint16,
    (t) => t.glyphCount - 1
  ),
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$ClassSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ClassRule), import_restructure.default.uint16);
var $401800e36a580e62$export$841858b892ce1f4c = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    ruleSetCount: import_restructure.default.uint16,
    ruleSets: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$RuleSet), "ruleSetCount")
  },
  2: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    classSetCnt: import_restructure.default.uint16,
    classSet: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ClassSet), "classSetCnt")
  },
  3: {
    glyphCount: import_restructure.default.uint16,
    lookupCount: import_restructure.default.uint16,
    coverages: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "glyphCount"),
    lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
  }
});
var $401800e36a580e62$var$ChainRule = new import_restructure.default.Struct({
  backtrackGlyphCount: import_restructure.default.uint16,
  backtrack: new import_restructure.default.Array(import_restructure.default.uint16, "backtrackGlyphCount"),
  inputGlyphCount: import_restructure.default.uint16,
  input: new import_restructure.default.Array(
    import_restructure.default.uint16,
    (t) => t.inputGlyphCount - 1
  ),
  lookaheadGlyphCount: import_restructure.default.uint16,
  lookahead: new import_restructure.default.Array(import_restructure.default.uint16, "lookaheadGlyphCount"),
  lookupCount: import_restructure.default.uint16,
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$ChainRuleSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRule), import_restructure.default.uint16);
var $401800e36a580e62$export$5e6d09e6861162f6 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    chainCount: import_restructure.default.uint16,
    chainRuleSets: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRuleSet), "chainCount")
  },
  2: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    backtrackClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    inputClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    lookaheadClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    chainCount: import_restructure.default.uint16,
    chainClassSet: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRuleSet), "chainCount")
  },
  3: {
    backtrackGlyphCount: import_restructure.default.uint16,
    backtrackCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "backtrackGlyphCount"),
    inputGlyphCount: import_restructure.default.uint16,
    inputCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "inputGlyphCount"),
    lookaheadGlyphCount: import_restructure.default.uint16,
    lookaheadCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "lookaheadGlyphCount"),
    lookupCount: import_restructure.default.uint16,
    lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
  }
});
var $421a2456cdbaa0d8$var$F2DOT14 = new import_restructure.default.Fixed(16, "BE", 14);
var $421a2456cdbaa0d8$var$RegionAxisCoordinates = new import_restructure.default.Struct({
  startCoord: $421a2456cdbaa0d8$var$F2DOT14,
  peakCoord: $421a2456cdbaa0d8$var$F2DOT14,
  endCoord: $421a2456cdbaa0d8$var$F2DOT14
});
var $421a2456cdbaa0d8$var$VariationRegionList = new import_restructure.default.Struct({
  axisCount: import_restructure.default.uint16,
  regionCount: import_restructure.default.uint16,
  variationRegions: new import_restructure.default.Array(new import_restructure.default.Array($421a2456cdbaa0d8$var$RegionAxisCoordinates, "axisCount"), "regionCount")
});
var $421a2456cdbaa0d8$var$DeltaSet = new import_restructure.default.Struct({
  shortDeltas: new import_restructure.default.Array(
    import_restructure.default.int16,
    (t) => t.parent.shortDeltaCount
  ),
  regionDeltas: new import_restructure.default.Array(
    import_restructure.default.int8,
    (t) => t.parent.regionIndexCount - t.parent.shortDeltaCount
  ),
  deltas: (t) => t.shortDeltas.concat(t.regionDeltas)
});
var $421a2456cdbaa0d8$var$ItemVariationData = new import_restructure.default.Struct({
  itemCount: import_restructure.default.uint16,
  shortDeltaCount: import_restructure.default.uint16,
  regionIndexCount: import_restructure.default.uint16,
  regionIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "regionIndexCount"),
  deltaSets: new import_restructure.default.Array($421a2456cdbaa0d8$var$DeltaSet, "itemCount")
});
var $421a2456cdbaa0d8$export$fe1b122a2710f241 = new import_restructure.default.Struct({
  format: import_restructure.default.uint16,
  variationRegionList: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$VariationRegionList),
  variationDataCount: import_restructure.default.uint16,
  itemVariationData: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ItemVariationData), "variationDataCount")
});
var $421a2456cdbaa0d8$var$ConditionTable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    axisIndex: import_restructure.default.uint16,
    axisIndex: import_restructure.default.uint16,
    filterRangeMinValue: $421a2456cdbaa0d8$var$F2DOT14,
    filterRangeMaxValue: $421a2456cdbaa0d8$var$F2DOT14
  }
});
var $421a2456cdbaa0d8$var$ConditionSet = new import_restructure.default.Struct({
  conditionCount: import_restructure.default.uint16,
  conditionTable: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ConditionTable), "conditionCount")
});
var $421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord = new import_restructure.default.Struct({
  featureIndex: import_restructure.default.uint16,
  alternateFeatureTable: new import_restructure.default.Pointer(import_restructure.default.uint32, $401800e36a580e62$export$6e91cf7616333d5, {
    type: "parent"
  })
});
var $421a2456cdbaa0d8$var$FeatureTableSubstitution = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  substitutionCount: import_restructure.default.uint16,
  substitutions: new import_restructure.default.Array($421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord, "substitutionCount")
});
var $421a2456cdbaa0d8$var$FeatureVariationRecord = new import_restructure.default.Struct({
  conditionSet: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ConditionSet, {
    type: "parent"
  }),
  featureTableSubstitution: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$FeatureTableSubstitution, {
    type: "parent"
  })
});
var $421a2456cdbaa0d8$export$441b70b7971dd419 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  featureVariationRecordCount: import_restructure.default.uint32,
  featureVariationRecords: new import_restructure.default.Array($421a2456cdbaa0d8$var$FeatureVariationRecord, "featureVariationRecordCount")
});
var $3e41cd50e8921098$var$PredefinedOp = class {
  constructor(predefinedOps, type) {
    this.predefinedOps = predefinedOps;
    this.type = type;
  }
  decode(stream2, parent, operands) {
    if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];
    return this.type.decode(stream2, parent, operands);
  }
  size(value, ctx) {
    return this.type.size(value, ctx);
  }
  encode(stream2, value, ctx) {
    let index = this.predefinedOps.indexOf(value);
    if (index !== -1) return index;
    return this.type.encode(stream2, value, ctx);
  }
};
var $3e41cd50e8921098$var$CFFEncodingVersion = class extends import_restructure.default.Number {
  constructor() {
    super("UInt8");
  }
  decode(stream2) {
    return import_restructure.default.uint8.decode(stream2) & 127;
  }
};
var $3e41cd50e8921098$var$Range1 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  nLeft: import_restructure.default.uint8
});
var $3e41cd50e8921098$var$Range2 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  nLeft: import_restructure.default.uint16
});
var $3e41cd50e8921098$var$CFFCustomEncoding = new import_restructure.default.VersionedStruct(new $3e41cd50e8921098$var$CFFEncodingVersion(), {
  0: {
    nCodes: import_restructure.default.uint8,
    codes: new import_restructure.default.Array(import_restructure.default.uint8, "nCodes")
  },
  1: {
    nRanges: import_restructure.default.uint8,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$Range1, "nRanges")
  }
});
var $3e41cd50e8921098$var$CFFEncoding = new $3e41cd50e8921098$var$PredefinedOp([
  $50148a3b88f16e26$export$dee0027060fa13bd,
  $50148a3b88f16e26$export$4f58f497e14a53c3
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomEncoding, {
  lazy: true
}));
var $3e41cd50e8921098$var$RangeArray = class extends import_restructure.default.Array {
  decode(stream2, parent) {
    let length = (0, import_utils.resolveLength)(this.length, stream2, parent);
    let count = 0;
    let res = [];
    while (count < length) {
      let range = this.type.decode(stream2, parent);
      range.offset = count;
      count += range.nLeft + 1;
      res.push(range);
    }
    return res;
  }
};
var $3e41cd50e8921098$var$CFFCustomCharset = new import_restructure.default.VersionedStruct(import_restructure.default.uint8, {
  0: {
    glyphs: new import_restructure.default.Array(
      import_restructure.default.uint16,
      (t) => t.parent.CharStrings.length - 1
    )
  },
  1: {
    ranges: new $3e41cd50e8921098$var$RangeArray(
      $3e41cd50e8921098$var$Range1,
      (t) => t.parent.CharStrings.length - 1
    )
  },
  2: {
    ranges: new $3e41cd50e8921098$var$RangeArray(
      $3e41cd50e8921098$var$Range2,
      (t) => t.parent.CharStrings.length - 1
    )
  }
});
var $3e41cd50e8921098$var$CFFCharset = new $3e41cd50e8921098$var$PredefinedOp([
  $a5fab60a6eadb8ed$export$c33b50336c234f16,
  $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489,
  $a5fab60a6eadb8ed$export$dc28be11139d4120
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomCharset, {
  lazy: true
}));
var $3e41cd50e8921098$var$FDRange3 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  fd: import_restructure.default.uint8
});
var $3e41cd50e8921098$var$FDRange4 = new import_restructure.default.Struct({
  first: import_restructure.default.uint32,
  fd: import_restructure.default.uint16
});
var $3e41cd50e8921098$var$FDSelect = new import_restructure.default.VersionedStruct(import_restructure.default.uint8, {
  0: {
    fds: new import_restructure.default.Array(
      import_restructure.default.uint8,
      (t) => t.parent.CharStrings.length
    )
  },
  3: {
    nRanges: import_restructure.default.uint16,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$FDRange3, "nRanges"),
    sentinel: import_restructure.default.uint16
  },
  4: {
    nRanges: import_restructure.default.uint32,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$FDRange4, "nRanges"),
    sentinel: import_restructure.default.uint32
  }
});
var $3e41cd50e8921098$var$ptr = new $6631a7581d654814$export$2e2bcd8739ae039($94c2c7ed7c236891$export$2e2bcd8739ae039);
var $3e41cd50e8921098$var$CFFPrivateOp = class {
  decode(stream2, parent, operands) {
    parent.length = operands[0];
    return $3e41cd50e8921098$var$ptr.decode(stream2, parent, [
      operands[1]
    ]);
  }
  size(dict, ctx) {
    return [
      $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
      $3e41cd50e8921098$var$ptr.size(dict, ctx)[0]
    ];
  }
  encode(stream2, dict, ctx) {
    return [
      $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
      $3e41cd50e8921098$var$ptr.encode(stream2, dict, ctx)[0]
    ];
  }
};
var $3e41cd50e8921098$var$FontDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  // key       name                   type(s)                                 default
  [
    18,
    "Private",
    new $3e41cd50e8921098$var$CFFPrivateOp(),
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ]
]);
var $3e41cd50e8921098$var$CFFTopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  // key       name                   type(s)                                 default
  [
    [
      12,
      30
    ],
    "ROS",
    [
      "sid",
      "sid",
      "number"
    ],
    null
  ],
  [
    0,
    "version",
    "sid",
    null
  ],
  [
    1,
    "Notice",
    "sid",
    null
  ],
  [
    [
      12,
      0
    ],
    "Copyright",
    "sid",
    null
  ],
  [
    2,
    "FullName",
    "sid",
    null
  ],
  [
    3,
    "FamilyName",
    "sid",
    null
  ],
  [
    4,
    "Weight",
    "sid",
    null
  ],
  [
    [
      12,
      1
    ],
    "isFixedPitch",
    "boolean",
    false
  ],
  [
    [
      12,
      2
    ],
    "ItalicAngle",
    "number",
    0
  ],
  [
    [
      12,
      3
    ],
    "UnderlinePosition",
    "number",
    -100
  ],
  [
    [
      12,
      4
    ],
    "UnderlineThickness",
    "number",
    50
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ],
  [
    [
      12,
      6
    ],
    "CharstringType",
    "number",
    2
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    13,
    "UniqueID",
    "number",
    null
  ],
  [
    5,
    "FontBBox",
    "array",
    [
      0,
      0,
      0,
      0
    ]
  ],
  [
    [
      12,
      8
    ],
    "StrokeWidth",
    "number",
    0
  ],
  [
    14,
    "XUID",
    "array",
    null
  ],
  [
    15,
    "charset",
    $3e41cd50e8921098$var$CFFCharset,
    $a5fab60a6eadb8ed$export$c33b50336c234f16
  ],
  [
    16,
    "Encoding",
    $3e41cd50e8921098$var$CFFEncoding,
    $50148a3b88f16e26$export$dee0027060fa13bd
  ],
  [
    17,
    "CharStrings",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039()),
    null
  ],
  [
    18,
    "Private",
    new $3e41cd50e8921098$var$CFFPrivateOp(),
    null
  ],
  [
    [
      12,
      20
    ],
    "SyntheticBase",
    "number",
    null
  ],
  [
    [
      12,
      21
    ],
    "PostScript",
    "sid",
    null
  ],
  [
    [
      12,
      22
    ],
    "BaseFontName",
    "sid",
    null
  ],
  [
    [
      12,
      23
    ],
    "BaseFontBlend",
    "delta",
    null
  ],
  // CID font specific
  [
    [
      12,
      31
    ],
    "CIDFontVersion",
    "number",
    0
  ],
  [
    [
      12,
      32
    ],
    "CIDFontRevision",
    "number",
    0
  ],
  [
    [
      12,
      33
    ],
    "CIDFontType",
    "number",
    0
  ],
  [
    [
      12,
      34
    ],
    "CIDCount",
    "number",
    8720
  ],
  [
    [
      12,
      35
    ],
    "UIDBase",
    "number",
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ]
]);
var $3e41cd50e8921098$var$VariationStore = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  itemVariationStore: $421a2456cdbaa0d8$export$fe1b122a2710f241
});
var $3e41cd50e8921098$var$CFF2TopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    17,
    "CharStrings",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039()),
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
    null
  ],
  [
    24,
    "vstore",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$VariationStore),
    null
  ],
  [
    25,
    "maxstack",
    "number",
    193
  ]
]);
var $3e41cd50e8921098$var$CFFTop = new import_restructure.default.VersionedStruct(import_restructure.default.fixed16, {
  1: {
    hdrSize: import_restructure.default.uint8,
    offSize: import_restructure.default.uint8,
    nameIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new import_restructure.default.String("length")),
    topDictIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFTopDict),
    stringIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new import_restructure.default.String("length")),
    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039()
  },
  2: {
    hdrSize: import_restructure.default.uint8,
    length: import_restructure.default.uint16,
    topDict: $3e41cd50e8921098$var$CFF2TopDict,
    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039()
  }
});
var $3e41cd50e8921098$export$2e2bcd8739ae039 = $3e41cd50e8921098$var$CFFTop;
var $8770fc79268fa3c2$var$CFFFont = class _$8770fc79268fa3c2$var$CFFFont {
  constructor(stream2) {
    this.stream = stream2;
    this.decode();
  }
  static decode(stream2) {
    return new _$8770fc79268fa3c2$var$CFFFont(stream2);
  }
  decode() {
    let start = this.stream.pos;
    let top = $3e41cd50e8921098$export$2e2bcd8739ae039.decode(this.stream);
    for (let key in top) {
      let val = top[key];
      this[key] = val;
    }
    if (this.version < 2) {
      if (this.topDictIndex.length !== 1) throw new Error("Only a single font is allowed in CFF");
      this.topDict = this.topDictIndex[0];
    }
    this.isCIDFont = this.topDict.ROS != null;
    return this;
  }
  string(sid) {
    if (this.version >= 2) return null;
    if (sid < $276d3ff37a4362c9$export$2e2bcd8739ae039.length) return $276d3ff37a4362c9$export$2e2bcd8739ae039[sid];
    return this.stringIndex[sid - $276d3ff37a4362c9$export$2e2bcd8739ae039.length];
  }
  get postscriptName() {
    if (this.version < 2) return this.nameIndex[0];
    return null;
  }
  get fullName() {
    return this.string(this.topDict.FullName);
  }
  get familyName() {
    return this.string(this.topDict.FamilyName);
  }
  getCharString(glyph) {
    this.stream.pos = this.topDict.CharStrings[glyph].offset;
    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
  }
  getGlyphName(gid) {
    if (this.version >= 2) return null;
    if (this.isCIDFont) return null;
    let { charset } = this.topDict;
    if (Array.isArray(charset)) return charset[gid];
    if (gid === 0) return ".notdef";
    gid -= 1;
    switch (charset.version) {
      case 0:
        return this.string(charset.glyphs[gid]);
      case 1:
      case 2:
        for (let i = 0; i < charset.ranges.length; i++) {
          let range = charset.ranges[i];
          if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));
        }
        break;
    }
    return null;
  }
  fdForGlyph(gid) {
    if (!this.topDict.FDSelect) return null;
    switch (this.topDict.FDSelect.version) {
      case 0:
        return this.topDict.FDSelect.fds[gid];
      case 3:
      case 4:
        let { ranges } = this.topDict.FDSelect;
        let low = 0;
        let high = ranges.length - 1;
        while (low <= high) {
          let mid = low + high >> 1;
          if (gid < ranges[mid].first) high = mid - 1;
          else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;
          else return ranges[mid].fd;
        }
      default:
        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
    }
  }
  privateDictForGlyph(gid) {
    if (this.topDict.FDSelect) {
      let fd = this.fdForGlyph(gid);
      if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;
      return null;
    }
    if (this.version < 2) return this.topDict.Private;
    return this.topDict.FDArray[0].Private;
  }
};
var $8770fc79268fa3c2$export$2e2bcd8739ae039 = $8770fc79268fa3c2$var$CFFFont;
var $79f2eb50e4490e51$var$VerticalOrigin = new import_restructure.default.Struct({
  glyphIndex: import_restructure.default.uint16,
  vertOriginY: import_restructure.default.int16
});
var $79f2eb50e4490e51$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  defaultVertOriginY: import_restructure.default.int16,
  numVertOriginYMetrics: import_restructure.default.uint16,
  metrics: new import_restructure.default.Array($79f2eb50e4490e51$var$VerticalOrigin, "numVertOriginYMetrics")
});
var $9dd3c2ae0a322c53$export$16b227cb15d716a0 = new import_restructure.default.Struct({
  height: import_restructure.default.uint8,
  width: import_restructure.default.uint8,
  horiBearingX: import_restructure.default.int8,
  horiBearingY: import_restructure.default.int8,
  horiAdvance: import_restructure.default.uint8,
  vertBearingX: import_restructure.default.int8,
  vertBearingY: import_restructure.default.int8,
  vertAdvance: import_restructure.default.uint8
});
var $9dd3c2ae0a322c53$export$62c53e75f69bfe12 = new import_restructure.default.Struct({
  height: import_restructure.default.uint8,
  width: import_restructure.default.uint8,
  bearingX: import_restructure.default.int8,
  bearingY: import_restructure.default.int8,
  advance: import_restructure.default.uint8
});
var $9dd3c2ae0a322c53$var$EBDTComponent = new import_restructure.default.Struct({
  glyph: import_restructure.default.uint16,
  xOffset: import_restructure.default.int8,
  yOffset: import_restructure.default.int8
});
var $9dd3c2ae0a322c53$var$ByteAligned = class {
};
var $9dd3c2ae0a322c53$var$BitAligned = class {
};
var $9dd3c2ae0a322c53$export$f1f5ddeb20d14f = new import_restructure.default.VersionedStruct("version", {
  1: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    data: $9dd3c2ae0a322c53$var$ByteAligned
  },
  2: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  // format 3 is deprecated
  // format 4 is not supported by Microsoft
  5: {
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  6: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    data: $9dd3c2ae0a322c53$var$ByteAligned
  },
  7: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  8: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    pad: new import_restructure.default.Reserved(import_restructure.default.uint8),
    numComponents: import_restructure.default.uint16,
    components: new import_restructure.default.Array($9dd3c2ae0a322c53$var$EBDTComponent, "numComponents")
  },
  9: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    pad: new import_restructure.default.Reserved(import_restructure.default.uint8),
    numComponents: import_restructure.default.uint16,
    components: new import_restructure.default.Array($9dd3c2ae0a322c53$var$EBDTComponent, "numComponents")
  },
  17: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  },
  18: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  },
  19: {
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  }
});
var $234c291eab07e474$var$SBitLineMetrics = new import_restructure.default.Struct({
  ascender: import_restructure.default.int8,
  descender: import_restructure.default.int8,
  widthMax: import_restructure.default.uint8,
  caretSlopeNumerator: import_restructure.default.int8,
  caretSlopeDenominator: import_restructure.default.int8,
  caretOffset: import_restructure.default.int8,
  minOriginSB: import_restructure.default.int8,
  minAdvanceSB: import_restructure.default.int8,
  maxBeforeBL: import_restructure.default.int8,
  minAfterBL: import_restructure.default.int8,
  pad: new import_restructure.default.Reserved(import_restructure.default.int8, 2)
});
var $234c291eab07e474$var$CodeOffsetPair = new import_restructure.default.Struct({
  glyphCode: import_restructure.default.uint16,
  offset: import_restructure.default.uint16
});
var $234c291eab07e474$var$IndexSubtable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    imageFormat: import_restructure.default.uint16,
    imageDataOffset: import_restructure.default.uint32
  },
  1: {
    offsetArray: new import_restructure.default.Array(
      import_restructure.default.uint32,
      (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
    )
  },
  2: {
    imageSize: import_restructure.default.uint32,
    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0
  },
  3: {
    offsetArray: new import_restructure.default.Array(
      import_restructure.default.uint16,
      (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
    )
  },
  4: {
    numGlyphs: import_restructure.default.uint32,
    glyphArray: new import_restructure.default.Array(
      $234c291eab07e474$var$CodeOffsetPair,
      (t) => t.numGlyphs + 1
    )
  },
  5: {
    imageSize: import_restructure.default.uint32,
    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    numGlyphs: import_restructure.default.uint32,
    glyphCodeArray: new import_restructure.default.Array(import_restructure.default.uint16, "numGlyphs")
  }
});
var $234c291eab07e474$var$IndexSubtableArray = new import_restructure.default.Struct({
  firstGlyphIndex: import_restructure.default.uint16,
  lastGlyphIndex: import_restructure.default.uint16,
  subtable: new import_restructure.default.Pointer(import_restructure.default.uint32, $234c291eab07e474$var$IndexSubtable)
});
var $234c291eab07e474$var$BitmapSizeTable = new import_restructure.default.Struct({
  indexSubTableArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($234c291eab07e474$var$IndexSubtableArray, 1), {
    type: "parent"
  }),
  indexTablesSize: import_restructure.default.uint32,
  numberOfIndexSubTables: import_restructure.default.uint32,
  colorRef: import_restructure.default.uint32,
  hori: $234c291eab07e474$var$SBitLineMetrics,
  vert: $234c291eab07e474$var$SBitLineMetrics,
  startGlyphIndex: import_restructure.default.uint16,
  endGlyphIndex: import_restructure.default.uint16,
  ppemX: import_restructure.default.uint8,
  ppemY: import_restructure.default.uint8,
  bitDepth: import_restructure.default.uint8,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    "horizontal",
    "vertical"
  ])
});
var $234c291eab07e474$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  numSizes: import_restructure.default.uint32,
  sizes: new import_restructure.default.Array($234c291eab07e474$var$BitmapSizeTable, "numSizes")
});
var $55d04373f0cac44e$var$ImageTable = new import_restructure.default.Struct({
  ppem: import_restructure.default.uint16,
  resolution: import_restructure.default.uint16,
  imageOffsets: new import_restructure.default.Array(
    new import_restructure.default.Pointer(import_restructure.default.uint32, "void"),
    (t) => t.parent.parent.maxp.numGlyphs + 1
  )
});
var $55d04373f0cac44e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "renderOutlines"
  ]),
  numImgTables: import_restructure.default.uint32,
  imageTables: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $55d04373f0cac44e$var$ImageTable), "numImgTables")
});
var $0e59eccfa3005d9d$var$LayerRecord = new import_restructure.default.Struct({
  gid: import_restructure.default.uint16,
  paletteIndex: import_restructure.default.uint16
  // Index value to use in the appropriate palette. This value must
});
var $0e59eccfa3005d9d$var$BaseGlyphRecord = new import_restructure.default.Struct({
  gid: import_restructure.default.uint16,
  // and is not rendered for color.
  firstLayerIndex: import_restructure.default.uint16,
  // There will be numLayers consecutive entries for this base glyph.
  numLayers: import_restructure.default.uint16
});
var $0e59eccfa3005d9d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numBaseGlyphRecords: import_restructure.default.uint16,
  baseGlyphRecord: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($0e59eccfa3005d9d$var$BaseGlyphRecord, "numBaseGlyphRecords")),
  layerRecords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($0e59eccfa3005d9d$var$LayerRecord, "numLayerRecords"), {
    lazy: true
  }),
  numLayerRecords: import_restructure.default.uint16
});
var $23affa36a12f7915$var$ColorRecord = new import_restructure.default.Struct({
  blue: import_restructure.default.uint8,
  green: import_restructure.default.uint8,
  red: import_restructure.default.uint8,
  alpha: import_restructure.default.uint8
});
var $23affa36a12f7915$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    numPaletteEntries: import_restructure.default.uint16,
    numPalettes: import_restructure.default.uint16,
    numColorRecords: import_restructure.default.uint16,
    colorRecords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($23affa36a12f7915$var$ColorRecord, "numColorRecords")),
    colorRecordIndices: new import_restructure.default.Array(import_restructure.default.uint16, "numPalettes")
  },
  0: {},
  1: {
    offsetPaletteTypeArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint32, "numPalettes")),
    offsetPaletteLabelArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint16, "numPalettes")),
    offsetPaletteEntryLabelArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint16, "numPaletteEntries"))
  }
});
var $9fffe61eb0785f74$var$BaseCoord = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coordinate: import_restructure.default.int16
    // X or Y value, in design units
  },
  2: {
    coordinate: import_restructure.default.int16,
    referenceGlyph: import_restructure.default.uint16,
    baseCoordPoint: import_restructure.default.uint16
    // Index of contour point on the referenceGlyph
  },
  3: {
    coordinate: import_restructure.default.int16,
    deviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
    // Device table for X or Y value
  }
});
var $9fffe61eb0785f74$var$BaseValues = new import_restructure.default.Struct({
  defaultIndex: import_restructure.default.uint16,
  baseCoordCount: import_restructure.default.uint16,
  baseCoords: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord), "baseCoordCount")
});
var $9fffe61eb0785f74$var$FeatMinMaxRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  minCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord, {
    type: "parent"
  }),
  maxCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord, {
    type: "parent"
  })
  // May be NULL
});
var $9fffe61eb0785f74$var$MinMax = new import_restructure.default.Struct({
  minCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord),
  maxCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord),
  featMinMaxCount: import_restructure.default.uint16,
  featMinMaxRecords: new import_restructure.default.Array($9fffe61eb0785f74$var$FeatMinMaxRecord, "featMinMaxCount")
  // In alphabetical order
});
var $9fffe61eb0785f74$var$BaseLangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  minMax: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$MinMax, {
    type: "parent"
  })
});
var $9fffe61eb0785f74$var$BaseScript = new import_restructure.default.Struct({
  baseValues: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseValues),
  defaultMinMax: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$MinMax),
  baseLangSysCount: import_restructure.default.uint16,
  baseLangSysRecords: new import_restructure.default.Array($9fffe61eb0785f74$var$BaseLangSysRecord, "baseLangSysCount")
  // in alphabetical order by BaseLangSysTag
});
var $9fffe61eb0785f74$var$BaseScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseScript, {
    type: "parent"
  })
});
var $9fffe61eb0785f74$var$BaseScriptList = new import_restructure.default.Array($9fffe61eb0785f74$var$BaseScriptRecord, import_restructure.default.uint16);
var $9fffe61eb0785f74$var$BaseTagList = new import_restructure.default.Array(new import_restructure.default.String(4), import_restructure.default.uint16);
var $9fffe61eb0785f74$var$Axis = new import_restructure.default.Struct({
  baseTagList: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseTagList),
  baseScriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseScriptList)
});
var $9fffe61eb0785f74$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    horizAxis: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$Axis),
    vertAxis: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$Axis)
    // May be NULL
  },
  65536: {},
  65537: {
    itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
  }
});
var $418face38567ee6e$var$AttachPoint = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $418face38567ee6e$var$AttachList = new import_restructure.default.Struct({
  coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
  glyphCount: import_restructure.default.uint16,
  attachPoints: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$AttachPoint), "glyphCount")
});
var $418face38567ee6e$var$CaretValue = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coordinate: import_restructure.default.int16
  },
  2: {
    caretValuePoint: import_restructure.default.uint16
  },
  3: {
    coordinate: import_restructure.default.int16,
    deviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
  }
});
var $418face38567ee6e$var$LigGlyph = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$CaretValue), import_restructure.default.uint16);
var $418face38567ee6e$var$LigCaretList = new import_restructure.default.Struct({
  coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
  ligGlyphCount: import_restructure.default.uint16,
  ligGlyphs: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$LigGlyph), "ligGlyphCount")
});
var $418face38567ee6e$var$MarkGlyphSetsDef = new import_restructure.default.Struct({
  markSetTableFormat: import_restructure.default.uint16,
  markSetCount: import_restructure.default.uint16,
  coverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $401800e36a580e62$export$17608c3f81a6111), "markSetCount")
});
var $418face38567ee6e$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    glyphClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    attachList: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$AttachList),
    ligCaretList: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$LigCaretList),
    markAttachClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71)
  },
  65536: {},
  65538: {
    markGlyphSetsDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$MarkGlyphSetsDef)
  },
  65539: {
    markGlyphSetsDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$MarkGlyphSetsDef),
    itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
  }
});
var $010e157f6d8a40e9$var$ValueFormat = new import_restructure.default.Bitfield(import_restructure.default.uint16, [
  "xPlacement",
  "yPlacement",
  "xAdvance",
  "yAdvance",
  "xPlaDevice",
  "yPlaDevice",
  "xAdvDevice",
  "yAdvDevice"
]);
var $010e157f6d8a40e9$var$types = {
  xPlacement: import_restructure.default.int16,
  yPlacement: import_restructure.default.int16,
  xAdvance: import_restructure.default.int16,
  yAdvance: import_restructure.default.int16,
  xPlaDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  yPlaDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  xAdvDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  yAdvDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  })
};
var $010e157f6d8a40e9$var$ValueRecord = class {
  constructor(key = "valueFormat") {
    this.key = key;
  }
  buildStruct(parent) {
    let struct = parent;
    while (!struct[this.key] && struct.parent) struct = struct.parent;
    if (!struct[this.key]) return;
    let fields = {};
    fields.rel = () => struct._startOffset;
    let format = struct[this.key];
    for (let key in format) if (format[key]) fields[key] = $010e157f6d8a40e9$var$types[key];
    return new import_restructure.default.Struct(fields);
  }
  size(val, ctx) {
    return this.buildStruct(ctx).size(val, ctx);
  }
  decode(stream2, parent) {
    let res = this.buildStruct(parent).decode(stream2, parent);
    delete res.rel;
    return res;
  }
};
var $010e157f6d8a40e9$var$PairValueRecord = new import_restructure.default.Struct({
  secondGlyph: import_restructure.default.uint16,
  value1: new $010e157f6d8a40e9$var$ValueRecord("valueFormat1"),
  value2: new $010e157f6d8a40e9$var$ValueRecord("valueFormat2")
});
var $010e157f6d8a40e9$var$PairSet = new import_restructure.default.Array($010e157f6d8a40e9$var$PairValueRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$Class2Record = new import_restructure.default.Struct({
  value1: new $010e157f6d8a40e9$var$ValueRecord("valueFormat1"),
  value2: new $010e157f6d8a40e9$var$ValueRecord("valueFormat2")
});
var $010e157f6d8a40e9$var$Anchor = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16
  },
  2: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16,
    anchorPoint: import_restructure.default.uint16
  },
  3: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16,
    xDeviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10),
    yDeviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
  }
});
var $010e157f6d8a40e9$var$EntryExitRecord = new import_restructure.default.Struct({
  entryAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  }),
  exitAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  })
});
var $010e157f6d8a40e9$var$MarkRecord = new import_restructure.default.Struct({
  class: import_restructure.default.uint16,
  markAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  })
});
var $010e157f6d8a40e9$var$MarkArray = new import_restructure.default.Array($010e157f6d8a40e9$var$MarkRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$BaseRecord = new import_restructure.default.Array(
  new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor),
  (t) => t.parent.classCount
);
var $010e157f6d8a40e9$var$BaseArray = new import_restructure.default.Array($010e157f6d8a40e9$var$BaseRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$ComponentRecord = new import_restructure.default.Array(
  new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor),
  (t) => t.parent.parent.classCount
);
var $010e157f6d8a40e9$var$LigatureAttach = new import_restructure.default.Array($010e157f6d8a40e9$var$ComponentRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$LigatureArray = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$LigatureAttach), import_restructure.default.uint16);
var $010e157f6d8a40e9$export$73a8cfb19cd43a0f = new import_restructure.default.VersionedStruct("lookupType", {
  1: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat: $010e157f6d8a40e9$var$ValueFormat,
      value: new $010e157f6d8a40e9$var$ValueRecord()
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat: $010e157f6d8a40e9$var$ValueFormat,
      valueCount: import_restructure.default.uint16,
      values: new import_restructure.default.LazyArray(new $010e157f6d8a40e9$var$ValueRecord(), "valueCount")
    }
  }),
  2: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
      pairSetCount: import_restructure.default.uint16,
      pairSets: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$PairSet), "pairSetCount")
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
      classDef1: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
      classDef2: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
      class1Count: import_restructure.default.uint16,
      class2Count: import_restructure.default.uint16,
      classRecords: new import_restructure.default.LazyArray(new import_restructure.default.LazyArray($010e157f6d8a40e9$var$Class2Record, "class2Count"), "class1Count")
    }
  }),
  3: {
    format: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    entryExitCount: import_restructure.default.uint16,
    entryExitRecords: new import_restructure.default.Array($010e157f6d8a40e9$var$EntryExitRecord, "entryExitCount")
  },
  4: {
    format: import_restructure.default.uint16,
    markCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    baseCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    markArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    baseArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$BaseArray)
  },
  5: {
    format: import_restructure.default.uint16,
    markCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    ligatureCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    markArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    ligatureArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$LigatureArray)
  },
  6: {
    format: import_restructure.default.uint16,
    mark1Coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    mark2Coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    mark1Array: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    mark2Array: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$BaseArray)
  },
  7: $401800e36a580e62$export$841858b892ce1f4c,
  8: $401800e36a580e62$export$5e6d09e6861162f6,
  9: {
    posFormat: import_restructure.default.uint16,
    lookupType: import_restructure.default.uint16,
    extension: new import_restructure.default.Pointer(import_restructure.default.uint32, null)
  }
});
$010e157f6d8a40e9$export$73a8cfb19cd43a0f.versions[9].extension.type = $010e157f6d8a40e9$export$73a8cfb19cd43a0f;
var $010e157f6d8a40e9$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    scriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$3e15fc05ce864229),
    featureList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
    lookupList: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
  },
  65536: {},
  65537: {
    featureVariations: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
  }
});
var $7176ea6bb7dcf1c6$var$Sequence = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $7176ea6bb7dcf1c6$var$AlternateSet = $7176ea6bb7dcf1c6$var$Sequence;
var $7176ea6bb7dcf1c6$var$Ligature = new import_restructure.default.Struct({
  glyph: import_restructure.default.uint16,
  compCount: import_restructure.default.uint16,
  components: new import_restructure.default.Array(
    import_restructure.default.uint16,
    (t) => t.compCount - 1
  )
});
var $7176ea6bb7dcf1c6$var$LigatureSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$Ligature), import_restructure.default.uint16);
var $7176ea6bb7dcf1c6$var$GSUBLookup = new import_restructure.default.VersionedStruct("lookupType", {
  1: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      deltaGlyphID: import_restructure.default.int16
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      glyphCount: import_restructure.default.uint16,
      substitute: new import_restructure.default.LazyArray(import_restructure.default.uint16, "glyphCount")
    }
  }),
  2: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    sequences: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$Sequence), "count")
  },
  3: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    alternateSet: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$AlternateSet), "count")
  },
  4: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    ligatureSets: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$LigatureSet), "count")
  },
  5: $401800e36a580e62$export$841858b892ce1f4c,
  6: $401800e36a580e62$export$5e6d09e6861162f6,
  7: {
    substFormat: import_restructure.default.uint16,
    lookupType: import_restructure.default.uint16,
    extension: new import_restructure.default.Pointer(import_restructure.default.uint32, null)
  },
  8: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    backtrackCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "backtrackGlyphCount"),
    lookaheadGlyphCount: import_restructure.default.uint16,
    lookaheadCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "lookaheadGlyphCount"),
    glyphCount: import_restructure.default.uint16,
    substitutes: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  }
});
$7176ea6bb7dcf1c6$var$GSUBLookup.versions[7].extension.type = $7176ea6bb7dcf1c6$var$GSUBLookup;
var $7176ea6bb7dcf1c6$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    scriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$3e15fc05ce864229),
    featureList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
    lookupList: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($7176ea6bb7dcf1c6$var$GSUBLookup))
  },
  65536: {},
  65537: {
    featureVariations: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
  }
});
var $71e9e74bb6366bce$var$JstfGSUBModList = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $71e9e74bb6366bce$var$JstfPriority = new import_restructure.default.Struct({
  shrinkageEnableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageDisableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageEnableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageDisableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageJstfMax: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f)),
  extensionEnableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionDisableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionEnableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionDisableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionJstfMax: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
});
var $71e9e74bb6366bce$var$JstfLangSys = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfPriority), import_restructure.default.uint16);
var $71e9e74bb6366bce$var$JstfLangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  jstfLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfLangSys)
});
var $71e9e74bb6366bce$var$JstfScript = new import_restructure.default.Struct({
  extenderGlyphs: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16)),
  defaultLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfLangSys),
  langSysCount: import_restructure.default.uint16,
  langSysRecords: new import_restructure.default.Array($71e9e74bb6366bce$var$JstfLangSysRecord, "langSysCount")
});
var $71e9e74bb6366bce$var$JstfScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfScript, {
    type: "parent"
  })
});
var $71e9e74bb6366bce$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  scriptCount: import_restructure.default.uint16,
  scriptList: new import_restructure.default.Array($71e9e74bb6366bce$var$JstfScriptRecord, "scriptCount")
});
var $706225b6909f9418$var$VariableSizeNumber = class {
  constructor(size) {
    this._size = size;
  }
  decode(stream2, parent) {
    switch (this.size(0, parent)) {
      case 1:
        return stream2.readUInt8();
      case 2:
        return stream2.readUInt16BE();
      case 3:
        return stream2.readUInt24BE();
      case 4:
        return stream2.readUInt32BE();
    }
  }
  size(val, parent) {
    return (0, import_utils.resolveLength)(this._size, null, parent);
  }
};
var $706225b6909f9418$var$MapDataEntry = new import_restructure.default.Struct({
  entry: new $706225b6909f9418$var$VariableSizeNumber(
    (t) => ((t.parent.entryFormat & 48) >> 4) + 1
  ),
  outerIndex: (t) => t.entry >> (t.parent.entryFormat & 15) + 1,
  innerIndex: (t) => t.entry & (1 << (t.parent.entryFormat & 15) + 1) - 1
});
var $706225b6909f9418$var$DeltaSetIndexMap = new import_restructure.default.Struct({
  entryFormat: import_restructure.default.uint16,
  mapCount: import_restructure.default.uint16,
  mapData: new import_restructure.default.Array($706225b6909f9418$var$MapDataEntry, "mapCount")
});
var $706225b6909f9418$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241),
  advanceWidthMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
  LSBMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
  RSBMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap)
});
var $4a144b8ae6f53b7c$var$Signature = new import_restructure.default.Struct({
  format: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  offset: import_restructure.default.uint32
});
var $4a144b8ae6f53b7c$var$SignatureBlock = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16, 2),
  cbSignature: import_restructure.default.uint32,
  signature: new import_restructure.default.Buffer("cbSignature")
});
var $4a144b8ae6f53b7c$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  ulVersion: import_restructure.default.uint32,
  usNumSigs: import_restructure.default.uint16,
  usFlag: import_restructure.default.uint16,
  signatures: new import_restructure.default.Array($4a144b8ae6f53b7c$var$Signature, "usNumSigs"),
  signatureBlocks: new import_restructure.default.Array($4a144b8ae6f53b7c$var$SignatureBlock, "usNumSigs")
});
var $a2086c3965d7b105$var$GaspRange = new import_restructure.default.Struct({
  rangeMaxPPEM: import_restructure.default.uint16,
  rangeGaspBehavior: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "grayscale",
    "gridfit",
    "symmetricSmoothing",
    "symmetricGridfit"
    // only in version 1, for ClearType
  ])
});
var $a2086c3965d7b105$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRanges: import_restructure.default.uint16,
  gaspRanges: new import_restructure.default.Array($a2086c3965d7b105$var$GaspRange, "numRanges")
  // Sorted by ppem
});
var $de83746c6c1c8559$var$DeviceRecord = new import_restructure.default.Struct({
  pixelSize: import_restructure.default.uint8,
  maximumWidth: import_restructure.default.uint8,
  widths: new import_restructure.default.Array(
    import_restructure.default.uint8,
    (t) => t.parent.parent.maxp.numGlyphs
  )
});
var $de83746c6c1c8559$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRecords: import_restructure.default.int16,
  sizeDeviceRecord: import_restructure.default.int32,
  records: new import_restructure.default.Array($de83746c6c1c8559$var$DeviceRecord, "numRecords")
});
var $5a2237650c44652a$var$KernPair = new import_restructure.default.Struct({
  left: import_restructure.default.uint16,
  right: import_restructure.default.uint16,
  value: import_restructure.default.int16
});
var $5a2237650c44652a$var$ClassTable = new import_restructure.default.Struct({
  firstGlyph: import_restructure.default.uint16,
  nGlyphs: import_restructure.default.uint16,
  offsets: new import_restructure.default.Array(import_restructure.default.uint16, "nGlyphs"),
  max: (t) => t.offsets.length && Math.max.apply(Math, t.offsets)
});
var $5a2237650c44652a$var$Kern2Array = new import_restructure.default.Struct({
  off: (t) => t._startOffset - t.parent.parent._startOffset,
  len: (t) => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),
  values: new import_restructure.default.LazyArray(import_restructure.default.int16, "len")
});
var $5a2237650c44652a$var$KernSubtable = new import_restructure.default.VersionedStruct("format", {
  0: {
    nPairs: import_restructure.default.uint16,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16,
    pairs: new import_restructure.default.Array($5a2237650c44652a$var$KernPair, "nPairs")
  },
  2: {
    rowWidth: import_restructure.default.uint16,
    leftTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$ClassTable, {
      type: "parent"
    }),
    rightTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$ClassTable, {
      type: "parent"
    }),
    array: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$Kern2Array, {
      type: "parent"
    })
  },
  3: {
    glyphCount: import_restructure.default.uint16,
    kernValueCount: import_restructure.default.uint8,
    leftClassCount: import_restructure.default.uint8,
    rightClassCount: import_restructure.default.uint8,
    flags: import_restructure.default.uint8,
    kernValue: new import_restructure.default.Array(import_restructure.default.int16, "kernValueCount"),
    leftClass: new import_restructure.default.Array(import_restructure.default.uint8, "glyphCount"),
    rightClass: new import_restructure.default.Array(import_restructure.default.uint8, "glyphCount"),
    kernIndex: new import_restructure.default.Array(
      import_restructure.default.uint8,
      (t) => t.leftClassCount * t.rightClassCount
    )
  }
});
var $5a2237650c44652a$var$KernTable = new import_restructure.default.VersionedStruct("version", {
  0: {
    subVersion: import_restructure.default.uint16,
    length: import_restructure.default.uint16,
    format: import_restructure.default.uint8,
    coverage: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
      "horizontal",
      "minimum",
      "crossStream",
      "override"
      // If set to 1 the value in this table replaces the accumulated value
    ]),
    subtable: $5a2237650c44652a$var$KernSubtable,
    padding: new import_restructure.default.Reserved(
      import_restructure.default.uint8,
      (t) => t.length - t._currentOffset
    )
  },
  1: {
    length: import_restructure.default.uint32,
    coverage: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
      null,
      null,
      null,
      null,
      null,
      "variation",
      "crossStream",
      "vertical"
      // Set if table has vertical kerning values
    ]),
    format: import_restructure.default.uint8,
    tupleIndex: import_restructure.default.uint16,
    subtable: $5a2237650c44652a$var$KernSubtable,
    padding: new import_restructure.default.Reserved(
      import_restructure.default.uint8,
      (t) => t.length - t._currentOffset
    )
  }
});
var $5a2237650c44652a$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    nTables: import_restructure.default.uint16,
    tables: new import_restructure.default.Array($5a2237650c44652a$var$KernTable, "nTables")
  },
  1: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    nTables: import_restructure.default.uint32,
    tables: new import_restructure.default.Array($5a2237650c44652a$var$KernTable, "nTables")
  }
});
var $1eadf070c8b34e48$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numGlyphs: import_restructure.default.uint16,
  yPels: new import_restructure.default.Array(import_restructure.default.uint8, "numGlyphs")
});
var $8eb2f7302ef75084$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  fontNumber: import_restructure.default.uint32,
  pitch: import_restructure.default.uint16,
  xHeight: import_restructure.default.uint16,
  style: import_restructure.default.uint16,
  typeFamily: import_restructure.default.uint16,
  capHeight: import_restructure.default.uint16,
  symbolSet: import_restructure.default.uint16,
  typeface: new import_restructure.default.String(16),
  characterComplement: new import_restructure.default.String(8),
  fileName: new import_restructure.default.String(6),
  strokeWeight: new import_restructure.default.String(1),
  widthType: new import_restructure.default.String(1),
  serifStyle: import_restructure.default.uint8,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint8)
});
var $8223b0d67f5fd7c9$var$Ratio = new import_restructure.default.Struct({
  bCharSet: import_restructure.default.uint8,
  xRatio: import_restructure.default.uint8,
  yStartRatio: import_restructure.default.uint8,
  yEndRatio: import_restructure.default.uint8
  // Ending y-Ratio value
});
var $8223b0d67f5fd7c9$var$vTable = new import_restructure.default.Struct({
  yPelHeight: import_restructure.default.uint16,
  yMax: import_restructure.default.int16,
  yMin: import_restructure.default.int16
  // Minimum value (in pels) for this yPelHeight
});
var $8223b0d67f5fd7c9$var$VdmxGroup = new import_restructure.default.Struct({
  recs: import_restructure.default.uint16,
  startsz: import_restructure.default.uint8,
  endsz: import_restructure.default.uint8,
  entries: new import_restructure.default.Array($8223b0d67f5fd7c9$var$vTable, "recs")
  // The VDMX records
});
var $8223b0d67f5fd7c9$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRecs: import_restructure.default.uint16,
  numRatios: import_restructure.default.uint16,
  ratioRanges: new import_restructure.default.Array($8223b0d67f5fd7c9$var$Ratio, "numRatios"),
  offsets: new import_restructure.default.Array(import_restructure.default.uint16, "numRatios"),
  groups: new import_restructure.default.Array($8223b0d67f5fd7c9$var$VdmxGroup, "numRecs")
  // The actual VDMX groupings
});
var $4b17ac6a75c85897$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  ascent: import_restructure.default.int16,
  descent: import_restructure.default.int16,
  lineGap: import_restructure.default.int16,
  advanceHeightMax: import_restructure.default.int16,
  minTopSideBearing: import_restructure.default.int16,
  minBottomSideBearing: import_restructure.default.int16,
  yMaxExtent: import_restructure.default.int16,
  caretSlopeRise: import_restructure.default.int16,
  caretSlopeRun: import_restructure.default.int16,
  caretOffset: import_restructure.default.int16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.int16, 4),
  metricDataFormat: import_restructure.default.int16,
  numberOfMetrics: import_restructure.default.uint16
  // Number of advance heights in the Vertical Metrics table
});
var $a9f9c5185d84186d$var$VmtxEntry = new import_restructure.default.Struct({
  advance: import_restructure.default.uint16,
  bearing: import_restructure.default.int16
  // The top sidebearing of the glyph
});
var $a9f9c5185d84186d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  metrics: new import_restructure.default.LazyArray(
    $a9f9c5185d84186d$var$VmtxEntry,
    (t) => t.parent.vhea.numberOfMetrics
  ),
  bearings: new import_restructure.default.LazyArray(
    import_restructure.default.int16,
    (t) => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics
  )
});
var $d9cf6d6467871d68$var$shortFrac = new import_restructure.default.Fixed(16, "BE", 14);
var $d9cf6d6467871d68$var$Correspondence = new import_restructure.default.Struct({
  fromCoord: $d9cf6d6467871d68$var$shortFrac,
  toCoord: $d9cf6d6467871d68$var$shortFrac
});
var $d9cf6d6467871d68$var$Segment = new import_restructure.default.Struct({
  pairCount: import_restructure.default.uint16,
  correspondence: new import_restructure.default.Array($d9cf6d6467871d68$var$Correspondence, "pairCount")
});
var $d9cf6d6467871d68$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  axisCount: import_restructure.default.uint32,
  segment: new import_restructure.default.Array($d9cf6d6467871d68$var$Segment, "axisCount")
});
var $c35aa0a165e05d15$var$UnboundedArrayAccessor = class {
  constructor(type, stream2, parent) {
    this.type = type;
    this.stream = stream2;
    this.parent = parent;
    this.base = this.stream.pos;
    this._items = [];
  }
  getItem(index) {
    if (this._items[index] == null) {
      let pos = this.stream.pos;
      this.stream.pos = this.base + this.type.size(null, this.parent) * index;
      this._items[index] = this.type.decode(this.stream, this.parent);
      this.stream.pos = pos;
    }
    return this._items[index];
  }
  inspect() {
    return `[UnboundedArray ${this.type.constructor.name}]`;
  }
};
var $c35aa0a165e05d15$export$c5af1eebc882e39a = class extends import_restructure.default.Array {
  constructor(type) {
    super(type, 0);
  }
  decode(stream2, parent) {
    return new $c35aa0a165e05d15$var$UnboundedArrayAccessor(this.type, stream2, parent);
  }
};
var $c35aa0a165e05d15$export$8351f8c2ae2f103c = function(ValueType = import_restructure.default.uint16) {
  class Shadow {
    constructor(type) {
      this.type = type;
    }
    decode(stream2, ctx) {
      ctx = ctx.parent.parent;
      return this.type.decode(stream2, ctx);
    }
    size(val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.size(val, ctx);
    }
    encode(stream2, val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.encode(stream2, val, ctx);
    }
  }
  ValueType = new Shadow(ValueType);
  let BinarySearchHeader = new import_restructure.default.Struct({
    unitSize: import_restructure.default.uint16,
    nUnits: import_restructure.default.uint16,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16
  });
  let LookupSegmentSingle = new import_restructure.default.Struct({
    lastGlyph: import_restructure.default.uint16,
    firstGlyph: import_restructure.default.uint16,
    value: ValueType
  });
  let LookupSegmentArray = new import_restructure.default.Struct({
    lastGlyph: import_restructure.default.uint16,
    firstGlyph: import_restructure.default.uint16,
    values: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array(
      ValueType,
      (t) => t.lastGlyph - t.firstGlyph + 1
    ), {
      type: "parent"
    })
  });
  let LookupSingle = new import_restructure.default.Struct({
    glyph: import_restructure.default.uint16,
    value: ValueType
  });
  return new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    0: {
      values: new $c35aa0a165e05d15$export$c5af1eebc882e39a(ValueType)
      // length == number of glyphs maybe?
    },
    2: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(
        LookupSegmentSingle,
        (t) => t.binarySearchHeader.nUnits
      )
    },
    4: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(
        LookupSegmentArray,
        (t) => t.binarySearchHeader.nUnits
      )
    },
    6: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(
        LookupSingle,
        (t) => t.binarySearchHeader.nUnits
      )
    },
    8: {
      firstGlyph: import_restructure.default.uint16,
      count: import_restructure.default.uint16,
      values: new import_restructure.default.Array(ValueType, "count")
    }
  });
};
function $c35aa0a165e05d15$export$79f7d93d790934ba(entryData = {}, lookupType = import_restructure.default.uint16) {
  let entry = Object.assign({
    newState: import_restructure.default.uint16,
    flags: import_restructure.default.uint16
  }, entryData);
  let Entry = new import_restructure.default.Struct(entry);
  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Array(
    import_restructure.default.uint16,
    (t) => t.nClasses
  ));
  let StateHeader = new import_restructure.default.Struct({
    nClasses: import_restructure.default.uint32,
    classTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c(lookupType)),
    stateArray: new import_restructure.default.Pointer(import_restructure.default.uint32, StateArray),
    entryTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
  });
  return StateHeader;
}
function $c35aa0a165e05d15$export$105027425199cc51(entryData = {}, lookupType = import_restructure.default.uint16) {
  let ClassLookupTable = new import_restructure.default.Struct({
    version() {
      return 8;
    },
    firstGlyph: import_restructure.default.uint16,
    values: new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16)
  });
  let entry = Object.assign({
    newStateOffset: import_restructure.default.uint16,
    // convert offset to stateArray index
    newState: (t) => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,
    flags: import_restructure.default.uint16
  }, entryData);
  let Entry = new import_restructure.default.Struct(entry);
  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Array(
    import_restructure.default.uint8,
    (t) => t.nClasses
  ));
  let StateHeader1 = new import_restructure.default.Struct({
    nClasses: import_restructure.default.uint16,
    classTable: new import_restructure.default.Pointer(import_restructure.default.uint16, ClassLookupTable),
    stateArray: new import_restructure.default.Pointer(import_restructure.default.uint16, StateArray),
    entryTable: new import_restructure.default.Pointer(import_restructure.default.uint16, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
  });
  return StateHeader1;
}
var $53e6946cfb72ad0c$var$BslnSubtable = new import_restructure.default.VersionedStruct("format", {
  0: {
    deltas: new import_restructure.default.Array(import_restructure.default.int16, 32)
  },
  1: {
    deltas: new import_restructure.default.Array(import_restructure.default.int16, 32),
    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(import_restructure.default.uint16)
  },
  2: {
    standardGlyph: import_restructure.default.uint16,
    controlPoints: new import_restructure.default.Array(import_restructure.default.uint16, 32)
  },
  3: {
    standardGlyph: import_restructure.default.uint16,
    controlPoints: new import_restructure.default.Array(import_restructure.default.uint16, 32),
    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(import_restructure.default.uint16)
  }
});
var $53e6946cfb72ad0c$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  format: import_restructure.default.uint16,
  defaultBaseline: import_restructure.default.uint16,
  subtable: $53e6946cfb72ad0c$var$BslnSubtable
});
var $117550c71e13cb3d$var$Setting = new import_restructure.default.Struct({
  setting: import_restructure.default.uint16,
  nameIndex: import_restructure.default.int16,
  name: (t) => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]
});
var $117550c71e13cb3d$var$FeatureName = new import_restructure.default.Struct({
  feature: import_restructure.default.uint16,
  nSettings: import_restructure.default.uint16,
  settingTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($117550c71e13cb3d$var$Setting, "nSettings"), {
    type: "parent"
  }),
  featureFlags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    null,
    null,
    null,
    null,
    null,
    null,
    "hasDefault",
    "exclusive"
  ]),
  defaultSetting: import_restructure.default.uint8,
  nameIndex: import_restructure.default.int16,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameIndex]
});
var $117550c71e13cb3d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  featureNameCount: import_restructure.default.uint16,
  reserved1: new import_restructure.default.Reserved(import_restructure.default.uint16),
  reserved2: new import_restructure.default.Reserved(import_restructure.default.uint32),
  featureNames: new import_restructure.default.Array($117550c71e13cb3d$var$FeatureName, "featureNameCount")
});
var $551f92fdd501454e$var$Axis = new import_restructure.default.Struct({
  axisTag: new import_restructure.default.String(4),
  minValue: import_restructure.default.fixed32,
  defaultValue: import_restructure.default.fixed32,
  maxValue: import_restructure.default.fixed32,
  flags: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID]
});
var $551f92fdd501454e$var$Instance = new import_restructure.default.Struct({
  nameID: import_restructure.default.uint16,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID],
  flags: import_restructure.default.uint16,
  coord: new import_restructure.default.Array(
    import_restructure.default.fixed32,
    (t) => t.parent.axisCount
  ),
  postscriptNameID: new import_restructure.default.Optional(
    import_restructure.default.uint16,
    (t) => t.parent.instanceSize - t._currentOffset > 0
  )
});
var $551f92fdd501454e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  offsetToData: import_restructure.default.uint16,
  countSizePairs: import_restructure.default.uint16,
  axisCount: import_restructure.default.uint16,
  axisSize: import_restructure.default.uint16,
  instanceCount: import_restructure.default.uint16,
  instanceSize: import_restructure.default.uint16,
  axis: new import_restructure.default.Array($551f92fdd501454e$var$Axis, "axisCount"),
  instance: new import_restructure.default.Array($551f92fdd501454e$var$Instance, "instanceCount")
});
var $d03801ee7a5f4d7c$var$shortFrac = new import_restructure.default.Fixed(16, "BE", 14);
var $d03801ee7a5f4d7c$var$Offset = class {
  static decode(stream2, parent) {
    return parent.flags ? stream2.readUInt32BE() : stream2.readUInt16BE() * 2;
  }
};
var $d03801ee7a5f4d7c$var$gvar = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  axisCount: import_restructure.default.uint16,
  globalCoordCount: import_restructure.default.uint16,
  globalCoords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(new import_restructure.default.Array($d03801ee7a5f4d7c$var$shortFrac, "axisCount"), "globalCoordCount")),
  glyphCount: import_restructure.default.uint16,
  flags: import_restructure.default.uint16,
  offsetToData: import_restructure.default.uint32,
  offsets: new import_restructure.default.Array(
    new import_restructure.default.Pointer($d03801ee7a5f4d7c$var$Offset, "void", {
      relativeTo: (ctx) => ctx.offsetToData,
      allowNull: false
    }),
    (t) => t.glyphCount + 1
  )
});
var $d03801ee7a5f4d7c$export$2e2bcd8739ae039 = $d03801ee7a5f4d7c$var$gvar;
var $70ffc7fec5b89b5e$var$ClassTable = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  coverage: import_restructure.default.uint16,
  subFeatureFlags: import_restructure.default.uint32,
  stateTable: new $c35aa0a165e05d15$export$105027425199cc51()
});
var $70ffc7fec5b89b5e$var$WidthDeltaRecord = new import_restructure.default.Struct({
  justClass: import_restructure.default.uint32,
  beforeGrowLimit: import_restructure.default.fixed32,
  beforeShrinkLimit: import_restructure.default.fixed32,
  afterGrowLimit: import_restructure.default.fixed32,
  afterShrinkLimit: import_restructure.default.fixed32,
  growFlags: import_restructure.default.uint16,
  shrinkFlags: import_restructure.default.uint16
});
var $70ffc7fec5b89b5e$var$WidthDeltaCluster = new import_restructure.default.Array($70ffc7fec5b89b5e$var$WidthDeltaRecord, import_restructure.default.uint32);
var $70ffc7fec5b89b5e$var$ActionData = new import_restructure.default.VersionedStruct("actionType", {
  0: {
    lowerLimit: import_restructure.default.fixed32,
    upperLimit: import_restructure.default.fixed32,
    order: import_restructure.default.uint16,
    glyphs: new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16)
  },
  1: {
    addGlyph: import_restructure.default.uint16
  },
  2: {
    substThreshold: import_restructure.default.fixed32,
    addGlyph: import_restructure.default.uint16,
    substGlyph: import_restructure.default.uint16
  },
  3: {},
  4: {
    variationAxis: import_restructure.default.uint32,
    minimumLimit: import_restructure.default.fixed32,
    noStretchValue: import_restructure.default.fixed32,
    maximumLimit: import_restructure.default.fixed32
  },
  5: {
    flags: import_restructure.default.uint16,
    glyph: import_restructure.default.uint16
  }
});
var $70ffc7fec5b89b5e$var$Action = new import_restructure.default.Struct({
  actionClass: import_restructure.default.uint16,
  actionType: import_restructure.default.uint16,
  actionLength: import_restructure.default.uint32,
  actionData: $70ffc7fec5b89b5e$var$ActionData,
  padding: new import_restructure.default.Reserved(
    import_restructure.default.uint8,
    (t) => t.actionLength - t._currentOffset
  )
});
var $70ffc7fec5b89b5e$var$PostcompensationAction = new import_restructure.default.Array($70ffc7fec5b89b5e$var$Action, import_restructure.default.uint32);
var $70ffc7fec5b89b5e$var$PostCompensationTable = new import_restructure.default.Struct({
  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$PostcompensationAction))
});
var $70ffc7fec5b89b5e$var$JustificationTable = new import_restructure.default.Struct({
  classTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$ClassTable, {
    type: "parent"
  }),
  wdcOffset: import_restructure.default.uint16,
  postCompensationTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$PostCompensationTable, {
    type: "parent"
  }),
  widthDeltaClusters: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$WidthDeltaCluster, {
    type: "parent",
    relativeTo: (ctx) => ctx.wdcOffset
  }))
});
var $70ffc7fec5b89b5e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  format: import_restructure.default.uint16,
  horizontal: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$JustificationTable),
  vertical: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$JustificationTable)
});
var $dd743f90b6270daa$var$LigatureData = {
  action: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$ContextualData = {
  markIndex: import_restructure.default.uint16,
  currentIndex: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$InsertionData = {
  currentInsertIndex: import_restructure.default.uint16,
  markedInsertIndex: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$SubstitutionTable = new import_restructure.default.Struct({
  items: new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c()))
});
var $dd743f90b6270daa$var$SubtableData = new import_restructure.default.VersionedStruct("type", {
  0: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba()
  },
  1: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$ContextualData),
    substitutionTable: new import_restructure.default.Pointer(import_restructure.default.uint32, $dd743f90b6270daa$var$SubstitutionTable)
  },
  2: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$LigatureData),
    ligatureActions: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint32)),
    components: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16)),
    ligatureList: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16))
  },
  4: {
    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c()
  },
  5: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$InsertionData),
    insertionActions: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16))
  }
});
var $dd743f90b6270daa$var$Subtable = new import_restructure.default.Struct({
  length: import_restructure.default.uint32,
  coverage: import_restructure.default.uint24,
  type: import_restructure.default.uint8,
  subFeatureFlags: import_restructure.default.uint32,
  table: $dd743f90b6270daa$var$SubtableData,
  padding: new import_restructure.default.Reserved(
    import_restructure.default.uint8,
    (t) => t.length - t._currentOffset
  )
});
var $dd743f90b6270daa$var$FeatureEntry = new import_restructure.default.Struct({
  featureType: import_restructure.default.uint16,
  featureSetting: import_restructure.default.uint16,
  enableFlags: import_restructure.default.uint32,
  disableFlags: import_restructure.default.uint32
});
var $dd743f90b6270daa$var$MorxChain = new import_restructure.default.Struct({
  defaultFlags: import_restructure.default.uint32,
  chainLength: import_restructure.default.uint32,
  nFeatureEntries: import_restructure.default.uint32,
  nSubtables: import_restructure.default.uint32,
  features: new import_restructure.default.Array($dd743f90b6270daa$var$FeatureEntry, "nFeatureEntries"),
  subtables: new import_restructure.default.Array($dd743f90b6270daa$var$Subtable, "nSubtables")
});
var $dd743f90b6270daa$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  unused: new import_restructure.default.Reserved(import_restructure.default.uint16),
  nChains: import_restructure.default.uint32,
  chains: new import_restructure.default.Array($dd743f90b6270daa$var$MorxChain, "nChains")
});
var $40e500cc5163d19f$var$OpticalBounds = new import_restructure.default.Struct({
  left: import_restructure.default.int16,
  top: import_restructure.default.int16,
  right: import_restructure.default.int16,
  bottom: import_restructure.default.int16
});
var $40e500cc5163d19f$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  format: import_restructure.default.uint16,
  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($40e500cc5163d19f$var$OpticalBounds)
});
var $60d88718e7e1fa97$var$tables = {};
var $60d88718e7e1fa97$export$2e2bcd8739ae039 = $60d88718e7e1fa97$var$tables;
$60d88718e7e1fa97$var$tables.cmap = $9aad45a64cf8e4b5$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.head = $b41847595480ce3a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hhea = $5fda302e2516d0c7$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hmtx = $28788c978325a3e1$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.maxp = $9e68d972c1fae2a9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.name = $866b9b7dd32d7242$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["OS/2"] = $268023eac606db57$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.post = $5287343c85bea17e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fpgm = $6f2fae1f8d2b4b41$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.loca = $cae48a5e791773ec$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.prep = $7b12cfca10f7f884$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["cvt "] = $5768e6ef8b1a512a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.glyf = $06e9f2dae5795013$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["CFF "] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["CFF2"] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VORG = $79f2eb50e4490e51$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.EBLC = $234c291eab07e474$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CBLC = $60d88718e7e1fa97$var$tables.EBLC;
$60d88718e7e1fa97$var$tables.sbix = $55d04373f0cac44e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.COLR = $0e59eccfa3005d9d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CPAL = $23affa36a12f7915$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.BASE = $9fffe61eb0785f74$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GDEF = $418face38567ee6e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GPOS = $010e157f6d8a40e9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GSUB = $7176ea6bb7dcf1c6$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.JSTF = $71e9e74bb6366bce$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.HVAR = $706225b6909f9418$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.DSIG = $4a144b8ae6f53b7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gasp = $a2086c3965d7b105$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hdmx = $de83746c6c1c8559$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.kern = $5a2237650c44652a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.LTSH = $1eadf070c8b34e48$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.PCLT = $8eb2f7302ef75084$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VDMX = $8223b0d67f5fd7c9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vhea = $4b17ac6a75c85897$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vmtx = $a9f9c5185d84186d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.avar = $d9cf6d6467871d68$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.bsln = $53e6946cfb72ad0c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.feat = $117550c71e13cb3d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fvar = $551f92fdd501454e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gvar = $d03801ee7a5f4d7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.just = $70ffc7fec5b89b5e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.morx = $dd743f90b6270daa$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.opbd = $40e500cc5163d19f$export$2e2bcd8739ae039;
var $d5e01a2298150c9a$var$TableEntry = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  checkSum: import_restructure.default.uint32,
  offset: new import_restructure.default.Pointer(import_restructure.default.uint32, "void", {
    type: "global"
  }),
  length: import_restructure.default.uint32
});
var $d5e01a2298150c9a$var$Directory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  numTables: import_restructure.default.uint16,
  searchRange: import_restructure.default.uint16,
  entrySelector: import_restructure.default.uint16,
  rangeShift: import_restructure.default.uint16,
  tables: new import_restructure.default.Array($d5e01a2298150c9a$var$TableEntry, "numTables")
});
$d5e01a2298150c9a$var$Directory.process = function() {
  let tables = {};
  for (let table of this.tables) tables[table.tag] = table;
  this.tables = tables;
};
$d5e01a2298150c9a$var$Directory.preEncode = function(stream2) {
  let tables = [];
  for (let tag in this.tables) {
    let table = this.tables[tag];
    if (table) tables.push({
      tag,
      checkSum: 0,
      offset: new import_restructure.default.VoidPointer($60d88718e7e1fa97$export$2e2bcd8739ae039[tag], table),
      length: $60d88718e7e1fa97$export$2e2bcd8739ae039[tag].size(table)
    });
  }
  this.tag = "true";
  this.numTables = tables.length;
  this.tables = tables;
  let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
  let maxPowerOf2 = Math.pow(2, maxExponentFor2);
  this.searchRange = maxPowerOf2 * 16;
  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
  this.rangeShift = this.numTables * 16 - this.searchRange;
};
var $d5e01a2298150c9a$export$2e2bcd8739ae039 = $d5e01a2298150c9a$var$Directory;
function $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(arr, cmp) {
  let min = 0;
  let max = arr.length - 1;
  while (min <= max) {
    let mid = min + max >> 1;
    let res = cmp(arr[mid]);
    if (res < 0) max = mid - 1;
    else if (res > 0) min = mid + 1;
    else return mid;
  }
  return -1;
}
function $f3ad94c9f84f4d57$export$d02631cccf789723(index, end) {
  let $f3ad94c9f84f4d57$export$d02631cccf7897232 = [];
  while (index < end) $f3ad94c9f84f4d57$export$d02631cccf7897232.push(index++);
  return $f3ad94c9f84f4d57$export$d02631cccf7897232;
}
var _class;
var $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 = (_class = class $5d24cfe1a4cd83bb$export$2e2bcd8739ae0392 {
  constructor(cmapTable) {
    this.encoding = null;
    this.cmap = this.findSubtable(cmapTable, [
      // 32-bit subtables
      [
        3,
        10
      ],
      [
        0,
        6
      ],
      [
        0,
        4
      ],
      // 16-bit subtables
      [
        3,
        1
      ],
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        0,
        0
      ]
    ]);
    if (!this.cmap && import_iconv_lite.default) for (let cmap of cmapTable.tables) {
      let encoding = $111d7d948974b54a$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
      if (import_iconv_lite.default.encodingExists(encoding)) {
        this.cmap = cmap.table;
        this.encoding = encoding;
      }
    }
    if (!this.cmap) throw new Error("Could not find a supported cmap table");
    this.uvs = this.findSubtable(cmapTable, [
      [
        0,
        5
      ]
    ]);
    if (this.uvs && this.uvs.version !== 14) this.uvs = null;
  }
  findSubtable(cmapTable, pairs) {
    for (let [platformID, encodingID] of pairs) for (let cmap of cmapTable.tables) {
      if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;
    }
    return null;
  }
  lookup(codepoint, variationSelector) {
    if (this.encoding) {
      let buf = import_iconv_lite.default.encode(String.fromCodePoint(codepoint), this.encoding);
      codepoint = 0;
      for (let i = 0; i < buf.length; i++) codepoint = codepoint << 8 | buf[i];
    } else if (variationSelector) {
      let gid = this.getVariationSelector(codepoint, variationSelector);
      if (gid) return gid;
    }
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0:
        return cmap.codeMap.get(codepoint) || 0;
      case 4: {
        let min = 0;
        let max = cmap.segCount - 1;
        while (min <= max) {
          let mid = min + max >> 1;
          if (codepoint < cmap.startCode.get(mid)) max = mid - 1;
          else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;
          else {
            let rangeOffset = cmap.idRangeOffset.get(mid);
            let gid;
            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);
            else {
              let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
              gid = cmap.glyphIndexArray.get(index) || 0;
              if (gid !== 0) gid += cmap.idDelta.get(mid);
            }
            return gid & 65535;
          }
        }
        return 0;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
      case 12:
      case 13: {
        let min = 0;
        let max = cmap.nGroups - 1;
        while (min <= max) {
          let mid = min + max >> 1;
          let group = cmap.groups.get(mid);
          if (codepoint < group.startCharCode) max = mid - 1;
          else if (codepoint > group.endCharCode) min = mid + 1;
          else {
            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);
            else return group.glyphID;
          }
        }
        return 0;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
  getVariationSelector(codepoint, variationSelector) {
    if (!this.uvs) return 0;
    let selectors = this.uvs.varSelectors.toArray();
    let i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(
      selectors,
      (x) => variationSelector - x.varSelector
    );
    let sel = selectors[i];
    if (i !== -1 && sel.defaultUVS) i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(
      sel.defaultUVS,
      (x) => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0
    );
    if (i !== -1 && sel.nonDefaultUVS) {
      i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(
        sel.nonDefaultUVS,
        (x) => codepoint - x.unicodeValue
      );
      if (i !== -1) return sel.nonDefaultUVS[i].glyphID;
    }
    return 0;
  }
  getCharacterSet() {
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0:
        return $f3ad94c9f84f4d57$export$d02631cccf789723(0, cmap.codeMap.length);
      case 4: {
        let res = [];
        let endCodes = cmap.endCode.toArray();
        for (let i = 0; i < endCodes.length; i++) {
          let tail = endCodes[i] + 1;
          let start = cmap.startCode.get(i);
          res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(start, tail));
        }
        return res;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return $f3ad94c9f84f4d57$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
      case 12:
      case 13: {
        let res = [];
        for (let group of cmap.groups.toArray()) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
        return res;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
  codePointsForGlyph(gid) {
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0: {
        let res = [];
        for (let i = 0; i < 256; i++) if (cmap.codeMap.get(i) === gid) res.push(i);
        return res;
      }
      case 4: {
        let res = [];
        for (let i = 0; i < cmap.segCount; i++) {
          let end = cmap.endCode.get(i);
          let start = cmap.startCode.get(i);
          let rangeOffset = cmap.idRangeOffset.get(i);
          let delta = cmap.idDelta.get(i);
          for (var c = start; c <= end; c++) {
            let g = 0;
            if (rangeOffset === 0) g = c + delta;
            else {
              let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);
              g = cmap.glyphIndexArray.get(index) || 0;
              if (g !== 0) g += delta;
            }
            if (g === gid) res.push(c);
          }
        }
        return res;
      }
      case 12: {
        let res = [];
        for (let group of cmap.groups.toArray()) if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));
        return res;
      }
      case 13: {
        let res = [];
        for (let group of cmap.groups.toArray()) if (gid === group.glyphID) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
        return res;
      }
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
}, _applyDecoratedDescriptor(_class.prototype, "getCharacterSet", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getCharacterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "codePointsForGlyph", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "codePointsForGlyph"), _class.prototype), _class);
var $8526e21034212dc1$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.kern = font.kern;
  }
  process(glyphs, positions) {
    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
      let left = glyphs[glyphIndex].id;
      let right = glyphs[glyphIndex + 1].id;
      positions[glyphIndex].xAdvance += this.getKerning(left, right);
    }
  }
  getKerning(left, right) {
    let res = 0;
    for (let table of this.kern.tables) {
      if (table.coverage.crossStream) continue;
      switch (table.version) {
        case 0:
          if (!table.coverage.horizontal) continue;
          break;
        case 1:
          if (table.coverage.vertical || table.coverage.variation) continue;
          break;
        default:
          throw new Error(`Unsupported kerning table version ${table.version}`);
      }
      let val = 0;
      let s = table.subtable;
      switch (table.format) {
        case 0:
          let pairIdx = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(s.pairs, function(pair) {
            return left - pair.left || right - pair.right;
          });
          if (pairIdx >= 0) val = s.pairs[pairIdx].value;
          break;
        case 2:
          let leftOffset = 0, rightOffset = 0;
          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
          else leftOffset = s.array.off;
          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
          let index = (leftOffset + rightOffset - s.array.off) / 2;
          val = s.array.values.get(index);
          break;
        case 3:
          if (left >= s.glyphCount || right >= s.glyphCount) return 0;
          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
          break;
        default:
          throw new Error(`Unsupported kerning sub-table format ${table.format}`);
      }
      if (table.coverage.override) res = val;
      else res += val;
    }
    return res;
  }
};
var $e4967fef9afc586a$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.font = font;
  }
  positionGlyphs(glyphs, positions) {
    let clusterStart = 0;
    let clusterEnd = 0;
    for (let index = 0; index < glyphs.length; index++) {
      let glyph = glyphs[index];
      if (glyph.isMark) clusterEnd = index;
      else {
        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        clusterStart = clusterEnd = index;
      }
    }
    if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
    return positions;
  }
  positionCluster(glyphs, positions, clusterStart, clusterEnd) {
    let base = glyphs[clusterStart];
    let baseBox = base.cbox.copy();
    if (base.codePoints.length > 1)
      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
    let xOffset = -positions[clusterStart].xAdvance;
    let yOffset = 0;
    let yGap = this.font.unitsPerEm / 16;
    for (let index = clusterStart + 1; index <= clusterEnd; index++) {
      let mark = glyphs[index];
      let markBox = mark.cbox;
      let position = positions[index];
      let combiningClass = this.getCombiningClass(mark.codePoints[0]);
      if (combiningClass !== "Not_Reordered") {
        position.xOffset = position.yOffset = 0;
        switch (combiningClass) {
          case "Double_Above":
          case "Double_Below":
            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
            break;
          case "Attached_Below_Left":
          case "Below_Left":
          case "Above_Left":
            position.xOffset += baseBox.minX - markBox.minX;
            break;
          case "Attached_Above_Right":
          case "Below_Right":
          case "Above_Right":
            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
            break;
          default:
            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
        }
        switch (combiningClass) {
          case "Double_Below":
          case "Below_Left":
          case "Below":
          case "Below_Right":
          case "Attached_Below_Left":
          case "Attached_Below":
            if (combiningClass === "Attached_Below_Left" || combiningClass === "Attached_Below") baseBox.minY += yGap;
            position.yOffset = -baseBox.minY - markBox.maxY;
            baseBox.minY += markBox.height;
            break;
          case "Double_Above":
          case "Above_Left":
          case "Above":
          case "Above_Right":
          case "Attached_Above":
          case "Attached_Above_Right":
            if (combiningClass === "Attached_Above" || combiningClass === "Attached_Above_Right") baseBox.maxY += yGap;
            position.yOffset = baseBox.maxY - markBox.minY;
            baseBox.maxY += markBox.height;
            break;
        }
        position.xAdvance = position.yAdvance = 0;
        position.xOffset += xOffset;
        position.yOffset += yOffset;
      } else {
        xOffset -= position.xAdvance;
        yOffset -= position.yAdvance;
      }
    }
    return;
  }
  getCombiningClass(codePoint) {
    let combiningClass = $747425b437e121da$export$2e2bcd8739ae039.getCombiningClass(codePoint);
    if ((codePoint & -256) === 3584) {
      if (combiningClass === "Not_Reordered") switch (codePoint) {
        case 3633:
        case 3636:
        case 3637:
        case 3638:
        case 3639:
        case 3655:
        case 3660:
        case 3645:
        case 3662:
          return "Above_Right";
        case 3761:
        case 3764:
        case 3765:
        case 3766:
        case 3767:
        case 3771:
        case 3788:
        case 3789:
          return "Above";
        case 3772:
          return "Below";
      }
      else if (codePoint === 3642) return "Below_Right";
    }
    switch (combiningClass) {
      // Hebrew
      case "CCC10":
      case "CCC11":
      case "CCC12":
      case "CCC13":
      case "CCC14":
      case "CCC15":
      case "CCC16":
      case "CCC17":
      case "CCC18":
      case "CCC20":
      case "CCC22":
        return "Below";
      case "CCC23":
        return "Attached_Above";
      case "CCC24":
        return "Above_Right";
      case "CCC25":
      case "CCC19":
        return "Above_Left";
      case "CCC26":
        return "Above";
      case "CCC21":
        break;
      // Arabic and Syriac
      case "CCC27":
      case "CCC28":
      case "CCC30":
      case "CCC31":
      case "CCC33":
      case "CCC34":
      case "CCC35":
      case "CCC36":
        return "Above";
      case "CCC29":
      case "CCC32":
        return "Below";
      // Thai
      case "CCC103":
        return "Below_Right";
      case "CCC107":
        return "Above_Right";
      // Lao
      case "CCC118":
        return "Below";
      case "CCC122":
        return "Above";
      // Tibetan
      case "CCC129":
      case "CCC132":
        return "Below";
      case "CCC130":
        return "Above";
    }
    return combiningClass;
  }
};
var $fcb46e14b01ea01f$export$2e2bcd8739ae039 = class _$fcb46e14b01ea01f$export$2e2bcd8739ae039 {
  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  }
  /**
  * The width of the bounding box
  * @type {number}
  */
  get width() {
    return this.maxX - this.minX;
  }
  /**
  * The height of the bounding box
  * @type {number}
  */
  get height() {
    return this.maxY - this.minY;
  }
  addPoint(x, y) {
    if (Math.abs(x) !== Infinity) {
      if (x < this.minX) this.minX = x;
      if (x > this.maxX) this.maxX = x;
    }
    if (Math.abs(y) !== Infinity) {
      if (y < this.minY) this.minY = y;
      if (y > this.maxY) this.maxY = y;
    }
  }
  copy() {
    return new _$fcb46e14b01ea01f$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
  }
};
var $a5878e4f4663c9e2$var$UNICODE_SCRIPTS = {
  Caucasian_Albanian: "aghb",
  Arabic: "arab",
  Imperial_Aramaic: "armi",
  Armenian: "armn",
  Avestan: "avst",
  Balinese: "bali",
  Bamum: "bamu",
  Bassa_Vah: "bass",
  Batak: "batk",
  Bengali: [
    "bng2",
    "beng"
  ],
  Bopomofo: "bopo",
  Brahmi: "brah",
  Braille: "brai",
  Buginese: "bugi",
  Buhid: "buhd",
  Chakma: "cakm",
  Canadian_Aboriginal: "cans",
  Carian: "cari",
  Cham: "cham",
  Cherokee: "cher",
  Coptic: "copt",
  Cypriot: "cprt",
  Cyrillic: "cyrl",
  Devanagari: [
    "dev2",
    "deva"
  ],
  Deseret: "dsrt",
  Duployan: "dupl",
  Egyptian_Hieroglyphs: "egyp",
  Elbasan: "elba",
  Ethiopic: "ethi",
  Georgian: "geor",
  Glagolitic: "glag",
  Gothic: "goth",
  Grantha: "gran",
  Greek: "grek",
  Gujarati: [
    "gjr2",
    "gujr"
  ],
  Gurmukhi: [
    "gur2",
    "guru"
  ],
  Hangul: "hang",
  Han: "hani",
  Hanunoo: "hano",
  Hebrew: "hebr",
  Hiragana: "hira",
  Pahawh_Hmong: "hmng",
  Katakana_Or_Hiragana: "hrkt",
  Old_Italic: "ital",
  Javanese: "java",
  Kayah_Li: "kali",
  Katakana: "kana",
  Kharoshthi: "khar",
  Khmer: "khmr",
  Khojki: "khoj",
  Kannada: [
    "knd2",
    "knda"
  ],
  Kaithi: "kthi",
  Tai_Tham: "lana",
  Lao: "lao ",
  Latin: "latn",
  Lepcha: "lepc",
  Limbu: "limb",
  Linear_A: "lina",
  Linear_B: "linb",
  Lisu: "lisu",
  Lycian: "lyci",
  Lydian: "lydi",
  Mahajani: "mahj",
  Mandaic: "mand",
  Manichaean: "mani",
  Mende_Kikakui: "mend",
  Meroitic_Cursive: "merc",
  Meroitic_Hieroglyphs: "mero",
  Malayalam: [
    "mlm2",
    "mlym"
  ],
  Modi: "modi",
  Mongolian: "mong",
  Mro: "mroo",
  Meetei_Mayek: "mtei",
  Myanmar: [
    "mym2",
    "mymr"
  ],
  Old_North_Arabian: "narb",
  Nabataean: "nbat",
  Nko: "nko ",
  Ogham: "ogam",
  Ol_Chiki: "olck",
  Old_Turkic: "orkh",
  Oriya: [
    "ory2",
    "orya"
  ],
  Osmanya: "osma",
  Palmyrene: "palm",
  Pau_Cin_Hau: "pauc",
  Old_Permic: "perm",
  Phags_Pa: "phag",
  Inscriptional_Pahlavi: "phli",
  Psalter_Pahlavi: "phlp",
  Phoenician: "phnx",
  Miao: "plrd",
  Inscriptional_Parthian: "prti",
  Rejang: "rjng",
  Runic: "runr",
  Samaritan: "samr",
  Old_South_Arabian: "sarb",
  Saurashtra: "saur",
  Shavian: "shaw",
  Sharada: "shrd",
  Siddham: "sidd",
  Khudawadi: "sind",
  Sinhala: "sinh",
  Sora_Sompeng: "sora",
  Sundanese: "sund",
  Syloti_Nagri: "sylo",
  Syriac: "syrc",
  Tagbanwa: "tagb",
  Takri: "takr",
  Tai_Le: "tale",
  New_Tai_Lue: "talu",
  Tamil: [
    "tml2",
    "taml"
  ],
  Tai_Viet: "tavt",
  Telugu: [
    "tel2",
    "telu"
  ],
  Tifinagh: "tfng",
  Tagalog: "tglg",
  Thaana: "thaa",
  Thai: "thai",
  Tibetan: "tibt",
  Tirhuta: "tirh",
  Ugaritic: "ugar",
  Vai: "vai ",
  Warang_Citi: "wara",
  Old_Persian: "xpeo",
  Cuneiform: "xsux",
  Yi: "yi  ",
  Inherited: "zinh",
  Common: "zyyy",
  Unknown: "zzzz"
};
var $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS = {};
for (let script in $a5878e4f4663c9e2$var$UNICODE_SCRIPTS) {
  let tag = $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script];
  if (Array.isArray(tag)) for (let t of tag) $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[t] = script;
  else $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag] = script;
}
function $a5878e4f4663c9e2$export$ce50e82f12a827a4(tag) {
  return $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag];
}
function $a5878e4f4663c9e2$export$e5cb25e204fb8450(string) {
  let len = string.length;
  let idx = 0;
  while (idx < len) {
    let code = string.charCodeAt(idx++);
    if (55296 <= code && code <= 56319 && idx < len) {
      let next = string.charCodeAt(idx);
      if (56320 <= next && next <= 57343) {
        idx++;
        code = ((code & 1023) << 10) + (next & 1023) + 65536;
      }
    }
    let script2 = $747425b437e121da$export$2e2bcd8739ae039.getScript(code);
    if (script2 !== "Common" && script2 !== "Inherited" && script2 !== "Unknown") return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script2];
  }
  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
function $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints) {
  for (let i = 0; i < codePoints.length; i++) {
    let codePoint = codePoints[i];
    let script3 = $747425b437e121da$export$2e2bcd8739ae039.getScript(codePoint);
    if (script3 !== "Common" && script3 !== "Inherited" && script3 !== "Unknown") return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script3];
  }
  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
var $a5878e4f4663c9e2$var$RTL = {
  arab: true,
  hebr: true,
  syrc: true,
  thaa: true,
  cprt: true,
  khar: true,
  phnx: true,
  "nko ": true,
  lydi: true,
  avst: true,
  armi: true,
  phli: true,
  prti: true,
  sarb: true,
  orkh: true,
  samr: true,
  mand: true,
  merc: true,
  mero: true,
  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
  mani: true,
  mend: true,
  nbat: true,
  narb: true,
  palm: true,
  phlp: true
  // Psalter Pahlavi
};
function $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script4) {
  if ($a5878e4f4663c9e2$var$RTL[script4]) return "rtl";
  return "ltr";
}
var $5a6ae00fa7e614b0$export$2e2bcd8739ae039 = class {
  constructor(glyphs, features, script, language, direction) {
    this.glyphs = glyphs;
    this.positions = null;
    this.script = script;
    this.language = language || null;
    this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
    this.features = {};
    if (Array.isArray(features)) for (let tag of features) this.features[tag] = true;
    else if (typeof features === "object") this.features = features;
  }
  /**
  * The total advance width of the run.
  * @type {number}
  */
  get advanceWidth() {
    let width = 0;
    for (let position of this.positions) width += position.xAdvance;
    return width;
  }
  /**
  * The total advance height of the run.
  * @type {number}
  */
  get advanceHeight() {
    let height = 0;
    for (let position of this.positions) height += position.yAdvance;
    return height;
  }
  /**
  * The bounding box containing all glyphs in the run.
  * @type {BBox}
  */
  get bbox() {
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();
    let x = 0;
    let y = 0;
    for (let index = 0; index < this.glyphs.length; index++) {
      let glyph = this.glyphs[index];
      let p = this.positions[index];
      let b = glyph.bbox;
      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
      x += p.xAdvance;
      y += p.yAdvance;
    }
    return bbox;
  }
};
var $4bff5f854806c785$export$2e2bcd8739ae039 = class {
  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {
    this.xAdvance = xAdvance;
    this.yAdvance = yAdvance;
    this.xOffset = xOffset;
    this.yOffset = yOffset;
  }
};
var $b603e0ade09ad01e$var$features = {
  allTypographicFeatures: {
    code: 0,
    exclusive: false,
    allTypeFeatures: 0
  },
  ligatures: {
    code: 1,
    exclusive: false,
    requiredLigatures: 0,
    commonLigatures: 2,
    rareLigatures: 4,
    // logos: 6
    rebusPictures: 8,
    diphthongLigatures: 10,
    squaredLigatures: 12,
    abbrevSquaredLigatures: 14,
    symbolLigatures: 16,
    contextualLigatures: 18,
    historicalLigatures: 20
  },
  cursiveConnection: {
    code: 2,
    exclusive: true,
    unconnected: 0,
    partiallyConnected: 1,
    cursive: 2
  },
  letterCase: {
    code: 3,
    exclusive: true
  },
  // upperAndLowerCase: 0          # deprecated
  // allCaps: 1                    # deprecated
  // allLowerCase: 2               # deprecated
  // smallCaps: 3                  # deprecated
  // initialCaps: 4                # deprecated
  // initialCapsAndSmallCaps: 5    # deprecated
  verticalSubstitution: {
    code: 4,
    exclusive: false,
    substituteVerticalForms: 0
  },
  linguisticRearrangement: {
    code: 5,
    exclusive: false,
    linguisticRearrangement: 0
  },
  numberSpacing: {
    code: 6,
    exclusive: true,
    monospacedNumbers: 0,
    proportionalNumbers: 1,
    thirdWidthNumbers: 2,
    quarterWidthNumbers: 3
  },
  smartSwash: {
    code: 8,
    exclusive: false,
    wordInitialSwashes: 0,
    wordFinalSwashes: 2,
    // lineInitialSwashes: 4
    // lineFinalSwashes: 6
    nonFinalSwashes: 8
  },
  diacritics: {
    code: 9,
    exclusive: true,
    showDiacritics: 0,
    hideDiacritics: 1,
    decomposeDiacritics: 2
  },
  verticalPosition: {
    code: 10,
    exclusive: true,
    normalPosition: 0,
    superiors: 1,
    inferiors: 2,
    ordinals: 3,
    scientificInferiors: 4
  },
  fractions: {
    code: 11,
    exclusive: true,
    noFractions: 0,
    verticalFractions: 1,
    diagonalFractions: 2
  },
  overlappingCharacters: {
    code: 13,
    exclusive: false,
    preventOverlap: 0
  },
  typographicExtras: {
    code: 14,
    exclusive: false,
    // hyphensToEmDash: 0
    // hyphenToEnDash: 2
    slashedZero: 4
  },
  // formInterrobang: 6
  // smartQuotes: 8
  // periodsToEllipsis: 10
  mathematicalExtras: {
    code: 15,
    exclusive: false,
    // hyphenToMinus: 0
    // asteristoMultiply: 2
    // slashToDivide: 4
    // inequalityLigatures: 6
    // exponents: 8
    mathematicalGreek: 10
  },
  ornamentSets: {
    code: 16,
    exclusive: true,
    noOrnaments: 0,
    dingbats: 1,
    piCharacters: 2,
    fleurons: 3,
    decorativeBorders: 4,
    internationalSymbols: 5,
    mathSymbols: 6
  },
  characterAlternatives: {
    code: 17,
    exclusive: true,
    noAlternates: 0
  },
  // user defined options
  designComplexity: {
    code: 18,
    exclusive: true,
    designLevel1: 0,
    designLevel2: 1,
    designLevel3: 2,
    designLevel4: 3,
    designLevel5: 4
  },
  styleOptions: {
    code: 19,
    exclusive: true,
    noStyleOptions: 0,
    displayText: 1,
    engravedText: 2,
    illuminatedCaps: 3,
    titlingCaps: 4,
    tallCaps: 5
  },
  characterShape: {
    code: 20,
    exclusive: true,
    traditionalCharacters: 0,
    simplifiedCharacters: 1,
    JIS1978Characters: 2,
    JIS1983Characters: 3,
    JIS1990Characters: 4,
    traditionalAltOne: 5,
    traditionalAltTwo: 6,
    traditionalAltThree: 7,
    traditionalAltFour: 8,
    traditionalAltFive: 9,
    expertCharacters: 10,
    JIS2004Characters: 11,
    hojoCharacters: 12,
    NLCCharacters: 13,
    traditionalNamesCharacters: 14
  },
  numberCase: {
    code: 21,
    exclusive: true,
    lowerCaseNumbers: 0,
    upperCaseNumbers: 1
  },
  textSpacing: {
    code: 22,
    exclusive: true,
    proportionalText: 0,
    monospacedText: 1,
    halfWidthText: 2,
    thirdWidthText: 3,
    quarterWidthText: 4,
    altProportionalText: 5,
    altHalfWidthText: 6
  },
  transliteration: {
    code: 23,
    exclusive: true,
    noTransliteration: 0
  },
  // hanjaToHangul: 1
  // hiraganaToKatakana: 2
  // katakanaToHiragana: 3
  // kanaToRomanization: 4
  // romanizationToHiragana: 5
  // romanizationToKatakana: 6
  // hanjaToHangulAltOne: 7
  // hanjaToHangulAltTwo: 8
  // hanjaToHangulAltThree: 9
  annotation: {
    code: 24,
    exclusive: true,
    noAnnotation: 0,
    boxAnnotation: 1,
    roundedBoxAnnotation: 2,
    circleAnnotation: 3,
    invertedCircleAnnotation: 4,
    parenthesisAnnotation: 5,
    periodAnnotation: 6,
    romanNumeralAnnotation: 7,
    diamondAnnotation: 8,
    invertedBoxAnnotation: 9,
    invertedRoundedBoxAnnotation: 10
  },
  kanaSpacing: {
    code: 25,
    exclusive: true,
    fullWidthKana: 0,
    proportionalKana: 1
  },
  ideographicSpacing: {
    code: 26,
    exclusive: true,
    fullWidthIdeographs: 0,
    proportionalIdeographs: 1,
    halfWidthIdeographs: 2
  },
  unicodeDecomposition: {
    code: 27,
    exclusive: false,
    canonicalComposition: 0,
    compatibilityComposition: 2,
    transcodingComposition: 4
  },
  rubyKana: {
    code: 28,
    exclusive: false,
    // noRubyKana: 0     # deprecated - use rubyKanaOff instead
    // rubyKana: 1     # deprecated - use rubyKanaOn instead
    rubyKana: 2
  },
  CJKSymbolAlternatives: {
    code: 29,
    exclusive: true,
    noCJKSymbolAlternatives: 0,
    CJKSymbolAltOne: 1,
    CJKSymbolAltTwo: 2,
    CJKSymbolAltThree: 3,
    CJKSymbolAltFour: 4,
    CJKSymbolAltFive: 5
  },
  ideographicAlternatives: {
    code: 30,
    exclusive: true,
    noIdeographicAlternatives: 0,
    ideographicAltOne: 1,
    ideographicAltTwo: 2,
    ideographicAltThree: 3,
    ideographicAltFour: 4,
    ideographicAltFive: 5
  },
  CJKVerticalRomanPlacement: {
    code: 31,
    exclusive: true,
    CJKVerticalRomanCentered: 0,
    CJKVerticalRomanHBaseline: 1
  },
  italicCJKRoman: {
    code: 32,
    exclusive: false,
    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
    CJKItalicRoman: 2
  },
  caseSensitiveLayout: {
    code: 33,
    exclusive: false,
    caseSensitiveLayout: 0,
    caseSensitiveSpacing: 2
  },
  alternateKana: {
    code: 34,
    exclusive: false,
    alternateHorizKana: 0,
    alternateVertKana: 2
  },
  stylisticAlternatives: {
    code: 35,
    exclusive: false,
    noStylisticAlternates: 0,
    stylisticAltOne: 2,
    stylisticAltTwo: 4,
    stylisticAltThree: 6,
    stylisticAltFour: 8,
    stylisticAltFive: 10,
    stylisticAltSix: 12,
    stylisticAltSeven: 14,
    stylisticAltEight: 16,
    stylisticAltNine: 18,
    stylisticAltTen: 20,
    stylisticAltEleven: 22,
    stylisticAltTwelve: 24,
    stylisticAltThirteen: 26,
    stylisticAltFourteen: 28,
    stylisticAltFifteen: 30,
    stylisticAltSixteen: 32,
    stylisticAltSeventeen: 34,
    stylisticAltEighteen: 36,
    stylisticAltNineteen: 38,
    stylisticAltTwenty: 40
  },
  contextualAlternates: {
    code: 36,
    exclusive: false,
    contextualAlternates: 0,
    swashAlternates: 2,
    contextualSwashAlternates: 4
  },
  lowerCase: {
    code: 37,
    exclusive: true,
    defaultLowerCase: 0,
    lowerCaseSmallCaps: 1,
    lowerCasePetiteCaps: 2
  },
  upperCase: {
    code: 38,
    exclusive: true,
    defaultUpperCase: 0,
    upperCaseSmallCaps: 1,
    upperCasePetiteCaps: 2
  },
  languageTag: {
    code: 39,
    exclusive: true
  },
  CJKRomanSpacing: {
    code: 103,
    exclusive: true,
    halfWidthCJKRoman: 0,
    proportionalCJKRoman: 1,
    defaultCJKRoman: 2,
    fullWidthCJKRoman: 3
  }
};
var $b603e0ade09ad01e$var$feature = (name, selector) => [
  $b603e0ade09ad01e$var$features[name].code,
  $b603e0ade09ad01e$var$features[name][selector]
];
var $b603e0ade09ad01e$var$OTMapping = {
  rlig: $b603e0ade09ad01e$var$feature("ligatures", "requiredLigatures"),
  clig: $b603e0ade09ad01e$var$feature("ligatures", "contextualLigatures"),
  dlig: $b603e0ade09ad01e$var$feature("ligatures", "rareLigatures"),
  hlig: $b603e0ade09ad01e$var$feature("ligatures", "historicalLigatures"),
  liga: $b603e0ade09ad01e$var$feature("ligatures", "commonLigatures"),
  hist: $b603e0ade09ad01e$var$feature("ligatures", "historicalLigatures"),
  smcp: $b603e0ade09ad01e$var$feature("lowerCase", "lowerCaseSmallCaps"),
  pcap: $b603e0ade09ad01e$var$feature("lowerCase", "lowerCasePetiteCaps"),
  frac: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  dnom: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  numr: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  afrc: $b603e0ade09ad01e$var$feature("fractions", "verticalFractions"),
  // aalt
  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
  // unic, vatu, vhal, vjmo, vpal, vrt2
  // dist -> trak table?
  // kern, vkrn -> kern table
  // lfbd + opbd + rtbd -> opbd table?
  // mark, mkmk -> acnt table?
  // locl -> languageTag + ltag table
  case: $b603e0ade09ad01e$var$feature("caseSensitiveLayout", "caseSensitiveLayout"),
  ccmp: $b603e0ade09ad01e$var$feature("unicodeDecomposition", "canonicalComposition"),
  cpct: $b603e0ade09ad01e$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  valt: $b603e0ade09ad01e$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  swsh: $b603e0ade09ad01e$var$feature("contextualAlternates", "swashAlternates"),
  cswh: $b603e0ade09ad01e$var$feature("contextualAlternates", "contextualSwashAlternates"),
  curs: $b603e0ade09ad01e$var$feature("cursiveConnection", "cursive"),
  c2pc: $b603e0ade09ad01e$var$feature("upperCase", "upperCasePetiteCaps"),
  c2sc: $b603e0ade09ad01e$var$feature("upperCase", "upperCaseSmallCaps"),
  init: $b603e0ade09ad01e$var$feature("smartSwash", "wordInitialSwashes"),
  fin2: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  medi: $b603e0ade09ad01e$var$feature("smartSwash", "nonFinalSwashes"),
  med2: $b603e0ade09ad01e$var$feature("smartSwash", "nonFinalSwashes"),
  fin3: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  fina: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  pkna: $b603e0ade09ad01e$var$feature("kanaSpacing", "proportionalKana"),
  half: $b603e0ade09ad01e$var$feature("textSpacing", "halfWidthText"),
  halt: $b603e0ade09ad01e$var$feature("textSpacing", "altHalfWidthText"),
  hkna: $b603e0ade09ad01e$var$feature("alternateKana", "alternateHorizKana"),
  vkna: $b603e0ade09ad01e$var$feature("alternateKana", "alternateVertKana"),
  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
  ital: $b603e0ade09ad01e$var$feature("italicCJKRoman", "CJKItalicRoman"),
  lnum: $b603e0ade09ad01e$var$feature("numberCase", "upperCaseNumbers"),
  onum: $b603e0ade09ad01e$var$feature("numberCase", "lowerCaseNumbers"),
  mgrk: $b603e0ade09ad01e$var$feature("mathematicalExtras", "mathematicalGreek"),
  // nalt: not enough info. what type of annotation?
  // ornm: ditto, which ornament style?
  calt: $b603e0ade09ad01e$var$feature("contextualAlternates", "contextualAlternates"),
  vrt2: $b603e0ade09ad01e$var$feature("verticalSubstitution", "substituteVerticalForms"),
  vert: $b603e0ade09ad01e$var$feature("verticalSubstitution", "substituteVerticalForms"),
  tnum: $b603e0ade09ad01e$var$feature("numberSpacing", "monospacedNumbers"),
  pnum: $b603e0ade09ad01e$var$feature("numberSpacing", "proportionalNumbers"),
  sups: $b603e0ade09ad01e$var$feature("verticalPosition", "superiors"),
  subs: $b603e0ade09ad01e$var$feature("verticalPosition", "inferiors"),
  ordn: $b603e0ade09ad01e$var$feature("verticalPosition", "ordinals"),
  pwid: $b603e0ade09ad01e$var$feature("textSpacing", "proportionalText"),
  hwid: $b603e0ade09ad01e$var$feature("textSpacing", "halfWidthText"),
  qwid: $b603e0ade09ad01e$var$feature("textSpacing", "quarterWidthText"),
  twid: $b603e0ade09ad01e$var$feature("textSpacing", "thirdWidthText"),
  fwid: $b603e0ade09ad01e$var$feature("textSpacing", "proportionalText"),
  palt: $b603e0ade09ad01e$var$feature("textSpacing", "altProportionalText"),
  trad: $b603e0ade09ad01e$var$feature("characterShape", "traditionalCharacters"),
  smpl: $b603e0ade09ad01e$var$feature("characterShape", "simplifiedCharacters"),
  jp78: $b603e0ade09ad01e$var$feature("characterShape", "JIS1978Characters"),
  jp83: $b603e0ade09ad01e$var$feature("characterShape", "JIS1983Characters"),
  jp90: $b603e0ade09ad01e$var$feature("characterShape", "JIS1990Characters"),
  jp04: $b603e0ade09ad01e$var$feature("characterShape", "JIS2004Characters"),
  expt: $b603e0ade09ad01e$var$feature("characterShape", "expertCharacters"),
  hojo: $b603e0ade09ad01e$var$feature("characterShape", "hojoCharacters"),
  nlck: $b603e0ade09ad01e$var$feature("characterShape", "NLCCharacters"),
  tnam: $b603e0ade09ad01e$var$feature("characterShape", "traditionalNamesCharacters"),
  ruby: $b603e0ade09ad01e$var$feature("rubyKana", "rubyKana"),
  titl: $b603e0ade09ad01e$var$feature("styleOptions", "titlingCaps"),
  zero: $b603e0ade09ad01e$var$feature("typographicExtras", "slashedZero"),
  ss01: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltOne"),
  ss02: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwo"),
  ss03: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltThree"),
  ss04: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFour"),
  ss05: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFive"),
  ss06: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSix"),
  ss07: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSeven"),
  ss08: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEight"),
  ss09: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltNine"),
  ss10: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTen"),
  ss11: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEleven"),
  ss12: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwelve"),
  ss13: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltThirteen"),
  ss14: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFourteen"),
  ss15: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFifteen"),
  ss16: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSixteen"),
  ss17: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSeventeen"),
  ss18: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEighteen"),
  ss19: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltNineteen"),
  ss20: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwenty")
};
for (let i = 1; i <= 99; i++) $b603e0ade09ad01e$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [
  $b603e0ade09ad01e$var$features.characterAlternatives.code,
  i
];
var $b603e0ade09ad01e$var$AATMapping = {};
for (let ot in $b603e0ade09ad01e$var$OTMapping) {
  let aat = $b603e0ade09ad01e$var$OTMapping[ot];
  if ($b603e0ade09ad01e$var$AATMapping[aat[0]] == null) $b603e0ade09ad01e$var$AATMapping[aat[0]] = {};
  $b603e0ade09ad01e$var$AATMapping[aat[0]][aat[1]] = ot;
}
function $b603e0ade09ad01e$export$b813f7d2a1677c16(features) {
  let res = {};
  for (let k in features) {
    let r;
    if (r = $b603e0ade09ad01e$var$OTMapping[k]) {
      if (res[r[0]] == null) res[r[0]] = {};
      res[r[0]][r[1]] = features[k];
    }
  }
  return res;
}
function $b603e0ade09ad01e$var$mapFeatureStrings(f) {
  let [type, setting] = f;
  if (isNaN(type)) var typeCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type].code;
  else var typeCode = type;
  if (isNaN(setting)) var settingCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type][setting];
  else var settingCode = setting;
  return [
    typeCode,
    settingCode
  ];
}
function $b603e0ade09ad01e$export$bd6df347a4f391c4(features) {
  let res = {};
  if (Array.isArray(features)) for (let k = 0; k < features.length; k++) {
    let r;
    let f = $b603e0ade09ad01e$var$mapFeatureStrings(features[k]);
    if (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]]) res[r] = true;
  }
  else if (typeof features === "object") for (let type in features) {
    let feature = features[type];
    for (let setting in feature) {
      let r;
      let f = $b603e0ade09ad01e$var$mapFeatureStrings([
        type,
        setting
      ]);
      if (feature[setting] && (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]])) res[r] = true;
    }
  }
  return Object.keys(res);
}
var _class;
var $16667a2c0f0b1be5$export$2e2bcd8739ae039 = (_class = class $16667a2c0f0b1be5$export$2e2bcd8739ae0392 {
  constructor(table) {
    this.table = table;
  }
  lookup(glyph) {
    switch (this.table.version) {
      case 0:
        return this.table.values.getItem(glyph);
      case 2:
      case 4: {
        let min = 0;
        let max = this.table.binarySearchHeader.nUnits - 1;
        while (min <= max) {
          var mid = min + max >> 1;
          var seg = this.table.segments[mid];
          if (seg.firstGlyph === 65535) return null;
          if (glyph < seg.firstGlyph) max = mid - 1;
          else if (glyph > seg.lastGlyph) min = mid + 1;
          else {
            if (this.table.version === 2) return seg.value;
            else return seg.values[glyph - seg.firstGlyph];
          }
        }
        return null;
      }
      case 6: {
        let min = 0;
        let max = this.table.binarySearchHeader.nUnits - 1;
        while (min <= max) {
          var mid = min + max >> 1;
          var seg = this.table.segments[mid];
          if (seg.glyph === 65535) return null;
          if (glyph < seg.glyph) max = mid - 1;
          else if (glyph > seg.glyph) min = mid + 1;
          else return seg.value;
        }
        return null;
      }
      case 8:
        return this.table.values[glyph - this.table.firstGlyph];
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
  }
  glyphsForValue(classValue) {
    let res = [];
    switch (this.table.version) {
      case 2:
      case 4:
        for (let segment of this.table.segments) if (this.table.version === 2 && segment.value === classValue) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));
        else {
          for (let index = 0; index < segment.values.length; index++) if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);
        }
        break;
      case 6:
        for (let segment1 of this.table.segments) if (segment1.value === classValue) res.push(segment1.glyph);
        break;
      case 8:
        for (let i = 0; i < this.table.values.length; i++) if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);
        break;
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
    return res;
  }
}, _applyDecoratedDescriptor(_class.prototype, "glyphsForValue", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "glyphsForValue"), _class.prototype), _class);
var $de324b614d9ee26c$var$START_OF_TEXT_STATE = 0;
var $de324b614d9ee26c$var$END_OF_TEXT_CLASS = 0;
var $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS = 1;
var $de324b614d9ee26c$var$DELETED_GLYPH_CLASS = 2;
var $de324b614d9ee26c$var$DONT_ADVANCE = 16384;
var $de324b614d9ee26c$export$2e2bcd8739ae039 = class {
  constructor(stateTable) {
    this.stateTable = stateTable;
    this.lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(stateTable.classTable);
  }
  process(glyphs, reverse, processEntry) {
    let currentState = $de324b614d9ee26c$var$START_OF_TEXT_STATE;
    let index = reverse ? glyphs.length - 1 : 0;
    let dir = reverse ? -1 : 1;
    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
      let glyph = null;
      let classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
      let shouldAdvance = true;
      if (index === glyphs.length || index === -1) classCode = $de324b614d9ee26c$var$END_OF_TEXT_CLASS;
      else {
        glyph = glyphs[index];
        if (glyph.id === 65535) classCode = $de324b614d9ee26c$var$DELETED_GLYPH_CLASS;
        else {
          classCode = this.lookupTable.lookup(glyph.id);
          if (classCode == null) classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
        }
      }
      let row = this.stateTable.stateArray.getItem(currentState);
      let entryIndex = row[classCode];
      let entry = this.stateTable.entryTable.getItem(entryIndex);
      if (classCode !== $de324b614d9ee26c$var$END_OF_TEXT_CLASS && classCode !== $de324b614d9ee26c$var$DELETED_GLYPH_CLASS) {
        processEntry(glyph, entry, index);
        shouldAdvance = !(entry.flags & $de324b614d9ee26c$var$DONT_ADVANCE);
      }
      currentState = entry.newState;
      if (shouldAdvance) index += dir;
    }
    return glyphs;
  }
  /**
  * Performs a depth-first traversal of the glyph strings
  * represented by the state machine.
  */
  traverse(opts, state = 0, visited = /* @__PURE__ */ new Set()) {
    if (visited.has(state)) return;
    visited.add(state);
    let { nClasses, stateArray, entryTable } = this.stateTable;
    let row = stateArray.getItem(state);
    for (let classCode = 4; classCode < nClasses; classCode++) {
      let entryIndex = row[classCode];
      let entry = entryTable.getItem(entryIndex);
      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {
        if (opts.enter) opts.enter(glyph, entry);
        if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);
        if (opts.exit) opts.exit(glyph, entry);
      }
    }
  }
};
var _class;
var $696c050512749a50$var$MARK_FIRST = 32768;
var $696c050512749a50$var$MARK_LAST = 8192;
var $696c050512749a50$var$VERB = 15;
var $696c050512749a50$var$SET_MARK = 32768;
var $696c050512749a50$var$SET_COMPONENT = 32768;
var $696c050512749a50$var$PERFORM_ACTION = 8192;
var $696c050512749a50$var$LAST_MASK = 2147483648;
var $696c050512749a50$var$STORE_MASK = 1073741824;
var $696c050512749a50$var$OFFSET_MASK = 1073741823;
var $696c050512749a50$var$REVERSE_DIRECTION = 4194304;
var $696c050512749a50$var$CURRENT_INSERT_BEFORE = 2048;
var $696c050512749a50$var$MARKED_INSERT_BEFORE = 1024;
var $696c050512749a50$var$CURRENT_INSERT_COUNT = 992;
var $696c050512749a50$var$MARKED_INSERT_COUNT = 31;
var $696c050512749a50$export$2e2bcd8739ae039 = (_class = class $696c050512749a50$export$2e2bcd8739ae0392 {
  constructor(font) {
    this.processIndicRearragement = this.processIndicRearragement.bind(this);
    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
    this.processLigature = this.processLigature.bind(this);
    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
    this.font = font;
    this.morx = font.morx;
    this.inputCache = null;
  }
  // Processes an array of glyphs and applies the specified features
  // Features should be in the form of {featureType:{featureSetting:boolean}}
  process(glyphs, features = {}) {
    for (let chain of this.morx.chains) {
      let flags = chain.defaultFlags;
      for (let feature of chain.features) {
        let f;
        if (f = features[feature.featureType]) {
          if (f[feature.featureSetting]) {
            flags &= feature.disableFlags;
            flags |= feature.enableFlags;
          } else if (f[feature.featureSetting] === false) {
            flags |= ~feature.disableFlags;
            flags &= ~feature.enableFlags;
          }
        }
      }
      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);
    }
    let index = glyphs.length - 1;
    while (index >= 0) {
      if (glyphs[index].id === 65535) glyphs.splice(index, 1);
      index--;
    }
    return glyphs;
  }
  processSubtable(subtable, glyphs) {
    this.subtable = subtable;
    this.glyphs = glyphs;
    if (this.subtable.type === 4) {
      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
      return;
    }
    this.ligatureStack = [];
    this.markedGlyph = null;
    this.firstGlyph = null;
    this.lastGlyph = null;
    this.markedIndex = null;
    let stateMachine = this.getStateMachine(subtable);
    let process2 = this.getProcessor();
    let reverse = !!(this.subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
    return stateMachine.process(this.glyphs, reverse, process2);
  }
  getStateMachine(subtable) {
    return new $de324b614d9ee26c$export$2e2bcd8739ae039(subtable.table.stateTable);
  }
  getProcessor() {
    switch (this.subtable.type) {
      case 0:
        return this.processIndicRearragement;
      case 1:
        return this.processContextualSubstitution;
      case 2:
        return this.processLigature;
      case 4:
        return this.processNoncontextualSubstitutions;
      case 5:
        return this.processGlyphInsertion;
      default:
        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
    }
  }
  processIndicRearragement(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$MARK_FIRST) this.firstGlyph = index;
    if (entry.flags & $696c050512749a50$var$MARK_LAST) this.lastGlyph = index;
    $696c050512749a50$var$reorderGlyphs(this.glyphs, entry.flags & $696c050512749a50$var$VERB, this.firstGlyph, this.lastGlyph);
  }
  processContextualSubstitution(glyph, entry, index) {
    let subsitutions = this.subtable.table.substitutionTable.items;
    if (entry.markIndex !== 65535) {
      let lookup = subsitutions.getItem(entry.markIndex);
      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
      glyph = this.glyphs[this.markedGlyph];
      var gid = lookupTable.lookup(glyph.id);
      if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
    }
    if (entry.currentIndex !== 65535) {
      let lookup = subsitutions.getItem(entry.currentIndex);
      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
      glyph = this.glyphs[index];
      var gid = lookupTable.lookup(glyph.id);
      if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
    }
    if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedGlyph = index;
  }
  processLigature(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$SET_COMPONENT) this.ligatureStack.push(index);
    if (entry.flags & $696c050512749a50$var$PERFORM_ACTION) {
      let actions = this.subtable.table.ligatureActions;
      let components = this.subtable.table.components;
      let ligatureList = this.subtable.table.ligatureList;
      let actionIndex = entry.action;
      let last2 = false;
      let ligatureIndex = 0;
      let codePoints = [];
      let ligatureGlyphs = [];
      while (!last2) {
        let componentGlyph = this.ligatureStack.pop();
        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
        let action = actions.getItem(actionIndex++);
        last2 = !!(action & $696c050512749a50$var$LAST_MASK);
        let store = !!(action & $696c050512749a50$var$STORE_MASK);
        let offset = (action & $696c050512749a50$var$OFFSET_MASK) << 2 >> 2;
        offset += this.glyphs[componentGlyph].id;
        let component = components.getItem(offset);
        ligatureIndex += component;
        if (last2 || store) {
          let ligatureEntry = ligatureList.getItem(ligatureIndex);
          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
          ligatureGlyphs.push(componentGlyph);
          ligatureIndex = 0;
          codePoints = [];
        } else this.glyphs[componentGlyph] = this.font.getGlyph(65535);
      }
      this.ligatureStack.push(...ligatureGlyphs);
    }
  }
  processNoncontextualSubstitutions(subtable, glyphs, index) {
    let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(subtable.table.lookupTable);
    for (index = 0; index < glyphs.length; index++) {
      let glyph = glyphs[index];
      if (glyph.id !== 65535) {
        let gid = lookupTable.lookup(glyph.id);
        if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
      }
    }
  }
  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
    let insertions = [];
    while (count--) {
      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
      insertions.push(this.font.getGlyph(gid));
    }
    if (!isBefore) glyphIndex++;
    this.glyphs.splice(glyphIndex, 0, ...insertions);
  }
  processGlyphInsertion(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedIndex = index;
    if (entry.markedInsertIndex !== 65535) {
      let count = (entry.flags & $696c050512749a50$var$MARKED_INSERT_COUNT) >>> 5;
      let isBefore = !!(entry.flags & $696c050512749a50$var$MARKED_INSERT_BEFORE);
      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
    }
    if (entry.currentInsertIndex !== 65535) {
      let count = (entry.flags & $696c050512749a50$var$CURRENT_INSERT_COUNT) >>> 5;
      let isBefore = !!(entry.flags & $696c050512749a50$var$CURRENT_INSERT_BEFORE);
      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
    }
  }
  getSupportedFeatures() {
    let features = [];
    for (let chain of this.morx.chains) for (let feature of chain.features) features.push([
      feature.featureType,
      feature.featureSetting
    ]);
    return features;
  }
  generateInputs(gid) {
    if (!this.inputCache) this.generateInputCache();
    return this.inputCache[gid] || [];
  }
  generateInputCache() {
    this.inputCache = {};
    for (let chain of this.morx.chains) {
      let flags = chain.defaultFlags;
      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);
    }
  }
  generateInputsForSubtable(subtable) {
    if (subtable.type !== 2) return;
    let reverse = !!(subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
    if (reverse) throw new Error("Reverse subtable, not supported.");
    this.subtable = subtable;
    this.ligatureStack = [];
    let stateMachine = this.getStateMachine(subtable);
    let process2 = this.getProcessor();
    let input = [];
    let stack = [];
    this.glyphs = [];
    stateMachine.traverse({
      enter: (glyph, entry) => {
        let glyphs = this.glyphs;
        stack.push({
          glyphs: glyphs.slice(),
          ligatureStack: this.ligatureStack.slice()
        });
        let g1 = this.font.getGlyph(glyph);
        input.push(g1);
        glyphs.push(input[input.length - 1]);
        process2(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
        let count = 0;
        let found = 0;
        for (let i = 0; i < glyphs.length && count <= 1; i++) if (glyphs[i].id !== 65535) {
          count++;
          found = glyphs[i].id;
        }
        if (count === 1) {
          let result = input.map(
            (g) => g.id
          );
          let cache = this.inputCache[found];
          if (cache) cache.push(result);
          else this.inputCache[found] = [
            result
          ];
        }
      },
      exit: () => {
        ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());
        input.pop();
      }
    });
  }
}, _applyDecoratedDescriptor(_class.prototype, "getStateMachine", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getStateMachine"), _class.prototype), _class);
function $696c050512749a50$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
  if (reverseB) end.reverse();
  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
  if (reverseA) start.reverse();
  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
  return glyphs;
}
function $696c050512749a50$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
  let length = lastGlyph - firstGlyph + 1;
  switch (verb) {
    case 0:
      return glyphs;
    case 1:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        0
      ]);
    case 2:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        1
      ]);
    case 3:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        1
      ]);
    case 4:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        0
      ]);
    case 5:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        0
      ], true, false);
    case 6:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        2
      ]);
    case 7:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        2
      ], false, true);
    case 8:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        2
      ]);
    case 9:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        2
      ], false, true);
    case 10:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        1
      ]);
    case 11:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        1
      ], true, false);
    case 12:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ]);
    case 13:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], true, false);
    case 14:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], false, true);
    case 15:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], true, true);
    default:
      throw new Error(`Unknown verb: ${verb}`);
  }
}
var $9273c77bc46b13e0$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.font = font;
    this.morxProcessor = new $696c050512749a50$export$2e2bcd8739ae039(font);
    this.fallbackPosition = false;
  }
  substitute(glyphRun) {
    if (glyphRun.direction === "rtl") glyphRun.glyphs.reverse();
    this.morxProcessor.process(glyphRun.glyphs, $b603e0ade09ad01e$export$b813f7d2a1677c16(glyphRun.features));
  }
  getAvailableFeatures(script, language) {
    return $b603e0ade09ad01e$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
  }
  stringsForGlyph(gid) {
    let glyphStrings = this.morxProcessor.generateInputs(gid);
    let result = /* @__PURE__ */ new Set();
    for (let glyphs of glyphStrings) this._addStrings(glyphs, 0, result, "");
    return result;
  }
  _addStrings(glyphs, index, strings, string) {
    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
    for (let codePoint of codePoints) {
      let s = string + String.fromCodePoint(codePoint);
      if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);
      else strings.add(s);
    }
  }
};
var $d208953d14e55e3c$export$2e2bcd8739ae039 = class {
  constructor(font, script, direction) {
    this.font = font;
    this.script = script;
    this.direction = direction;
    this.stages = [];
    this.globalFeatures = {};
    this.allFeatures = {};
  }
  /**
  * Adds the given features to the last stage.
  * Ignores features that have already been applied.
  */
  _addFeatures(features, global2) {
    let stageIndex = this.stages.length - 1;
    let stage = this.stages[stageIndex];
    for (let feature of features) if (this.allFeatures[feature] == null) {
      stage.push(feature);
      this.allFeatures[feature] = stageIndex;
      if (global2) this.globalFeatures[feature] = true;
    }
  }
  /**
  * Add features to the last stage
  */
  add(arg, global2 = true) {
    if (this.stages.length === 0) this.stages.push([]);
    if (typeof arg === "string") arg = [
      arg
    ];
    if (Array.isArray(arg)) this._addFeatures(arg, global2);
    else if (typeof arg === "object") {
      this._addFeatures(arg.global || [], true);
      this._addFeatures(arg.local || [], false);
    } else throw new Error("Unsupported argument to ShapingPlan#add");
  }
  /**
  * Add a new stage
  */
  addStage(arg, global2) {
    if (typeof arg === "function") this.stages.push(arg, []);
    else {
      this.stages.push([]);
      this.add(arg, global2);
    }
  }
  setFeatureOverrides(features) {
    if (Array.isArray(features)) this.add(features);
    else if (typeof features === "object") for (let tag in features) {
      if (features[tag]) this.add(tag);
      else if (this.allFeatures[tag] != null) {
        let stage = this.stages[this.allFeatures[tag]];
        stage.splice(stage.indexOf(tag), 1);
        delete this.allFeatures[tag];
        delete this.globalFeatures[tag];
      }
    }
  }
  /**
  * Assigns the global features to the given glyphs
  */
  assignGlobalFeatures(glyphs) {
    for (let glyph of glyphs) for (let feature in this.globalFeatures) glyph.features[feature] = true;
  }
  /**
  * Executes the planned stages using the given OTProcessor
  */
  process(processor, glyphs, positions) {
    for (let stage of this.stages) {
      if (typeof stage === "function") {
        if (!positions) stage(this.font, glyphs, this);
      } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);
    }
  }
};
var $5340de7a86f3ae85$var$VARIATION_FEATURES = [
  "rvrn"
];
var $5340de7a86f3ae85$var$COMMON_FEATURES = [
  "ccmp",
  "locl",
  "rlig",
  "mark",
  "mkmk"
];
var $5340de7a86f3ae85$var$FRACTIONAL_FEATURES = [
  "frac",
  "numr",
  "dnom"
];
var $5340de7a86f3ae85$var$HORIZONTAL_FEATURES = [
  "calt",
  "clig",
  "liga",
  "rclt",
  "curs",
  "kern"
];
var $5340de7a86f3ae85$var$DIRECTIONAL_FEATURES = {
  ltr: [
    "ltra",
    "ltrm"
  ],
  rtl: [
    "rtla",
    "rtlm"
  ]
};
var $5340de7a86f3ae85$export$2e2bcd8739ae039 = class {
  static zeroMarkWidths = "AFTER_GPOS";
  static plan(plan, glyphs, features) {
    this.planPreprocessing(plan);
    this.planFeatures(plan);
    this.planPostprocessing(plan, features);
    plan.assignGlobalFeatures(glyphs);
    this.assignFeatures(plan, glyphs);
  }
  static planPreprocessing(plan) {
    plan.add({
      global: [
        ...$5340de7a86f3ae85$var$VARIATION_FEATURES,
        ...$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES[plan.direction]
      ],
      local: $5340de7a86f3ae85$var$FRACTIONAL_FEATURES
    });
  }
  static planFeatures(plan) {
  }
  static planPostprocessing(plan, userFeatures) {
    plan.add([
      ...$5340de7a86f3ae85$var$COMMON_FEATURES,
      ...$5340de7a86f3ae85$var$HORIZONTAL_FEATURES
    ]);
    plan.setFeatureOverrides(userFeatures);
  }
  static assignFeatures(plan, glyphs) {
    for (let i = 0; i < glyphs.length; i++) {
      let glyph = glyphs[i];
      if (glyph.codePoints[0] === 8260) {
        let start = i;
        let end = i + 1;
        while (start > 0 && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[start - 1].codePoints[0])) {
          glyphs[start - 1].features.numr = true;
          glyphs[start - 1].features.frac = true;
          start--;
        }
        while (end < glyphs.length && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[end].codePoints[0])) {
          glyphs[end].features.dnom = true;
          glyphs[end].features.frac = true;
          end++;
        }
        glyph.features.frac = true;
        i = end - 1;
      }
    }
  }
};
var $5cab828b3273a17c$require$Buffer = $5OpyM$Buffer;
var $5cab828b3273a17c$var$trie = new import_unicode_trie2.default($5cab828b3273a17c$require$Buffer.from("ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=", "base64"));
var $5cab828b3273a17c$var$FEATURES = [
  "isol",
  "fina",
  "fin2",
  "fin3",
  "medi",
  "med2",
  "init"
];
var $5cab828b3273a17c$var$ShapingClasses = {
  Non_Joining: 0,
  Left_Joining: 1,
  Right_Joining: 2,
  Dual_Joining: 3,
  Join_Causing: 3,
  ALAPH: 4,
  "DALATH RISH": 5,
  Transparent: 6
};
var $5cab828b3273a17c$var$ISOL = "isol";
var $5cab828b3273a17c$var$FINA = "fina";
var $5cab828b3273a17c$var$FIN2 = "fin2";
var $5cab828b3273a17c$var$FIN3 = "fin3";
var $5cab828b3273a17c$var$MEDI = "medi";
var $5cab828b3273a17c$var$MED2 = "med2";
var $5cab828b3273a17c$var$INIT = "init";
var $5cab828b3273a17c$var$NONE = null;
var $5cab828b3273a17c$var$STATE_TABLE = [
  //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
  // State 0: prev was U,  not willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  // State 1: prev was R or ISOL/ALAPH,  not willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  // State 2: prev was D/L in ISOL form,  willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      1
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      3
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      4
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      6
    ]
  ],
  // State 3: prev was D in FINA form,  willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      1
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      3
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      4
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      6
    ]
  ],
  // State 4: prev was FINA ALAPH,  not willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  // State 6: prev was DALATH/RISH,  not willing to join.
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$FIN3,
      5
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ]
];
var $5cab828b3273a17c$export$2e2bcd8739ae039 = class extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static planFeatures(plan) {
    plan.add([
      "ccmp",
      "locl"
    ]);
    for (let i = 0; i < $5cab828b3273a17c$var$FEATURES.length; i++) {
      let feature = $5cab828b3273a17c$var$FEATURES[i];
      plan.addStage(feature, false);
    }
    plan.addStage("mset");
  }
  static assignFeatures(plan, glyphs) {
    super.assignFeatures(plan, glyphs);
    let prev = -1;
    let state = 0;
    let actions = [];
    for (let i = 0; i < glyphs.length; i++) {
      let curAction, prevAction;
      var glyph = glyphs[i];
      let type = $5cab828b3273a17c$var$getShapingClass(glyph.codePoints[0]);
      if (type === $5cab828b3273a17c$var$ShapingClasses.Transparent) {
        actions[i] = $5cab828b3273a17c$var$NONE;
        continue;
      }
      [prevAction, curAction, state] = $5cab828b3273a17c$var$STATE_TABLE[state][type];
      if (prevAction !== $5cab828b3273a17c$var$NONE && prev !== -1) actions[prev] = prevAction;
      actions[i] = curAction;
      prev = i;
    }
    for (let index = 0; index < glyphs.length; index++) {
      let feature;
      var glyph = glyphs[index];
      if (feature = actions[index]) glyph.features[feature] = true;
    }
  }
};
function $5cab828b3273a17c$var$getShapingClass(codePoint) {
  let res = $5cab828b3273a17c$var$trie.get(codePoint);
  if (res) return res - 1;
  let category = $747425b437e121da$export$2e2bcd8739ae039.getCategory(codePoint);
  if (category === "Mn" || category === "Me" || category === "Cf") return $5cab828b3273a17c$var$ShapingClasses.Transparent;
  return $5cab828b3273a17c$var$ShapingClasses.Non_Joining;
}
var $ab0ec2aaf85421fe$export$2e2bcd8739ae039 = class {
  constructor(glyphs, options) {
    this.glyphs = glyphs;
    this.reset(options);
  }
  reset(options = {}, index = 0) {
    this.options = options;
    this.flags = options.flags || {};
    this.markAttachmentType = options.markAttachmentType || 0;
    this.index = index;
  }
  get cur() {
    return this.glyphs[this.index] || null;
  }
  shouldIgnore(glyph) {
    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
  }
  move(dir) {
    this.index += dir;
    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) this.index += dir;
    if (0 > this.index || this.index >= this.glyphs.length) return null;
    return this.glyphs[this.index];
  }
  next() {
    return this.move(1);
  }
  prev() {
    return this.move(-1);
  }
  peek(count = 1) {
    let idx = this.index;
    let res = this.increment(count);
    this.index = idx;
    return res;
  }
  peekIndex(count = 1) {
    let idx = this.index;
    this.increment(count);
    let res = this.index;
    this.index = idx;
    return res;
  }
  increment(count = 1) {
    let dir = count < 0 ? -1 : 1;
    count = Math.abs(count);
    while (count--) this.move(dir);
    return this.glyphs[this.index];
  }
};
var $cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS = [
  "DFLT",
  "dflt",
  "latn"
];
var $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 = class {
  constructor(font, table) {
    this.font = font;
    this.table = table;
    this.script = null;
    this.scriptTag = null;
    this.language = null;
    this.languageTag = null;
    this.features = {};
    this.lookups = {};
    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
    this.selectScript();
    this.glyphs = [];
    this.positions = [];
    this.ligatureID = 1;
    this.currentFeature = null;
  }
  findScript(script) {
    if (this.table.scriptList == null) return null;
    if (!Array.isArray(script)) script = [
      script
    ];
    for (let s of script) for (let entry of this.table.scriptList) {
      if (entry.tag === s) return entry;
    }
    return null;
  }
  selectScript(script, language, direction) {
    let changed = false;
    let entry;
    if (!this.script || script !== this.scriptTag) {
      entry = this.findScript(script);
      if (!entry) entry = this.findScript($cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS);
      if (!entry) return this.scriptTag;
      this.scriptTag = entry.tag;
      this.script = entry.script;
      this.language = null;
      this.languageTag = null;
      changed = true;
    }
    if (!direction || direction !== this.direction) this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
    if (language && language.length < 4) language += " ".repeat(4 - language.length);
    if (!language || language !== this.languageTag) {
      this.language = null;
      for (let lang of this.script.langSysRecords) if (lang.tag === language) {
        this.language = lang.langSys;
        this.languageTag = lang.tag;
        break;
      }
      if (!this.language) {
        this.language = this.script.defaultLangSys;
        this.languageTag = null;
      }
      changed = true;
    }
    if (changed) {
      this.features = {};
      if (this.language) for (let featureIndex of this.language.featureIndexes) {
        let record = this.table.featureList[featureIndex];
        let substituteFeature = this.substituteFeatureForVariations(featureIndex);
        this.features[record.tag] = substituteFeature || record.feature;
      }
    }
    return this.scriptTag;
  }
  lookupsForFeatures(userFeatures = [], exclude) {
    let lookups = [];
    for (let tag of userFeatures) {
      let feature = this.features[tag];
      if (!feature) continue;
      for (let lookupIndex of feature.lookupListIndexes) {
        if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;
        lookups.push({
          feature: tag,
          index: lookupIndex,
          lookup: this.table.lookupList.get(lookupIndex)
        });
      }
    }
    lookups.sort(
      (a, b) => a.index - b.index
    );
    return lookups;
  }
  substituteFeatureForVariations(featureIndex) {
    if (this.variationsIndex === -1) return null;
    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
    let substitutions = record.featureTableSubstitution.substitutions;
    for (let substitution of substitutions) {
      if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;
    }
    return null;
  }
  findVariationsIndex(coords) {
    let variations = this.table.featureVariations;
    if (!variations) return -1;
    let records = variations.featureVariationRecords;
    for (let i = 0; i < records.length; i++) {
      let conditions = records[i].conditionSet.conditionTable;
      if (this.variationConditionsMatch(conditions, coords)) return i;
    }
    return -1;
  }
  variationConditionsMatch(conditions, coords) {
    return conditions.every((condition) => {
      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
    });
  }
  applyFeatures(userFeatures, glyphs, advances) {
    let lookups = this.lookupsForFeatures(userFeatures);
    this.applyLookups(lookups, glyphs, advances);
  }
  applyLookups(lookups, glyphs, positions) {
    this.glyphs = glyphs;
    this.positions = positions;
    this.glyphIterator = new $ab0ec2aaf85421fe$export$2e2bcd8739ae039(glyphs);
    for (let { feature, lookup } of lookups) {
      this.currentFeature = feature;
      this.glyphIterator.reset(lookup.flags);
      while (this.glyphIterator.index < glyphs.length) {
        if (!(feature in this.glyphIterator.cur.features)) {
          this.glyphIterator.next();
          continue;
        }
        for (let table of lookup.subTables) {
          let res = this.applyLookup(lookup.lookupType, table);
          if (res) break;
        }
        this.glyphIterator.next();
      }
    }
  }
  applyLookup(lookup, table) {
    throw new Error("applyLookup must be implemented by subclasses");
  }
  applyLookupList(lookupRecords) {
    let options = this.glyphIterator.options;
    let glyphIndex = this.glyphIterator.index;
    for (let lookupRecord of lookupRecords) {
      this.glyphIterator.reset(options, glyphIndex);
      this.glyphIterator.increment(lookupRecord.sequenceIndex);
      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
      for (let table of lookup.subTables) {
        if (this.applyLookup(lookup.lookupType, table)) break;
      }
    }
    this.glyphIterator.reset(options, glyphIndex);
    return true;
  }
  coverageIndex(coverage, glyph) {
    if (glyph == null) glyph = this.glyphIterator.cur.id;
    switch (coverage.version) {
      case 1:
        return coverage.glyphs.indexOf(glyph);
      case 2:
        for (let range of coverage.rangeRecords) {
          if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;
        }
        break;
    }
    return -1;
  }
  match(sequenceIndex, sequence, fn, matched) {
    let pos = this.glyphIterator.index;
    let glyph = this.glyphIterator.increment(sequenceIndex);
    let idx = 0;
    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
      if (matched) matched.push(this.glyphIterator.index);
      idx++;
      glyph = this.glyphIterator.next();
    }
    this.glyphIterator.index = pos;
    if (idx < sequence.length) return false;
    return matched || true;
  }
  sequenceMatches(sequenceIndex, sequence) {
    return this.match(
      sequenceIndex,
      sequence,
      (component, glyph) => component === glyph.id
    );
  }
  sequenceMatchIndices(sequenceIndex, sequence) {
    return this.match(sequenceIndex, sequence, (component, glyph) => {
      if (!(this.currentFeature in glyph.features)) return false;
      return component === glyph.id;
    }, []);
  }
  coverageSequenceMatches(sequenceIndex, sequence) {
    return this.match(
      sequenceIndex,
      sequence,
      (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0
    );
  }
  getClassID(glyph, classDef) {
    switch (classDef.version) {
      case 1:
        let i = glyph - classDef.startGlyph;
        if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];
        break;
      case 2:
        for (let range of classDef.classRangeRecord) {
          if (range.start <= glyph && glyph <= range.end) return range.class;
        }
        break;
    }
    return 0;
  }
  classSequenceMatches(sequenceIndex, sequence, classDef) {
    return this.match(
      sequenceIndex,
      sequence,
      (classID, glyph) => classID === this.getClassID(glyph.id, classDef)
    );
  }
  applyContext(table) {
    let index, set;
    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        set = table.ruleSets[index];
        for (let rule of set) {
          if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);
        }
        break;
      case 2:
        if (this.coverageIndex(table.coverage) === -1) return false;
        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
        if (index === -1) return false;
        set = table.classSet[index];
        for (let rule1 of set) {
          if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);
        }
        break;
      case 3:
        if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);
        break;
    }
    return false;
  }
  applyChainingContext(table) {
    let index;
    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        let set = table.chainRuleSets[index];
        for (let rule of set) {
          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);
        }
        break;
      case 2:
        if (this.coverageIndex(table.coverage) === -1) return false;
        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
        let rules = table.chainClassSet[index];
        if (!rules) return false;
        for (let rule2 of rules) {
          if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);
        }
        break;
      case 3:
        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);
        break;
    }
    return false;
  }
};
var $8cba766f534deddd$export$2e2bcd8739ae039 = class _$8cba766f534deddd$export$2e2bcd8739ae039 {
  constructor(font, id, codePoints = [], features) {
    this._font = font;
    this.codePoints = codePoints;
    this.id = id;
    this.features = {};
    if (Array.isArray(features)) for (let i = 0; i < features.length; i++) {
      let feature = features[i];
      this.features[feature] = true;
    }
    else if (typeof features === "object") Object.assign(this.features, features);
    this.ligatureID = null;
    this.ligatureComponent = null;
    this.isLigated = false;
    this.cursiveAttachment = null;
    this.markAttachment = null;
    this.shaperInfo = null;
    this.substituted = false;
    this.isMultiplied = false;
  }
  get id() {
    return this._id;
  }
  set id(id) {
    this._id = id;
    this.substituted = true;
    let GDEF = this._font.GDEF;
    if (GDEF && GDEF.glyphClassDef) {
      let classID = $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);
      this.isBase = classID === 1;
      this.isLigature = classID === 2;
      this.isMark = classID === 3;
      this.markAttachmentType = GDEF.markAttachClassDef ? $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
    } else {
      this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
      this.isBase = !this.isMark;
      this.isLigature = this.codePoints.length > 1;
      this.markAttachmentType = 0;
    }
  }
  copy() {
    return new _$8cba766f534deddd$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
  }
};
var $ce39c5154631fd0c$export$2e2bcd8739ae039 = class extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "NONE";
  static planFeatures(plan) {
    plan.add([
      "ljmo",
      "vjmo",
      "tjmo"
    ], false);
  }
  static assignFeatures(plan, glyphs) {
    let state = 0;
    let i = 0;
    while (i < glyphs.length) {
      let action;
      let glyph = glyphs[i];
      let code = glyph.codePoints[0];
      let type = $ce39c5154631fd0c$var$getType(code);
      [action, state] = $ce39c5154631fd0c$var$STATE_TABLE[state][type];
      switch (action) {
        case $ce39c5154631fd0c$var$DECOMPOSE:
          if (!plan.font.hasGlyphForCodePoint(code)) i = $ce39c5154631fd0c$var$decompose(glyphs, i, plan.font);
          break;
        case $ce39c5154631fd0c$var$COMPOSE:
          i = $ce39c5154631fd0c$var$compose(glyphs, i, plan.font);
          break;
        case $ce39c5154631fd0c$var$TONE_MARK:
          $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, plan.font);
          break;
        case $ce39c5154631fd0c$var$INVALID:
          i = $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, plan.font);
          break;
      }
      i++;
    }
  }
};
var $ce39c5154631fd0c$var$HANGUL_BASE = 44032;
var $ce39c5154631fd0c$var$HANGUL_END = 55204;
var $ce39c5154631fd0c$var$HANGUL_COUNT = $ce39c5154631fd0c$var$HANGUL_END - $ce39c5154631fd0c$var$HANGUL_BASE + 1;
var $ce39c5154631fd0c$var$L_BASE = 4352;
var $ce39c5154631fd0c$var$V_BASE = 4449;
var $ce39c5154631fd0c$var$T_BASE = 4519;
var $ce39c5154631fd0c$var$L_COUNT = 19;
var $ce39c5154631fd0c$var$V_COUNT = 21;
var $ce39c5154631fd0c$var$T_COUNT = 28;
var $ce39c5154631fd0c$var$L_END = $ce39c5154631fd0c$var$L_BASE + $ce39c5154631fd0c$var$L_COUNT - 1;
var $ce39c5154631fd0c$var$V_END = $ce39c5154631fd0c$var$V_BASE + $ce39c5154631fd0c$var$V_COUNT - 1;
var $ce39c5154631fd0c$var$T_END = $ce39c5154631fd0c$var$T_BASE + $ce39c5154631fd0c$var$T_COUNT - 1;
var $ce39c5154631fd0c$var$DOTTED_CIRCLE = 9676;
var $ce39c5154631fd0c$var$isL = (code) => 4352 <= code && code <= 4447 || 43360 <= code && code <= 43388;
var $ce39c5154631fd0c$var$isV = (code) => 4448 <= code && code <= 4519 || 55216 <= code && code <= 55238;
var $ce39c5154631fd0c$var$isT = (code) => 4520 <= code && code <= 4607 || 55243 <= code && code <= 55291;
var $ce39c5154631fd0c$var$isTone = (code) => 12334 <= code && code <= 12335;
var $ce39c5154631fd0c$var$isLVT = (code) => $ce39c5154631fd0c$var$HANGUL_BASE <= code && code <= $ce39c5154631fd0c$var$HANGUL_END;
var $ce39c5154631fd0c$var$isLV = (code) => code - $ce39c5154631fd0c$var$HANGUL_BASE < $ce39c5154631fd0c$var$HANGUL_COUNT && (code - $ce39c5154631fd0c$var$HANGUL_BASE) % $ce39c5154631fd0c$var$T_COUNT === 0;
var $ce39c5154631fd0c$var$isCombiningL = (code) => $ce39c5154631fd0c$var$L_BASE <= code && code <= $ce39c5154631fd0c$var$L_END;
var $ce39c5154631fd0c$var$isCombiningV = (code) => $ce39c5154631fd0c$var$V_BASE <= code && code <= $ce39c5154631fd0c$var$V_END;
var $ce39c5154631fd0c$var$isCombiningT = (code) => $ce39c5154631fd0c$var$T_BASE + 1 && 1 <= code && code <= $ce39c5154631fd0c$var$T_END;
var $ce39c5154631fd0c$var$X = 0;
var $ce39c5154631fd0c$var$L = 1;
var $ce39c5154631fd0c$var$V = 2;
var $ce39c5154631fd0c$var$T = 3;
var $ce39c5154631fd0c$var$LV = 4;
var $ce39c5154631fd0c$var$LVT = 5;
var $ce39c5154631fd0c$var$M = 6;
function $ce39c5154631fd0c$var$getType(code) {
  if ($ce39c5154631fd0c$var$isL(code)) return $ce39c5154631fd0c$var$L;
  if ($ce39c5154631fd0c$var$isV(code)) return $ce39c5154631fd0c$var$V;
  if ($ce39c5154631fd0c$var$isT(code)) return $ce39c5154631fd0c$var$T;
  if ($ce39c5154631fd0c$var$isLV(code)) return $ce39c5154631fd0c$var$LV;
  if ($ce39c5154631fd0c$var$isLVT(code)) return $ce39c5154631fd0c$var$LVT;
  if ($ce39c5154631fd0c$var$isTone(code)) return $ce39c5154631fd0c$var$M;
  return $ce39c5154631fd0c$var$X;
}
var $ce39c5154631fd0c$var$NO_ACTION = 0;
var $ce39c5154631fd0c$var$DECOMPOSE = 1;
var $ce39c5154631fd0c$var$COMPOSE = 2;
var $ce39c5154631fd0c$var$TONE_MARK = 4;
var $ce39c5154631fd0c$var$INVALID = 5;
var $ce39c5154631fd0c$var$STATE_TABLE = [
  //       X                 L                 V                T                  LV                LVT               M
  // State 0: start state
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$INVALID,
      0
    ]
  ],
  // State 1: <L>
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$COMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$INVALID,
      0
    ]
  ],
  // State 2: <L,V> or <LV>
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$COMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$TONE_MARK,
      0
    ]
  ],
  // State 3: <L,V,T> or <LVT>
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$TONE_MARK,
      0
    ]
  ]
];
function $ce39c5154631fd0c$var$getGlyph(font, code, features) {
  return new $8cba766f534deddd$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [
    code
  ], features);
}
function $ce39c5154631fd0c$var$decompose(glyphs, i, font) {
  let glyph = glyphs[i];
  let code = glyph.codePoints[0];
  let s = code - $ce39c5154631fd0c$var$HANGUL_BASE;
  let t = $ce39c5154631fd0c$var$T_BASE + s % $ce39c5154631fd0c$var$T_COUNT;
  s = s / $ce39c5154631fd0c$var$T_COUNT | 0;
  let l = $ce39c5154631fd0c$var$L_BASE + s / $ce39c5154631fd0c$var$V_COUNT | 0;
  let v = $ce39c5154631fd0c$var$V_BASE + s % $ce39c5154631fd0c$var$V_COUNT;
  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $ce39c5154631fd0c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;
  let ljmo = $ce39c5154631fd0c$var$getGlyph(font, l, glyph.features);
  ljmo.features.ljmo = true;
  let vjmo = $ce39c5154631fd0c$var$getGlyph(font, v, glyph.features);
  vjmo.features.vjmo = true;
  let insert = [
    ljmo,
    vjmo
  ];
  if (t > $ce39c5154631fd0c$var$T_BASE) {
    let tjmo = $ce39c5154631fd0c$var$getGlyph(font, t, glyph.features);
    tjmo.features.tjmo = true;
    insert.push(tjmo);
  }
  glyphs.splice(i, 1, ...insert);
  return i + insert.length - 1;
}
function $ce39c5154631fd0c$var$compose(glyphs, i, font) {
  let glyph = glyphs[i];
  let code = glyphs[i].codePoints[0];
  let type = $ce39c5154631fd0c$var$getType(code);
  let prev = glyphs[i - 1].codePoints[0];
  let prevType = $ce39c5154631fd0c$var$getType(prev);
  let lv, ljmo, vjmo, tjmo;
  if (prevType === $ce39c5154631fd0c$var$LV && type === $ce39c5154631fd0c$var$T) {
    lv = prev;
    tjmo = glyph;
  } else {
    if (type === $ce39c5154631fd0c$var$V) {
      ljmo = glyphs[i - 1];
      vjmo = glyph;
    } else {
      ljmo = glyphs[i - 2];
      vjmo = glyphs[i - 1];
      tjmo = glyph;
    }
    let l = ljmo.codePoints[0];
    let v = vjmo.codePoints[0];
    if ($ce39c5154631fd0c$var$isCombiningL(l) && $ce39c5154631fd0c$var$isCombiningV(v)) lv = $ce39c5154631fd0c$var$HANGUL_BASE + ((l - $ce39c5154631fd0c$var$L_BASE) * $ce39c5154631fd0c$var$V_COUNT + (v - $ce39c5154631fd0c$var$V_BASE)) * $ce39c5154631fd0c$var$T_COUNT;
  }
  let t = tjmo && tjmo.codePoints[0] || $ce39c5154631fd0c$var$T_BASE;
  if (lv != null && (t === $ce39c5154631fd0c$var$T_BASE || $ce39c5154631fd0c$var$isCombiningT(t))) {
    let s = lv + (t - $ce39c5154631fd0c$var$T_BASE);
    if (font.hasGlyphForCodePoint(s)) {
      let del = prevType === $ce39c5154631fd0c$var$V ? 3 : 2;
      glyphs.splice(i - del + 1, del, $ce39c5154631fd0c$var$getGlyph(font, s, glyph.features));
      return i - del + 1;
    }
  }
  if (ljmo) ljmo.features.ljmo = true;
  if (vjmo) vjmo.features.vjmo = true;
  if (tjmo) tjmo.features.tjmo = true;
  if (prevType === $ce39c5154631fd0c$var$LV) {
    $ce39c5154631fd0c$var$decompose(glyphs, i - 1, font);
    return i + 1;
  }
  return i;
}
function $ce39c5154631fd0c$var$getLength(code) {
  switch ($ce39c5154631fd0c$var$getType(code)) {
    case $ce39c5154631fd0c$var$LV:
    case $ce39c5154631fd0c$var$LVT:
      return 1;
    case $ce39c5154631fd0c$var$V:
      return 2;
    case $ce39c5154631fd0c$var$T:
      return 3;
  }
}
function $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, font) {
  let glyph = glyphs[i];
  let code = glyphs[i].codePoints[0];
  if (font.glyphForCodePoint(code).advanceWidth === 0) return;
  let prev = glyphs[i - 1].codePoints[0];
  let len = $ce39c5154631fd0c$var$getLength(prev);
  glyphs.splice(i, 1);
  return glyphs.splice(i - len, 0, glyph);
}
function $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, font) {
  let glyph = glyphs[i];
  let code = glyphs[i].codePoints[0];
  if (font.hasGlyphForCodePoint($ce39c5154631fd0c$var$DOTTED_CIRCLE)) {
    let dottedCircle = $ce39c5154631fd0c$var$getGlyph(font, $ce39c5154631fd0c$var$DOTTED_CIRCLE, glyph.features);
    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
    glyphs.splice(idx, 0, dottedCircle);
    i++;
  }
  return i;
}
var $a550b6039b7700b3$exports = {};
$a550b6039b7700b3$exports = JSON.parse('{"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],"accepting":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],"tags":[[],["broken_cluster"],["consonant_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],[],["broken_cluster"],["symbol_cluster"],[],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["symbol_cluster"],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],[],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],[],[],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],["consonant_syllable"],["vowel_syllable"],["standalone_cluster"]]}');
var $f3bd27a8c88f3f53$exports = {};
$f3bd27a8c88f3f53$exports = JSON.parse('{"categories":["O","IND","S","GB","B","FM","CGJ","VMAbv","VMPst","VAbv","VPst","CMBlw","VPre","VBlw","H","VMBlw","CMAbv","MBlw","CS","R","SUB","MPst","MPre","FAbv","FPst","FBlw","SMAbv","SMBlw","VMPre","ZWNJ","ZWJ","WJ","VS","N","HN","MAbv"],"decompositions":{"2507":[2503,2494],"2508":[2503,2519],"2888":[2887,2902],"2891":[2887,2878],"2892":[2887,2903],"3018":[3014,3006],"3019":[3015,3006],"3020":[3014,3031],"3144":[3142,3158],"3264":[3263,3285],"3271":[3270,3285],"3272":[3270,3286],"3274":[3270,3266],"3275":[3270,3266,3285],"3402":[3398,3390],"3403":[3399,3390],"3404":[3398,3415],"3546":[3545,3530],"3548":[3545,3535],"3549":[3545,3535,3530],"3550":[3545,3551],"3635":[3661,3634],"3763":[3789,3762],"3955":[3953,3954],"3957":[3953,3956],"3958":[4018,3968],"3959":[4018,3953,3968],"3960":[4019,3968],"3961":[4019,3953,3968],"3969":[3953,3968],"6971":[6970,6965],"6973":[6972,6965],"6976":[6974,6965],"6977":[6975,6965],"6979":[6978,6965],"69934":[69937,69927],"69935":[69938,69927],"70475":[70471,70462],"70476":[70471,70487],"70843":[70841,70842],"70844":[70841,70832],"70846":[70841,70845],"71098":[71096,71087],"71099":[71097,71087]},"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],"accepting":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"tags":[[],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["symbol_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["virama_terminated_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["number_joiner_terminated_cluster"],["standard_cluster"],["standard_cluster"],["numeral_cluster"]]}');
var $b9778c6b60232cf0$export$a513ea61a7bee91c = {
  X: 1,
  C: 2,
  V: 4,
  N: 8,
  H: 16,
  ZWNJ: 32,
  ZWJ: 64,
  M: 128,
  SM: 256,
  VD: 512,
  A: 1024,
  Placeholder: 2048,
  Dotted_Circle: 4096,
  RS: 8192,
  Coeng: 16384,
  Repha: 32768,
  Ra: 65536,
  CM: 131072,
  Symbol: 262144
  // Avagraha, etc that take marks (SM,A,VD).
};
var $b9778c6b60232cf0$export$1a1f61c9c4dd9df0 = {
  Start: 1,
  Ra_To_Become_Reph: 2,
  Pre_M: 4,
  Pre_C: 8,
  Base_C: 16,
  After_Main: 32,
  Above_C: 64,
  Before_Sub: 128,
  Below_C: 256,
  After_Sub: 512,
  Before_Post: 1024,
  Post_C: 2048,
  After_Post: 4096,
  Final_C: 8192,
  SMVD: 16384,
  End: 32768
};
var $b9778c6b60232cf0$export$8519deaa7de2b07 = $b9778c6b60232cf0$export$a513ea61a7bee91c.C | $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$a513ea61a7bee91c.V | $b9778c6b60232cf0$export$a513ea61a7bee91c.Placeholder | $b9778c6b60232cf0$export$a513ea61a7bee91c.Dotted_Circle;
var $b9778c6b60232cf0$export$bbcd928767338e0d = $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ | $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
var $b9778c6b60232cf0$export$ca9599b2a300afc = $b9778c6b60232cf0$export$a513ea61a7bee91c.H | $b9778c6b60232cf0$export$a513ea61a7bee91c.Coeng;
var $b9778c6b60232cf0$export$e99d119da76a0fc5 = {
  Default: {
    hasOldSpec: false,
    virama: 0,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Devanagari: {
    hasOldSpec: true,
    virama: 2381,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Bengali: {
    hasOldSpec: true,
    virama: 2509,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gurmukhi: {
    hasOldSpec: true,
    virama: 2637,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gujarati: {
    hasOldSpec: true,
    virama: 2765,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Oriya: {
    hasOldSpec: true,
    virama: 2893,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Tamil: {
    hasOldSpec: true,
    virama: 3021,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Telugu: {
    hasOldSpec: true,
    virama: 3149,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Explicit",
    blwfMode: "Post_Only"
  },
  Kannada: {
    hasOldSpec: true,
    virama: 3277,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Implicit",
    blwfMode: "Post_Only"
  },
  Malayalam: {
    hasOldSpec: true,
    virama: 3405,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
    rephMode: "Log_Repha",
    blwfMode: "Pre_And_Post"
  },
  // Handled by UniversalShaper
  // Sinhala: {
  //   hasOldSpec: false,
  //   virama: 0x0DCA,
  //   basePos: 'Last_Sinhala',
  //   rephPos: POSITIONS.After_Main,
  //   rephMode: 'Explicit',
  //   blwfMode: 'Pre_And_Post'
  // },
  Khmer: {
    hasOldSpec: false,
    virama: 6098,
    basePos: "First",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
    rephMode: "Vis_Repha",
    blwfMode: "Pre_And_Post"
  }
};
var $b9778c6b60232cf0$export$f647c9cfdd77d95a = {
  // Khmer
  6078: [
    6081,
    6078
  ],
  6079: [
    6081,
    6079
  ],
  6080: [
    6081,
    6080
  ],
  6084: [
    6081,
    6084
  ],
  6085: [
    6081,
    6085
  ]
};
var $c6b883ac45fa55f1$require$Buffer = $5OpyM$Buffer;
var { decompositions: $c6b883ac45fa55f1$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports);
var $c6b883ac45fa55f1$var$trie = new import_unicode_trie2.default($c6b883ac45fa55f1$require$Buffer.from("AAARAAAAAACgwgAAAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf", "base64"));
var $c6b883ac45fa55f1$var$stateMachine = new import_dfa.default(/* @__PURE__ */ $parcel$interopDefault2($a550b6039b7700b3$exports));
var $c6b883ac45fa55f1$export$2e2bcd8739ae039 = class extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "NONE";
  static planFeatures(plan) {
    plan.addStage($c6b883ac45fa55f1$var$setupSyllables);
    plan.addStage([
      "locl",
      "ccmp"
    ]);
    plan.addStage($c6b883ac45fa55f1$var$initialReordering);
    plan.addStage("nukt");
    plan.addStage("akhn");
    plan.addStage("rphf", false);
    plan.addStage("rkrf");
    plan.addStage("pref", false);
    plan.addStage("blwf", false);
    plan.addStage("abvf", false);
    plan.addStage("half", false);
    plan.addStage("pstf", false);
    plan.addStage("vatu");
    plan.addStage("cjct");
    plan.addStage("cfar", false);
    plan.addStage($c6b883ac45fa55f1$var$finalReordering);
    plan.addStage({
      local: [
        "init"
      ],
      global: [
        "pres",
        "abvs",
        "blws",
        "psts",
        "haln",
        "dist",
        "abvm",
        "blwm",
        "calt",
        "clig"
      ]
    });
    plan.unicodeScript = $a5878e4f4663c9e2$export$ce50e82f12a827a4(plan.script);
    plan.indicConfig = $b9778c6b60232cf0$export$e99d119da76a0fc5[plan.unicodeScript] || $b9778c6b60232cf0$export$e99d119da76a0fc5.Default;
    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== "2";
  }
  static assignFeatures(plan, glyphs) {
    for (let i = glyphs.length - 1; i >= 0; i--) {
      let codepoint = glyphs[i].codePoints[0];
      let d = $b9778c6b60232cf0$export$f647c9cfdd77d95a[codepoint] || $c6b883ac45fa55f1$var$decompositions[codepoint];
      if (d) {
        let decomposed = d.map((c) => {
          let g = plan.font.glyphForCodePoint(c);
          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
            c
          ], glyphs[i].features);
        });
        glyphs.splice(i, 1, ...decomposed);
      }
    }
  }
};
function $c6b883ac45fa55f1$var$indicCategory(glyph) {
  return $c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) >> 8;
}
function $c6b883ac45fa55f1$var$indicPosition(glyph) {
  return 1 << ($c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) & 255);
}
var $c6b883ac45fa55f1$var$IndicInfo = class {
  constructor(category, position, syllableType, syllable) {
    this.category = category;
    this.position = position;
    this.syllableType = syllableType;
    this.syllable = syllable;
  }
};
function $c6b883ac45fa55f1$var$setupSyllables(font, glyphs) {
  let syllable = 0;
  let last2 = 0;
  for (let [start, end, tags] of $c6b883ac45fa55f1$var$stateMachine.match(glyphs.map($c6b883ac45fa55f1$var$indicCategory))) {
    if (start > last2) {
      ++syllable;
      for (let i = last2; i < start; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
    }
    ++syllable;
    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(glyphs[i]), $c6b883ac45fa55f1$var$indicPosition(glyphs[i]), tags[0], syllable);
    last2 = end + 1;
  }
  if (last2 < glyphs.length) {
    ++syllable;
    for (let i = last2; i < glyphs.length; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
  }
}
function $c6b883ac45fa55f1$var$isConsonant(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$8519deaa7de2b07;
}
function $c6b883ac45fa55f1$var$isJoiner(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$bbcd928767338e0d;
}
function $c6b883ac45fa55f1$var$isHalantOrCoeng(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$ca9599b2a300afc;
}
function $c6b883ac45fa55f1$var$wouldSubstitute(glyphs, feature) {
  for (let glyph of glyphs) glyph.features = {
    [feature]: true
  };
  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
  GSUB.applyFeatures([
    feature
  ], glyphs);
  return glyphs.length === 1;
}
function $c6b883ac45fa55f1$var$consonantPosition(font, consonant, virama) {
  let glyphs = [
    virama,
    consonant,
    virama
  ];
  if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "blwf") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "blwf")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
  else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "pstf") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "pstf")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
  else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "pref") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "pref")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
  return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
}
function $c6b883ac45fa55f1$var$initialReordering(font, glyphs, plan) {
  let indicConfig = plan.indicConfig;
  let features = font._layoutEngine.engine.GSUBProcessor.features;
  let dottedCircle = font.glyphForCodePoint(9676).id;
  let virama = font.glyphForCodePoint(indicConfig.virama).id;
  if (virama) {
    let info = new $8cba766f534deddd$export$2e2bcd8739ae039(font, virama, [
      indicConfig.virama
    ]);
    for (let i = 0; i < glyphs.length; i++) if (glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) glyphs[i].shaperInfo.position = $c6b883ac45fa55f1$var$consonantPosition(font, glyphs[i].copy(), info);
  }
  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {
    let { category, syllableType } = glyphs[start].shaperInfo;
    if (syllableType === "symbol_cluster" || syllableType === "non_indic_cluster") continue;
    if (syllableType === "broken_cluster" && dottedCircle) {
      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
        9676
      ]);
      g.shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(g), $c6b883ac45fa55f1$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
      let i = start;
      while (i < end && glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) i++;
      glyphs.splice(i++, 0, g);
      end++;
    }
    let base = end;
    let limit = start;
    let hasReph = false;
    if (indicConfig.rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === "Implicit" && !$c6b883ac45fa55f1$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === "Explicit" && glyphs[start + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
      let g = [
        glyphs[start].copy(),
        glyphs[start + 1].copy(),
        glyphs[start + 2].copy()
      ];
      if ($c6b883ac45fa55f1$var$wouldSubstitute(g.slice(0, 2), "rphf") || indicConfig.rephMode === "Explicit" && $c6b883ac45fa55f1$var$wouldSubstitute(g, "rphf")) {
        limit += 2;
        while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit])) limit++;
        base = start;
        hasReph = true;
      }
    } else if (indicConfig.rephMode === "Log_Repha" && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) {
      limit++;
      while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit])) limit++;
      base = start;
      hasReph = true;
    }
    switch (indicConfig.basePos) {
      case "Last": {
        let i = end;
        let seenBelow = false;
        do {
          let info = glyphs[--i].shaperInfo;
          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) {
            if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {
              base = i;
              break;
            }
            if (info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) seenBelow = true;
            base = i;
          } else if (start < i && info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ && glyphs[i - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;
        } while (i > limit);
        break;
      }
      case "First":
        base = start;
        for (let i = base + 1; i < end; i++) if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
    }
    if (hasReph && base === start && limit - base <= 2) hasReph = false;
    for (let i1 = start; i1 < base; i1++) {
      let info = glyphs[i1].shaperInfo;
      info.position = Math.min($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_C, info.position);
    }
    if (base < end) glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
    for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
      for (let j = i2 + 1; j < end; j++) if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j])) {
        glyphs[j].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Final_C;
        break;
      }
      break;
    }
    if (hasReph) glyphs[start].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;
    if (plan.isOldSpec) {
      let disallowDoubleHalants = plan.unicodeScript !== "Malayalam";
      for (let i = base + 1; i < end; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) {
        let j;
        for (j = end - 1; j > i; j--) {
          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;
        }
        if (glyphs[j].shaperInfo.category !== $b9778c6b60232cf0$export$a513ea61a7bee91c.H && j > i) {
          let t = glyphs[i];
          glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));
          glyphs[j] = t;
        }
        break;
      }
    }
    let lastPos = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Start;
    for (let i3 = start; i3 < end; i3++) {
      let info = glyphs[i3].shaperInfo;
      if (info.category & ($b9778c6b60232cf0$export$bbcd928767338e0d | $b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$a513ea61a7bee91c.RS | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$ca9599b2a300afc & info.category)) {
        info.position = lastPos;
        if (info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
          for (let j = i3; j > start; j--) if (glyphs[j - 1].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
            info.position = glyphs[j - 1].shaperInfo.position;
            break;
          }
        }
      } else if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) lastPos = info.position;
    }
    let last2 = base;
    for (let i4 = base + 1; i4 < end; i4++) {
      if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i4])) {
        for (let j = last2 + 1; j < i4; j++) if (glyphs[j].shaperInfo.position < $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;
        last2 = i4;
      } else if (glyphs[i4].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) last2 = i4;
    }
    let arr = glyphs.slice(start, end);
    arr.sort(
      (a, b) => a.shaperInfo.position - b.shaperInfo.position
    );
    glyphs.splice(start, arr.length, ...arr);
    for (let i5 = start; i5 < end; i5++) if (glyphs[i5].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
      base = i5;
      break;
    }
    for (let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++) glyphs[i6].features.rphf = true;
    let blwf = !plan.isOldSpec && indicConfig.blwfMode === "Pre_And_Post";
    for (let i7 = start; i7 < base; i7++) {
      glyphs[i7].features.half = true;
      if (blwf) glyphs[i7].features.blwf = true;
    }
    for (let i8 = base + 1; i8 < end; i8++) {
      glyphs[i8].features.abvf = true;
      glyphs[i8].features.pstf = true;
      glyphs[i8].features.blwf = true;
    }
    if (plan.isOldSpec && plan.unicodeScript === "Devanagari") {
      for (let i = start; i + 1 < base; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra && glyphs[i + 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
        glyphs[i].features.blwf = true;
        glyphs[i + 1].features.blwf = true;
      }
    }
    let prefLen = 2;
    if (features.pref && base + prefLen < end)
      for (let i9 = base + 1; i9 + prefLen - 1 < end; i9++) {
        let g = [
          glyphs[i9].copy(),
          glyphs[i9 + 1].copy()
        ];
        if ($c6b883ac45fa55f1$var$wouldSubstitute(g, "pref")) {
          for (let j = 0; j < prefLen; j++) glyphs[i9++].features.pref = true;
          if (features.cfar) for (; i9 < end; i9++) glyphs[i9].features.cfar = true;
          break;
        }
      }
    for (let i10 = start + 1; i10 < end; i10++) if ($c6b883ac45fa55f1$var$isJoiner(glyphs[i10])) {
      let nonJoiner = glyphs[i10].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
      let j = i10;
      do {
        j--;
        if (nonJoiner) delete glyphs[j].features.half;
      } while (j > start && !$c6b883ac45fa55f1$var$isConsonant(glyphs[j]));
    }
  }
}
function $c6b883ac45fa55f1$var$finalReordering(font, glyphs, plan) {
  let indicConfig = plan.indicConfig;
  let features = font._layoutEngine.engine.GSUBProcessor.features;
  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {
    let tryPref = !!features.pref;
    let base = start;
    for (; base < end; base++) if (glyphs[base].shaperInfo.position >= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
      if (tryPref && base + 1 < end) {
        for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {
          if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
            base = i;
            while (base < end && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[base])) base++;
            glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.BASE_C;
            tryPref = false;
          }
          break;
        }
      }
      if (plan.unicodeScript === "Malayalam") for (let i = base + 1; i < end; i++) {
        while (i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i])) i++;
        if (i === end || !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[i])) break;
        i++;
        while (i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i])) i++;
        if (i < end && $c6b883ac45fa55f1$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) {
          base = i;
          glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
        }
      }
      if (start < base && glyphs[base].shaperInfo.position > $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) base--;
      break;
    }
    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ) base--;
    if (base < end) while (start < base && glyphs[base].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$ca9599b2a300afc)) base--;
    if (start + 1 < end && start < base) {
      let newPos = base === end ? base - 2 : base - 1;
      if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
        while (newPos > start && !(glyphs[newPos].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc))) newPos--;
        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
          if (newPos + 1 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos + 1])) newPos++;
        } else newPos = start;
      }
      if (start < newPos && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
        for (let i = newPos; i > start; i--) if (glyphs[i - 1].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
          let oldPos = i - 1;
          if (oldPos < base && base <= newPos) base--;
          let tmp = glyphs[oldPos];
          glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
          glyphs[newPos] = tmp;
          newPos--;
        }
      }
    }
    if (start + 1 < end && glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
      let newRephPos;
      let rephPos = indicConfig.rephPos;
      let found = false;
      if (rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post) {
        newRephPos = start + 1;
        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;
        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
          found = true;
        }
        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) {
          newRephPos = base;
          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) newRephPos++;
          found = newRephPos < end;
        }
        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub) {
          newRephPos = base;
          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD))) newRephPos++;
          found = newRephPos < end;
        }
      }
      if (!found) {
        newRephPos = start + 1;
        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;
        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
          found = true;
        }
      }
      if (!found) {
        newRephPos = end - 1;
        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) newRephPos--;
        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          for (let i = base + 1; i < newRephPos; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) newRephPos--;
        }
      }
      let reph = glyphs[start];
      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
      glyphs[newRephPos] = reph;
      if (start < base && base <= newRephPos) base--;
    }
    if (tryPref && base + 1 < end) {
      for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {
        if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {
          let newPos = base;
          if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
            while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc))) newPos--;
            if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
              let oldPos2 = i;
              for (let j = base + 1; j < oldPos2; j++) if (glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
                newPos--;
                break;
              }
            }
          }
          if (newPos > start && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos - 1])) {
            if (newPos < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos])) newPos++;
          }
          let oldPos = i;
          let tmp = glyphs[oldPos];
          glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
          glyphs[newPos] = tmp;
          if (newPos <= base && base < oldPos) base++;
        }
        break;
      }
    }
    if (glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test($747425b437e121da$export$2e2bcd8739ae039.getCategory(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;
  }
}
function $c6b883ac45fa55f1$var$nextSyllable(glyphs, start) {
  if (start >= glyphs.length) return start;
  let syllable = glyphs[start].shaperInfo.syllable;
  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) ;
  return start;
}
var $7eb6a55cb7a2526f$require$Buffer = $5OpyM$Buffer;
var { categories: $7eb6a55cb7a2526f$var$categories, decompositions: $7eb6a55cb7a2526f$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports);
var $7eb6a55cb7a2526f$var$trie = new import_unicode_trie2.default($7eb6a55cb7a2526f$require$Buffer.from("AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=", "base64"));
var $7eb6a55cb7a2526f$var$stateMachine = new import_dfa.default(/* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports));
var $7eb6a55cb7a2526f$export$2e2bcd8739ae039 = class extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "BEFORE_GPOS";
  static planFeatures(plan) {
    plan.addStage($7eb6a55cb7a2526f$var$setupSyllables);
    plan.addStage([
      "locl",
      "ccmp",
      "nukt",
      "akhn"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
    plan.addStage([
      "rphf"
    ], false);
    plan.addStage($7eb6a55cb7a2526f$var$recordRphf);
    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
    plan.addStage([
      "pref"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$recordPref);
    plan.addStage([
      "rkrf",
      "abvf",
      "blwf",
      "half",
      "pstf",
      "vatu",
      "cjct"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$reorder);
    plan.addStage([
      "abvs",
      "blws",
      "pres",
      "psts",
      "dist",
      "abvm",
      "blwm"
    ]);
  }
  static assignFeatures(plan, glyphs) {
    for (let i = glyphs.length - 1; i >= 0; i--) {
      let codepoint = glyphs[i].codePoints[0];
      if ($7eb6a55cb7a2526f$var$decompositions[codepoint]) {
        let decomposed = $7eb6a55cb7a2526f$var$decompositions[codepoint].map((c) => {
          let g = plan.font.glyphForCodePoint(c);
          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
            c
          ], glyphs[i].features);
        });
        glyphs.splice(i, 1, ...decomposed);
      }
    }
  }
};
function $7eb6a55cb7a2526f$var$useCategory(glyph) {
  return $7eb6a55cb7a2526f$var$trie.get(glyph.codePoints[0]);
}
var $7eb6a55cb7a2526f$var$USEInfo = class {
  constructor(category, syllableType, syllable) {
    this.category = category;
    this.syllableType = syllableType;
    this.syllable = syllable;
  }
};
function $7eb6a55cb7a2526f$var$setupSyllables(font, glyphs) {
  let syllable = 0;
  for (let [start, end, tags] of $7eb6a55cb7a2526f$var$stateMachine.match(glyphs.map($7eb6a55cb7a2526f$var$useCategory))) {
    ++syllable;
    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7eb6a55cb7a2526f$var$USEInfo($7eb6a55cb7a2526f$var$categories[$7eb6a55cb7a2526f$var$useCategory(glyphs[i])], tags[0], syllable);
    let limit = glyphs[start].shaperInfo.category === "R" ? 1 : Math.min(3, end - start);
    for (let i1 = start; i1 < start + limit; i1++) glyphs[i1].features.rphf = true;
  }
}
function $7eb6a55cb7a2526f$var$clearSubstitutionFlags(font, glyphs) {
  for (let glyph of glyphs) glyph.substituted = false;
}
function $7eb6a55cb7a2526f$var$recordRphf(font, glyphs) {
  for (let glyph of glyphs) if (glyph.substituted && glyph.features.rphf)
    glyph.shaperInfo.category = "R";
}
function $7eb6a55cb7a2526f$var$recordPref(font, glyphs) {
  for (let glyph of glyphs) if (glyph.substituted)
    glyph.shaperInfo.category = "VPre";
}
function $7eb6a55cb7a2526f$var$reorder(font, glyphs) {
  let dottedCircle = font.glyphForCodePoint(9676).id;
  for (let start = 0, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start)) {
    let i, j;
    let info = glyphs[start].shaperInfo;
    let type = info.syllableType;
    if (type !== "virama_terminated_cluster" && type !== "standard_cluster" && type !== "broken_cluster") continue;
    if (type === "broken_cluster" && dottedCircle) {
      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
        9676
      ]);
      g.shaperInfo = info;
      for (i = start; i < end && glyphs[i].shaperInfo.category === "R"; i++) ;
      glyphs.splice(++i, 0, g);
      end++;
    }
    if (info.category === "R" && end - start > 1)
      for (i = start + 1; i < end; i++) {
        info = glyphs[i].shaperInfo;
        if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i])) {
          if ($7eb6a55cb7a2526f$var$isHalant(glyphs[i])) i--;
          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);
          break;
        }
      }
    for (i = start, j = end; i < end; i++) {
      info = glyphs[i].shaperInfo;
      if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i]))
        j = $7eb6a55cb7a2526f$var$isHalant(glyphs[i]) ? i + 1 : i;
      else if ((info.category === "VPre" || info.category === "VMPre") && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));
    }
  }
}
function $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start) {
  if (start >= glyphs.length) return start;
  let syllable = glyphs[start].shaperInfo.syllable;
  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) ;
  return start;
}
function $7eb6a55cb7a2526f$var$isHalant(glyph) {
  return glyph.shaperInfo.category === "H" && !glyph.isLigated;
}
function $7eb6a55cb7a2526f$var$isBase(info) {
  return info.category === "B" || info.category === "GB";
}
var $a1d926e2c804f4db$var$SHAPERS = {
  arab: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mong: $5cab828b3273a17c$export$2e2bcd8739ae039,
  syrc: $5cab828b3273a17c$export$2e2bcd8739ae039,
  "nko ": $5cab828b3273a17c$export$2e2bcd8739ae039,
  phag: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mand: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mani: $5cab828b3273a17c$export$2e2bcd8739ae039,
  phlp: $5cab828b3273a17c$export$2e2bcd8739ae039,
  hang: $ce39c5154631fd0c$export$2e2bcd8739ae039,
  bng2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  beng: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  dev2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  deva: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gjr2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gujr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  guru: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gur2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  knda: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  knd2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  mlm2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  mlym: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  ory2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  orya: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  taml: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  tml2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  telu: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  tel2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  khmr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  bali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  batk: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  brah: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  bugi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  buhd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  cakm: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  cham: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  dupl: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  egyp: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  gran: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  hano: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  java: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  kthi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  kali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  khar: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  khoj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sind: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  lepc: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  limb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  mahj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  // mand: UniversalShaper, // Mandaic
  // mani: UniversalShaper, // Manichaean
  mtei: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  modi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  // mong: UniversalShaper, // Mongolian
  // 'nko ': UniversalShaper, // N’Ko
  hmng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  // phag: UniversalShaper, // Phags-pa
  // phlp: UniversalShaper, // Psalter Pahlavi
  rjng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  saur: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  shrd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sidd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sinh: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  sund: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sylo: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tglg: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tagb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tale: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  lana: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tavt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  takr: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tibt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tfng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tirh: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  latn: $5340de7a86f3ae85$export$2e2bcd8739ae039,
  DFLT: $5340de7a86f3ae85$export$2e2bcd8739ae039
  // Default
};
function $a1d926e2c804f4db$export$7877a478dd30fd3d(script) {
  if (!Array.isArray(script)) script = [
    script
  ];
  for (let s of script) {
    let shaper = $a1d926e2c804f4db$var$SHAPERS[s];
    if (shaper) return shaper;
  }
  return $5340de7a86f3ae85$export$2e2bcd8739ae039;
}
var $ec0cc8d4808a62ff$export$2e2bcd8739ae039 = class extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
  applyLookup(lookupType, table) {
    switch (lookupType) {
      case 1: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        let glyph = this.glyphIterator.cur;
        switch (table.version) {
          case 1:
            glyph.id = glyph.id + table.deltaGlyphID & 65535;
            break;
          case 2:
            glyph.id = table.substitute.get(index);
            break;
        }
        return true;
      }
      case 2: {
        let index = this.coverageIndex(table.coverage);
        if (index !== -1) {
          let sequence = table.sequences.get(index);
          if (sequence.length === 0) {
            this.glyphs.splice(this.glyphIterator.index, 1);
            return true;
          }
          this.glyphIterator.cur.id = sequence[0];
          this.glyphIterator.cur.ligatureComponent = 0;
          let features = this.glyphIterator.cur.features;
          let curGlyph = this.glyphIterator.cur;
          let replacement = sequence.slice(1).map((gid, i) => {
            let glyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, gid, void 0, features);
            glyph.shaperInfo = curGlyph.shaperInfo;
            glyph.isLigated = curGlyph.isLigated;
            glyph.ligatureComponent = i + 1;
            glyph.substituted = true;
            glyph.isMultiplied = true;
            return glyph;
          });
          this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
          return true;
        }
        return false;
      }
      case 3: {
        let index = this.coverageIndex(table.coverage);
        if (index !== -1) {
          let USER_INDEX = 0;
          this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
          return true;
        }
        return false;
      }
      case 4: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        for (let ligature of table.ligatureSets.get(index)) {
          let matched = this.sequenceMatchIndices(1, ligature.components);
          if (!matched) continue;
          let curGlyph = this.glyphIterator.cur;
          let characters2 = curGlyph.codePoints.slice();
          for (let index2 of matched) characters2.push(...this.glyphs[index2].codePoints);
          let ligatureGlyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, ligature.glyph, characters2, curGlyph.features);
          ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
          ligatureGlyph.isLigated = true;
          ligatureGlyph.substituted = true;
          let isMarkLigature = curGlyph.isMark;
          for (let i = 0; i < matched.length && isMarkLigature; i++) isMarkLigature = this.glyphs[matched[i]].isMark;
          ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
          let lastLigID = curGlyph.ligatureID;
          let lastNumComps = curGlyph.codePoints.length;
          let curComps = lastNumComps;
          let idx = this.glyphIterator.index + 1;
          for (let matchIndex of matched) {
            if (isMarkLigature) idx = matchIndex;
            else while (idx < matchIndex) {
              var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
              this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
              this.glyphs[idx].ligatureComponent = ligatureComponent;
              idx++;
            }
            lastLigID = this.glyphs[idx].ligatureID;
            lastNumComps = this.glyphs[idx].codePoints.length;
            curComps += lastNumComps;
            idx++;
          }
          if (lastLigID && !isMarkLigature) for (let i1 = idx; i1 < this.glyphs.length; i1++) {
            if (this.glyphs[i1].ligatureID === lastLigID) {
              var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);
              this.glyphs[i1].ligatureComponent = ligatureComponent;
            } else break;
          }
          for (let i2 = matched.length - 1; i2 >= 0; i2--) this.glyphs.splice(matched[i2], 1);
          this.glyphs[this.glyphIterator.index] = ligatureGlyph;
          return true;
        }
        return false;
      }
      case 5:
        return this.applyContext(table);
      case 6:
        return this.applyChainingContext(table);
      case 7:
        return this.applyLookup(table.lookupType, table.extension);
      default:
        throw new Error(`GSUB lookupType ${lookupType} is not supported`);
    }
  }
};
var $d1645ec9e32ddac0$export$2e2bcd8739ae039 = class extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
  applyPositionValue(sequenceIndex, value) {
    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
    if (value.xAdvance != null) position.xAdvance += value.xAdvance;
    if (value.yAdvance != null) position.yAdvance += value.yAdvance;
    if (value.xPlacement != null) position.xOffset += value.xPlacement;
    if (value.yPlacement != null) position.yOffset += value.yPlacement;
    let variationProcessor = this.font._variationProcessor;
    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
    if (variationProcessor && variationStore) {
      if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
      if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
      if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
      if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
    }
  }
  applyLookup(lookupType, table) {
    switch (lookupType) {
      case 1: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        switch (table.version) {
          case 1:
            this.applyPositionValue(0, table.value);
            break;
          case 2:
            this.applyPositionValue(0, table.values.get(index));
            break;
        }
        return true;
      }
      case 2: {
        let nextGlyph = this.glyphIterator.peek();
        if (!nextGlyph) return false;
        let index = this.coverageIndex(table.coverage);
        if (index === -1) return false;
        switch (table.version) {
          case 1:
            let set = table.pairSets.get(index);
            for (let pair of set) if (pair.secondGlyph === nextGlyph.id) {
              this.applyPositionValue(0, pair.value1);
              this.applyPositionValue(1, pair.value2);
              return true;
            }
            return false;
          case 2:
            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
            let class2 = this.getClassID(nextGlyph.id, table.classDef2);
            if (class1 === -1 || class2 === -1) return false;
            var pair1 = table.classRecords.get(class1).get(class2);
            this.applyPositionValue(0, pair1.value1);
            this.applyPositionValue(1, pair1.value2);
            return true;
        }
      }
      case 3: {
        let nextIndex = this.glyphIterator.peekIndex();
        let nextGlyph = this.glyphs[nextIndex];
        if (!nextGlyph) return false;
        let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
        if (!curRecord || !curRecord.exitAnchor) return false;
        let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
        if (!nextRecord || !nextRecord.entryAnchor) return false;
        let entry = this.getAnchor(nextRecord.entryAnchor);
        let exit = this.getAnchor(curRecord.exitAnchor);
        let cur = this.positions[this.glyphIterator.index];
        let next = this.positions[nextIndex];
        let d;
        switch (this.direction) {
          case "ltr":
            cur.xAdvance = exit.x + cur.xOffset;
            d = entry.x + next.xOffset;
            next.xAdvance -= d;
            next.xOffset -= d;
            break;
          case "rtl":
            d = exit.x + cur.xOffset;
            cur.xAdvance -= d;
            cur.xOffset -= d;
            next.xAdvance = entry.x + next.xOffset;
            break;
        }
        if (this.glyphIterator.flags.rightToLeft) {
          this.glyphIterator.cur.cursiveAttachment = nextIndex;
          cur.yOffset = entry.y - exit.y;
        } else {
          nextGlyph.cursiveAttachment = this.glyphIterator.index;
          cur.yOffset = exit.y - entry.y;
        }
        return true;
      }
      case 4: {
        let markIndex = this.coverageIndex(table.markCoverage);
        if (markIndex === -1) return false;
        let baseGlyphIndex = this.glyphIterator.index;
        while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) ;
        if (baseGlyphIndex < 0) return false;
        let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
        if (baseIndex === -1) return false;
        let markRecord = table.markArray[markIndex];
        let baseAnchor = table.baseArray[baseIndex][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
        return true;
      }
      case 5: {
        let markIndex = this.coverageIndex(table.markCoverage);
        if (markIndex === -1) return false;
        let baseGlyphIndex = this.glyphIterator.index;
        while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark) ;
        if (baseGlyphIndex < 0) return false;
        let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
        if (ligIndex === -1) return false;
        let ligAttach = table.ligatureArray[ligIndex];
        let markGlyph = this.glyphIterator.cur;
        let ligGlyph = this.glyphs[baseGlyphIndex];
        let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
        let markRecord = table.markArray[markIndex];
        let baseAnchor = ligAttach[compIndex][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
        return true;
      }
      case 6: {
        let mark1Index = this.coverageIndex(table.mark1Coverage);
        if (mark1Index === -1) return false;
        let prevIndex = this.glyphIterator.peekIndex(-1);
        let prev = this.glyphs[prevIndex];
        if (!prev || !prev.isMark) return false;
        let cur = this.glyphIterator.cur;
        let good = false;
        if (cur.ligatureID === prev.ligatureID) {
          if (!cur.ligatureID) good = true;
          else if (cur.ligatureComponent === prev.ligatureComponent) good = true;
        } else if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;
        if (!good) return false;
        let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
        if (mark2Index === -1) return false;
        let markRecord = table.mark1Array[mark1Index];
        let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, prevIndex);
        return true;
      }
      case 7:
        return this.applyContext(table);
      case 8:
        return this.applyChainingContext(table);
      case 9:
        return this.applyLookup(table.lookupType, table.extension);
      default:
        throw new Error(`Unsupported GPOS table: ${lookupType}`);
    }
  }
  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
    let baseCoords = this.getAnchor(baseAnchor);
    let markCoords = this.getAnchor(markRecord.markAnchor);
    let basePos = this.positions[baseGlyphIndex];
    let markPos = this.positions[this.glyphIterator.index];
    markPos.xOffset = baseCoords.x - markCoords.x;
    markPos.yOffset = baseCoords.y - markCoords.y;
    this.glyphIterator.cur.markAttachment = baseGlyphIndex;
  }
  getAnchor(anchor) {
    let x = anchor.xCoordinate;
    let y = anchor.yCoordinate;
    let variationProcessor = this.font._variationProcessor;
    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
    if (variationProcessor && variationStore) {
      if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
      if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
    }
    return {
      x,
      y
    };
  }
  applyFeatures(userFeatures, glyphs, advances) {
    super.applyFeatures(userFeatures, glyphs, advances);
    for (var i = 0; i < this.glyphs.length; i++) this.fixCursiveAttachment(i);
    this.fixMarkAttachment();
  }
  fixCursiveAttachment(i) {
    let glyph = this.glyphs[i];
    if (glyph.cursiveAttachment != null) {
      let j = glyph.cursiveAttachment;
      glyph.cursiveAttachment = null;
      this.fixCursiveAttachment(j);
      this.positions[i].yOffset += this.positions[j].yOffset;
    }
  }
  fixMarkAttachment() {
    for (let i = 0; i < this.glyphs.length; i++) {
      let glyph = this.glyphs[i];
      if (glyph.markAttachment != null) {
        let j = glyph.markAttachment;
        this.positions[i].xOffset += this.positions[j].xOffset;
        this.positions[i].yOffset += this.positions[j].yOffset;
        if (this.direction === "ltr") for (let k = j; k < i; k++) {
          this.positions[i].xOffset -= this.positions[k].xAdvance;
          this.positions[i].yOffset -= this.positions[k].yAdvance;
        }
        else for (let k1 = j + 1; k1 < i + 1; k1++) {
          this.positions[i].xOffset += this.positions[k1].xAdvance;
          this.positions[i].yOffset += this.positions[k1].yAdvance;
        }
      }
    }
  }
};
var $805414ed4cd3125e$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.font = font;
    this.glyphInfos = null;
    this.plan = null;
    this.GSUBProcessor = null;
    this.GPOSProcessor = null;
    this.fallbackPosition = true;
    if (font.GSUB) this.GSUBProcessor = new $ec0cc8d4808a62ff$export$2e2bcd8739ae039(font, font.GSUB);
    if (font.GPOS) this.GPOSProcessor = new $d1645ec9e32ddac0$export$2e2bcd8739ae039(font, font.GPOS);
  }
  setup(glyphRun) {
    this.glyphInfos = glyphRun.glyphs.map(
      (glyph) => new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, glyph.id, [
        ...glyph.codePoints
      ])
    );
    let script = null;
    if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    this.shaper = $a1d926e2c804f4db$export$7877a478dd30fd3d(script);
    this.plan = new $d208953d14e55e3c$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);
    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
    for (let key in this.plan.allFeatures) glyphRun.features[key] = true;
  }
  substitute(glyphRun) {
    if (this.GSUBProcessor) {
      this.plan.process(this.GSUBProcessor, this.glyphInfos);
      glyphRun.glyphs = this.glyphInfos.map(
        (glyphInfo) => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints)
      );
    }
  }
  position(glyphRun) {
    if (this.shaper.zeroMarkWidths === "BEFORE_GPOS") this.zeroMarkAdvances(glyphRun.positions);
    if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
    if (this.shaper.zeroMarkWidths === "AFTER_GPOS") this.zeroMarkAdvances(glyphRun.positions);
    if (glyphRun.direction === "rtl") {
      glyphRun.glyphs.reverse();
      glyphRun.positions.reverse();
    }
    return this.GPOSProcessor && this.GPOSProcessor.features;
  }
  zeroMarkAdvances(positions) {
    for (let i = 0; i < this.glyphInfos.length; i++) if (this.glyphInfos[i].isMark) {
      positions[i].xAdvance = 0;
      positions[i].yAdvance = 0;
    }
  }
  cleanup() {
    this.glyphInfos = null;
    this.plan = null;
    this.shaper = null;
  }
  getAvailableFeatures(script, language) {
    let features = [];
    if (this.GSUBProcessor) {
      this.GSUBProcessor.selectScript(script, language);
      features.push(...Object.keys(this.GSUBProcessor.features));
    }
    if (this.GPOSProcessor) {
      this.GPOSProcessor.selectScript(script, language);
      features.push(...Object.keys(this.GPOSProcessor.features));
    }
    return features;
  }
};
var $2df783177c3b5db5$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.font = font;
    this.unicodeLayoutEngine = null;
    this.kernProcessor = null;
    if (this.font.morx) this.engine = new $9273c77bc46b13e0$export$2e2bcd8739ae039(this.font);
    else if (this.font.GSUB || this.font.GPOS) this.engine = new $805414ed4cd3125e$export$2e2bcd8739ae039(this.font);
  }
  layout(string, features, script, language, direction) {
    if (typeof features === "string") {
      direction = language;
      language = script;
      script = features;
      features = [];
    }
    if (typeof string === "string") {
      if (script == null) script = $a5878e4f4663c9e2$export$e5cb25e204fb8450(string);
      var glyphs = this.font.glyphsForString(string);
    } else {
      if (script == null) {
        let codePoints = [];
        for (let glyph of string) codePoints.push(...glyph.codePoints);
        script = $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints);
      }
      var glyphs = string;
    }
    let glyphRun = new $5a6ae00fa7e614b0$export$2e2bcd8739ae039(glyphs, features, script, language, direction);
    if (glyphs.length === 0) {
      glyphRun.positions = [];
      return glyphRun;
    }
    if (this.engine && this.engine.setup) this.engine.setup(glyphRun);
    this.substitute(glyphRun);
    this.position(glyphRun);
    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
    if (this.engine && this.engine.cleanup) this.engine.cleanup();
    return glyphRun;
  }
  substitute(glyphRun) {
    if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);
  }
  position(glyphRun) {
    glyphRun.positions = glyphRun.glyphs.map(
      (glyph) => new $4bff5f854806c785$export$2e2bcd8739ae039(glyph.advanceWidth)
    );
    let positioned = null;
    if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);
    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
      if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new $e4967fef9afc586a$export$2e2bcd8739ae039(this.font);
      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
    }
    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
      if (!this.kernProcessor) this.kernProcessor = new $8526e21034212dc1$export$2e2bcd8739ae039(this.font);
      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
      glyphRun.features.kern = true;
    }
  }
  hideDefaultIgnorables(glyphs, positions) {
    let space = this.font.glyphForCodePoint(32);
    for (let i = 0; i < glyphs.length; i++) if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
      glyphs[i] = space;
      positions[i].xAdvance = 0;
      positions[i].yAdvance = 0;
    }
  }
  isDefaultIgnorable(ch) {
    let plane = ch >> 16;
    if (plane === 0)
      switch (ch >> 8) {
        case 0:
          return ch === 173;
        case 3:
          return ch === 847;
        case 6:
          return ch === 1564;
        case 23:
          return 6068 <= ch && ch <= 6069;
        case 24:
          return 6155 <= ch && ch <= 6158;
        case 32:
          return 8203 <= ch && ch <= 8207 || 8234 <= ch && ch <= 8238 || 8288 <= ch && ch <= 8303;
        case 254:
          return 65024 <= ch && ch <= 65039 || ch === 65279;
        case 255:
          return 65520 <= ch && ch <= 65528;
        default:
          return false;
      }
    else
      switch (plane) {
        case 1:
          return 113824 <= ch && ch <= 113827 || 119155 <= ch && ch <= 119162;
        case 14:
          return 917504 <= ch && ch <= 921599;
        default:
          return false;
      }
  }
  getAvailableFeatures(script, language) {
    let features = [];
    if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));
    if (this.font.kern && features.indexOf("kern") === -1) features.push("kern");
    return features;
  }
  stringsForGlyph(gid) {
    let result = /* @__PURE__ */ new Set();
    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
    for (let codePoint of codePoints) result.add(String.fromCodePoint(codePoint));
    if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid)) result.add(string);
    return Array.from(result);
  }
};
var $af5e1fcddefe17a2$var$SVG_COMMANDS = {
  moveTo: "M",
  lineTo: "L",
  quadraticCurveTo: "Q",
  bezierCurveTo: "C",
  closePath: "Z"
};
var $af5e1fcddefe17a2$export$2e2bcd8739ae039 = class _$af5e1fcddefe17a2$export$2e2bcd8739ae039 {
  constructor() {
    this.commands = [];
    this._bbox = null;
    this._cbox = null;
  }
  /**
  * Compiles the path to a JavaScript function that can be applied with
  * a graphics context in order to render the path.
  * @return {string}
  */
  toFunction() {
    return (ctx) => {
      this.commands.forEach((c) => {
        return ctx[c.command].apply(ctx, c.args);
      });
    };
  }
  /**
  * Converts the path to an SVG path data string
  * @return {string}
  */
  toSVG() {
    let cmds = this.commands.map((c) => {
      let args = c.args.map(
        (arg) => Math.round(arg * 100) / 100
      );
      return `${$af5e1fcddefe17a2$var$SVG_COMMANDS[c.command]}${args.join(" ")}`;
    });
    return cmds.join("");
  }
  /**
  * Gets the "control box" of a path.
  * This is like the bounding box, but it includes all points including
  * control points of bezier segments and is much faster to compute than
  * the real bounding box.
  * @type {BBox}
  */
  get cbox() {
    if (!this._cbox) {
      let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();
      for (let command1 of this.commands) for (let i = 0; i < command1.args.length; i += 2) cbox.addPoint(command1.args[i], command1.args[i + 1]);
      this._cbox = Object.freeze(cbox);
    }
    return this._cbox;
  }
  /**
  * Gets the exact bounding box of the path by evaluating curve segments.
  * Slower to compute than the control box, but more accurate.
  * @type {BBox}
  */
  get bbox() {
    if (this._bbox) return this._bbox;
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();
    let cx2 = 0, cy2 = 0;
    let f = (t) => Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
    for (let c of this.commands) switch (c.command) {
      case "moveTo":
      case "lineTo":
        let [x, y] = c.args;
        bbox.addPoint(x, y);
        cx2 = x;
        cy2 = y;
        break;
      case "quadraticCurveTo":
      case "bezierCurveTo":
        if (c.command === "quadraticCurveTo") {
          var [qp1x, qp1y, p3x, p3y] = c.args;
          var cp1x = cx2 + 2 / 3 * (qp1x - cx2);
          var cp1y = cy2 + 2 / 3 * (qp1y - cy2);
          var cp2x = p3x + 2 / 3 * (qp1x - p3x);
          var cp2y = p3y + 2 / 3 * (qp1y - p3y);
        } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;
        bbox.addPoint(p3x, p3y);
        var p0 = [
          cx2,
          cy2
        ];
        var p1 = [
          cp1x,
          cp1y
        ];
        var p2 = [
          cp2x,
          cp2y
        ];
        var p3 = [
          p3x,
          p3y
        ];
        for (var i = 0; i <= 1; i++) {
          let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
          let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
          c = 3 * p1[i] - 3 * p0[i];
          if (a === 0) {
            if (b === 0) continue;
            let t = -c / b;
            if (0 < t && t < 1) {
              if (i === 0) bbox.addPoint(f(t), bbox.maxY);
              else if (i === 1) bbox.addPoint(bbox.maxX, f(t));
            }
            continue;
          }
          let b2ac = Math.pow(b, 2) - 4 * c * a;
          if (b2ac < 0) continue;
          let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
          if (0 < t1 && t1 < 1) {
            if (i === 0) bbox.addPoint(f(t1), bbox.maxY);
            else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));
          }
          let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
          if (0 < t2 && t2 < 1) {
            if (i === 0) bbox.addPoint(f(t2), bbox.maxY);
            else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));
          }
        }
        cx2 = p3x;
        cy2 = p3y;
        break;
    }
    return this._bbox = Object.freeze(bbox);
  }
  /**
  * Applies a mapping function to each point in the path.
  * @param {function} fn
  * @return {Path}
  */
  mapPoints(fn) {
    let path3 = new _$af5e1fcddefe17a2$export$2e2bcd8739ae039();
    for (let c of this.commands) {
      let args = [];
      for (let i = 0; i < c.args.length; i += 2) {
        let [x, y] = fn(c.args[i], c.args[i + 1]);
        args.push(x, y);
      }
      path3[c.command](...args);
    }
    return path3;
  }
  /**
  * Transforms the path by the given matrix.
  */
  transform(m0, m1, m2, m3, m4, m5) {
    return this.mapPoints((x, y) => {
      const tx = m0 * x + m2 * y + m4;
      const ty = m1 * x + m3 * y + m5;
      return [
        tx,
        ty
      ];
    });
  }
  /**
  * Translates the path by the given offset.
  */
  translate(x, y) {
    return this.transform(1, 0, 0, 1, x, y);
  }
  /**
  * Rotates the path by the given angle (in radians).
  */
  rotate(angle) {
    let cos = Math.cos(angle);
    let sin = Math.sin(angle);
    return this.transform(cos, sin, -sin, cos, 0, 0);
  }
  /**
  * Scales the path.
  */
  scale(scaleX, scaleY = scaleX) {
    return this.transform(scaleX, 0, 0, scaleY, 0, 0);
  }
};
for (let command of [
  "moveTo",
  "lineTo",
  "quadraticCurveTo",
  "bezierCurveTo",
  "closePath"
]) $af5e1fcddefe17a2$export$2e2bcd8739ae039.prototype[command] = function(...args) {
  this._bbox = this._cbox = null;
  this.commands.push({
    command,
    args
  });
  return this;
};
var $c55d37cb83b3ceea$export$2e2bcd8739ae039 = [
  ".notdef",
  ".null",
  "nonmarkingreturn",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quotesingle",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "grave",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "Adieresis",
  "Aring",
  "Ccedilla",
  "Eacute",
  "Ntilde",
  "Odieresis",
  "Udieresis",
  "aacute",
  "agrave",
  "acircumflex",
  "adieresis",
  "atilde",
  "aring",
  "ccedilla",
  "eacute",
  "egrave",
  "ecircumflex",
  "edieresis",
  "iacute",
  "igrave",
  "icircumflex",
  "idieresis",
  "ntilde",
  "oacute",
  "ograve",
  "ocircumflex",
  "odieresis",
  "otilde",
  "uacute",
  "ugrave",
  "ucircumflex",
  "udieresis",
  "dagger",
  "degree",
  "cent",
  "sterling",
  "section",
  "bullet",
  "paragraph",
  "germandbls",
  "registered",
  "copyright",
  "trademark",
  "acute",
  "dieresis",
  "notequal",
  "AE",
  "Oslash",
  "infinity",
  "plusminus",
  "lessequal",
  "greaterequal",
  "yen",
  "mu",
  "partialdiff",
  "summation",
  "product",
  "pi",
  "integral",
  "ordfeminine",
  "ordmasculine",
  "Omega",
  "ae",
  "oslash",
  "questiondown",
  "exclamdown",
  "logicalnot",
  "radical",
  "florin",
  "approxequal",
  "Delta",
  "guillemotleft",
  "guillemotright",
  "ellipsis",
  "nonbreakingspace",
  "Agrave",
  "Atilde",
  "Otilde",
  "OE",
  "oe",
  "endash",
  "emdash",
  "quotedblleft",
  "quotedblright",
  "quoteleft",
  "quoteright",
  "divide",
  "lozenge",
  "ydieresis",
  "Ydieresis",
  "fraction",
  "currency",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "daggerdbl",
  "periodcentered",
  "quotesinglbase",
  "quotedblbase",
  "perthousand",
  "Acircumflex",
  "Ecircumflex",
  "Aacute",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Oacute",
  "Ocircumflex",
  "apple",
  "Ograve",
  "Uacute",
  "Ucircumflex",
  "Ugrave",
  "dotlessi",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "Lslash",
  "lslash",
  "Scaron",
  "scaron",
  "Zcaron",
  "zcaron",
  "brokenbar",
  "Eth",
  "eth",
  "Yacute",
  "yacute",
  "Thorn",
  "thorn",
  "minus",
  "multiply",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "onehalf",
  "onequarter",
  "threequarters",
  "franc",
  "Gbreve",
  "gbreve",
  "Idotaccent",
  "Scedilla",
  "scedilla",
  "Cacute",
  "cacute",
  "Ccaron",
  "ccaron",
  "dcroat"
];
var _class;
var $e1a34a692932ba79$export$2e2bcd8739ae039 = (_class = class $e1a34a692932ba79$export$2e2bcd8739ae0392 {
  constructor(id, codePoints, font) {
    this.id = id;
    this.codePoints = codePoints;
    this._font = font;
    this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
    this.isLigature = this.codePoints.length > 1;
  }
  _getPath() {
    return new $af5e1fcddefe17a2$export$2e2bcd8739ae039();
  }
  _getCBox() {
    return this.path.cbox;
  }
  _getBBox() {
    return this.path.bbox;
  }
  _getTableMetrics(table) {
    if (this.id < table.metrics.length) return table.metrics.get(this.id);
    let metric = table.metrics.get(table.metrics.length - 1);
    let res = {
      advance: metric ? metric.advance : 0,
      bearing: table.bearings.get(this.id - table.metrics.length) || 0
    };
    return res;
  }
  _getMetrics(cbox) {
    if (this._metrics) return this._metrics;
    let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);
    if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);
    else {
      let os2;
      if (typeof cbox === "undefined" || cbox === null) ({ cbox } = this);
      if ((os2 = this._font["OS/2"]) && os2.version > 0) {
        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
        var topBearing = os2.typoAscender - cbox.maxY;
      } else {
        let { hhea } = this._font;
        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
        var topBearing = hhea.ascent - cbox.maxY;
      }
    }
    if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
    return this._metrics = {
      advanceWidth,
      advanceHeight,
      leftBearing,
      topBearing
    };
  }
  /**
  * The glyph’s control box.
  * This is often the same as the bounding box, but is faster to compute.
  * Because of the way bezier curves are defined, some of the control points
  * can be outside of the bounding box. Where `bbox` takes this into account,
  * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
  * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
  * for a more detailed description.
  *
  * @type {BBox}
  */
  get cbox() {
    return this._getCBox();
  }
  /**
  * The glyph’s bounding box, i.e. the rectangle that encloses the
  * glyph outline as tightly as possible.
  * @type {BBox}
  */
  get bbox() {
    return this._getBBox();
  }
  /**
  * A vector Path object representing the glyph outline.
  * @type {Path}
  */
  get path() {
    return this._getPath();
  }
  /**
  * Returns a path scaled to the given font size.
  * @param {number} size
  * @return {Path}
  */
  getScaledPath(size) {
    let scale = 1 / this._font.unitsPerEm * size;
    return this.path.scale(scale);
  }
  /**
  * The glyph's advance width.
  * @type {number}
  */
  get advanceWidth() {
    return this._getMetrics().advanceWidth;
  }
  /**
  * The glyph's advance height.
  * @type {number}
  */
  get advanceHeight() {
    return this._getMetrics().advanceHeight;
  }
  get ligatureCaretPositions() {
  }
  _getName() {
    let { post } = this._font;
    if (!post) return null;
    switch (post.version) {
      case 1:
        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id];
      case 2:
        let id = post.glyphNameIndex[this.id];
        if (id < $c55d37cb83b3ceea$export$2e2bcd8739ae039.length) return $c55d37cb83b3ceea$export$2e2bcd8739ae039[id];
        return post.names[id - $c55d37cb83b3ceea$export$2e2bcd8739ae039.length];
      case 2.5:
        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];
      case 4:
        return String.fromCharCode(post.map[this.id]);
    }
  }
  /**
  * The glyph's name
  * @type {string}
  */
  get name() {
    return this._getName();
  }
  /**
  * Renders the glyph to the given graphics context, at the specified font size.
  * @param {CanvasRenderingContext2d} ctx
  * @param {number} size
  */
  render(ctx, size) {
    ctx.save();
    let scale = 1 / this._font.head.unitsPerEm * size;
    ctx.scale(scale, scale);
    let fn = this.path.toFunction();
    fn(ctx);
    ctx.fill();
    ctx.restore();
  }
}, _applyDecoratedDescriptor(_class.prototype, "cbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "cbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "bbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "path", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "path"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceWidth", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceWidth"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceHeight", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceHeight"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "name", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "name"), _class.prototype), _class);
var $e20fdd09923e4c19$var$GlyfHeader = new import_restructure.default.Struct({
  numberOfContours: import_restructure.default.int16,
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16
});
var $e20fdd09923e4c19$var$ON_CURVE = 1;
var $e20fdd09923e4c19$var$X_SHORT_VECTOR = 2;
var $e20fdd09923e4c19$var$Y_SHORT_VECTOR = 4;
var $e20fdd09923e4c19$var$REPEAT = 8;
var $e20fdd09923e4c19$var$SAME_X = 16;
var $e20fdd09923e4c19$var$SAME_Y = 32;
var $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS = 1;
var $e20fdd09923e4c19$var$WE_HAVE_A_SCALE = 8;
var $e20fdd09923e4c19$var$MORE_COMPONENTS = 32;
var $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
var $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO = 128;
var $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS = 256;
var $e20fdd09923e4c19$export$baf26146a414f24a = class _$e20fdd09923e4c19$export$baf26146a414f24a {
  constructor(onCurve, endContour, x = 0, y = 0) {
    this.onCurve = onCurve;
    this.endContour = endContour;
    this.x = x;
    this.y = y;
  }
  copy() {
    return new _$e20fdd09923e4c19$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
  }
};
var $e20fdd09923e4c19$var$Component = class {
  constructor(glyphID, dx, dy) {
    this.glyphID = glyphID;
    this.dx = dx;
    this.dy = dy;
    this.pos = 0;
    this.scaleX = this.scaleY = 1;
    this.scale01 = this.scale10 = 0;
  }
};
var $e20fdd09923e4c19$export$2e2bcd8739ae039 = class extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "TTF";
  // Parses just the glyph header and returns the bounding box
  _getCBox(internal) {
    if (this._font._variationProcessor && !internal) return this.path.cbox;
    let stream2 = this._font._getTableStream("glyf");
    stream2.pos += this._font.loca.offsets[this.id];
    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream2);
    let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
    return Object.freeze(cbox);
  }
  // Parses a single glyph coordinate
  _parseGlyphCoord(stream2, prev, short, same) {
    if (short) {
      var val = stream2.readUInt8();
      if (!same) val = -val;
      val += prev;
    } else if (same) var val = prev;
    else var val = prev + stream2.readInt16BE();
    return val;
  }
  // Decodes the glyph data into points for simple glyphs,
  // or components for composite glyphs
  _decode() {
    let glyfPos = this._font.loca.offsets[this.id];
    let nextPos = this._font.loca.offsets[this.id + 1];
    if (glyfPos === nextPos) return null;
    let stream2 = this._font._getTableStream("glyf");
    stream2.pos += glyfPos;
    let startPos = stream2.pos;
    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream2);
    if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream2);
    else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream2, startPos);
    return glyph;
  }
  _decodeSimple(glyph, stream2) {
    glyph.points = [];
    let endPtsOfContours = new import_restructure.default.Array(import_restructure.default.uint16, glyph.numberOfContours).decode(stream2);
    glyph.instructions = new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16).decode(stream2);
    let flags = [];
    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
    while (flags.length < numCoords) {
      var flag = stream2.readUInt8();
      flags.push(flag);
      if (flag & $e20fdd09923e4c19$var$REPEAT) {
        let count = stream2.readUInt8();
        for (let j = 0; j < count; j++) flags.push(flag);
      }
    }
    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      let point = new $e20fdd09923e4c19$export$baf26146a414f24a(!!(flag & $e20fdd09923e4c19$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
      glyph.points.push(point);
    }
    let px2 = 0;
    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      glyph.points[i].x = px2 = this._parseGlyphCoord(stream2, px2, flag & $e20fdd09923e4c19$var$X_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_X);
    }
    let py2 = 0;
    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      glyph.points[i].y = py2 = this._parseGlyphCoord(stream2, py2, flag & $e20fdd09923e4c19$var$Y_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_Y);
    }
    if (this._font._variationProcessor) {
      let points = glyph.points.slice();
      points.push(...this._getPhantomPoints(glyph));
      this._font._variationProcessor.transformPoints(this.id, points);
      glyph.phantomPoints = points.slice(-4);
    }
    return;
  }
  _decodeComposite(glyph, stream2, offset = 0) {
    glyph.components = [];
    let haveInstructions = false;
    let flags = $e20fdd09923e4c19$var$MORE_COMPONENTS;
    while (flags & $e20fdd09923e4c19$var$MORE_COMPONENTS) {
      flags = stream2.readUInt16BE();
      let gPos = stream2.pos - offset;
      let glyphID = stream2.readUInt16BE();
      if (!haveInstructions) haveInstructions = (flags & $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS) !== 0;
      if (flags & $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS) {
        var dx = stream2.readInt16BE();
        var dy = stream2.readInt16BE();
      } else {
        var dx = stream2.readInt8();
        var dy = stream2.readInt8();
      }
      var component = new $e20fdd09923e4c19$var$Component(glyphID, dx, dy);
      component.pos = gPos;
      if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_SCALE)
        component.scaleX = component.scaleY = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
      else if (flags & $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE) {
        component.scaleX = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
      } else if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO) {
        component.scaleX = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
        component.scale01 = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
        component.scale10 = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream2.readUInt8() << 24 | stream2.readUInt8() << 16) / 1073741824;
      }
      glyph.components.push(component);
    }
    if (this._font._variationProcessor) {
      let points = [];
      for (let j = 0; j < glyph.components.length; j++) {
        var component = glyph.components[j];
        points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(true, true, component.dx, component.dy));
      }
      points.push(...this._getPhantomPoints(glyph));
      this._font._variationProcessor.transformPoints(this.id, points);
      glyph.phantomPoints = points.splice(-4, 4);
      for (let i = 0; i < points.length; i++) {
        let point = points[i];
        glyph.components[i].dx = point.x;
        glyph.components[i].dy = point.y;
      }
    }
    return haveInstructions;
  }
  _getPhantomPoints(glyph) {
    let cbox = this._getCBox(true);
    if (this._metrics == null) this._metrics = $e1a34a692932ba79$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);
    let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;
    return [
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
    ];
  }
  // Decodes font data, resolves composite glyphs, and returns an array of contours
  _getContours() {
    let glyph = this._decode();
    if (!glyph) return [];
    let points = [];
    if (glyph.numberOfContours < 0)
      for (let component of glyph.components) {
        let contours2 = this._font.getGlyph(component.glyphID)._getContours();
        for (let i = 0; i < contours2.length; i++) {
          let contour = contours2[i];
          for (let j = 0; j < contour.length; j++) {
            let point2 = contour[j];
            let x = point2.x * component.scaleX + point2.y * component.scale01 + component.dx;
            let y = point2.y * component.scaleY + point2.x * component.scale10 + component.dy;
            points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(point2.onCurve, point2.endContour, x, y));
          }
        }
      }
    else points = glyph.points || [];
    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
    }
    let contours = [];
    let cur = [];
    for (let k = 0; k < points.length; k++) {
      var point = points[k];
      cur.push(point);
      if (point.endContour) {
        contours.push(cur);
        cur = [];
      }
    }
    return contours;
  }
  _getMetrics() {
    if (this._metrics) return this._metrics;
    let cbox = this._getCBox(true);
    super._getMetrics(cbox);
    if (this._font._variationProcessor && !this._font.HVAR)
      this.path;
    return this._metrics;
  }
  // Converts contours to a Path object that can be rendered
  _getPath() {
    let contours = this._getContours();
    let path3 = new $af5e1fcddefe17a2$export$2e2bcd8739ae039();
    for (let i = 0; i < contours.length; i++) {
      let contour = contours[i];
      let firstPt = contour[0];
      let lastPt = contour[contour.length - 1];
      let start = 0;
      if (firstPt.onCurve) {
        var curvePt = null;
        start = 1;
      } else {
        if (lastPt.onCurve)
          firstPt = lastPt;
        else
          firstPt = new $e20fdd09923e4c19$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
        var curvePt = firstPt;
      }
      path3.moveTo(firstPt.x, firstPt.y);
      for (let j = start; j < contour.length; j++) {
        let pt = contour[j];
        let prevPt = j === 0 ? firstPt : contour[j - 1];
        if (prevPt.onCurve && pt.onCurve) path3.lineTo(pt.x, pt.y);
        else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;
        else if (!prevPt.onCurve && !pt.onCurve) {
          let midX = (prevPt.x + pt.x) / 2;
          let midY = (prevPt.y + pt.y) / 2;
          path3.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
          var curvePt = pt;
        } else if (!prevPt.onCurve && pt.onCurve) {
          path3.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
          var curvePt = null;
        } else throw new Error("Unknown TTF path state");
      }
      if (curvePt) path3.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
      path3.closePath();
    }
    return path3;
  }
};
var $efcf21464e1e0f88$export$2e2bcd8739ae039 = class extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "CFF";
  _getName() {
    if (this._font.CFF2) return super._getName();
    return this._font["CFF "].getGlyphName(this.id);
  }
  bias(s) {
    if (s.length < 1240) return 107;
    else if (s.length < 33900) return 1131;
    else return 32768;
  }
  _getPath() {
    let cff = this._font.CFF2 || this._font["CFF "];
    let { stream: stream2 } = cff;
    let str = cff.topDict.CharStrings[this.id];
    let end = str.offset + str.length;
    stream2.pos = str.offset;
    let path3 = new $af5e1fcddefe17a2$export$2e2bcd8739ae039();
    let stack = [];
    let trans = [];
    let width = null;
    let nStems = 0;
    let x1 = 0, y1 = 0;
    let usedGsubrs;
    let usedSubrs;
    let open = false;
    this._usedGsubrs = usedGsubrs = {};
    this._usedSubrs = usedSubrs = {};
    let gsubrs = cff.globalSubrIndex || [];
    let gsubrsBias = this.bias(gsubrs);
    let privateDict = cff.privateDictForGlyph(this.id) || {};
    let subrs = privateDict.Subrs || [];
    let subrsBias = this.bias(subrs);
    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
    let vsindex = privateDict.vsindex;
    let variationProcessor = this._font._variationProcessor;
    function checkWidth() {
      if (width == null) width = stack.shift() + privateDict.nominalWidthX;
    }
    function parseStems() {
      if (stack.length % 2 !== 0) checkWidth();
      nStems += stack.length >> 1;
      return stack.length = 0;
    }
    function moveTo(x, y) {
      if (open) path3.closePath();
      path3.moveTo(x, y);
      open = true;
    }
    let parse2 = function() {
      while (stream2.pos < end) {
        let op = stream2.readUInt8();
        if (op < 32) {
          let index, subr, phase;
          switch (op) {
            case 1:
            case 3:
            case 18:
            case 23:
              parseStems();
              break;
            case 4:
              if (stack.length > 1) checkWidth();
              y1 += stack.shift();
              moveTo(x1, y1);
              break;
            case 5:
              while (stack.length >= 2) {
                x1 += stack.shift();
                y1 += stack.shift();
                path3.lineTo(x1, y1);
              }
              break;
            case 6:
            case 7:
              phase = op === 6;
              while (stack.length >= 1) {
                if (phase) x1 += stack.shift();
                else y1 += stack.shift();
                path3.lineTo(x1, y1);
                phase = !phase;
              }
              break;
            case 8:
              while (stack.length > 0) {
                var c1x = x1 + stack.shift();
                var c1y = y1 + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x1 = c2x + stack.shift();
                y1 = c2y + stack.shift();
                path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
              }
              break;
            case 10:
              index = stack.pop() + subrsBias;
              subr = subrs[index];
              if (subr) {
                usedSubrs[index] = true;
                var p = stream2.pos;
                var e = end;
                stream2.pos = subr.offset;
                end = subr.offset + subr.length;
                parse2();
                stream2.pos = p;
                end = e;
              }
              break;
            case 11:
              if (cff.version >= 2) break;
              return;
            case 14:
              if (cff.version >= 2) break;
              if (stack.length > 0) checkWidth();
              if (open) {
                path3.closePath();
                open = false;
              }
              break;
            case 15:
              if (cff.version < 2) throw new Error("vsindex operator not supported in CFF v1");
              vsindex = stack.pop();
              break;
            case 16: {
              if (cff.version < 2) throw new Error("blend operator not supported in CFF v1");
              if (!variationProcessor) throw new Error("blend operator in non-variation font");
              let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
              let numBlends = stack.pop();
              let numOperands = numBlends * blendVector.length;
              let delta = stack.length - numOperands;
              let base = delta - numBlends;
              for (let i = 0; i < numBlends; i++) {
                let sum = stack[base + i];
                for (let j = 0; j < blendVector.length; j++) sum += blendVector[j] * stack[delta++];
                stack[base + i] = sum;
              }
              while (numOperands--) stack.pop();
              break;
            }
            case 19:
            case 20:
              parseStems();
              stream2.pos += nStems + 7 >> 3;
              break;
            case 21:
              if (stack.length > 2) checkWidth();
              x1 += stack.shift();
              y1 += stack.shift();
              moveTo(x1, y1);
              break;
            case 22:
              if (stack.length > 1) checkWidth();
              x1 += stack.shift();
              moveTo(x1, y1);
              break;
            case 24:
              while (stack.length >= 8) {
                var c1x = x1 + stack.shift();
                var c1y = y1 + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x1 = c2x + stack.shift();
                y1 = c2y + stack.shift();
                path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
              }
              x1 += stack.shift();
              y1 += stack.shift();
              path3.lineTo(x1, y1);
              break;
            case 25:
              while (stack.length >= 8) {
                x1 += stack.shift();
                y1 += stack.shift();
                path3.lineTo(x1, y1);
              }
              var c1x = x1 + stack.shift();
              var c1y = y1 + stack.shift();
              var c2x = c1x + stack.shift();
              var c2y = c1y + stack.shift();
              x1 = c2x + stack.shift();
              y1 = c2y + stack.shift();
              path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
              break;
            case 26:
              if (stack.length % 2) x1 += stack.shift();
              while (stack.length >= 4) {
                c1x = x1;
                c1y = y1 + stack.shift();
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x1 = c2x;
                y1 = c2y + stack.shift();
                path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
              }
              break;
            case 27:
              if (stack.length % 2) y1 += stack.shift();
              while (stack.length >= 4) {
                c1x = x1 + stack.shift();
                c1y = y1;
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x1 = c2x + stack.shift();
                y1 = c2y;
                path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
              }
              break;
            case 28:
              stack.push(stream2.readInt16BE());
              break;
            case 29:
              index = stack.pop() + gsubrsBias;
              subr = gsubrs[index];
              if (subr) {
                usedGsubrs[index] = true;
                var p = stream2.pos;
                var e = end;
                stream2.pos = subr.offset;
                end = subr.offset + subr.length;
                parse2();
                stream2.pos = p;
                end = e;
              }
              break;
            case 30:
            case 31:
              phase = op === 31;
              while (stack.length >= 4) {
                if (phase) {
                  c1x = x1 + stack.shift();
                  c1y = y1;
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  y1 = c2y + stack.shift();
                  x1 = c2x + (stack.length === 1 ? stack.shift() : 0);
                } else {
                  c1x = x1;
                  c1y = y1 + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  x1 = c2x + stack.shift();
                  y1 = c2y + (stack.length === 1 ? stack.shift() : 0);
                }
                path3.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                phase = !phase;
              }
              break;
            case 12:
              op = stream2.readUInt8();
              switch (op) {
                case 3:
                  let a = stack.pop();
                  let b = stack.pop();
                  stack.push(a && b ? 1 : 0);
                  break;
                case 4:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a || b ? 1 : 0);
                  break;
                case 5:
                  a = stack.pop();
                  stack.push(a ? 0 : 1);
                  break;
                case 9:
                  a = stack.pop();
                  stack.push(Math.abs(a));
                  break;
                case 10:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a + b);
                  break;
                case 11:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a - b);
                  break;
                case 12:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a / b);
                  break;
                case 14:
                  a = stack.pop();
                  stack.push(-a);
                  break;
                case 15:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a === b ? 1 : 0);
                  break;
                case 18:
                  stack.pop();
                  break;
                case 20:
                  let val = stack.pop();
                  let idx = stack.pop();
                  trans[idx] = val;
                  break;
                case 21:
                  idx = stack.pop();
                  stack.push(trans[idx] || 0);
                  break;
                case 22:
                  let s1 = stack.pop();
                  let s2 = stack.pop();
                  let v1 = stack.pop();
                  let v2 = stack.pop();
                  stack.push(v1 <= v2 ? s1 : s2);
                  break;
                case 23:
                  stack.push(Math.random());
                  break;
                case 24:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a * b);
                  break;
                case 26:
                  a = stack.pop();
                  stack.push(Math.sqrt(a));
                  break;
                case 27:
                  a = stack.pop();
                  stack.push(a, a);
                  break;
                case 28:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(b, a);
                  break;
                case 29:
                  idx = stack.pop();
                  if (idx < 0) idx = 0;
                  else if (idx > stack.length - 1) idx = stack.length - 1;
                  stack.push(stack[idx]);
                  break;
                case 30:
                  let n = stack.pop();
                  let j = stack.pop();
                  if (j >= 0) while (j > 0) {
                    var t = stack[n - 1];
                    for (let i = n - 2; i >= 0; i--) stack[i + 1] = stack[i];
                    stack[0] = t;
                    j--;
                  }
                  else while (j < 0) {
                    var t = stack[0];
                    for (let i = 0; i <= n; i++) stack[i] = stack[i + 1];
                    stack[n - 1] = t;
                    j++;
                  }
                  break;
                case 34:
                  c1x = x1 + stack.shift();
                  c1y = y1;
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  let c3x = c2x + stack.shift();
                  let c3y = c2y;
                  let c4x = c3x + stack.shift();
                  let c4y = c3y;
                  let c5x = c4x + stack.shift();
                  let c5y = c4y;
                  let c6x = c5x + stack.shift();
                  let c6y = c5y;
                  x1 = c6x;
                  y1 = c6y;
                  path3.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path3.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;
                case 35:
                  let pts = [];
                  for (let i = 0; i <= 5; i++) {
                    x1 += stack.shift();
                    y1 += stack.shift();
                    pts.push(x1, y1);
                  }
                  path3.bezierCurveTo(...pts.slice(0, 6));
                  path3.bezierCurveTo(...pts.slice(6));
                  stack.shift();
                  break;
                case 36:
                  c1x = x1 + stack.shift();
                  c1y = y1 + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  c3x = c2x + stack.shift();
                  c3y = c2y;
                  c4x = c3x + stack.shift();
                  c4y = c3y;
                  c5x = c4x + stack.shift();
                  c5y = c4y + stack.shift();
                  c6x = c5x + stack.shift();
                  c6y = c5y;
                  x1 = c6x;
                  y1 = c6y;
                  path3.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path3.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;
                case 37:
                  let startx = x1;
                  let starty = y1;
                  pts = [];
                  for (let i1 = 0; i1 <= 4; i1++) {
                    x1 += stack.shift();
                    y1 += stack.shift();
                    pts.push(x1, y1);
                  }
                  if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {
                    x1 += stack.shift();
                    y1 = starty;
                  } else {
                    x1 = startx;
                    y1 += stack.shift();
                  }
                  pts.push(x1, y1);
                  path3.bezierCurveTo(...pts.slice(0, 6));
                  path3.bezierCurveTo(...pts.slice(6));
                  break;
                default:
                  throw new Error(`Unknown op: 12 ${op}`);
              }
              break;
            default:
              throw new Error(`Unknown op: ${op}`);
          }
        } else if (op < 247) stack.push(op - 139);
        else if (op < 251) {
          var b1 = stream2.readUInt8();
          stack.push((op - 247) * 256 + b1 + 108);
        } else if (op < 255) {
          var b1 = stream2.readUInt8();
          stack.push(-(op - 251) * 256 - b1 - 108);
        } else stack.push(stream2.readInt32BE() / 65536);
      }
    };
    parse2();
    if (open) path3.closePath();
    return path3;
  }
};
var $df50792647a3d5cf$var$SBIXImage = new import_restructure.default.Struct({
  originX: import_restructure.default.uint16,
  originY: import_restructure.default.uint16,
  type: new import_restructure.default.String(4),
  data: new import_restructure.default.Buffer(
    (t) => t.parent.buflen - t._currentOffset
  )
});
var $df50792647a3d5cf$export$2e2bcd8739ae039 = class extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
  type = "SBIX";
  /**
  * Returns an object representing a glyph image at the given point size.
  * The object has a data property with a Buffer containing the actual image data,
  * along with the image type, and origin.
  *
  * @param {number} size
  * @return {object}
  */
  getImageForSize(size) {
    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {
      var table = this._font.sbix.imageTables[i];
      if (table.ppem >= size) break;
    }
    let offsets = table.imageOffsets;
    let start = offsets[this.id];
    let end = offsets[this.id + 1];
    if (start === end) return null;
    this._font.stream.pos = start;
    return $df50792647a3d5cf$var$SBIXImage.decode(this._font.stream, {
      buflen: end - start
    });
  }
  render(ctx, size) {
    let img = this.getImageForSize(size);
    if (img != null) {
      let scale = size / this._font.unitsPerEm;
      ctx.image(img.data, {
        height: size,
        x: img.originX,
        y: (this.bbox.minY - img.originY) * scale
      });
    }
    if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);
  }
};
var $729b375ce67e8a00$var$COLRLayer = class {
  constructor(glyph, color) {
    this.glyph = glyph;
    this.color = color;
  }
};
var $729b375ce67e8a00$export$2e2bcd8739ae039 = class extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "COLR";
  _getBBox() {
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();
    for (let i = 0; i < this.layers.length; i++) {
      let layer = this.layers[i];
      let b = layer.glyph.bbox;
      bbox.addPoint(b.minX, b.minY);
      bbox.addPoint(b.maxX, b.maxY);
    }
    return bbox;
  }
  /**
  * Returns an array of objects containing the glyph and color for
  * each layer in the composite color glyph.
  * @type {object[]}
  */
  get layers() {
    let cpal = this._font.CPAL;
    let colr = this._font.COLR;
    let low = 0;
    let high = colr.baseGlyphRecord.length - 1;
    while (low <= high) {
      let mid = low + high >> 1;
      var rec = colr.baseGlyphRecord[mid];
      if (this.id < rec.gid) high = mid - 1;
      else if (this.id > rec.gid) low = mid + 1;
      else {
        var baseLayer = rec;
        break;
      }
    }
    if (baseLayer == null) {
      var g = this._font._getBaseGlyph(this.id);
      var color = {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255
      };
      return [
        new $729b375ce67e8a00$var$COLRLayer(g, color)
      ];
    }
    let layers = [];
    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {
      var rec = colr.layerRecords[i];
      var color = cpal.colorRecords[rec.paletteIndex];
      var g = this._font._getBaseGlyph(rec.gid);
      layers.push(new $729b375ce67e8a00$var$COLRLayer(g, color));
    }
    return layers;
  }
  render(ctx, size) {
    for (let { glyph, color } of this.layers) {
      ctx.fillColor([
        color.red,
        color.green,
        color.blue
      ], color.alpha / 255 * 100);
      glyph.render(ctx, size);
    }
    return;
  }
};
var $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS = 32768;
var $62b2d77b45b438f3$var$TUPLE_COUNT_MASK = 4095;
var $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD = 32768;
var $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE = 16384;
var $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS = 8192;
var $62b2d77b45b438f3$var$TUPLE_INDEX_MASK = 4095;
var $62b2d77b45b438f3$var$POINTS_ARE_WORDS = 128;
var $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK = 127;
var $62b2d77b45b438f3$var$DELTAS_ARE_ZERO = 128;
var $62b2d77b45b438f3$var$DELTAS_ARE_WORDS = 64;
var $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK = 63;
var $62b2d77b45b438f3$export$2e2bcd8739ae039 = class {
  constructor(font, coords) {
    this.font = font;
    this.normalizedCoords = this.normalizeCoords(coords);
    this.blendVectors = /* @__PURE__ */ new Map();
  }
  normalizeCoords(coords) {
    let normalized = [];
    for (var i = 0; i < this.font.fvar.axis.length; i++) {
      let axis = this.font.fvar.axis[i];
      if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
      else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
    }
    if (this.font.avar) for (var i = 0; i < this.font.avar.segment.length; i++) {
      let segment = this.font.avar.segment[i];
      for (let j = 0; j < segment.correspondence.length; j++) {
        let pair = segment.correspondence[j];
        if (j >= 1 && normalized[i] < pair.fromCoord) {
          let prev = segment.correspondence[j - 1];
          normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
          break;
        }
      }
    }
    return normalized;
  }
  transformPoints(gid, glyphPoints) {
    if (!this.font.fvar || !this.font.gvar) return;
    let { gvar } = this.font;
    if (gid >= gvar.glyphCount) return;
    let offset = gvar.offsets[gid];
    if (offset === gvar.offsets[gid + 1]) return;
    let { stream: stream2 } = this.font;
    stream2.pos = offset;
    if (stream2.pos >= stream2.length) return;
    let tupleCount = stream2.readUInt16BE();
    let offsetToData = offset + stream2.readUInt16BE();
    if (tupleCount & $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS) {
      var here = stream2.pos;
      stream2.pos = offsetToData;
      var sharedPoints = this.decodePoints();
      offsetToData = stream2.pos;
      stream2.pos = here;
    }
    let origPoints = glyphPoints.map(
      (pt) => pt.copy()
    );
    tupleCount &= $62b2d77b45b438f3$var$TUPLE_COUNT_MASK;
    for (let i = 0; i < tupleCount; i++) {
      let tupleDataSize = stream2.readUInt16BE();
      let tupleIndex = stream2.readUInt16BE();
      if (tupleIndex & $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD) {
        var tupleCoords = [];
        for (let a = 0; a < gvar.axisCount; a++) tupleCoords.push(stream2.readInt16BE() / 16384);
      } else {
        if ((tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error("Invalid gvar table");
        var tupleCoords = gvar.globalCoords[tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK];
      }
      if (tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) {
        var startCoords = [];
        for (let a = 0; a < gvar.axisCount; a++) startCoords.push(stream2.readInt16BE() / 16384);
        var endCoords = [];
        for (let a1 = 0; a1 < gvar.axisCount; a1++) endCoords.push(stream2.readInt16BE() / 16384);
      }
      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
      if (factor === 0) {
        offsetToData += tupleDataSize;
        continue;
      }
      var here = stream2.pos;
      stream2.pos = offsetToData;
      if (tupleIndex & $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();
      else var points = sharedPoints;
      let nPoints = points.length === 0 ? glyphPoints.length : points.length;
      let xDeltas = this.decodeDeltas(nPoints);
      let yDeltas = this.decodeDeltas(nPoints);
      if (points.length === 0) for (let i2 = 0; i2 < glyphPoints.length; i2++) {
        var point = glyphPoints[i2];
        point.x += Math.round(xDeltas[i2] * factor);
        point.y += Math.round(yDeltas[i2] * factor);
      }
      else {
        let outPoints = origPoints.map(
          (pt) => pt.copy()
        );
        let hasDelta = glyphPoints.map(
          () => false
        );
        for (let i2 = 0; i2 < points.length; i2++) {
          let idx = points[i2];
          if (idx < glyphPoints.length) {
            let point2 = outPoints[idx];
            hasDelta[idx] = true;
            point2.x += Math.round(xDeltas[i2] * factor);
            point2.y += Math.round(yDeltas[i2] * factor);
          }
        }
        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
        for (let i1 = 0; i1 < glyphPoints.length; i1++) {
          let deltaX = outPoints[i1].x - origPoints[i1].x;
          let deltaY = outPoints[i1].y - origPoints[i1].y;
          glyphPoints[i1].x += deltaX;
          glyphPoints[i1].y += deltaY;
        }
      }
      offsetToData += tupleDataSize;
      stream2.pos = here;
    }
  }
  decodePoints() {
    let stream2 = this.font.stream;
    let count = stream2.readUInt8();
    if (count & $62b2d77b45b438f3$var$POINTS_ARE_WORDS) count = (count & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) << 8 | stream2.readUInt8();
    let points = new Uint16Array(count);
    let i = 0;
    let point = 0;
    while (i < count) {
      let run = stream2.readUInt8();
      let runCount = (run & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) + 1;
      let fn = run & $62b2d77b45b438f3$var$POINTS_ARE_WORDS ? stream2.readUInt16 : stream2.readUInt8;
      for (let j = 0; j < runCount && i < count; j++) {
        point += fn.call(stream2);
        points[i++] = point;
      }
    }
    return points;
  }
  decodeDeltas(count) {
    let stream2 = this.font.stream;
    let i = 0;
    let deltas = new Int16Array(count);
    while (i < count) {
      let run = stream2.readUInt8();
      let runCount = (run & $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK) + 1;
      if (run & $62b2d77b45b438f3$var$DELTAS_ARE_ZERO) i += runCount;
      else {
        let fn = run & $62b2d77b45b438f3$var$DELTAS_ARE_WORDS ? stream2.readInt16BE : stream2.readInt8;
        for (let j = 0; j < runCount && i < count; j++) deltas[i++] = fn.call(stream2);
      }
    }
    return deltas;
  }
  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
    let normalized = this.normalizedCoords;
    let { gvar } = this.font;
    let factor = 1;
    for (let i = 0; i < gvar.axisCount; i++) {
      if (tupleCoords[i] === 0) continue;
      if (normalized[i] === 0) return 0;
      if ((tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) === 0) {
        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;
        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);
      } else {
        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;
        else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);
        else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);
      }
    }
    return factor;
  }
  // Interpolates points without delta values.
  // Needed for the Ø and Q glyphs in Skia.
  // Algorithm from Freetype.
  interpolateMissingDeltas(points, inPoints, hasDelta) {
    if (points.length === 0) return;
    let point = 0;
    while (point < points.length) {
      let firstPoint = point;
      let endPoint = point;
      let pt = points[endPoint];
      while (!pt.endContour) pt = points[++endPoint];
      while (point <= endPoint && !hasDelta[point]) point++;
      if (point > endPoint) continue;
      let firstDelta = point;
      let curDelta = point;
      point++;
      while (point <= endPoint) {
        if (hasDelta[point]) {
          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
          curDelta = point;
        }
        point++;
      }
      if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
      else {
        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
        if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
      }
      point = endPoint + 1;
    }
  }
  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
    if (p1 > p2) return;
    let iterable = [
      "x",
      "y"
    ];
    for (let i = 0; i < iterable.length; i++) {
      let k = iterable[i];
      if (inPoints[ref1][k] > inPoints[ref2][k]) {
        var p = ref1;
        ref1 = ref2;
        ref2 = p;
      }
      let in1 = inPoints[ref1][k];
      let in2 = inPoints[ref2][k];
      let out1 = outPoints[ref1][k];
      let out2 = outPoints[ref2][k];
      if (in1 !== in2 || out1 === out2) {
        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
        for (let p3 = p1; p3 <= p2; p3++) {
          let out = inPoints[p3][k];
          if (out <= in1) out += out1 - in1;
          else if (out >= in2) out += out2 - in2;
          else out = out1 + (out - in1) * scale;
          outPoints[p3][k] = out;
        }
      }
    }
  }
  deltaShift(p1, p2, ref, inPoints, outPoints) {
    let deltaX = outPoints[ref].x - inPoints[ref].x;
    let deltaY = outPoints[ref].y - inPoints[ref].y;
    if (deltaX === 0 && deltaY === 0) return;
    for (let p = p1; p <= p2; p++) if (p !== ref) {
      outPoints[p].x += deltaX;
      outPoints[p].y += deltaY;
    }
  }
  getAdvanceAdjustment(gid, table) {
    let outerIndex, innerIndex;
    if (table.advanceWidthMapping) {
      let idx = gid;
      if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;
      let entryFormat = table.advanceWidthMapping.entryFormat;
      ({ outerIndex, innerIndex } = table.advanceWidthMapping.mapData[idx]);
    } else {
      outerIndex = 0;
      innerIndex = gid;
    }
    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
  }
  // See pseudo code from `Font Variations Overview'
  // in the OpenType specification.
  getDelta(itemStore, outerIndex, innerIndex) {
    if (outerIndex >= itemStore.itemVariationData.length) return 0;
    let varData = itemStore.itemVariationData[outerIndex];
    if (innerIndex >= varData.deltaSets.length) return 0;
    let deltaSet = varData.deltaSets[innerIndex];
    let blendVector = this.getBlendVector(itemStore, outerIndex);
    let netAdjustment = 0;
    for (let master = 0; master < varData.regionIndexCount; master++) netAdjustment += deltaSet.deltas[master] * blendVector[master];
    return netAdjustment;
  }
  getBlendVector(itemStore, outerIndex) {
    let varData = itemStore.itemVariationData[outerIndex];
    if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);
    let normalizedCoords = this.normalizedCoords;
    let blendVector = [];
    for (let master = 0; master < varData.regionIndexCount; master++) {
      let scalar = 1;
      let regionIndex = varData.regionIndexes[master];
      let axes = itemStore.variationRegionList.variationRegions[regionIndex];
      for (let j = 0; j < axes.length; j++) {
        let axis = axes[j];
        let axisScalar;
        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;
        else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;
        else if (axis.peakCoord === 0) axisScalar = 1;
        else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;
        else {
          if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;
          else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
          else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
        }
        scalar *= axisScalar;
      }
      blendVector[master] = scalar;
    }
    this.blendVectors.set(varData, blendVector);
    return blendVector;
  }
};
var $7768c4d2aa7d03a3$var$resolved = Promise.resolve();
var $7768c4d2aa7d03a3$export$2e2bcd8739ae039 = class {
  constructor(font) {
    this.font = font;
    this.glyphs = [];
    this.mapping = {};
    this.includeGlyph(0);
  }
  includeGlyph(glyph) {
    if (typeof glyph === "object") glyph = glyph.id;
    if (this.mapping[glyph] == null) {
      this.glyphs.push(glyph);
      this.mapping[glyph] = this.glyphs.length - 1;
    }
    return this.mapping[glyph];
  }
  encodeStream() {
    let s = new import_restructure.default.EncodeStream();
    $7768c4d2aa7d03a3$var$resolved.then(() => {
      this.encode(s);
      return s.end();
    });
    return s;
  }
};
var $681deff774310865$var$ON_CURVE = 1;
var $681deff774310865$var$X_SHORT_VECTOR = 2;
var $681deff774310865$var$Y_SHORT_VECTOR = 4;
var $681deff774310865$var$REPEAT = 8;
var $681deff774310865$var$SAME_X = 16;
var $681deff774310865$var$SAME_Y = 32;
var $681deff774310865$var$Point = class {
  static size(val) {
    return val >= 0 && val <= 255 ? 1 : 2;
  }
  static encode(stream2, value) {
    if (value >= 0 && value <= 255) stream2.writeUInt8(value);
    else stream2.writeInt16BE(value);
  }
};
var $681deff774310865$var$Glyf = new import_restructure.default.Struct({
  numberOfContours: import_restructure.default.int16,
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16,
  endPtsOfContours: new import_restructure.default.Array(import_restructure.default.uint16, "numberOfContours"),
  instructions: new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16),
  flags: new import_restructure.default.Array(import_restructure.default.uint8, 0),
  xPoints: new import_restructure.default.Array($681deff774310865$var$Point, 0),
  yPoints: new import_restructure.default.Array($681deff774310865$var$Point, 0)
});
var $681deff774310865$export$2e2bcd8739ae039 = class {
  encodeSimple(path3, instructions = []) {
    let endPtsOfContours = [];
    let xPoints = [];
    let yPoints = [];
    let flags = [];
    let same = 0;
    let lastX = 0, lastY = 0, lastFlag = 0;
    let pointCount = 0;
    for (let i = 0; i < path3.commands.length; i++) {
      let c = path3.commands[i];
      for (let j = 0; j < c.args.length; j += 2) {
        let x = c.args[j];
        let y = c.args[j + 1];
        let flag = 0;
        if (c.command === "quadraticCurveTo" && j === 2) {
          let next = path3.commands[i + 1];
          if (next && next.command === "quadraticCurveTo") {
            let midX = (lastX + next.args[0]) / 2;
            let midY = (lastY + next.args[1]) / 2;
            if (x === midX && y === midY) continue;
          }
        }
        if (!(c.command === "quadraticCurveTo" && j === 0)) flag |= $681deff774310865$var$ON_CURVE;
        flag = this._encodePoint(x, lastX, xPoints, flag, $681deff774310865$var$X_SHORT_VECTOR, $681deff774310865$var$SAME_X);
        flag = this._encodePoint(y, lastY, yPoints, flag, $681deff774310865$var$Y_SHORT_VECTOR, $681deff774310865$var$SAME_Y);
        if (flag === lastFlag && same < 255) {
          flags[flags.length - 1] |= $681deff774310865$var$REPEAT;
          same++;
        } else {
          if (same > 0) {
            flags.push(same);
            same = 0;
          }
          flags.push(flag);
          lastFlag = flag;
        }
        lastX = x;
        lastY = y;
        pointCount++;
      }
      if (c.command === "closePath") endPtsOfContours.push(pointCount - 1);
    }
    if (path3.commands.length > 1 && path3.commands[path3.commands.length - 1].command !== "closePath") endPtsOfContours.push(pointCount - 1);
    let bbox = path3.bbox;
    let glyf = {
      numberOfContours: endPtsOfContours.length,
      xMin: bbox.minX,
      yMin: bbox.minY,
      xMax: bbox.maxX,
      yMax: bbox.maxY,
      endPtsOfContours,
      instructions,
      flags,
      xPoints,
      yPoints
    };
    let size = $681deff774310865$var$Glyf.size(glyf);
    let tail = 4 - size % 4;
    let stream2 = new import_restructure.default.EncodeStream(size + tail);
    $681deff774310865$var$Glyf.encode(stream2, glyf);
    if (tail !== 0) stream2.fill(0, tail);
    return stream2.buffer;
  }
  _encodePoint(value, last2, points, flag, shortFlag, sameFlag) {
    let diff = value - last2;
    if (value === last2) flag |= sameFlag;
    else {
      if (-255 <= diff && diff <= 255) {
        flag |= shortFlag;
        if (diff < 0) diff = -diff;
        else flag |= sameFlag;
      }
      points.push(diff);
    }
    return flag;
  }
};
var $06433914835b8dd7$require$Buffer = $5OpyM$Buffer;
var $06433914835b8dd7$export$2e2bcd8739ae039 = class extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
  constructor(font) {
    super(font);
    this.glyphEncoder = new $681deff774310865$export$2e2bcd8739ae039();
  }
  _addGlyph(gid) {
    let glyph = this.font.getGlyph(gid);
    let glyf = glyph._decode();
    let curOffset = this.font.loca.offsets[gid];
    let nextOffset = this.font.loca.offsets[gid + 1];
    let stream2 = this.font._getTableStream("glyf");
    stream2.pos += curOffset;
    let buffer = stream2.readBuffer(nextOffset - curOffset);
    if (glyf && glyf.numberOfContours < 0) {
      buffer = $06433914835b8dd7$require$Buffer.from(buffer);
      for (let component of glyf.components) {
        gid = this.includeGlyph(component.glyphID);
        buffer.writeUInt16BE(gid, component.pos);
      }
    } else if (glyf && this.font._variationProcessor)
      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
    this.glyf.push(buffer);
    this.loca.offsets.push(this.offset);
    this.hmtx.metrics.push({
      advance: glyph.advanceWidth,
      bearing: glyph._getMetrics().leftBearing
    });
    this.offset += buffer.length;
    return this.glyf.length - 1;
  }
  encode(stream2) {
    this.glyf = [];
    this.offset = 0;
    this.loca = {
      offsets: [],
      version: this.font.loca.version
    };
    this.hmtx = {
      metrics: [],
      bearings: []
    };
    let i = 0;
    while (i < this.glyphs.length) this._addGlyph(this.glyphs[i++]);
    let maxp = (0, import_clone.default)(this.font.maxp);
    maxp.numGlyphs = this.glyf.length;
    this.loca.offsets.push(this.offset);
    let head = (0, import_clone.default)(this.font.head);
    head.indexToLocFormat = this.loca.version;
    let hhea = (0, import_clone.default)(this.font.hhea);
    hhea.numberOfMetrics = this.hmtx.metrics.length;
    $d5e01a2298150c9a$export$2e2bcd8739ae039.encode(stream2, {
      tables: {
        head,
        hhea,
        loca: this.loca,
        maxp,
        "cvt ": this.font["cvt "],
        prep: this.font.prep,
        glyf: this.glyf,
        hmtx: this.hmtx,
        fpgm: this.font.fpgm
      }
    });
  }
};
var $2d910ac31fc0baf3$require$Buffer = $5OpyM$Buffer;
var $2d910ac31fc0baf3$export$2e2bcd8739ae039 = class extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
  constructor(font) {
    super(font);
    this.cff = this.font["CFF "];
    if (!this.cff) throw new Error("Not a CFF Font");
  }
  subsetCharstrings() {
    this.charstrings = [];
    let gsubrs = {};
    for (let gid of this.glyphs) {
      this.charstrings.push(this.cff.getCharString(gid));
      let glyph = this.font.getGlyph(gid);
      let path3 = glyph.path;
      for (let subr in glyph._usedGsubrs) gsubrs[subr] = true;
    }
    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
  }
  subsetSubrs(subrs, used) {
    let res = [];
    for (let i = 0; i < subrs.length; i++) {
      let subr = subrs[i];
      if (used[i]) {
        this.cff.stream.pos = subr.offset;
        res.push(this.cff.stream.readBuffer(subr.length));
      } else res.push($2d910ac31fc0baf3$require$Buffer.from([
        11
      ]));
    }
    return res;
  }
  subsetFontdict(topDict) {
    topDict.FDArray = [];
    topDict.FDSelect = {
      version: 0,
      fds: []
    };
    let used_fds = {};
    let used_subrs = [];
    let fd_select = {};
    for (let gid of this.glyphs) {
      let fd = this.cff.fdForGlyph(gid);
      if (fd == null) continue;
      if (!used_fds[fd]) {
        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
        used_subrs.push({});
        fd_select[fd] = topDict.FDArray.length - 1;
      }
      used_fds[fd] = true;
      topDict.FDSelect.fds.push(fd_select[fd]);
      let glyph = this.font.getGlyph(gid);
      let path3 = glyph.path;
      for (let subr in glyph._usedSubrs) used_subrs[fd_select[fd]][subr] = true;
    }
    for (let i = 0; i < topDict.FDArray.length; i++) {
      let dict = topDict.FDArray[i];
      delete dict.FontName;
      if (dict.Private && dict.Private.Subrs) {
        dict.Private = Object.assign({}, dict.Private);
        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
      }
    }
    return;
  }
  createCIDFontdict(topDict) {
    let used_subrs = {};
    for (let gid of this.glyphs) {
      let glyph = this.font.getGlyph(gid);
      let path3 = glyph.path;
      for (let subr in glyph._usedSubrs) used_subrs[subr] = true;
    }
    let privateDict = Object.assign({}, this.cff.topDict.Private);
    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
    topDict.FDArray = [
      {
        Private: privateDict
      }
    ];
    return topDict.FDSelect = {
      version: 3,
      nRanges: 1,
      ranges: [
        {
          first: 0,
          fd: 0
        }
      ],
      sentinel: this.charstrings.length
    };
  }
  addString(string) {
    if (!string) return null;
    if (!this.strings) this.strings = [];
    this.strings.push(string);
    return $276d3ff37a4362c9$export$2e2bcd8739ae039.length + this.strings.length - 1;
  }
  encode(stream2) {
    this.subsetCharstrings();
    let charset = {
      version: this.charstrings.length > 255 ? 2 : 1,
      ranges: [
        {
          first: 1,
          nLeft: this.charstrings.length - 2
        }
      ]
    };
    let topDict = Object.assign({}, this.cff.topDict);
    topDict.Private = null;
    topDict.charset = charset;
    topDict.Encoding = null;
    topDict.CharStrings = this.charstrings;
    for (let key of [
      "version",
      "Notice",
      "Copyright",
      "FullName",
      "FamilyName",
      "Weight",
      "PostScript",
      "BaseFontName",
      "FontName"
    ]) topDict[key] = this.addString(this.cff.string(topDict[key]));
    topDict.ROS = [
      this.addString("Adobe"),
      this.addString("Identity"),
      0
    ];
    topDict.CIDCount = this.charstrings.length;
    if (this.cff.isCIDFont) this.subsetFontdict(topDict);
    else this.createCIDFontdict(topDict);
    let top = {
      version: 1,
      hdrSize: this.cff.hdrSize,
      offSize: 4,
      header: this.cff.header,
      nameIndex: [
        this.cff.postscriptName
      ],
      topDictIndex: [
        topDict
      ],
      stringIndex: this.strings,
      globalSubrIndex: this.gsubrs
    };
    $3e41cd50e8921098$export$2e2bcd8739ae039.encode(stream2, top);
  }
};
var _class;
var $7de97f725b51e05a$export$2e2bcd8739ae039 = (_class = class $7de97f725b51e05a$export$2e2bcd8739ae0392 {
  type = "TTF";
  static probe(buffer) {
    let format = buffer.toString("ascii", 0, 4);
    return format === "true" || format === "OTTO" || format === String.fromCharCode(0, 1, 0, 0);
  }
  constructor(stream2, variationCoords = null) {
    this.defaultLanguage = null;
    this.stream = stream2;
    this.variationCoords = variationCoords;
    this._directoryPos = this.stream.pos;
    this._tables = {};
    this._glyphs = {};
    this._decodeDirectory();
    for (let tag in this.directory.tables) {
      let table = this.directory.tables[tag];
      if ($60d88718e7e1fa97$export$2e2bcd8739ae039[tag] && table.length > 0) Object.defineProperty(this, tag, {
        get: this._getTable.bind(this, table)
      });
    }
  }
  setDefaultLanguage(lang = null) {
    this.defaultLanguage = lang;
  }
  _getTable(table) {
    if (!(table.tag in this._tables)) try {
      this._tables[table.tag] = this._decodeTable(table);
    } catch (e) {
      if ($8857867ee3ddfad5$export$bd5c5d8b8dcafd78) {
        console.error(`Error decoding table ${table.tag}`);
        console.error(e.stack);
      }
    }
    return this._tables[table.tag];
  }
  _getTableStream(tag) {
    let table = this.directory.tables[tag];
    if (table) {
      this.stream.pos = table.offset;
      return this.stream;
    }
    return null;
  }
  _decodeDirectory() {
    return this.directory = $d5e01a2298150c9a$export$2e2bcd8739ae039.decode(this.stream, {
      _startOffset: 0
    });
  }
  _decodeTable(table) {
    let pos = this.stream.pos;
    let stream2 = this._getTableStream(table.tag);
    let result = $60d88718e7e1fa97$export$2e2bcd8739ae039[table.tag].decode(stream2, this, table.length);
    this.stream.pos = pos;
    return result;
  }
  /**
  * Gets a string from the font's `name` table
  * `lang` is a BCP-47 language code.
  * @return {string}
  */
  getName(key, lang = this.defaultLanguage || $8857867ee3ddfad5$export$42940898df819940) {
    let record = this.name && this.name.records[key];
    if (record)
      return record[lang] || record[this.defaultLanguage] || record[$8857867ee3ddfad5$export$42940898df819940] || record["en"] || record[Object.keys(record)[0]] || null;
    return null;
  }
  /**
  * The unique PostScript name for this font, e.g. "Helvetica-Bold"
  * @type {string}
  */
  get postscriptName() {
    return this.getName("postscriptName");
  }
  /**
  * The font's full name, e.g. "Helvetica Bold"
  * @type {string}
  */
  get fullName() {
    return this.getName("fullName");
  }
  /**
  * The font's family name, e.g. "Helvetica"
  * @type {string}
  */
  get familyName() {
    return this.getName("fontFamily");
  }
  /**
  * The font's sub-family, e.g. "Bold".
  * @type {string}
  */
  get subfamilyName() {
    return this.getName("fontSubfamily");
  }
  /**
  * The font's copyright information
  * @type {string}
  */
  get copyright() {
    return this.getName("copyright");
  }
  /**
  * The font's version number
  * @type {string}
  */
  get version() {
    return this.getName("version");
  }
  /**
  * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
  * @type {number}
  */
  get ascent() {
    return this.hhea.ascent;
  }
  /**
  * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
  * @type {number}
  */
  get descent() {
    return this.hhea.descent;
  }
  /**
  * The amount of space that should be included between lines
  * @type {number}
  */
  get lineGap() {
    return this.hhea.lineGap;
  }
  /**
  * The offset from the normal underline position that should be used
  * @type {number}
  */
  get underlinePosition() {
    return this.post.underlinePosition;
  }
  /**
  * The weight of the underline that should be used
  * @type {number}
  */
  get underlineThickness() {
    return this.post.underlineThickness;
  }
  /**
  * If this is an italic font, the angle the cursor should be drawn at to match the font design
  * @type {number}
  */
  get italicAngle() {
    return this.post.italicAngle;
  }
  /**
  * The height of capital letters above the baseline.
  * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
  * @type {number}
  */
  get capHeight() {
    let os2 = this["OS/2"];
    return os2 ? os2.capHeight : this.ascent;
  }
  /**
  * The height of lower case letters in the font.
  * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
  * @type {number}
  */
  get xHeight() {
    let os2 = this["OS/2"];
    return os2 ? os2.xHeight : 0;
  }
  /**
  * The number of glyphs in the font.
  * @type {number}
  */
  get numGlyphs() {
    return this.maxp.numGlyphs;
  }
  /**
  * The size of the font’s internal coordinate grid
  * @type {number}
  */
  get unitsPerEm() {
    return this.head.unitsPerEm;
  }
  /**
  * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
  * @type {BBox}
  */
  get bbox() {
    return Object.freeze(new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
  }
  get _cmapProcessor() {
    return new $5d24cfe1a4cd83bb$export$2e2bcd8739ae039(this.cmap);
  }
  /**
  * An array of all of the unicode code points supported by the font.
  * @type {number[]}
  */
  get characterSet() {
    return this._cmapProcessor.getCharacterSet();
  }
  /**
  * Returns whether there is glyph in the font for the given unicode code point.
  *
  * @param {number} codePoint
  * @return {boolean}
  */
  hasGlyphForCodePoint(codePoint) {
    return !!this._cmapProcessor.lookup(codePoint);
  }
  /**
  * Maps a single unicode code point to a Glyph object.
  * Does not perform any advanced substitutions (there is no context to do so).
  *
  * @param {number} codePoint
  * @return {Glyph}
  */
  glyphForCodePoint(codePoint) {
    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
      codePoint
    ]);
  }
  /**
  * Returns an array of Glyph objects for the given string.
  * This is only a one-to-one mapping from characters to glyphs.
  * For most uses, you should use font.layout (described below), which
  * provides a much more advanced mapping supporting AAT and OpenType shaping.
  *
  * @param {string} string
  * @return {Glyph[]}
  */
  glyphsForString(string) {
    let glyphs = [];
    let len = string.length;
    let idx = 0;
    let last2 = -1;
    let state = -1;
    while (idx <= len) {
      let code = 0;
      let nextState = 0;
      if (idx < len) {
        code = string.charCodeAt(idx++);
        if (55296 <= code && code <= 56319 && idx < len) {
          let next = string.charCodeAt(idx);
          if (56320 <= next && next <= 57343) {
            idx++;
            code = ((code & 1023) << 10) + (next & 1023) + 65536;
          }
        }
        nextState = 65024 <= code && code <= 65039 || 917760 <= code && code <= 917999 ? 1 : 0;
      } else idx++;
      if (state === 0 && nextState === 1)
        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last2, code), [
          last2,
          code
        ]));
      else if (state === 0 && nextState === 0)
        glyphs.push(this.glyphForCodePoint(last2));
      last2 = code;
      state = nextState;
    }
    return glyphs;
  }
  get _layoutEngine() {
    return new $2df783177c3b5db5$export$2e2bcd8739ae039(this);
  }
  /**
  * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
  *
  * @param {string} string
  * @param {string[]} [userFeatures]
  * @param {string} [script]
  * @param {string} [language]
  * @param {string} [direction]
  * @return {GlyphRun}
  */
  layout(string, userFeatures, script, language, direction) {
    return this._layoutEngine.layout(string, userFeatures, script, language, direction);
  }
  /**
  * Returns an array of strings that map to the given glyph id.
  * @param {number} gid - glyph id
  */
  stringsForGlyph(gid) {
    return this._layoutEngine.stringsForGlyph(gid);
  }
  /**
  * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
  * (or mapped AAT tags) supported by the font.
  * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
  * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
  *
  * @type {string[]}
  */
  get availableFeatures() {
    return this._layoutEngine.getAvailableFeatures();
  }
  getAvailableFeatures(script, language) {
    return this._layoutEngine.getAvailableFeatures(script, language);
  }
  _getBaseGlyph(glyph, characters2 = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.glyf) this._glyphs[glyph] = new $e20fdd09923e4c19$export$2e2bcd8739ae039(glyph, characters2, this);
      else if (this.directory.tables["CFF "] || this.directory.tables.CFF2) this._glyphs[glyph] = new $efcf21464e1e0f88$export$2e2bcd8739ae039(glyph, characters2, this);
    }
    return this._glyphs[glyph] || null;
  }
  /**
  * Returns a glyph object for the given glyph id.
  * You can pass the array of code points this glyph represents for
  * your use later, and it will be stored in the glyph object.
  *
  * @param {number} glyph
  * @param {number[]} characters
  * @return {Glyph}
  */
  getGlyph(glyph, characters2 = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.sbix) this._glyphs[glyph] = new $df50792647a3d5cf$export$2e2bcd8739ae039(glyph, characters2, this);
      else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new $729b375ce67e8a00$export$2e2bcd8739ae039(glyph, characters2, this);
      else this._getBaseGlyph(glyph, characters2);
    }
    return this._glyphs[glyph] || null;
  }
  /**
  * Returns a Subset for this font.
  * @return {Subset}
  */
  createSubset() {
    if (this.directory.tables["CFF "]) return new $2d910ac31fc0baf3$export$2e2bcd8739ae039(this);
    return new $06433914835b8dd7$export$2e2bcd8739ae039(this);
  }
  /**
  * Returns an object describing the available variation axes
  * that this font supports. Keys are setting tags, and values
  * contain the axis name, range, and default value.
  *
  * @type {object}
  */
  get variationAxes() {
    let res = {};
    if (!this.fvar) return res;
    for (let axis of this.fvar.axis) res[axis.axisTag.trim()] = {
      name: axis.name.en,
      min: axis.minValue,
      default: axis.defaultValue,
      max: axis.maxValue
    };
    return res;
  }
  /**
  * Returns an object describing the named variation instances
  * that the font designer has specified. Keys are variation names
  * and values are the variation settings for this instance.
  *
  * @type {object}
  */
  get namedVariations() {
    let res = {};
    if (!this.fvar) return res;
    for (let instance of this.fvar.instance) {
      let settings = {};
      for (let i = 0; i < this.fvar.axis.length; i++) {
        let axis = this.fvar.axis[i];
        settings[axis.axisTag.trim()] = instance.coord[i];
      }
      res[instance.name.en] = settings;
    }
    return res;
  }
  /**
  * Returns a new font with the given variation settings applied.
  * Settings can either be an instance name, or an object containing
  * variation tags as specified by the `variationAxes` property.
  *
  * @param {object} settings
  * @return {TTFFont}
  */
  getVariation(settings) {
    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
    if (typeof settings === "string") settings = this.namedVariations[settings];
    if (typeof settings !== "object") throw new Error("Variation settings must be either a variation name or settings object.");
    let coords = this.fvar.axis.map((axis, i) => {
      let axisTag = axis.axisTag.trim();
      if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
      else return axis.defaultValue;
    });
    let stream2 = new import_restructure.default.DecodeStream(this.stream.buffer);
    stream2.pos = this._directoryPos;
    let font = new $7de97f725b51e05a$export$2e2bcd8739ae0392(stream2, coords);
    font._tables = this._tables;
    return font;
  }
  get _variationProcessor() {
    if (!this.fvar) return null;
    let variationCoords = this.variationCoords;
    if (!variationCoords && !this.CFF2) return null;
    if (!variationCoords) variationCoords = this.fvar.axis.map(
      (axis) => axis.defaultValue
    );
    return new $62b2d77b45b438f3$export$2e2bcd8739ae039(this, variationCoords);
  }
  // Standardized format plugin API
  getFont(name) {
    return this.getVariation(name);
  }
}, _applyDecoratedDescriptor(_class.prototype, "bbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_cmapProcessor", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_cmapProcessor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "characterSet", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "characterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_layoutEngine", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_layoutEngine"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "variationAxes", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "variationAxes"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "namedVariations", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "namedVariations"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_variationProcessor", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_variationProcessor"), _class.prototype), _class);
var $ab5f467accf33238$var$WOFFDirectoryEntry = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  offset: new import_restructure.default.Pointer(import_restructure.default.uint32, "void", {
    type: "global"
  }),
  compLength: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  origChecksum: import_restructure.default.uint32
});
var $ab5f467accf33238$var$WOFFDirectory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  flavor: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  numTables: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  totalSfntSize: import_restructure.default.uint32,
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  metaOffset: import_restructure.default.uint32,
  metaLength: import_restructure.default.uint32,
  metaOrigLength: import_restructure.default.uint32,
  privOffset: import_restructure.default.uint32,
  privLength: import_restructure.default.uint32,
  tables: new import_restructure.default.Array($ab5f467accf33238$var$WOFFDirectoryEntry, "numTables")
});
$ab5f467accf33238$var$WOFFDirectory.process = function() {
  let tables = {};
  for (let table of this.tables) tables[table.tag] = table;
  this.tables = tables;
};
var $ab5f467accf33238$export$2e2bcd8739ae039 = $ab5f467accf33238$var$WOFFDirectory;
var $fce99fef0398d8c8$require$Buffer = $5OpyM$Buffer;
var $fce99fef0398d8c8$export$2e2bcd8739ae039 = class extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
  type = "WOFF";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "wOFF";
  }
  _decodeDirectory() {
    this.directory = $ab5f467accf33238$export$2e2bcd8739ae039.decode(this.stream, {
      _startOffset: 0
    });
  }
  _getTableStream(tag) {
    let table = this.directory.tables[tag];
    if (table) {
      this.stream.pos = table.offset;
      if (table.compLength < table.length) {
        this.stream.pos += 2;
        let outBuffer = $fce99fef0398d8c8$require$Buffer.alloc(table.length);
        let buf = (0, import_tiny_inflate.default)(this.stream.readBuffer(table.compLength - 2), outBuffer);
        return new import_restructure.default.DecodeStream(buf);
      } else return this.stream;
    }
    return null;
  }
};
var $f6f1feff1ba0de68$export$2e2bcd8739ae039 = class extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
  type = "WOFF2";
  _decode() {
    return this._font._transformedGlyphs[this.id];
  }
  _getCBox() {
    return this.path.bbox;
  }
};
var $4965cf368c868bf6$var$Base128 = {
  decode(stream2) {
    let result = 0;
    let iterable = [
      0,
      1,
      2,
      3,
      4
    ];
    for (let j = 0; j < iterable.length; j++) {
      let i = iterable[j];
      let code = stream2.readUInt8();
      if (result & 3758096384) throw new Error("Overflow");
      result = result << 7 | code & 127;
      if ((code & 128) === 0) return result;
    }
    throw new Error("Bad base 128 number");
  }
};
var $4965cf368c868bf6$var$knownTags = [
  "cmap",
  "head",
  "hhea",
  "hmtx",
  "maxp",
  "name",
  "OS/2",
  "post",
  "cvt ",
  "fpgm",
  "glyf",
  "loca",
  "prep",
  "CFF ",
  "VORG",
  "EBDT",
  "EBLC",
  "gasp",
  "hdmx",
  "kern",
  "LTSH",
  "PCLT",
  "VDMX",
  "vhea",
  "vmtx",
  "BASE",
  "GDEF",
  "GPOS",
  "GSUB",
  "EBSC",
  "JSTF",
  "MATH",
  "CBDT",
  "CBLC",
  "COLR",
  "CPAL",
  "SVG ",
  "sbix",
  "acnt",
  "avar",
  "bdat",
  "bloc",
  "bsln",
  "cvar",
  "fdsc",
  "feat",
  "fmtx",
  "fvar",
  "gvar",
  "hsty",
  "just",
  "lcar",
  "mort",
  "morx",
  "opbd",
  "prop",
  "trak",
  "Zapf",
  "Silf",
  "Glat",
  "Gloc",
  "Feat",
  "Sill"
];
var $4965cf368c868bf6$var$WOFF2DirectoryEntry = new import_restructure.default.Struct({
  flags: import_restructure.default.uint8,
  customTag: new import_restructure.default.Optional(
    new import_restructure.default.String(4),
    (t) => (t.flags & 63) === 63
  ),
  tag: (t) => t.customTag || $4965cf368c868bf6$var$knownTags[t.flags & 63],
  length: $4965cf368c868bf6$var$Base128,
  transformVersion: (t) => t.flags >>> 6 & 3,
  transformed: (t) => t.tag === "glyf" || t.tag === "loca" ? t.transformVersion === 0 : t.transformVersion !== 0,
  transformLength: new import_restructure.default.Optional(
    $4965cf368c868bf6$var$Base128,
    (t) => t.transformed
  )
});
var $4965cf368c868bf6$var$WOFF2Directory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  flavor: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  numTables: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  totalSfntSize: import_restructure.default.uint32,
  totalCompressedSize: import_restructure.default.uint32,
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  metaOffset: import_restructure.default.uint32,
  metaLength: import_restructure.default.uint32,
  metaOrigLength: import_restructure.default.uint32,
  privOffset: import_restructure.default.uint32,
  privLength: import_restructure.default.uint32,
  tables: new import_restructure.default.Array($4965cf368c868bf6$var$WOFF2DirectoryEntry, "numTables")
});
$4965cf368c868bf6$var$WOFF2Directory.process = function() {
  let tables = {};
  for (let i = 0; i < this.tables.length; i++) {
    let table = this.tables[i];
    tables[table.tag] = table;
  }
  return this.tables = tables;
};
var $4965cf368c868bf6$export$2e2bcd8739ae039 = $4965cf368c868bf6$var$WOFF2Directory;
var $b6deb9db8685274b$require$Buffer = $5OpyM$Buffer;
var $b6deb9db8685274b$export$2e2bcd8739ae039 = class extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
  type = "WOFF2";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "wOF2";
  }
  _decodeDirectory() {
    this.directory = $4965cf368c868bf6$export$2e2bcd8739ae039.decode(this.stream);
    this._dataPos = this.stream.pos;
  }
  _decompress() {
    if (!this._decompressed) {
      this.stream.pos = this._dataPos;
      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
      let decompressedSize = 0;
      for (let tag in this.directory.tables) {
        let entry = this.directory.tables[tag];
        entry.offset = decompressedSize;
        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
      }
      let decompressed = (0, import_decompress.default)(buffer, decompressedSize);
      if (!decompressed) throw new Error("Error decoding compressed data in WOFF2");
      this.stream = new import_restructure.default.DecodeStream($b6deb9db8685274b$require$Buffer.from(decompressed));
      this._decompressed = true;
    }
  }
  _decodeTable(table) {
    this._decompress();
    return super._decodeTable(table);
  }
  // Override this method to get a glyph and return our
  // custom subclass if there is a glyf table.
  _getBaseGlyph(glyph, characters2 = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
        if (!this._transformedGlyphs) this._transformGlyfTable();
        return this._glyphs[glyph] = new $f6f1feff1ba0de68$export$2e2bcd8739ae039(glyph, characters2, this);
      } else return super._getBaseGlyph(glyph, characters2);
    }
  }
  _transformGlyfTable() {
    this._decompress();
    this.stream.pos = this.directory.tables.glyf.offset;
    let table = $b6deb9db8685274b$var$GlyfTable.decode(this.stream);
    let glyphs = [];
    for (let index = 0; index < table.numGlyphs; index++) {
      let glyph = {};
      let nContours = table.nContours.readInt16BE();
      glyph.numberOfContours = nContours;
      if (nContours > 0) {
        let nPoints = [];
        let totalPoints = 0;
        for (let i = 0; i < nContours; i++) {
          let r = $b6deb9db8685274b$var$read255UInt16(table.nPoints);
          totalPoints += r;
          nPoints.push(totalPoints);
        }
        glyph.points = $b6deb9db8685274b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
        for (let i1 = 0; i1 < nContours; i1++) glyph.points[nPoints[i1] - 1].endContour = true;
        var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
      } else if (nContours < 0) {
        let haveInstructions = $e20fdd09923e4c19$export$2e2bcd8739ae039.prototype._decodeComposite.call({
          _font: this
        }, glyph, table.composites);
        if (haveInstructions) var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
      }
      glyphs.push(glyph);
    }
    this._transformedGlyphs = glyphs;
  }
};
var $b6deb9db8685274b$var$Substream = class {
  constructor(length) {
    this.length = length;
    this._buf = new import_restructure.default.Buffer(length);
  }
  decode(stream2, parent) {
    return new import_restructure.default.DecodeStream(this._buf.decode(stream2, parent));
  }
};
var $b6deb9db8685274b$var$GlyfTable = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  numGlyphs: import_restructure.default.uint16,
  indexFormat: import_restructure.default.uint16,
  nContourStreamSize: import_restructure.default.uint32,
  nPointsStreamSize: import_restructure.default.uint32,
  flagStreamSize: import_restructure.default.uint32,
  glyphStreamSize: import_restructure.default.uint32,
  compositeStreamSize: import_restructure.default.uint32,
  bboxStreamSize: import_restructure.default.uint32,
  instructionStreamSize: import_restructure.default.uint32,
  nContours: new $b6deb9db8685274b$var$Substream("nContourStreamSize"),
  nPoints: new $b6deb9db8685274b$var$Substream("nPointsStreamSize"),
  flags: new $b6deb9db8685274b$var$Substream("flagStreamSize"),
  glyphs: new $b6deb9db8685274b$var$Substream("glyphStreamSize"),
  composites: new $b6deb9db8685274b$var$Substream("compositeStreamSize"),
  bboxes: new $b6deb9db8685274b$var$Substream("bboxStreamSize"),
  instructions: new $b6deb9db8685274b$var$Substream("instructionStreamSize")
});
var $b6deb9db8685274b$var$WORD_CODE = 253;
var $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2 = 254;
var $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1 = 255;
var $b6deb9db8685274b$var$LOWEST_U_CODE = 253;
function $b6deb9db8685274b$var$read255UInt16(stream2) {
  let code = stream2.readUInt8();
  if (code === $b6deb9db8685274b$var$WORD_CODE) return stream2.readUInt16BE();
  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1) return stream2.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE;
  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2) return stream2.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE * 2;
  return code;
}
function $b6deb9db8685274b$var$withSign(flag, baseval) {
  return flag & 1 ? baseval : -baseval;
}
function $b6deb9db8685274b$var$decodeTriplet(flags, glyphs, nPoints) {
  let y;
  let x = y = 0;
  let res = [];
  for (let i = 0; i < nPoints; i++) {
    let dx = 0, dy = 0;
    let flag = flags.readUInt8();
    let onCurve = !(flag >> 7);
    flag &= 127;
    if (flag < 10) {
      dx = 0;
      dy = $b6deb9db8685274b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
    } else if (flag < 20) {
      dx = $b6deb9db8685274b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
      dy = 0;
    } else if (flag < 84) {
      var b0 = flag - 20;
      var b1 = glyphs.readUInt8();
      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 & 48) + (b1 >> 4));
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + ((b0 & 12) << 2) + (b1 & 15));
    } else if (flag < 120) {
      var b0 = flag - 84;
      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
    } else if (flag < 124) {
      var b1 = glyphs.readUInt8();
      let b2 = glyphs.readUInt8();
      dx = $b6deb9db8685274b$var$withSign(flag, (b1 << 4) + (b2 >> 4));
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, ((b2 & 15) << 8) + glyphs.readUInt8());
    } else {
      dx = $b6deb9db8685274b$var$withSign(flag, glyphs.readUInt16BE());
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, glyphs.readUInt16BE());
    }
    x += dx;
    y += dy;
    res.push(new $e20fdd09923e4c19$export$baf26146a414f24a(onCurve, false, x, y));
  }
  return res;
}
var $313c698c6d2649a4$require$Buffer = $5OpyM$Buffer;
var $313c698c6d2649a4$var$TTCHeader = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  65536: {
    numFonts: import_restructure.default.uint32,
    offsets: new import_restructure.default.Array(import_restructure.default.uint32, "numFonts")
  },
  131072: {
    numFonts: import_restructure.default.uint32,
    offsets: new import_restructure.default.Array(import_restructure.default.uint32, "numFonts"),
    dsigTag: import_restructure.default.uint32,
    dsigLength: import_restructure.default.uint32,
    dsigOffset: import_restructure.default.uint32
  }
});
var $313c698c6d2649a4$export$2e2bcd8739ae039 = class {
  type = "TTC";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "ttcf";
  }
  constructor(stream2) {
    this.stream = stream2;
    if (stream2.readString(4) !== "ttcf") throw new Error("Not a TrueType collection");
    this.header = $313c698c6d2649a4$var$TTCHeader.decode(stream2);
  }
  getFont(name) {
    for (let offset of this.header.offsets) {
      let stream2 = new import_restructure.default.DecodeStream(this.stream.buffer);
      stream2.pos = offset;
      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream2);
      if ($313c698c6d2649a4$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;
    }
    return null;
  }
  get fonts() {
    let fonts = [];
    for (let offset of this.header.offsets) {
      let stream2 = new import_restructure.default.DecodeStream(this.stream.buffer);
      stream2.pos = offset;
      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream2));
    }
    return fonts;
  }
};
var $7db119589c227f03$require$Buffer = $5OpyM$Buffer;
var $7db119589c227f03$var$DFontName = new import_restructure.default.String(import_restructure.default.uint8);
var $7db119589c227f03$var$DFontData = new import_restructure.default.Struct({
  len: import_restructure.default.uint32,
  buf: new import_restructure.default.Buffer("len")
});
var $7db119589c227f03$var$Ref = new import_restructure.default.Struct({
  id: import_restructure.default.uint16,
  nameOffset: import_restructure.default.int16,
  attr: import_restructure.default.uint8,
  dataOffset: import_restructure.default.uint24,
  handle: import_restructure.default.uint32
});
var $7db119589c227f03$var$Type = new import_restructure.default.Struct({
  name: new import_restructure.default.String(4),
  maxTypeIndex: import_restructure.default.uint16,
  refList: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array(
    $7db119589c227f03$var$Ref,
    (t) => t.maxTypeIndex + 1
  ), {
    type: "parent"
  })
});
var $7db119589c227f03$var$TypeList = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  types: new import_restructure.default.Array(
    $7db119589c227f03$var$Type,
    (t) => t.length + 1
  )
});
var $7db119589c227f03$var$DFontMap = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint8, 24),
  typeList: new import_restructure.default.Pointer(import_restructure.default.uint16, $7db119589c227f03$var$TypeList),
  nameListOffset: new import_restructure.default.Pointer(import_restructure.default.uint16, "void")
});
var $7db119589c227f03$var$DFontHeader = new import_restructure.default.Struct({
  dataOffset: import_restructure.default.uint32,
  map: new import_restructure.default.Pointer(import_restructure.default.uint32, $7db119589c227f03$var$DFontMap),
  dataLength: import_restructure.default.uint32,
  mapLength: import_restructure.default.uint32
});
var $7db119589c227f03$export$2e2bcd8739ae039 = class {
  type = "DFont";
  static probe(buffer) {
    let stream2 = new import_restructure.default.DecodeStream(buffer);
    try {
      var header = $7db119589c227f03$var$DFontHeader.decode(stream2);
    } catch (e) {
      return false;
    }
    for (let type of header.map.typeList.types) {
      if (type.name === "sfnt") return true;
    }
    return false;
  }
  constructor(stream2) {
    this.stream = stream2;
    this.header = $7db119589c227f03$var$DFontHeader.decode(this.stream);
    for (let type of this.header.map.typeList.types) {
      for (let ref of type.refList) if (ref.nameOffset >= 0) {
        this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
        ref.name = $7db119589c227f03$var$DFontName.decode(this.stream);
      } else ref.name = null;
      if (type.name === "sfnt") this.sfnt = type;
    }
  }
  getFont(name) {
    if (!this.sfnt) return null;
    for (let ref of this.sfnt.refList) {
      let pos = this.header.dataOffset + ref.dataOffset + 4;
      let stream2 = new import_restructure.default.DecodeStream(this.stream.buffer.slice(pos));
      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream2);
      if ($7db119589c227f03$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;
    }
    return null;
  }
  get fonts() {
    let fonts = [];
    for (let ref of this.sfnt.refList) {
      let pos = this.header.dataOffset + ref.dataOffset + 4;
      let stream2 = new import_restructure.default.DecodeStream(this.stream.buffer.slice(pos));
      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream2));
    }
    return fonts;
  }
};
$8857867ee3ddfad5$export$36b2f24e97d43be($7de97f725b51e05a$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($fce99fef0398d8c8$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($b6deb9db8685274b$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($313c698c6d2649a4$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($7db119589c227f03$export$2e2bcd8739ae039);
var $cf838c15c8b009ba$export$2e2bcd8739ae039 = {
  registerFormat: $8857867ee3ddfad5$export$36b2f24e97d43be,
  openSync: $8857867ee3ddfad5$export$fa5499edb1ab414a,
  open: $8857867ee3ddfad5$export$3ce6949f20cea765,
  create: $8857867ee3ddfad5$export$185802fd694ee1f5,
  defaultLanguage: $8857867ee3ddfad5$export$42940898df819940,
  setDefaultLanguage: $8857867ee3ddfad5$export$5157e7780d44cc36
};

// ../../node_modules/pdfkit/js/pdfkit.es.js
import { EventEmitter } from "events";

// ../../node_modules/linebreak/dist/module.mjs
var import_unicode_trie3 = __toESM(require_unicode_trie(), 1);
var import_base64_js2 = __toESM(require_b64(), 1);
var $557adaaeb0c7885f$exports = {};
var $1627905f8be2ef3f$export$fb4028874a74450 = 5;
var $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;
var $1627905f8be2ef3f$export$f3e416a182673355 = 13;
var $1627905f8be2ef3f$export$24aa617c849a894a = 16;
var $1627905f8be2ef3f$export$a73c4d14459b698d = 17;
var $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;
var $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;
var $1627905f8be2ef3f$export$30a74a373318dec6 = 31;
var $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;
var $1627905f8be2ef3f$export$66498d28055820a9 = 34;
var $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;
var $1627905f8be2ef3f$export$de92be486109a1df = 36;
var $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;
var $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;
var $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;
var $1627905f8be2ef3f$export$bea437c40441867d = 40;
var $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;
var $1627905f8be2ef3f$export$98e1f8a379849661 = 42;
var $32627af916ac1b00$export$98f50d781a474745 = 0;
var $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;
var $32627af916ac1b00$export$e4965ce242860454 = 2;
var $32627af916ac1b00$export$8f14048969dcd45e = 3;
var $32627af916ac1b00$export$133eb141bf58aff4 = 4;
var $32627af916ac1b00$export$5bdb8ccbf5c57afc = [
  //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB
  [
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$8f14048969dcd45e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ]
  // CB
];
var $557adaaeb0c7885f$var$data = import_base64_js2.default.toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
var $557adaaeb0c7885f$var$classTrie = new import_unicode_trie3.default($557adaaeb0c7885f$var$data);
var $557adaaeb0c7885f$var$mapClass = function(c) {
  switch (c) {
    case $1627905f8be2ef3f$export$d710c5f50fc7496a:
      return $1627905f8be2ef3f$export$1bb1140fe1358b00;
    case $1627905f8be2ef3f$export$da51c6332ad11d7b:
    case $1627905f8be2ef3f$export$bea437c40441867d:
    case $1627905f8be2ef3f$export$98e1f8a379849661:
      return $1627905f8be2ef3f$export$1bb1140fe1358b00;
    case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:
      return $1627905f8be2ef3f$export$fb4028874a74450;
    default:
      return c;
  }
};
var $557adaaeb0c7885f$var$mapFirst = function(c) {
  switch (c) {
    case $1627905f8be2ef3f$export$606cfc2a8896c91f:
    case $1627905f8be2ef3f$export$e51d3c675bb0140d:
      return $1627905f8be2ef3f$export$66498d28055820a9;
    case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
      return $1627905f8be2ef3f$export$9e5d732f3676a9ba;
    default:
      return c;
  }
};
var $557adaaeb0c7885f$var$Break = class {
  constructor(position, required = false) {
    this.position = position;
    this.required = required;
  }
};
var $557adaaeb0c7885f$var$LineBreaker = class {
  nextCodePoint() {
    const code = this.string.charCodeAt(this.pos++);
    const next = this.string.charCodeAt(this.pos);
    if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {
      this.pos++;
      return (code - 55296) * 1024 + (next - 56320) + 65536;
    }
    return code;
  }
  nextCharClass() {
    return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));
  }
  getSimpleBreak() {
    switch (this.nextClass) {
      case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
        return false;
      case $1627905f8be2ef3f$export$66498d28055820a9:
      case $1627905f8be2ef3f$export$606cfc2a8896c91f:
      case $1627905f8be2ef3f$export$e51d3c675bb0140d:
        this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;
        return false;
      case $1627905f8be2ef3f$export$de92be486109a1df:
        this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;
        return false;
    }
    return null;
  }
  getPairTableBreak(lastClass) {
    let shouldBreak = false;
    switch ($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]) {
      case $32627af916ac1b00$export$98f50d781a474745:
        shouldBreak = true;
        break;
      case $32627af916ac1b00$export$12ee1f8f5315ca7e:
        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
        break;
      case $32627af916ac1b00$export$e4965ce242860454:
        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
        if (!shouldBreak) {
          shouldBreak = false;
          return shouldBreak;
        }
        break;
      case $32627af916ac1b00$export$8f14048969dcd45e:
        if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9) return shouldBreak;
        break;
      case $32627af916ac1b00$export$133eb141bf58aff4:
        break;
    }
    if (this.LB8a) shouldBreak = false;
    if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {
      shouldBreak = false;
      this.LB21a = false;
    } else this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;
    if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
      this.LB30a++;
      if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
        shouldBreak = true;
        this.LB30a = 0;
      }
    } else this.LB30a = 0;
    this.curClass = this.nextClass;
    return shouldBreak;
  }
  nextBreak() {
    if (this.curClass == null) {
      let firstClass = this.nextCharClass();
      this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);
      this.nextClass = firstClass;
      this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;
      this.LB30a = 0;
    }
    while (this.pos < this.string.length) {
      this.lastPos = this.pos;
      const lastClass = this.nextClass;
      this.nextClass = this.nextCharClass();
      if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {
        this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));
        return new $557adaaeb0c7885f$var$Break(this.lastPos, true);
      }
      let shouldBreak = this.getSimpleBreak();
      if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);
      this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;
      if (shouldBreak) return new $557adaaeb0c7885f$var$Break(this.lastPos);
    }
    if (this.lastPos < this.string.length) {
      this.lastPos = this.string.length;
      return new $557adaaeb0c7885f$var$Break(this.string.length);
    }
    return null;
  }
  constructor(string) {
    this.string = string;
    this.pos = 0;
    this.lastPos = 0;
    this.curClass = null;
    this.nextClass = null;
    this.LB8a = false;
    this.LB21a = false;
    this.LB30a = 0;
  }
};
$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;

// ../../node_modules/pdfkit/js/pdfkit.es.js
var import_jpeg_exif = __toESM(require_lib3());
var import_png_js = __toESM(require_png_node());
var PDFAbstractReference = class {
  toString() {
    throw new Error("Must be implemented by subclasses");
  }
};
var PDFTree = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this._items = {};
    this.limits = typeof options.limits === "boolean" ? options.limits : true;
  }
  add(key, val) {
    return this._items[key] = val;
  }
  get(key) {
    return this._items[key];
  }
  toString() {
    const sortedKeys = Object.keys(this._items).sort((a, b) => this._compareKeys(a, b));
    const out = ["<<"];
    if (this.limits && sortedKeys.length > 1) {
      const first2 = sortedKeys[0], last2 = sortedKeys[sortedKeys.length - 1];
      out.push(`  /Limits ${PDFObject.convert([this._dataForKey(first2), this._dataForKey(last2)])}`);
    }
    out.push(`  /${this._keysName()} [`);
    for (let key of sortedKeys) {
      out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);
    }
    out.push("]");
    out.push(">>");
    return out.join("\n");
  }
  _compareKeys() {
    throw new Error("Must be implemented by subclasses");
  }
  _keysName() {
    throw new Error("Must be implemented by subclasses");
  }
  _dataForKey() {
    throw new Error("Must be implemented by subclasses");
  }
};
var pad = (str, length) => (Array(length + 1).join("0") + str).slice(-length);
var escapableRe = /[\n\r\t\b\f()\\]/g;
var escapable = {
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\b": "\\b",
  "\f": "\\f",
  "\\": "\\\\",
  "(": "\\(",
  ")": "\\)"
};
var swapBytes = function(buff) {
  const l = buff.length;
  if (l & 1) {
    throw new Error("Buffer length must be even");
  } else {
    for (let i = 0, end = l - 1; i < end; i += 2) {
      const a = buff[i];
      buff[i] = buff[i + 1];
      buff[i + 1] = a;
    }
  }
  return buff;
};
var PDFObject = class _PDFObject {
  static convert(object) {
    let encryptFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (typeof object === "string") {
      return `/${object}`;
    } else if (object instanceof String) {
      let string = object;
      let isUnicode = false;
      for (let i = 0, end = string.length; i < end; i++) {
        if (string.charCodeAt(i) > 127) {
          isUnicode = true;
          break;
        }
      }
      let stringBuffer;
      if (isUnicode) {
        stringBuffer = swapBytes(Buffer.from(`\uFEFF${string}`, "utf16le"));
      } else {
        stringBuffer = Buffer.from(string.valueOf(), "ascii");
      }
      if (encryptFn) {
        string = encryptFn(stringBuffer).toString("binary");
      } else {
        string = stringBuffer.toString("binary");
      }
      string = string.replace(escapableRe, (c) => escapable[c]);
      return `(${string})`;
    } else if (Buffer.isBuffer(object)) {
      return `<${object.toString("hex")}>`;
    } else if (object instanceof PDFAbstractReference || object instanceof PDFTree) {
      return object.toString();
    } else if (object instanceof Date) {
      let string = `D:${pad(object.getUTCFullYear(), 4)}` + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + "Z";
      if (encryptFn) {
        string = encryptFn(Buffer.from(string, "ascii")).toString("binary");
        string = string.replace(escapableRe, (c) => escapable[c]);
      }
      return `(${string})`;
    } else if (Array.isArray(object)) {
      const items = object.map((e) => _PDFObject.convert(e, encryptFn)).join(" ");
      return `[${items}]`;
    } else if ({}.toString.call(object) === "[object Object]") {
      const out = ["<<"];
      for (let key in object) {
        const val = object[key];
        out.push(`/${key} ${_PDFObject.convert(val, encryptFn)}`);
      }
      out.push(">>");
      return out.join("\n");
    } else if (typeof object === "number") {
      return _PDFObject.number(object);
    } else {
      return `${object}`;
    }
  }
  static number(n) {
    if (n > -1e21 && n < 1e21) {
      return Math.round(n * 1e6) / 1e6;
    }
    throw new Error(`unsupported number: ${n}`);
  }
};
var PDFReference = class extends PDFAbstractReference {
  constructor(document2, id) {
    let data = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    super();
    this.document = document2;
    this.id = id;
    this.data = data;
    this.gen = 0;
    this.compress = this.document.compress && !this.data.Filter;
    this.uncompressedLength = 0;
    this.buffer = [];
  }
  write(chunk) {
    if (!Buffer.isBuffer(chunk)) {
      chunk = Buffer.from(chunk + "\n", "binary");
    }
    this.uncompressedLength += chunk.length;
    if (this.data.Length == null) {
      this.data.Length = 0;
    }
    this.buffer.push(chunk);
    this.data.Length += chunk.length;
    if (this.compress) {
      return this.data.Filter = "FlateDecode";
    }
  }
  end(chunk) {
    if (chunk) {
      this.write(chunk);
    }
    return this.finalize();
  }
  finalize() {
    this.offset = this.document._offset;
    const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
    if (this.buffer.length) {
      this.buffer = Buffer.concat(this.buffer);
      if (this.compress) {
        this.buffer = zlib.deflateSync(this.buffer);
      }
      if (encryptFn) {
        this.buffer = encryptFn(this.buffer);
      }
      this.data.Length = this.buffer.length;
    }
    this.document._write(`${this.id} ${this.gen} obj`);
    this.document._write(PDFObject.convert(this.data, encryptFn));
    if (this.buffer.length) {
      this.document._write("stream");
      this.document._write(this.buffer);
      this.buffer = [];
      this.document._write("\nendstream");
    }
    this.document._write("endobj");
    this.document._refEnd(this);
  }
  toString() {
    return `${this.id} ${this.gen} R`;
  }
};
var DEFAULT_MARGINS = {
  top: 72,
  left: 72,
  bottom: 72,
  right: 72
};
var SIZES = {
  "4A0": [4767.87, 6740.79],
  "2A0": [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756],
  FOLIO: [612, 936],
  LEGAL: [612, 1008],
  LETTER: [612, 792],
  TABLOID: [792, 1224]
};
var PDFPage = class {
  constructor(document2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.document = document2;
    this.size = options.size || "letter";
    this.layout = options.layout || "portrait";
    if (typeof options.margin === "number") {
      this.margins = {
        top: options.margin,
        left: options.margin,
        bottom: options.margin,
        right: options.margin
      };
    } else {
      this.margins = options.margins || DEFAULT_MARGINS;
    }
    const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
    this.width = dimensions[this.layout === "portrait" ? 0 : 1];
    this.height = dimensions[this.layout === "portrait" ? 1 : 0];
    this.content = this.document.ref();
    this.resources = this.document.ref({
      ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"]
    });
    this.dictionary = this.document.ref({
      Type: "Page",
      Parent: this.document._root.data.Pages,
      MediaBox: [0, 0, this.width, this.height],
      Contents: this.content,
      Resources: this.resources
    });
    this.markings = [];
  }
  // Lazily create these objects
  get fonts() {
    const data = this.resources.data;
    return data.Font != null ? data.Font : data.Font = {};
  }
  get xobjects() {
    const data = this.resources.data;
    return data.XObject != null ? data.XObject : data.XObject = {};
  }
  get ext_gstates() {
    const data = this.resources.data;
    return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
  }
  get patterns() {
    const data = this.resources.data;
    return data.Pattern != null ? data.Pattern : data.Pattern = {};
  }
  get colorSpaces() {
    const data = this.resources.data;
    return data.ColorSpace || (data.ColorSpace = {});
  }
  get annotations() {
    const data = this.dictionary.data;
    return data.Annots != null ? data.Annots : data.Annots = [];
  }
  get structParentTreeKey() {
    const data = this.dictionary.data;
    return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
  }
  maxY() {
    return this.height - this.margins.bottom;
  }
  write(chunk) {
    return this.content.write(chunk);
  }
  end() {
    this.dictionary.end();
    this.resources.end();
    return this.content.end();
  }
};
var PDFNameTree = class extends PDFTree {
  _compareKeys(a, b) {
    return a.localeCompare(b);
  }
  _keysName() {
    return "Names";
  }
  _dataForKey(k) {
    return new String(k);
  }
};
function inRange(value, rangeGroup) {
  if (value < rangeGroup[0]) return false;
  let startRange = 0;
  let endRange = rangeGroup.length / 2;
  while (startRange <= endRange) {
    const middleRange = Math.floor((startRange + endRange) / 2);
    const arrayIndex = middleRange * 2;
    if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
      return true;
    }
    if (value > rangeGroup[arrayIndex + 1]) {
      startRange = middleRange + 1;
    } else {
      endRange = middleRange - 1;
    }
  }
  return false;
}
var unassigned_code_points = [545, 545, 564, 591, 686, 687, 751, 767, 848, 863, 880, 883, 886, 889, 891, 893, 895, 899, 907, 907, 909, 909, 930, 930, 975, 975, 1015, 1023, 1159, 1159, 1231, 1231, 1270, 1271, 1274, 1279, 1296, 1328, 1367, 1368, 1376, 1376, 1416, 1416, 1419, 1424, 1442, 1442, 1466, 1466, 1477, 1487, 1515, 1519, 1525, 1547, 1549, 1562, 1564, 1566, 1568, 1568, 1595, 1599, 1622, 1631, 1774, 1775, 1791, 1791, 1806, 1806, 1837, 1839, 1867, 1919, 1970, 2304, 2308, 2308, 2362, 2363, 2382, 2383, 2389, 2391, 2417, 2432, 2436, 2436, 2445, 2446, 2449, 2450, 2473, 2473, 2481, 2481, 2483, 2485, 2490, 2491, 2493, 2493, 2501, 2502, 2505, 2506, 2510, 2518, 2520, 2523, 2526, 2526, 2532, 2533, 2555, 2561, 2563, 2564, 2571, 2574, 2577, 2578, 2601, 2601, 2609, 2609, 2612, 2612, 2615, 2615, 2618, 2619, 2621, 2621, 2627, 2630, 2633, 2634, 2638, 2648, 2653, 2653, 2655, 2661, 2677, 2688, 2692, 2692, 2700, 2700, 2702, 2702, 2706, 2706, 2729, 2729, 2737, 2737, 2740, 2740, 2746, 2747, 2758, 2758, 2762, 2762, 2766, 2767, 2769, 2783, 2785, 2789, 2800, 2816, 2820, 2820, 2829, 2830, 2833, 2834, 2857, 2857, 2865, 2865, 2868, 2869, 2874, 2875, 2884, 2886, 2889, 2890, 2894, 2901, 2904, 2907, 2910, 2910, 2914, 2917, 2929, 2945, 2948, 2948, 2955, 2957, 2961, 2961, 2966, 2968, 2971, 2971, 2973, 2973, 2976, 2978, 2981, 2983, 2987, 2989, 2998, 2998, 3002, 3005, 3011, 3013, 3017, 3017, 3022, 3030, 3032, 3046, 3059, 3072, 3076, 3076, 3085, 3085, 3089, 3089, 3113, 3113, 3124, 3124, 3130, 3133, 3141, 3141, 3145, 3145, 3150, 3156, 3159, 3167, 3170, 3173, 3184, 3201, 3204, 3204, 3213, 3213, 3217, 3217, 3241, 3241, 3252, 3252, 3258, 3261, 3269, 3269, 3273, 3273, 3278, 3284, 3287, 3293, 3295, 3295, 3298, 3301, 3312, 3329, 3332, 3332, 3341, 3341, 3345, 3345, 3369, 3369, 3386, 3389, 3396, 3397, 3401, 3401, 3406, 3414, 3416, 3423, 3426, 3429, 3440, 3457, 3460, 3460, 3479, 3481, 3506, 3506, 3516, 3516, 3518, 3519, 3527, 3529, 3531, 3534, 3541, 3541, 3543, 3543, 3552, 3569, 3573, 3584, 3643, 3646, 3676, 3712, 3715, 3715, 3717, 3718, 3721, 3721, 3723, 3724, 3726, 3731, 3736, 3736, 3744, 3744, 3748, 3748, 3750, 3750, 3752, 3753, 3756, 3756, 3770, 3770, 3774, 3775, 3781, 3781, 3783, 3783, 3790, 3791, 3802, 3803, 3806, 3839, 3912, 3912, 3947, 3952, 3980, 3983, 3992, 3992, 4029, 4029, 4045, 4046, 4048, 4095, 4130, 4130, 4136, 4136, 4139, 4139, 4147, 4149, 4154, 4159, 4186, 4255, 4294, 4303, 4345, 4346, 4348, 4351, 4442, 4446, 4515, 4519, 4602, 4607, 4615, 4615, 4679, 4679, 4681, 4681, 4686, 4687, 4695, 4695, 4697, 4697, 4702, 4703, 4743, 4743, 4745, 4745, 4750, 4751, 4783, 4783, 4785, 4785, 4790, 4791, 4799, 4799, 4801, 4801, 4806, 4807, 4815, 4815, 4823, 4823, 4847, 4847, 4879, 4879, 4881, 4881, 4886, 4887, 4895, 4895, 4935, 4935, 4955, 4960, 4989, 5023, 5109, 5120, 5751, 5759, 5789, 5791, 5873, 5887, 5901, 5901, 5909, 5919, 5943, 5951, 5972, 5983, 5997, 5997, 6001, 6001, 6004, 6015, 6109, 6111, 6122, 6143, 6159, 6159, 6170, 6175, 6264, 6271, 6314, 7679, 7836, 7839, 7930, 7935, 7958, 7959, 7966, 7967, 8006, 8007, 8014, 8015, 8024, 8024, 8026, 8026, 8028, 8028, 8030, 8030, 8062, 8063, 8117, 8117, 8133, 8133, 8148, 8149, 8156, 8156, 8176, 8177, 8181, 8181, 8191, 8191, 8275, 8278, 8280, 8286, 8292, 8297, 8306, 8307, 8335, 8351, 8370, 8399, 8427, 8447, 8507, 8508, 8524, 8530, 8580, 8591, 9167, 9215, 9255, 9279, 9291, 9311, 9471, 9471, 9748, 9749, 9752, 9752, 9854, 9855, 9866, 9984, 9989, 9989, 9994, 9995, 10024, 10024, 10060, 10060, 10062, 10062, 10067, 10069, 10071, 10071, 10079, 10080, 10133, 10135, 10160, 10160, 10175, 10191, 10220, 10223, 11008, 11903, 11930, 11930, 12020, 12031, 12246, 12271, 12284, 12287, 12352, 12352, 12439, 12440, 12544, 12548, 12589, 12592, 12687, 12687, 12728, 12783, 12829, 12831, 12868, 12880, 12924, 12926, 13004, 13007, 13055, 13055, 13175, 13178, 13278, 13279, 13311, 13311, 19894, 19967, 40870, 40959, 42125, 42127, 42183, 44031, 55204, 55295, 64046, 64047, 64107, 64255, 64263, 64274, 64280, 64284, 64311, 64311, 64317, 64317, 64319, 64319, 64322, 64322, 64325, 64325, 64434, 64466, 64832, 64847, 64912, 64913, 64968, 64975, 65021, 65023, 65040, 65055, 65060, 65071, 65095, 65096, 65107, 65107, 65127, 65127, 65132, 65135, 65141, 65141, 65277, 65278, 65280, 65280, 65471, 65473, 65480, 65481, 65488, 65489, 65496, 65497, 65501, 65503, 65511, 65511, 65519, 65528, 65536, 66303, 66335, 66335, 66340, 66351, 66379, 66559, 66598, 66599, 66638, 118783, 119030, 119039, 119079, 119081, 119262, 119807, 119893, 119893, 119965, 119965, 119968, 119969, 119971, 119972, 119975, 119976, 119981, 119981, 119994, 119994, 119996, 119996, 120001, 120001, 120004, 120004, 120070, 120070, 120075, 120076, 120085, 120085, 120093, 120093, 120122, 120122, 120127, 120127, 120133, 120133, 120135, 120137, 120145, 120145, 120484, 120487, 120778, 120781, 120832, 131069, 173783, 194559, 195102, 196605, 196608, 262141, 262144, 327677, 327680, 393213, 393216, 458749, 458752, 524285, 524288, 589821, 589824, 655357, 655360, 720893, 720896, 786429, 786432, 851965, 851968, 917501, 917504, 917504, 917506, 917535, 917632, 983037];
var isUnassignedCodePoint = (character) => inRange(character, unassigned_code_points);
var commonly_mapped_to_nothing = [173, 173, 847, 847, 6150, 6150, 6155, 6155, 6156, 6156, 6157, 6157, 8203, 8203, 8204, 8204, 8205, 8205, 8288, 8288, 65024, 65024, 65025, 65025, 65026, 65026, 65027, 65027, 65028, 65028, 65029, 65029, 65030, 65030, 65031, 65031, 65032, 65032, 65033, 65033, 65034, 65034, 65035, 65035, 65036, 65036, 65037, 65037, 65038, 65038, 65039, 65039, 65279, 65279];
var isCommonlyMappedToNothing = (character) => inRange(character, commonly_mapped_to_nothing);
var non_ASCII_space_characters = [
  160,
  160,
  5760,
  5760,
  8192,
  8192,
  8193,
  8193,
  8194,
  8194,
  8195,
  8195,
  8196,
  8196,
  8197,
  8197,
  8198,
  8198,
  8199,
  8199,
  8200,
  8200,
  8201,
  8201,
  8202,
  8202,
  8203,
  8203,
  8239,
  8239,
  8287,
  8287,
  12288,
  12288
  /* IDEOGRAPHIC SPACE */
];
var isNonASCIISpaceCharacter = (character) => inRange(character, non_ASCII_space_characters);
var non_ASCII_controls_characters = [
  /**
   * C.2.2 Non-ASCII control characters
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2
   */
  128,
  159,
  1757,
  1757,
  1807,
  1807,
  6158,
  6158,
  8204,
  8204,
  8205,
  8205,
  8232,
  8232,
  8233,
  8233,
  8288,
  8288,
  8289,
  8289,
  8290,
  8290,
  8291,
  8291,
  8298,
  8303,
  65279,
  65279,
  65529,
  65532,
  119155,
  119162
  /* [MUSICAL CONTROL CHARACTERS] */
];
var non_character_codepoints = [
  /**
   * C.4 Non-character code points
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.4
   */
  64976,
  65007,
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1114110,
  1114111
  /* [NONCHARACTER CODE POINTS] */
];
var prohibited_characters = [
  /**
   * C.2.1 ASCII control characters
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1
   */
  0,
  31,
  127,
  127,
  /**
   * C.8 Change display properties or are deprecated
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.8
   */
  832,
  832,
  833,
  833,
  8206,
  8206,
  8207,
  8207,
  8234,
  8234,
  8235,
  8235,
  8236,
  8236,
  8237,
  8237,
  8238,
  8238,
  8298,
  8298,
  8299,
  8299,
  8300,
  8300,
  8301,
  8301,
  8302,
  8302,
  8303,
  8303,
  /**
   * C.7 Inappropriate for canonical representation
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.7
   */
  12272,
  12283,
  /**
   * C.5 Surrogate codes
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.5
   */
  55296,
  57343,
  /**
   * C.3 Private use
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
   */
  57344,
  63743,
  /**
   * C.6 Inappropriate for plain text
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.6
   */
  65529,
  65529,
  65530,
  65530,
  65531,
  65531,
  65532,
  65532,
  65533,
  65533,
  /**
   * C.9 Tagging characters
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.9
   */
  917505,
  917505,
  917536,
  917631,
  /**
   * C.3 Private use
   * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
   */
  983040,
  1048573,
  1048576,
  1114109
  /* [PRIVATE USE, PLANE 16] */
];
var isProhibitedCharacter = (character) => inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
var bidirectional_r_al = [1470, 1470, 1472, 1472, 1475, 1475, 1488, 1514, 1520, 1524, 1563, 1563, 1567, 1567, 1569, 1594, 1600, 1610, 1645, 1647, 1649, 1749, 1757, 1757, 1765, 1766, 1786, 1790, 1792, 1805, 1808, 1808, 1810, 1836, 1920, 1957, 1969, 1969, 8207, 8207, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65020, 65136, 65140, 65142, 65276];
var isBidirectionalRAL = (character) => inRange(character, bidirectional_r_al);
var bidirectional_l = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 544, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 1013, 1024, 1154, 1162, 1230, 1232, 1269, 1272, 1273, 1280, 1295, 1329, 1366, 1369, 1375, 1377, 1415, 1417, 1417, 2307, 2307, 2309, 2361, 2365, 2368, 2377, 2380, 2384, 2384, 2392, 2401, 2404, 2416, 2434, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2494, 2496, 2503, 2504, 2507, 2508, 2519, 2519, 2524, 2525, 2527, 2529, 2534, 2545, 2548, 2554, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2622, 2624, 2649, 2652, 2654, 2654, 2662, 2671, 2674, 2676, 2691, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2752, 2761, 2761, 2763, 2764, 2768, 2768, 2784, 2784, 2790, 2799, 2818, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2878, 2880, 2880, 2887, 2888, 2891, 2892, 2903, 2903, 2908, 2909, 2911, 2913, 2918, 2928, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3007, 3009, 3010, 3014, 3016, 3018, 3020, 3031, 3031, 3047, 3058, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3137, 3140, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3262, 3264, 3268, 3271, 3272, 3274, 3275, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3392, 3398, 3400, 3402, 3404, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3535, 3537, 3544, 3551, 3570, 3572, 3585, 3632, 3634, 3635, 3648, 3654, 3663, 3675, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3792, 3801, 3804, 3805, 3840, 3863, 3866, 3892, 3894, 3894, 3896, 3896, 3902, 3911, 3913, 3946, 3967, 3967, 3973, 3973, 3976, 3979, 4030, 4037, 4039, 4044, 4047, 4047, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4140, 4145, 4145, 4152, 4152, 4160, 4183, 4256, 4293, 4304, 4344, 4347, 4347, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4961, 4988, 5024, 5108, 5121, 5750, 5761, 5786, 5792, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5941, 5942, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6070, 6078, 6085, 6087, 6088, 6100, 6106, 6108, 6108, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8206, 8206, 8305, 8305, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8509, 8511, 8517, 8521, 8544, 8579, 9014, 9082, 9109, 9109, 9372, 9449, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12588, 12593, 12686, 12688, 12727, 12784, 12828, 12832, 12867, 12896, 12923, 12927, 12976, 12992, 13003, 13008, 13054, 13056, 13174, 13179, 13277, 13280, 13310, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 55296, 64045, 64048, 64106, 64256, 64262, 64275, 64279, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 66304, 66334, 66336, 66339, 66352, 66378, 66560, 66597, 66600, 66637, 118784, 119029, 119040, 119078, 119082, 119142, 119146, 119154, 119171, 119172, 119180, 119209, 119214, 119261, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 12e4, 120002, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120483, 120488, 120777, 131072, 173782, 194560, 195101, 983040, 1048573, 1048576, 1114109];
var isBidirectionalL = (character) => inRange(character, bidirectional_l);
var mapping2space = isNonASCIISpaceCharacter;
var mapping2nothing = isCommonlyMappedToNothing;
var getCodePoint = (character) => character.codePointAt(0);
var first = (x) => x[0];
var last = (x) => x[x.length - 1];
function toCodePoints(input) {
  const codepoints = [];
  const size = input.length;
  for (let i = 0; i < size; i += 1) {
    const before = input.charCodeAt(i);
    if (before >= 55296 && before <= 56319 && size > i + 1) {
      const next = input.charCodeAt(i + 1);
      if (next >= 56320 && next <= 57343) {
        codepoints.push((before - 55296) * 1024 + next - 56320 + 65536);
        i += 1;
        continue;
      }
    }
    codepoints.push(before);
  }
  return codepoints;
}
function saslprep(input) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (typeof input !== "string") {
    throw new TypeError("Expected string.");
  }
  if (input.length === 0) {
    return "";
  }
  const mapped_input = toCodePoints(input).map((character) => mapping2space(character) ? 32 : character).filter((character) => !mapping2nothing(character));
  const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize("NFKC");
  const normalized_map = toCodePoints(normalized_input);
  const hasProhibited = normalized_map.some(isProhibitedCharacter);
  if (hasProhibited) {
    throw new Error("Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3");
  }
  if (opts.allowUnassigned !== true) {
    const hasUnassigned = normalized_map.some(isUnassignedCodePoint);
    if (hasUnassigned) {
      throw new Error("Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5");
    }
  }
  const hasBidiRAL = normalized_map.some(isBidirectionalRAL);
  const hasBidiL = normalized_map.some(isBidirectionalL);
  if (hasBidiRAL && hasBidiL) {
    throw new Error("String must not contain RandALCat and LCat at the same time, see https://tools.ietf.org/html/rfc3454#section-6");
  }
  const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
  const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
    throw new Error("Bidirectional RandALCat character must be the first and the last character of the string, see https://tools.ietf.org/html/rfc3454#section-6");
  }
  return normalized_input;
}
var PDFSecurity = class _PDFSecurity {
  static generateFileID() {
    let info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let infoStr = `${info.CreationDate.getTime()}
`;
    for (let key in info) {
      if (!info.hasOwnProperty(key)) {
        continue;
      }
      infoStr += `${key}: ${info[key].valueOf()}
`;
    }
    return wordArrayToBuffer(import_crypto_js.default.MD5(infoStr));
  }
  static generateRandomWordArray(bytes) {
    return import_crypto_js.default.lib.WordArray.random(bytes);
  }
  static create(document2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!options.ownerPassword && !options.userPassword) {
      return null;
    }
    return new _PDFSecurity(document2, options);
  }
  constructor(document2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!options.ownerPassword && !options.userPassword) {
      throw new Error("None of owner password and user password is defined.");
    }
    this.document = document2;
    this._setupEncryption(options);
  }
  _setupEncryption(options) {
    switch (options.pdfVersion) {
      case "1.4":
      case "1.5":
        this.version = 2;
        break;
      case "1.6":
      case "1.7":
        this.version = 4;
        break;
      case "1.7ext3":
        this.version = 5;
        break;
      default:
        this.version = 1;
        break;
    }
    const encDict = {
      Filter: "Standard"
    };
    switch (this.version) {
      case 1:
      case 2:
      case 4:
        this._setupEncryptionV1V2V4(this.version, encDict, options);
        break;
      case 5:
        this._setupEncryptionV5(encDict, options);
        break;
    }
    this.dictionary = this.document.ref(encDict);
  }
  _setupEncryptionV1V2V4(v, encDict, options) {
    let r, permissions;
    switch (v) {
      case 1:
        r = 2;
        this.keyBits = 40;
        permissions = getPermissionsR2(options.permissions);
        break;
      case 2:
        r = 3;
        this.keyBits = 128;
        permissions = getPermissionsR3(options.permissions);
        break;
      case 4:
        r = 4;
        this.keyBits = 128;
        permissions = getPermissionsR3(options.permissions);
        break;
    }
    const paddedUserPassword = processPasswordR2R3R4(options.userPassword);
    const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
    const ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
    this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
    let userPasswordEntry;
    if (r === 2) {
      userPasswordEntry = getUserPasswordR2(this.encryptionKey);
    } else {
      userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
    }
    encDict.V = v;
    if (v >= 2) {
      encDict.Length = this.keyBits;
    }
    if (v === 4) {
      encDict.CF = {
        StdCF: {
          AuthEvent: "DocOpen",
          CFM: "AESV2",
          Length: this.keyBits / 8
        }
      };
      encDict.StmF = "StdCF";
      encDict.StrF = "StdCF";
    }
    encDict.R = r;
    encDict.O = wordArrayToBuffer(ownerPasswordEntry);
    encDict.U = wordArrayToBuffer(userPasswordEntry);
    encDict.P = permissions;
  }
  _setupEncryptionV5(encDict, options) {
    this.keyBits = 256;
    const permissions = getPermissionsR3(options.permissions);
    const processedUserPassword = processPasswordR5(options.userPassword);
    const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
    this.encryptionKey = getEncryptionKeyR5(_PDFSecurity.generateRandomWordArray);
    const userPasswordEntry = getUserPasswordR5(processedUserPassword, _PDFSecurity.generateRandomWordArray);
    const userKeySalt = import_crypto_js.default.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
    const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
    const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, _PDFSecurity.generateRandomWordArray);
    const ownerKeySalt = import_crypto_js.default.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
    const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
    const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, _PDFSecurity.generateRandomWordArray);
    encDict.V = 5;
    encDict.Length = this.keyBits;
    encDict.CF = {
      StdCF: {
        AuthEvent: "DocOpen",
        CFM: "AESV3",
        Length: this.keyBits / 8
      }
    };
    encDict.StmF = "StdCF";
    encDict.StrF = "StdCF";
    encDict.R = 5;
    encDict.O = wordArrayToBuffer(ownerPasswordEntry);
    encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
    encDict.U = wordArrayToBuffer(userPasswordEntry);
    encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
    encDict.P = permissions;
    encDict.Perms = wordArrayToBuffer(permsEntry);
  }
  getEncryptFn(obj, gen) {
    let digest;
    if (this.version < 5) {
      digest = this.encryptionKey.clone().concat(import_crypto_js.default.lib.WordArray.create([(obj & 255) << 24 | (obj & 65280) << 8 | obj >> 8 & 65280 | gen & 255, (gen & 65280) << 16], 5));
    }
    if (this.version === 1 || this.version === 2) {
      let key2 = import_crypto_js.default.MD5(digest);
      key2.sigBytes = Math.min(16, this.keyBits / 8 + 5);
      return (buffer) => wordArrayToBuffer(import_crypto_js.default.RC4.encrypt(import_crypto_js.default.lib.WordArray.create(buffer), key2).ciphertext);
    }
    let key;
    if (this.version === 4) {
      key = import_crypto_js.default.MD5(digest.concat(import_crypto_js.default.lib.WordArray.create([1933667412], 4)));
    } else {
      key = this.encryptionKey;
    }
    const iv = _PDFSecurity.generateRandomWordArray(16);
    const options = {
      mode: import_crypto_js.default.mode.CBC,
      padding: import_crypto_js.default.pad.Pkcs7,
      iv
    };
    return (buffer) => wordArrayToBuffer(iv.clone().concat(import_crypto_js.default.AES.encrypt(import_crypto_js.default.lib.WordArray.create(buffer), key, options).ciphertext));
  }
  end() {
    this.dictionary.end();
  }
};
function getPermissionsR2() {
  let permissionObject = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  let permissions = 4294967232 >> 0;
  if (permissionObject.printing) {
    permissions |= 4;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  return permissions;
}
function getPermissionsR3() {
  let permissionObject = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  let permissions = 4294963392 >> 0;
  if (permissionObject.printing === "lowResolution") {
    permissions |= 4;
  }
  if (permissionObject.printing === "highResolution") {
    permissions |= 2052;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  if (permissionObject.fillingForms) {
    permissions |= 256;
  }
  if (permissionObject.contentAccessibility) {
    permissions |= 512;
  }
  if (permissionObject.documentAssembly) {
    permissions |= 1024;
  }
  return permissions;
}
function getUserPasswordR2(encryptionKey) {
  return import_crypto_js.default.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
}
function getUserPasswordR3R4(documentId, encryptionKey) {
  const key = encryptionKey.clone();
  let cipher = import_crypto_js.default.MD5(processPasswordR2R3R4().concat(import_crypto_js.default.lib.WordArray.create(documentId)));
  for (let i = 0; i < 20; i++) {
    const xorRound = Math.ceil(key.sigBytes / 4);
    for (let j = 0; j < xorRound; j++) {
      key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);
    }
    cipher = import_crypto_js.default.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher.concat(import_crypto_js.default.lib.WordArray.create(null, 16));
}
function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
  let digest = paddedOwnerPassword;
  let round = r >= 3 ? 51 : 1;
  for (let i = 0; i < round; i++) {
    digest = import_crypto_js.default.MD5(digest);
  }
  const key = digest.clone();
  key.sigBytes = keyBits / 8;
  let cipher = paddedUserPassword;
  round = r >= 3 ? 20 : 1;
  for (let i = 0; i < round; i++) {
    const xorRound = Math.ceil(key.sigBytes / 4);
    for (let j = 0; j < xorRound; j++) {
      key.words[j] = digest.words[j] ^ (i | i << 8 | i << 16 | i << 24);
    }
    cipher = import_crypto_js.default.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher;
}
function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
  let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(import_crypto_js.default.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(import_crypto_js.default.lib.WordArray.create(documentId));
  const round = r >= 3 ? 51 : 1;
  for (let i = 0; i < round; i++) {
    key = import_crypto_js.default.MD5(key);
    key.sigBytes = keyBits / 8;
  }
  return key;
}
function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
  const validationSalt = generateRandomWordArray(8);
  const keySalt = generateRandomWordArray(8);
  return import_crypto_js.default.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
}
function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
  const key = import_crypto_js.default.SHA256(processedUserPassword.clone().concat(userKeySalt));
  const options = {
    mode: import_crypto_js.default.mode.CBC,
    padding: import_crypto_js.default.pad.NoPadding,
    iv: import_crypto_js.default.lib.WordArray.create(null, 16)
  };
  return import_crypto_js.default.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
  const validationSalt = generateRandomWordArray(8);
  const keySalt = generateRandomWordArray(8);
  return import_crypto_js.default.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
}
function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
  const key = import_crypto_js.default.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
  const options = {
    mode: import_crypto_js.default.mode.CBC,
    padding: import_crypto_js.default.pad.NoPadding,
    iv: import_crypto_js.default.lib.WordArray.create(null, 16)
  };
  return import_crypto_js.default.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getEncryptionKeyR5(generateRandomWordArray) {
  return generateRandomWordArray(32);
}
function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
  const cipher = import_crypto_js.default.lib.WordArray.create([lsbFirstWord(permissions), 4294967295, 1415668834], 12).concat(generateRandomWordArray(4));
  const options = {
    mode: import_crypto_js.default.mode.ECB,
    padding: import_crypto_js.default.pad.NoPadding
  };
  return import_crypto_js.default.AES.encrypt(cipher, encryptionKey, options).ciphertext;
}
function processPasswordR2R3R4() {
  let password = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  const out = Buffer.alloc(32);
  const length = password.length;
  let index = 0;
  while (index < length && index < 32) {
    const code = password.charCodeAt(index);
    if (code > 255) {
      throw new Error("Password contains one or more invalid characters.");
    }
    out[index] = code;
    index++;
  }
  while (index < 32) {
    out[index] = PASSWORD_PADDING[index - length];
    index++;
  }
  return import_crypto_js.default.lib.WordArray.create(out);
}
function processPasswordR5() {
  let password = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  password = unescape(encodeURIComponent(saslprep(password)));
  const length = Math.min(127, password.length);
  const out = Buffer.alloc(length);
  for (let i = 0; i < length; i++) {
    out[i] = password.charCodeAt(i);
  }
  return import_crypto_js.default.lib.WordArray.create(out);
}
function lsbFirstWord(data) {
  return (data & 255) << 24 | (data & 65280) << 8 | data >> 8 & 65280 | data >> 24 & 255;
}
function wordArrayToBuffer(wordArray) {
  const byteArray = [];
  for (let i = 0; i < wordArray.sigBytes; i++) {
    byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 255);
  }
  return Buffer.from(byteArray);
}
var PASSWORD_PADDING = [40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122];
var {
  number
} = PDFObject;
var PDFGradient = class {
  constructor(doc) {
    this.doc = doc;
    this.stops = [];
    this.embedded = false;
    this.transform = [1, 0, 0, 1, 0, 0];
  }
  stop(pos, color, opacity) {
    if (opacity == null) {
      opacity = 1;
    }
    color = this.doc._normalizeColor(color);
    if (this.stops.length === 0) {
      if (color.length === 3) {
        this._colorSpace = "DeviceRGB";
      } else if (color.length === 4) {
        this._colorSpace = "DeviceCMYK";
      } else if (color.length === 1) {
        this._colorSpace = "DeviceGray";
      } else {
        throw new Error("Unknown color space");
      }
    } else if (this._colorSpace === "DeviceRGB" && color.length !== 3 || this._colorSpace === "DeviceCMYK" && color.length !== 4 || this._colorSpace === "DeviceGray" && color.length !== 1) {
      throw new Error("All gradient stops must use the same color space");
    }
    opacity = Math.max(0, Math.min(1, opacity));
    this.stops.push([pos, color, opacity]);
    return this;
  }
  setTransform(m11, m12, m21, m22, dx, dy) {
    this.transform = [m11, m12, m21, m22, dx, dy];
    return this;
  }
  embed(m) {
    let fn;
    const stopsLength = this.stops.length;
    if (stopsLength === 0) {
      return;
    }
    this.embedded = true;
    this.matrix = m;
    const last2 = this.stops[stopsLength - 1];
    if (last2[0] < 1) {
      this.stops.push([1, last2[1], last2[2]]);
    }
    const bounds = [];
    const encode = [];
    const stops = [];
    for (let i = 0; i < stopsLength - 1; i++) {
      encode.push(0, 1);
      if (i + 2 !== stopsLength) {
        bounds.push(this.stops[i + 1][0]);
      }
      fn = this.doc.ref({
        FunctionType: 2,
        Domain: [0, 1],
        C0: this.stops[i + 0][1],
        C1: this.stops[i + 1][1],
        N: 1
      });
      stops.push(fn);
      fn.end();
    }
    if (stopsLength === 1) {
      fn = stops[0];
    } else {
      fn = this.doc.ref({
        FunctionType: 3,
        // stitching function
        Domain: [0, 1],
        Functions: stops,
        Bounds: bounds,
        Encode: encode
      });
      fn.end();
    }
    this.id = `Sh${++this.doc._gradCount}`;
    const shader = this.shader(fn);
    shader.end();
    const pattern2 = this.doc.ref({
      Type: "Pattern",
      PatternType: 2,
      Shading: shader,
      Matrix: this.matrix.map(number)
    });
    pattern2.end();
    if (this.stops.some((stop) => stop[2] < 1)) {
      let grad = this.opacityGradient();
      grad._colorSpace = "DeviceGray";
      for (let stop of this.stops) {
        grad.stop(stop[0], [stop[2]]);
      }
      grad = grad.embed(this.matrix);
      const pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
      const form = this.doc.ref({
        Type: "XObject",
        Subtype: "Form",
        FormType: 1,
        BBox: pageBBox,
        Group: {
          Type: "Group",
          S: "Transparency",
          CS: "DeviceGray"
        },
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: grad
          }
        }
      });
      form.write("/Pattern cs /Sh1 scn");
      form.end(`${pageBBox.join(" ")} re f`);
      const gstate = this.doc.ref({
        Type: "ExtGState",
        SMask: {
          Type: "Mask",
          S: "Luminosity",
          G: form
        }
      });
      gstate.end();
      const opacityPattern = this.doc.ref({
        Type: "Pattern",
        PatternType: 1,
        PaintType: 1,
        TilingType: 2,
        BBox: pageBBox,
        XStep: pageBBox[2],
        YStep: pageBBox[3],
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: pattern2
          },
          ExtGState: {
            Gs1: gstate
          }
        }
      });
      opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
      opacityPattern.end(`${pageBBox.join(" ")} re f`);
      this.doc.page.patterns[this.id] = opacityPattern;
    } else {
      this.doc.page.patterns[this.id] = pattern2;
    }
    return pattern2;
  }
  apply(stroke) {
    const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
    const [m11, m12, m21, m22, dx, dy] = this.transform;
    const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
    if (!this.embedded || m.join(" ") !== this.matrix.join(" ")) {
      this.embed(m);
    }
    this.doc._setColorSpace("Pattern", stroke);
    const op = stroke ? "SCN" : "scn";
    return this.doc.addContent(`/${this.id} ${op}`);
  }
};
var PDFLinearGradient = class _PDFLinearGradient extends PDFGradient {
  constructor(doc, x1, y1, x2, y2) {
    super(doc);
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }
  shader(fn) {
    return this.doc.ref({
      ShadingType: 2,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.x2, this.y2],
      Function: fn,
      Extend: [true, true]
    });
  }
  opacityGradient() {
    return new _PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
  }
};
var PDFRadialGradient = class _PDFRadialGradient extends PDFGradient {
  constructor(doc, x1, y1, r1, x2, y2, r2) {
    super(doc);
    this.doc = doc;
    this.x1 = x1;
    this.y1 = y1;
    this.r1 = r1;
    this.x2 = x2;
    this.y2 = y2;
    this.r2 = r2;
  }
  shader(fn) {
    return this.doc.ref({
      ShadingType: 3,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
      Function: fn,
      Extend: [true, true]
    });
  }
  opacityGradient() {
    return new _PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
  }
};
var Gradient = {
  PDFGradient,
  PDFLinearGradient,
  PDFRadialGradient
};
var underlyingColorSpaces = ["DeviceCMYK", "DeviceRGB"];
var PDFTilingPattern = class {
  constructor(doc, bBox, xStep, yStep, stream2) {
    this.doc = doc;
    this.bBox = bBox;
    this.xStep = xStep;
    this.yStep = yStep;
    this.stream = stream2;
  }
  createPattern() {
    const resources = this.doc.ref();
    resources.end();
    const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
    const [m11, m12, m21, m22, dx, dy] = [1, 0, 0, 1, 0, 0];
    const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
    const pattern2 = this.doc.ref({
      Type: "Pattern",
      PatternType: 1,
      // tiling
      PaintType: 2,
      // 1-colored, 2-uncolored
      TilingType: 2,
      // 2-no distortion
      BBox: this.bBox,
      XStep: this.xStep,
      YStep: this.yStep,
      Matrix: m.map((v) => +v.toFixed(5)),
      Resources: resources
    });
    pattern2.end(this.stream);
    return pattern2;
  }
  embedPatternColorSpaces() {
    underlyingColorSpaces.forEach((csName) => {
      const csId = this.getPatternColorSpaceId(csName);
      if (this.doc.page.colorSpaces[csId]) return;
      const cs = this.doc.ref(["Pattern", csName]);
      cs.end();
      this.doc.page.colorSpaces[csId] = cs;
    });
  }
  getPatternColorSpaceId(underlyingColorspace) {
    return `CsP${underlyingColorspace}`;
  }
  embed() {
    if (!this.id) {
      this.doc._patternCount = this.doc._patternCount + 1;
      this.id = "P" + this.doc._patternCount;
      this.pattern = this.createPattern();
    }
    if (!this.doc.page.patterns[this.id]) {
      this.doc.page.patterns[this.id] = this.pattern;
    }
  }
  apply(stroke, patternColor) {
    this.embedPatternColorSpaces();
    this.embed();
    const normalizedColor = this.doc._normalizeColor(patternColor);
    if (!normalizedColor) throw Error(`invalid pattern color. (value: ${patternColor})`);
    const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
    this.doc._setColorSpace(csId, stroke);
    const op = stroke ? "SCN" : "scn";
    return this.doc.addContent(`${normalizedColor.join(" ")} /${this.id} ${op}`);
  }
};
var pattern = {
  PDFTilingPattern
};
var {
  PDFGradient: PDFGradient$1,
  PDFLinearGradient: PDFLinearGradient$1,
  PDFRadialGradient: PDFRadialGradient$1
} = Gradient;
var {
  PDFTilingPattern: PDFTilingPattern$1
} = pattern;
var ColorMixin = {
  initColor() {
    this._opacityRegistry = {};
    this._opacityCount = 0;
    this._patternCount = 0;
    return this._gradCount = 0;
  },
  _normalizeColor(color) {
    if (typeof color === "string") {
      if (color.charAt(0) === "#") {
        if (color.length === 4) {
          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
        }
        const hex = parseInt(color.slice(1), 16);
        color = [hex >> 16, hex >> 8 & 255, hex & 255];
      } else if (namedColors[color]) {
        color = namedColors[color];
      }
    }
    if (Array.isArray(color)) {
      if (color.length === 3) {
        color = color.map((part) => part / 255);
      } else if (color.length === 4) {
        color = color.map((part) => part / 100);
      }
      return color;
    }
    return null;
  },
  _setColor(color, stroke) {
    if (color instanceof PDFGradient$1) {
      color.apply(stroke);
      return true;
    } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {
      color[0].apply(stroke, color[1]);
      return true;
    }
    return this._setColorCore(color, stroke);
  },
  _setColorCore(color, stroke) {
    color = this._normalizeColor(color);
    if (!color) {
      return false;
    }
    const op = stroke ? "SCN" : "scn";
    const space = this._getColorSpace(color);
    this._setColorSpace(space, stroke);
    color = color.join(" ");
    this.addContent(`${color} ${op}`);
    return true;
  },
  _setColorSpace(space, stroke) {
    const op = stroke ? "CS" : "cs";
    return this.addContent(`/${space} ${op}`);
  },
  _getColorSpace(color) {
    return color.length === 4 ? "DeviceCMYK" : "DeviceRGB";
  },
  fillColor(color, opacity) {
    const set = this._setColor(color, false);
    if (set) {
      this.fillOpacity(opacity);
    }
    this._fillColor = [color, opacity];
    return this;
  },
  strokeColor(color, opacity) {
    const set = this._setColor(color, true);
    if (set) {
      this.strokeOpacity(opacity);
    }
    return this;
  },
  opacity(opacity) {
    this._doOpacity(opacity, opacity);
    return this;
  },
  fillOpacity(opacity) {
    this._doOpacity(opacity, null);
    return this;
  },
  strokeOpacity(opacity) {
    this._doOpacity(null, opacity);
    return this;
  },
  _doOpacity(fillOpacity, strokeOpacity) {
    let dictionary, name;
    if (fillOpacity == null && strokeOpacity == null) {
      return;
    }
    if (fillOpacity != null) {
      fillOpacity = Math.max(0, Math.min(1, fillOpacity));
    }
    if (strokeOpacity != null) {
      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
    }
    const key = `${fillOpacity}_${strokeOpacity}`;
    if (this._opacityRegistry[key]) {
      [dictionary, name] = this._opacityRegistry[key];
    } else {
      dictionary = {
        Type: "ExtGState"
      };
      if (fillOpacity != null) {
        dictionary.ca = fillOpacity;
      }
      if (strokeOpacity != null) {
        dictionary.CA = strokeOpacity;
      }
      dictionary = this.ref(dictionary);
      dictionary.end();
      const id = ++this._opacityCount;
      name = `Gs${id}`;
      this._opacityRegistry[key] = [dictionary, name];
    }
    this.page.ext_gstates[name] = dictionary;
    return this.addContent(`/${name} gs`);
  },
  linearGradient(x1, y1, x2, y2) {
    return new PDFLinearGradient$1(this, x1, y1, x2, y2);
  },
  radialGradient(x1, y1, r1, x2, y2, r2) {
    return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);
  },
  pattern(bbox, xStep, yStep, stream2) {
    return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream2);
  }
};
var namedColors = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var cx;
var cy;
var px;
var py;
var sx;
var sy;
cx = cy = px = py = sx = sy = 0;
var parameters = {
  A: 7,
  a: 7,
  C: 6,
  c: 6,
  H: 1,
  h: 1,
  L: 2,
  l: 2,
  M: 2,
  m: 2,
  Q: 4,
  q: 4,
  S: 4,
  s: 4,
  T: 2,
  t: 2,
  V: 1,
  v: 1,
  Z: 0,
  z: 0
};
var parse = function(path3) {
  let cmd;
  const ret = [];
  let args = [];
  let curArg = "";
  let foundDecimal = false;
  let params = 0;
  for (let c of path3) {
    if (parameters[c] != null) {
      params = parameters[c];
      if (cmd) {
        if (curArg.length > 0) {
          args[args.length] = +curArg;
        }
        ret[ret.length] = {
          cmd,
          args
        };
        args = [];
        curArg = "";
        foundDecimal = false;
      }
      cmd = c;
    } else if ([" ", ","].includes(c) || c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== "e" || c === "." && foundDecimal) {
      if (curArg.length === 0) {
        continue;
      }
      if (args.length === params) {
        ret[ret.length] = {
          cmd,
          args
        };
        args = [+curArg];
        if (cmd === "M") {
          cmd = "L";
        }
        if (cmd === "m") {
          cmd = "l";
        }
      } else {
        args[args.length] = +curArg;
      }
      foundDecimal = c === ".";
      curArg = ["-", "."].includes(c) ? c : "";
    } else {
      curArg += c;
      if (c === ".") {
        foundDecimal = true;
      }
    }
  }
  if (curArg.length > 0) {
    if (args.length === params) {
      ret[ret.length] = {
        cmd,
        args
      };
      args = [+curArg];
      if (cmd === "M") {
        cmd = "L";
      }
      if (cmd === "m") {
        cmd = "l";
      }
    } else {
      args[args.length] = +curArg;
    }
  }
  ret[ret.length] = {
    cmd,
    args
  };
  return ret;
};
var apply = function(commands, doc) {
  cx = cy = px = py = sx = sy = 0;
  for (let i = 0; i < commands.length; i++) {
    const c = commands[i];
    if (typeof runners[c.cmd] === "function") {
      runners[c.cmd](doc, c.args);
    }
  }
};
var runners = {
  M(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  m(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  C(doc, a) {
    cx = a[4];
    cy = a[5];
    px = a[2];
    py = a[3];
    return doc.bezierCurveTo(...a);
  },
  c(doc, a) {
    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
    px = cx + a[2];
    py = cy + a[3];
    cx += a[4];
    return cy += a[5];
  },
  S(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
    px = a[0];
    py = a[1];
    cx = a[2];
    return cy = a[3];
  },
  s(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  Q(doc, a) {
    px = a[0];
    py = a[1];
    cx = a[2];
    cy = a[3];
    return doc.quadraticCurveTo(a[0], a[1], cx, cy);
  },
  q(doc, a) {
    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  T(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, a[0], a[1]);
    px = cx - (px - cx);
    py = cy - (py - cy);
    cx = a[0];
    return cy = a[1];
  },
  t(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
    cx += a[0];
    return cy += a[1];
  },
  A(doc, a) {
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  a(doc, a) {
    a[5] += cx;
    a[6] += cy;
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  L(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  l(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  H(doc, a) {
    cx = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  h(doc, a) {
    cx += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  V(doc, a) {
    cy = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  v(doc, a) {
    cy += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  Z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  },
  z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  }
};
var solveArc = function(doc, x, y, coords) {
  const [rx, ry, rot, large, sweep, ex, ey] = coords;
  const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
  for (let seg of segs) {
    const bez = segmentToBezier(...seg);
    doc.bezierCurveTo(...bez);
  }
};
var arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  const th = rotateX * (Math.PI / 180);
  const sin_th = Math.sin(th);
  const cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  let pl = px * px / (rx * rx) + py * py / (ry * ry);
  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }
  const a00 = cos_th / rx;
  const a01 = sin_th / rx;
  const a10 = -sin_th / ry;
  const a11 = cos_th / ry;
  const x0 = a00 * ox + a01 * oy;
  const y0 = a10 * ox + a11 * oy;
  const x1 = a00 * x + a01 * y;
  const y1 = a10 * x + a11 * y;
  const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
  let sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0) {
    sfactor_sq = 0;
  }
  let sfactor = Math.sqrt(sfactor_sq);
  if (sweep === large) {
    sfactor = -sfactor;
  }
  const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
  const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
  const th0 = Math.atan2(y0 - yc, x0 - xc);
  const th1 = Math.atan2(y1 - yc, x1 - xc);
  let th_arc = th1 - th0;
  if (th_arc < 0 && sweep === 1) {
    th_arc += 2 * Math.PI;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= 2 * Math.PI;
  }
  const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 1e-3)));
  const result = [];
  for (let i = 0; i < segments; i++) {
    const th2 = th0 + i * th_arc / segments;
    const th3 = th0 + (i + 1) * th_arc / segments;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }
  return result;
};
var segmentToBezier = function(cx2, cy2, th0, th1, rx, ry, sin_th, cos_th) {
  const a00 = cos_th * rx;
  const a01 = -sin_th * ry;
  const a10 = sin_th * rx;
  const a11 = cos_th * ry;
  const th_half = 0.5 * (th1 - th0);
  const t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
  const x1 = cx2 + Math.cos(th0) - t * Math.sin(th0);
  const y1 = cy2 + Math.sin(th0) + t * Math.cos(th0);
  const x3 = cx2 + Math.cos(th1);
  const y3 = cy2 + Math.sin(th1);
  const x2 = x3 + t * Math.sin(th1);
  const y2 = y3 - t * Math.cos(th1);
  return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
};
var SVGPath = class {
  static apply(doc, path3) {
    const commands = parse(path3);
    apply(commands, doc);
  }
};
var {
  number: number$1
} = PDFObject;
var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
var VectorMixin = {
  initVector() {
    this._ctm = [1, 0, 0, 1, 0, 0];
    return this._ctmStack = [];
  },
  save() {
    this._ctmStack.push(this._ctm.slice());
    return this.addContent("q");
  },
  restore() {
    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
    return this.addContent("Q");
  },
  closePath() {
    return this.addContent("h");
  },
  lineWidth(w) {
    return this.addContent(`${number$1(w)} w`);
  },
  _CAP_STYLES: {
    BUTT: 0,
    ROUND: 1,
    SQUARE: 2
  },
  lineCap(c) {
    if (typeof c === "string") {
      c = this._CAP_STYLES[c.toUpperCase()];
    }
    return this.addContent(`${c} J`);
  },
  _JOIN_STYLES: {
    MITER: 0,
    ROUND: 1,
    BEVEL: 2
  },
  lineJoin(j) {
    if (typeof j === "string") {
      j = this._JOIN_STYLES[j.toUpperCase()];
    }
    return this.addContent(`${j} j`);
  },
  miterLimit(m) {
    return this.addContent(`${number$1(m)} M`);
  },
  dash(length) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const originalLength = length;
    if (!Array.isArray(length)) {
      length = [length, options.space || length];
    }
    const valid = length.every((x) => Number.isFinite(x) && x > 0);
    if (!valid) {
      throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);
    }
    length = length.map(number$1).join(" ");
    return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);
  },
  undash() {
    return this.addContent("[] 0 d");
  },
  moveTo(x, y) {
    return this.addContent(`${number$1(x)} ${number$1(y)} m`);
  },
  lineTo(x, y) {
    return this.addContent(`${number$1(x)} ${number$1(y)} l`);
  },
  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
    return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x)} ${number$1(y)} c`);
  },
  quadraticCurveTo(cpx, cpy, x, y) {
    return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x)} ${number$1(y)} v`);
  },
  rect(x, y, w, h) {
    return this.addContent(`${number$1(x)} ${number$1(y)} ${number$1(w)} ${number$1(h)} re`);
  },
  roundedRect(x, y, w, h, r) {
    if (r == null) {
      r = 0;
    }
    r = Math.min(r, 0.5 * w, 0.5 * h);
    const c = r * (1 - KAPPA);
    this.moveTo(x + r, y);
    this.lineTo(x + w - r, y);
    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
    this.lineTo(x + w, y + h - r);
    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
    this.lineTo(x + r, y + h);
    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
    this.lineTo(x, y + r);
    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
    return this.closePath();
  },
  ellipse(x, y, r1, r2) {
    if (r2 == null) {
      r2 = r1;
    }
    x -= r1;
    y -= r2;
    const ox = r1 * KAPPA;
    const oy = r2 * KAPPA;
    const xe = x + r1 * 2;
    const ye = y + r2 * 2;
    const xm = x + r1;
    const ym = y + r2;
    this.moveTo(x, ym);
    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
    return this.closePath();
  },
  circle(x, y, radius) {
    return this.ellipse(x, y, radius);
  },
  arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    if (anticlockwise == null) {
      anticlockwise = false;
    }
    const TWO_PI = 2 * Math.PI;
    const HALF_PI = 0.5 * Math.PI;
    let deltaAng = endAngle - startAngle;
    if (Math.abs(deltaAng) > TWO_PI) {
      deltaAng = TWO_PI;
    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
      const dir = anticlockwise ? -1 : 1;
      deltaAng = dir * TWO_PI + deltaAng;
    }
    const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
    const segAng = deltaAng / numSegs;
    const handleLen = segAng / HALF_PI * KAPPA * radius;
    let curAng = startAngle;
    let deltaCx = -Math.sin(curAng) * handleLen;
    let deltaCy = Math.cos(curAng) * handleLen;
    let ax = x + Math.cos(curAng) * radius;
    let ay = y + Math.sin(curAng) * radius;
    this.moveTo(ax, ay);
    for (let segIdx = 0; segIdx < numSegs; segIdx++) {
      const cp1x = ax + deltaCx;
      const cp1y = ay + deltaCy;
      curAng += segAng;
      ax = x + Math.cos(curAng) * radius;
      ay = y + Math.sin(curAng) * radius;
      deltaCx = -Math.sin(curAng) * handleLen;
      deltaCy = Math.cos(curAng) * handleLen;
      const cp2x = ax - deltaCx;
      const cp2y = ay - deltaCy;
      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
    }
    return this;
  },
  polygon() {
    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
      points[_key] = arguments[_key];
    }
    this.moveTo(...points.shift() || []);
    for (let point of points) {
      this.lineTo(...point || []);
    }
    return this.closePath();
  },
  path(path3) {
    SVGPath.apply(this, path3);
    return this;
  },
  _windingRule(rule) {
    if (/even-?odd/.test(rule)) {
      return "*";
    }
    return "";
  },
  fill(color, rule) {
    if (/(even-?odd)|(non-?zero)/.test(color)) {
      rule = color;
      color = null;
    }
    if (color) {
      this.fillColor(color);
    }
    return this.addContent(`f${this._windingRule(rule)}`);
  },
  stroke(color) {
    if (color) {
      this.strokeColor(color);
    }
    return this.addContent("S");
  },
  fillAndStroke(fillColor, strokeColor, rule) {
    if (strokeColor == null) {
      strokeColor = fillColor;
    }
    const isFillRule = /(even-?odd)|(non-?zero)/;
    if (isFillRule.test(fillColor)) {
      rule = fillColor;
      fillColor = null;
    }
    if (isFillRule.test(strokeColor)) {
      rule = strokeColor;
      strokeColor = fillColor;
    }
    if (fillColor) {
      this.fillColor(fillColor);
      this.strokeColor(strokeColor);
    }
    return this.addContent(`B${this._windingRule(rule)}`);
  },
  clip(rule) {
    return this.addContent(`W${this._windingRule(rule)} n`);
  },
  transform(m11, m12, m21, m22, dx, dy) {
    if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {
      return this;
    }
    const m = this._ctm;
    const [m0, m1, m2, m3, m4, m5] = m;
    m[0] = m0 * m11 + m2 * m12;
    m[1] = m1 * m11 + m3 * m12;
    m[2] = m0 * m21 + m2 * m22;
    m[3] = m1 * m21 + m3 * m22;
    m[4] = m0 * dx + m2 * dy + m4;
    m[5] = m1 * dx + m3 * dy + m5;
    const values = [m11, m12, m21, m22, dx, dy].map((v) => number$1(v)).join(" ");
    return this.addContent(`${values} cm`);
  },
  translate(x, y) {
    return this.transform(1, 0, 0, 1, x, y);
  },
  rotate(angle) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let y;
    const rad = angle * Math.PI / 180;
    const cos = Math.cos(rad);
    const sin = Math.sin(rad);
    let x = y = 0;
    if (options.origin != null) {
      [x, y] = options.origin;
      const x1 = x * cos - y * sin;
      const y1 = x * sin + y * cos;
      x -= x1;
      y -= y1;
    }
    return this.transform(cos, sin, -sin, cos, x, y);
  },
  scale(xFactor, yFactor) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let y;
    if (yFactor == null) {
      yFactor = xFactor;
    }
    if (typeof yFactor === "object") {
      options = yFactor;
      yFactor = xFactor;
    }
    let x = y = 0;
    if (options.origin != null) {
      [x, y] = options.origin;
      x -= xFactor * x;
      y -= yFactor * y;
    }
    return this.transform(xFactor, 0, 0, yFactor, x, y);
  }
};
var WIN_ANSI_MAP = {
  402: 131,
  8211: 150,
  8212: 151,
  8216: 145,
  8217: 146,
  8218: 130,
  8220: 147,
  8221: 148,
  8222: 132,
  8224: 134,
  8225: 135,
  8226: 149,
  8230: 133,
  8364: 128,
  8240: 137,
  8249: 139,
  8250: 155,
  710: 136,
  8482: 153,
  338: 140,
  339: 156,
  732: 152,
  352: 138,
  353: 154,
  376: 159,
  381: 142,
  382: 158
};
var characters = `.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
  
space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question
  
at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore
  
grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef
  
Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis
  
space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown
  
Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls
  
agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis`.split(/\s+/);
var AFMFont = class _AFMFont {
  static open(filename) {
    return new _AFMFont(fs.readFileSync(filename, "utf8"));
  }
  constructor(contents) {
    this.contents = contents;
    this.attributes = {};
    this.glyphWidths = {};
    this.boundingBoxes = {};
    this.kernPairs = {};
    this.parse();
    this.charWidths = new Array(256);
    for (let char = 0; char <= 255; char++) {
      this.charWidths[char] = this.glyphWidths[characters[char]];
    }
    this.bbox = this.attributes["FontBBox"].split(/\s+/).map((e) => +e);
    this.ascender = +(this.attributes["Ascender"] || 0);
    this.descender = +(this.attributes["Descender"] || 0);
    this.xHeight = +(this.attributes["XHeight"] || 0);
    this.capHeight = +(this.attributes["CapHeight"] || 0);
    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
  }
  parse() {
    let section = "";
    for (let line of this.contents.split("\n")) {
      var match;
      var a;
      if (match = line.match(/^Start(\w+)/)) {
        section = match[1];
        continue;
      } else if (match = line.match(/^End(\w+)/)) {
        section = "";
        continue;
      }
      switch (section) {
        case "FontMetrics":
          match = line.match(/(^\w+)\s+(.*)/);
          var key = match[1];
          var value = match[2];
          if (a = this.attributes[key]) {
            if (!Array.isArray(a)) {
              a = this.attributes[key] = [a];
            }
            a.push(value);
          } else {
            this.attributes[key] = value;
          }
          break;
        case "CharMetrics":
          if (!/^CH?\s/.test(line)) {
            continue;
          }
          var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
          this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
          break;
        case "KernPairs":
          match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
          if (match) {
            this.kernPairs[match[1] + "\0" + match[2]] = parseInt(match[3]);
          }
          break;
      }
    }
  }
  encodeText(text) {
    const res = [];
    for (let i = 0, len = text.length; i < len; i++) {
      let char = text.charCodeAt(i);
      char = WIN_ANSI_MAP[char] || char;
      res.push(char.toString(16));
    }
    return res;
  }
  glyphsForString(string) {
    const glyphs = [];
    for (let i = 0, len = string.length; i < len; i++) {
      const charCode = string.charCodeAt(i);
      glyphs.push(this.characterToGlyph(charCode));
    }
    return glyphs;
  }
  characterToGlyph(character) {
    return characters[WIN_ANSI_MAP[character] || character] || ".notdef";
  }
  widthOfGlyph(glyph) {
    return this.glyphWidths[glyph] || 0;
  }
  getKernPair(left, right) {
    return this.kernPairs[left + "\0" + right] || 0;
  }
  advancesForGlyphs(glyphs) {
    const advances = [];
    for (let index = 0; index < glyphs.length; index++) {
      const left = glyphs[index];
      const right = glyphs[index + 1];
      advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
    }
    return advances;
  }
};
var PDFFont = class {
  constructor() {
  }
  encode() {
    throw new Error("Must be implemented by subclasses");
  }
  widthOfString() {
    throw new Error("Must be implemented by subclasses");
  }
  ref() {
    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
  }
  finalize() {
    if (this.embedded || this.dictionary == null) {
      return;
    }
    this.embed();
    return this.embedded = true;
  }
  embed() {
    throw new Error("Must be implemented by subclasses");
  }
  lineHeight(size, includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }
    const gap = includeGap ? this.lineGap : 0;
    return (this.ascender + gap - this.descender) / 1e3 * size;
  }
};
var STANDARD_FONTS = {
  Courier() {
    return fs.readFileSync(__dirname + "/data/Courier.afm", "utf8");
  },
  "Courier-Bold"() {
    return fs.readFileSync(__dirname + "/data/Courier-Bold.afm", "utf8");
  },
  "Courier-Oblique"() {
    return fs.readFileSync(__dirname + "/data/Courier-Oblique.afm", "utf8");
  },
  "Courier-BoldOblique"() {
    return fs.readFileSync(__dirname + "/data/Courier-BoldOblique.afm", "utf8");
  },
  Helvetica() {
    return fs.readFileSync(__dirname + "/data/Helvetica.afm", "utf8");
  },
  "Helvetica-Bold"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-Bold.afm", "utf8");
  },
  "Helvetica-Oblique"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-Oblique.afm", "utf8");
  },
  "Helvetica-BoldOblique"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-BoldOblique.afm", "utf8");
  },
  "Times-Roman"() {
    return fs.readFileSync(__dirname + "/data/Times-Roman.afm", "utf8");
  },
  "Times-Bold"() {
    return fs.readFileSync(__dirname + "/data/Times-Bold.afm", "utf8");
  },
  "Times-Italic"() {
    return fs.readFileSync(__dirname + "/data/Times-Italic.afm", "utf8");
  },
  "Times-BoldItalic"() {
    return fs.readFileSync(__dirname + "/data/Times-BoldItalic.afm", "utf8");
  },
  Symbol() {
    return fs.readFileSync(__dirname + "/data/Symbol.afm", "utf8");
  },
  ZapfDingbats() {
    return fs.readFileSync(__dirname + "/data/ZapfDingbats.afm", "utf8");
  }
};
var StandardFont = class extends PDFFont {
  constructor(document2, name, id) {
    super();
    this.document = document2;
    this.name = name;
    this.id = id;
    this.font = new AFMFont(STANDARD_FONTS[this.name]());
    ({
      ascender: this.ascender,
      descender: this.descender,
      bbox: this.bbox,
      lineGap: this.lineGap,
      xHeight: this.xHeight,
      capHeight: this.capHeight
    } = this.font);
  }
  embed() {
    this.dictionary.data = {
      Type: "Font",
      BaseFont: this.name,
      Subtype: "Type1",
      Encoding: "WinAnsiEncoding"
    };
    return this.dictionary.end();
  }
  encode(text) {
    const encoded = this.font.encodeText(text);
    const glyphs = this.font.glyphsForString(`${text}`);
    const advances = this.font.advancesForGlyphs(glyphs);
    const positions = [];
    for (let i = 0; i < glyphs.length; i++) {
      const glyph = glyphs[i];
      positions.push({
        xAdvance: advances[i],
        yAdvance: 0,
        xOffset: 0,
        yOffset: 0,
        advanceWidth: this.font.widthOfGlyph(glyph)
      });
    }
    return [encoded, positions];
  }
  widthOfString(string, size) {
    const glyphs = this.font.glyphsForString(`${string}`);
    const advances = this.font.advancesForGlyphs(glyphs);
    let width = 0;
    for (let advance of advances) {
      width += advance;
    }
    const scale = size / 1e3;
    return width * scale;
  }
  static isStandardFont(name) {
    return name in STANDARD_FONTS;
  }
};
var toHex = function(num) {
  return `0000${num.toString(16)}`.slice(-4);
};
var EmbeddedFont = class extends PDFFont {
  constructor(document2, font, id) {
    super();
    this.document = document2;
    this.font = font;
    this.id = id;
    this.subset = this.font.createSubset();
    this.unicode = [[0]];
    this.widths = [this.font.getGlyph(0).advanceWidth];
    this.name = this.font.postscriptName;
    this.scale = 1e3 / this.font.unitsPerEm;
    this.ascender = this.font.ascent * this.scale;
    this.descender = this.font.descent * this.scale;
    this.xHeight = this.font.xHeight * this.scale;
    this.capHeight = this.font.capHeight * this.scale;
    this.lineGap = this.font.lineGap * this.scale;
    this.bbox = this.font.bbox;
    if (document2.options.fontLayoutCache !== false) {
      this.layoutCache = /* @__PURE__ */ Object.create(null);
    }
  }
  layoutRun(text, features) {
    const run = this.font.layout(text, features);
    for (let i = 0; i < run.positions.length; i++) {
      const position = run.positions[i];
      for (let key in position) {
        position[key] *= this.scale;
      }
      position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
    }
    return run;
  }
  layoutCached(text) {
    if (!this.layoutCache) {
      return this.layoutRun(text);
    }
    let cached;
    if (cached = this.layoutCache[text]) {
      return cached;
    }
    const run = this.layoutRun(text);
    this.layoutCache[text] = run;
    return run;
  }
  layout(text, features, onlyWidth) {
    if (features) {
      return this.layoutRun(text, features);
    }
    let glyphs = onlyWidth ? null : [];
    let positions = onlyWidth ? null : [];
    let advanceWidth = 0;
    let last2 = 0;
    let index = 0;
    while (index <= text.length) {
      var needle;
      if (index === text.length && last2 < index || (needle = text.charAt(index), [" ", "	"].includes(needle))) {
        const run = this.layoutCached(text.slice(last2, ++index));
        if (!onlyWidth) {
          glyphs = glyphs.concat(run.glyphs);
          positions = positions.concat(run.positions);
        }
        advanceWidth += run.advanceWidth;
        last2 = index;
      } else {
        index++;
      }
    }
    return {
      glyphs,
      positions,
      advanceWidth
    };
  }
  encode(text, features) {
    const {
      glyphs,
      positions
    } = this.layout(text, features);
    const res = [];
    for (let i = 0; i < glyphs.length; i++) {
      const glyph = glyphs[i];
      const gid = this.subset.includeGlyph(glyph.id);
      res.push(`0000${gid.toString(16)}`.slice(-4));
      if (this.widths[gid] == null) {
        this.widths[gid] = glyph.advanceWidth * this.scale;
      }
      if (this.unicode[gid] == null) {
        this.unicode[gid] = glyph.codePoints;
      }
    }
    return [res, positions];
  }
  widthOfString(string, size, features) {
    const width = this.layout(string, features, true).advanceWidth;
    const scale = size / 1e3;
    return width * scale;
  }
  embed() {
    const isCFF = this.subset.cff != null;
    const fontFile = this.document.ref();
    if (isCFF) {
      fontFile.data.Subtype = "CIDFontType0C";
    }
    this.subset.encodeStream().on("data", (data) => fontFile.write(data)).on("end", () => fontFile.end());
    const familyClass = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : void 0) || 0) >> 8;
    let flags = 0;
    if (this.font.post.isFixedPitch) {
      flags |= 1 << 0;
    }
    if (1 <= familyClass && familyClass <= 7) {
      flags |= 1 << 1;
    }
    flags |= 1 << 2;
    if (familyClass === 10) {
      flags |= 1 << 3;
    }
    if (this.font.head.macStyle.italic) {
      flags |= 1 << 6;
    }
    const tag = [1, 2, 3, 4, 5, 6].map((i) => String.fromCharCode((this.id.charCodeAt(i) || 73) + 17)).join("");
    const name = tag + "+" + this.font.postscriptName;
    const {
      bbox
    } = this.font;
    const descriptor = this.document.ref({
      Type: "FontDescriptor",
      FontName: name,
      Flags: flags,
      FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
      ItalicAngle: this.font.italicAngle,
      Ascent: this.ascender,
      Descent: this.descender,
      CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
      XHeight: (this.font.xHeight || 0) * this.scale,
      StemV: 0
    });
    if (isCFF) {
      descriptor.data.FontFile3 = fontFile;
    } else {
      descriptor.data.FontFile2 = fontFile;
    }
    if (this.document.subset) {
      const CIDSet = Buffer.from("FFFFFFFFC0", "hex");
      const CIDSetRef = this.document.ref();
      CIDSetRef.write(CIDSet);
      CIDSetRef.end();
      descriptor.data.CIDSet = CIDSetRef;
    }
    descriptor.end();
    const descendantFontData = {
      Type: "Font",
      Subtype: "CIDFontType0",
      BaseFont: name,
      CIDSystemInfo: {
        Registry: new String("Adobe"),
        Ordering: new String("Identity"),
        Supplement: 0
      },
      FontDescriptor: descriptor,
      W: [0, this.widths]
    };
    if (!isCFF) {
      descendantFontData.Subtype = "CIDFontType2";
      descendantFontData.CIDToGIDMap = "Identity";
    }
    const descendantFont = this.document.ref(descendantFontData);
    descendantFont.end();
    this.dictionary.data = {
      Type: "Font",
      Subtype: "Type0",
      BaseFont: name,
      Encoding: "Identity-H",
      DescendantFonts: [descendantFont],
      ToUnicode: this.toUnicodeCmap()
    };
    return this.dictionary.end();
  }
  // Maps the glyph ids encoded in the PDF back to unicode strings
  // Because of ligature substitutions and the like, there may be one or more
  // unicode characters represented by each glyph.
  toUnicodeCmap() {
    const cmap = this.document.ref();
    const entries = [];
    for (let codePoints of this.unicode) {
      const encoded = [];
      for (let value of codePoints) {
        if (value > 65535) {
          value -= 65536;
          encoded.push(toHex(value >>> 10 & 1023 | 55296));
          value = 56320 | value & 1023;
        }
        encoded.push(toHex(value));
      }
      entries.push(`<${encoded.join(" ")}>`);
    }
    const chunkSize = 256;
    const chunks = Math.ceil(entries.length / chunkSize);
    const ranges = [];
    for (let i = 0; i < chunks; i++) {
      const start = i * chunkSize;
      const end = Math.min((i + 1) * chunkSize, entries.length);
      ranges.push(`<${toHex(start)}> <${toHex(end - 1)}> [${entries.slice(start, end).join(" ")}]`);
    }
    cmap.end(`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
1 beginbfrange
${ranges.join("\n")}
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end`);
    return cmap;
  }
};
var PDFFontFactory = class {
  static open(document2, src, family, id) {
    let font;
    if (typeof src === "string") {
      if (StandardFont.isStandardFont(src)) {
        return new StandardFont(document2, src, id);
      }
      src = fs.readFileSync(src);
    }
    if (Buffer.isBuffer(src)) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(src, family);
    } else if (src instanceof Uint8Array) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(Buffer.from(src), family);
    } else if (src instanceof ArrayBuffer) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(Buffer.from(new Uint8Array(src)), family);
    }
    if (font == null) {
      throw new Error("Not a supported font format or standard PDF font.");
    }
    return new EmbeddedFont(document2, font, id);
  }
};
var FontsMixin = {
  initFonts() {
    let defaultFont = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "Helvetica";
    this._fontFamilies = {};
    this._fontCount = 0;
    this._fontSize = 12;
    this._font = null;
    this._registeredFonts = {};
    if (defaultFont) {
      this.font(defaultFont);
    }
  },
  font(src, family, size) {
    let cacheKey, font;
    if (typeof family === "number") {
      size = family;
      family = null;
    }
    if (typeof src === "string" && this._registeredFonts[src]) {
      cacheKey = src;
      ({
        src,
        family
      } = this._registeredFonts[src]);
    } else {
      cacheKey = family || src;
      if (typeof cacheKey !== "string") {
        cacheKey = null;
      }
    }
    if (size != null) {
      this.fontSize(size);
    }
    if (font = this._fontFamilies[cacheKey]) {
      this._font = font;
      return this;
    }
    const id = `F${++this._fontCount}`;
    this._font = PDFFontFactory.open(this, src, family, id);
    if (font = this._fontFamilies[this._font.name]) {
      this._font = font;
      return this;
    }
    if (cacheKey) {
      this._fontFamilies[cacheKey] = this._font;
    }
    if (this._font.name) {
      this._fontFamilies[this._font.name] = this._font;
    }
    return this;
  },
  fontSize(_fontSize) {
    this._fontSize = _fontSize;
    return this;
  },
  currentLineHeight(includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }
    return this._font.lineHeight(this._fontSize, includeGap);
  },
  registerFont(name, src, family) {
    this._registeredFonts[name] = {
      src,
      family
    };
    return this;
  }
};
var SOFT_HYPHEN = "\xAD";
var HYPHEN = "-";
var LineWrapper = class extends EventEmitter {
  constructor(document2, options) {
    super();
    this.document = document2;
    this.indent = options.indent || 0;
    this.characterSpacing = options.characterSpacing || 0;
    this.wordSpacing = options.wordSpacing === 0;
    this.columns = options.columns || 1;
    this.columnGap = options.columnGap != null ? options.columnGap : 18;
    this.lineWidth = (options.width - this.columnGap * (this.columns - 1)) / this.columns;
    this.spaceLeft = this.lineWidth;
    this.startX = this.document.x;
    this.startY = this.document.y;
    this.column = 1;
    this.ellipsis = options.ellipsis;
    this.continuedX = 0;
    this.features = options.features;
    if (options.height != null) {
      this.height = options.height;
      this.maxY = this.startY + options.height;
    } else {
      this.maxY = this.document.page.maxY();
    }
    this.on("firstLine", (options2) => {
      const indent = this.continuedX || this.indent;
      this.document.x += indent;
      this.lineWidth -= indent;
      return this.once("line", () => {
        this.document.x -= indent;
        this.lineWidth += indent;
        if (options2.continued && !this.continuedX) {
          this.continuedX = this.indent;
        }
        if (!options2.continued) {
          return this.continuedX = 0;
        }
      });
    });
    this.on("lastLine", (options2) => {
      const {
        align
      } = options2;
      if (align === "justify") {
        options2.align = "left";
      }
      this.lastLine = true;
      return this.once("line", () => {
        this.document.y += options2.paragraphGap || 0;
        options2.align = align;
        return this.lastLine = false;
      });
    });
  }
  wordWidth(word) {
    return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
  }
  canFit(word, w) {
    if (word[word.length - 1] != SOFT_HYPHEN) {
      return w <= this.spaceLeft;
    }
    return w + this.wordWidth(HYPHEN) <= this.spaceLeft;
  }
  eachWord(text, fn) {
    let bk;
    const breaker = new $557adaaeb0c7885f$exports(text);
    let last2 = null;
    const wordWidths = /* @__PURE__ */ Object.create(null);
    while (bk = breaker.nextBreak()) {
      var shouldContinue;
      let word = text.slice((last2 != null ? last2.position : void 0) || 0, bk.position);
      let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
      if (w > this.lineWidth + this.continuedX) {
        let lbk = last2;
        const fbk = {};
        while (word.length) {
          var l, mightGrow;
          if (w > this.spaceLeft) {
            l = Math.ceil(this.spaceLeft / (w / word.length));
            w = this.wordWidth(word.slice(0, l));
            mightGrow = w <= this.spaceLeft && l < word.length;
          } else {
            l = word.length;
          }
          let mustShrink = w > this.spaceLeft && l > 0;
          while (mustShrink || mightGrow) {
            if (mustShrink) {
              w = this.wordWidth(word.slice(0, --l));
              mustShrink = w > this.spaceLeft && l > 0;
            } else {
              w = this.wordWidth(word.slice(0, ++l));
              mustShrink = w > this.spaceLeft && l > 0;
              mightGrow = w <= this.spaceLeft && l < word.length;
            }
          }
          if (l === 0 && this.spaceLeft === this.lineWidth) {
            l = 1;
          }
          fbk.required = bk.required || l < word.length;
          shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
          lbk = {
            required: false
          };
          word = word.slice(l);
          w = this.wordWidth(word);
          if (shouldContinue === false) {
            break;
          }
        }
      } else {
        shouldContinue = fn(word, w, bk, last2);
      }
      if (shouldContinue === false) {
        break;
      }
      last2 = bk;
    }
  }
  wrap(text, options) {
    if (options.indent != null) {
      this.indent = options.indent;
    }
    if (options.characterSpacing != null) {
      this.characterSpacing = options.characterSpacing;
    }
    if (options.wordSpacing != null) {
      this.wordSpacing = options.wordSpacing;
    }
    if (options.ellipsis != null) {
      this.ellipsis = options.ellipsis;
    }
    const nextY = this.document.y + this.document.currentLineHeight(true);
    if (this.document.y > this.maxY || nextY > this.maxY) {
      this.nextSection();
    }
    let buffer = "";
    let textWidth = 0;
    let wc = 0;
    let lc = 0;
    let {
      y
    } = this.document;
    const emitLine = () => {
      options.textWidth = textWidth + this.wordSpacing * (wc - 1);
      options.wordCount = wc;
      options.lineWidth = this.lineWidth;
      ({
        y
      } = this.document);
      this.emit("line", buffer, options, this);
      return lc++;
    };
    this.emit("sectionStart", options, this);
    this.eachWord(text, (word, w, bk, last2) => {
      if (last2 == null || last2.required) {
        this.emit("firstLine", options, this);
        this.spaceLeft = this.lineWidth;
      }
      if (this.canFit(word, w)) {
        buffer += word;
        textWidth += w;
        wc++;
      }
      if (bk.required || !this.canFit(word, w)) {
        const lh = this.document.currentLineHeight(true);
        if (this.height != null && this.ellipsis && this.document.y + lh * 2 > this.maxY && this.column >= this.columns) {
          if (this.ellipsis === true) {
            this.ellipsis = "\u2026";
          }
          buffer = buffer.replace(/\s+$/, "");
          textWidth = this.wordWidth(buffer + this.ellipsis);
          while (buffer && textWidth > this.lineWidth) {
            buffer = buffer.slice(0, -1).replace(/\s+$/, "");
            textWidth = this.wordWidth(buffer + this.ellipsis);
          }
          if (textWidth <= this.lineWidth) {
            buffer = buffer + this.ellipsis;
          }
          textWidth = this.wordWidth(buffer);
        }
        if (bk.required) {
          if (w > this.spaceLeft) {
            emitLine();
            buffer = word;
            textWidth = w;
            wc = 1;
          }
          this.emit("lastLine", options, this);
        }
        if (buffer[buffer.length - 1] == SOFT_HYPHEN) {
          buffer = buffer.slice(0, -1) + HYPHEN;
          this.spaceLeft -= this.wordWidth(HYPHEN);
        }
        emitLine();
        if (this.document.y + lh > this.maxY) {
          const shouldContinue = this.nextSection();
          if (!shouldContinue) {
            wc = 0;
            buffer = "";
            return false;
          }
        }
        if (bk.required) {
          this.spaceLeft = this.lineWidth;
          buffer = "";
          textWidth = 0;
          return wc = 0;
        } else {
          this.spaceLeft = this.lineWidth - w;
          buffer = word;
          textWidth = w;
          return wc = 1;
        }
      } else {
        return this.spaceLeft -= w;
      }
    });
    if (wc > 0) {
      this.emit("lastLine", options, this);
      emitLine();
    }
    this.emit("sectionEnd", options, this);
    if (options.continued === true) {
      if (lc > 1) {
        this.continuedX = 0;
      }
      this.continuedX += options.textWidth || 0;
      return this.document.y = y;
    } else {
      return this.document.x = this.startX;
    }
  }
  nextSection(options) {
    this.emit("sectionEnd", options, this);
    if (++this.column > this.columns) {
      if (this.height != null) {
        return false;
      }
      this.document.continueOnNewPage();
      this.column = 1;
      this.startY = this.document.page.margins.top;
      this.maxY = this.document.page.maxY();
      this.document.x = this.startX;
      if (this.document._fillColor) {
        this.document.fillColor(...this.document._fillColor);
      }
      this.emit("pageBreak", options, this);
    } else {
      this.document.x += this.lineWidth + this.columnGap;
      this.document.y = this.startY;
      this.emit("columnBreak", options, this);
    }
    this.emit("sectionStart", options, this);
    return true;
  }
};
var {
  number: number$2
} = PDFObject;
var TextMixin = {
  initText() {
    this._line = this._line.bind(this);
    this.x = 0;
    this.y = 0;
    return this._lineGap = 0;
  },
  lineGap(_lineGap) {
    this._lineGap = _lineGap;
    return this;
  },
  moveDown(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y += this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  moveUp(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y -= this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  _text(text, x, y, options, lineCallback) {
    options = this._initOptions(x, y, options);
    text = text == null ? "" : `${text}`;
    if (options.wordSpacing) {
      text = text.replace(/\s{2,}/g, " ");
    }
    const addStructure = () => {
      if (options.structParent) {
        options.structParent.add(this.struct(options.structType || "P", [this.markStructureContent(options.structType || "P")]));
      }
    };
    if (options.width) {
      let wrapper = this._wrapper;
      if (!wrapper) {
        wrapper = new LineWrapper(this, options);
        wrapper.on("line", lineCallback);
        wrapper.on("firstLine", addStructure);
      }
      this._wrapper = options.continued ? wrapper : null;
      this._textOptions = options.continued ? options : null;
      wrapper.wrap(text, options);
    } else {
      for (let line of text.split("\n")) {
        addStructure();
        lineCallback(line, options);
      }
    }
    return this;
  },
  text(text, x, y, options) {
    return this._text(text, x, y, options, this._line);
  },
  widthOfString(string) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
  },
  heightOfString(text, options) {
    const {
      x,
      y
    } = this;
    options = this._initOptions(options);
    options.height = Infinity;
    const lineGap = options.lineGap || this._lineGap || 0;
    this._text(text, this.x, this.y, options, () => {
      return this.y += this.currentLineHeight(true) + lineGap;
    });
    const height = this.y - y;
    this.x = x;
    this.y = y;
    return height;
  },
  list(list, x, y, options, wrapper) {
    options = this._initOptions(x, y, options);
    const listType = options.listType || "bullet";
    const unit = Math.round(this._font.ascender / 1e3 * this._fontSize);
    const midLine = unit / 2;
    const r = options.bulletRadius || unit / 3;
    const indent = options.textIndent || (listType === "bullet" ? r * 5 : unit * 2);
    const itemIndent = options.bulletIndent || (listType === "bullet" ? r * 8 : unit * 2);
    let level = 1;
    const items = [];
    const levels = [];
    const numbers = [];
    var flatten = function(list2) {
      let n = 1;
      for (let i = 0; i < list2.length; i++) {
        const item = list2[i];
        if (Array.isArray(item)) {
          level++;
          flatten(item);
          level--;
        } else {
          items.push(item);
          levels.push(level);
          if (listType !== "bullet") {
            numbers.push(n++);
          }
        }
      }
    };
    flatten(list);
    const label = function(n) {
      switch (listType) {
        case "numbered":
          return `${n}.`;
        case "lettered":
          var letter = String.fromCharCode((n - 1) % 26 + 65);
          var times = Math.floor((n - 1) / 26 + 1);
          var text = Array(times + 1).join(letter);
          return `${text}.`;
      }
    };
    const drawListItem = function(listItem) {
      wrapper = new LineWrapper(this, options);
      wrapper.on("line", this._line);
      level = 1;
      let i = 0;
      wrapper.once("firstLine", () => {
        let item, itemType, labelType, bodyType;
        if (options.structParent) {
          if (options.structTypes) {
            [itemType, labelType, bodyType] = options.structTypes;
          } else {
            [itemType, labelType, bodyType] = ["LI", "Lbl", "LBody"];
          }
        }
        if (itemType) {
          item = this.struct(itemType);
          options.structParent.add(item);
        } else if (options.structParent) {
          item = options.structParent;
        }
        let l;
        if ((l = levels[i++]) !== level) {
          const diff = itemIndent * (l - level);
          this.x += diff;
          wrapper.lineWidth -= diff;
          level = l;
        }
        if (item && (labelType || bodyType)) {
          item.add(this.struct(labelType || bodyType, [this.markStructureContent(labelType || bodyType)]));
        }
        switch (listType) {
          case "bullet":
            this.circle(this.x - indent + r, this.y + midLine, r);
            this.fill();
            break;
          case "numbered":
          case "lettered":
            var text = label(numbers[i - 1]);
            this._fragment(text, this.x - indent, this.y, options);
            break;
        }
        if (item && labelType && bodyType) {
          item.add(this.struct(bodyType, [this.markStructureContent(bodyType)]));
        }
        if (item && item !== options.structParent) {
          item.end();
        }
      });
      wrapper.on("sectionStart", () => {
        const pos = indent + itemIndent * (level - 1);
        this.x += pos;
        return wrapper.lineWidth -= pos;
      });
      wrapper.on("sectionEnd", () => {
        const pos = indent + itemIndent * (level - 1);
        this.x -= pos;
        return wrapper.lineWidth += pos;
      });
      wrapper.wrap(listItem, options);
    };
    for (let i = 0; i < items.length; i++) {
      drawListItem.call(this, items[i]);
    }
    return this;
  },
  _initOptions() {
    let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let y = arguments.length > 1 ? arguments[1] : void 0;
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (typeof x === "object") {
      options = x;
      x = null;
    }
    const result = Object.assign({}, options);
    if (this._textOptions) {
      for (let key in this._textOptions) {
        const val = this._textOptions[key];
        if (key !== "continued") {
          if (result[key] === void 0) {
            result[key] = val;
          }
        }
      }
    }
    if (x != null) {
      this.x = x;
    }
    if (y != null) {
      this.y = y;
    }
    if (result.lineBreak !== false) {
      if (result.width == null) {
        result.width = this.page.width - this.x - this.page.margins.right;
      }
      result.width = Math.max(result.width, 0);
    }
    if (!result.columns) {
      result.columns = 0;
    }
    if (result.columnGap == null) {
      result.columnGap = 18;
    }
    return result;
  },
  _line(text) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let wrapper = arguments.length > 2 ? arguments[2] : void 0;
    this._fragment(text, this.x, this.y, options);
    const lineGap = options.lineGap || this._lineGap || 0;
    if (!wrapper) {
      return this.x += this.widthOfString(text);
    } else {
      return this.y += this.currentLineHeight(true) + lineGap;
    }
  },
  _fragment(text, x, y, options) {
    let dy, encoded, i, positions, textWidth, words;
    text = `${text}`.replace(/\n/g, "");
    if (text.length === 0) {
      return;
    }
    const align = options.align || "left";
    let wordSpacing = options.wordSpacing || 0;
    const characterSpacing = options.characterSpacing || 0;
    if (options.width) {
      switch (align) {
        case "right":
          textWidth = this.widthOfString(text.replace(/\s+$/, ""), options);
          x += options.lineWidth - textWidth;
          break;
        case "center":
          x += options.lineWidth / 2 - options.textWidth / 2;
          break;
        case "justify":
          words = text.trim().split(/\s+/);
          textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
          var spaceWidth = this.widthOfString(" ") + characterSpacing;
          wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
          break;
      }
    }
    if (typeof options.baseline === "number") {
      dy = -options.baseline;
    } else {
      switch (options.baseline) {
        case "svg-middle":
          dy = 0.5 * this._font.xHeight;
          break;
        case "middle":
        case "svg-central":
          dy = 0.5 * (this._font.descender + this._font.ascender);
          break;
        case "bottom":
        case "ideographic":
          dy = this._font.descender;
          break;
        case "alphabetic":
          dy = 0;
          break;
        case "mathematical":
          dy = 0.5 * this._font.ascender;
          break;
        case "hanging":
          dy = 0.8 * this._font.ascender;
          break;
        case "top":
          dy = this._font.ascender;
          break;
        default:
          dy = this._font.ascender;
      }
      dy = dy / 1e3 * this._fontSize;
    }
    const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
    if (options.link != null) {
      this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
    }
    if (options.goTo != null) {
      this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, "XYZ", x, y, null);
    }
    if (options.underline) {
      this.save();
      if (!options.stroke) {
        this.strokeColor(...this._fillColor || []);
      }
      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(lineWidth);
      let lineY = y + this.currentLineHeight() - lineWidth;
      this.moveTo(x, lineY);
      this.lineTo(x + renderedWidth, lineY);
      this.stroke();
      this.restore();
    }
    if (options.strike) {
      this.save();
      if (!options.stroke) {
        this.strokeColor(...this._fillColor || []);
      }
      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(lineWidth);
      let lineY = y + this.currentLineHeight() / 2;
      this.moveTo(x, lineY);
      this.lineTo(x + renderedWidth, lineY);
      this.stroke();
      this.restore();
    }
    this.save();
    if (options.oblique) {
      let skew;
      if (typeof options.oblique === "number") {
        skew = -Math.tan(options.oblique * Math.PI / 180);
      } else {
        skew = -0.25;
      }
      this.transform(1, 0, 0, 1, x, y);
      this.transform(1, 0, skew, 1, -skew * dy, 0);
      this.transform(1, 0, 0, 1, -x, -y);
    }
    this.transform(1, 0, 0, -1, 0, this.page.height);
    y = this.page.height - y - dy;
    if (this.page.fonts[this._font.id] == null) {
      this.page.fonts[this._font.id] = this._font.ref();
    }
    this.addContent("BT");
    this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);
    this.addContent(`/${this._font.id} ${number$2(this._fontSize)} Tf`);
    const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
    if (mode) {
      this.addContent(`${mode} Tr`);
    }
    if (characterSpacing) {
      this.addContent(`${number$2(characterSpacing)} Tc`);
    }
    if (wordSpacing) {
      words = text.trim().split(/\s+/);
      wordSpacing += this.widthOfString(" ") + characterSpacing;
      wordSpacing *= 1e3 / this._fontSize;
      encoded = [];
      positions = [];
      for (let word of words) {
        const [encodedWord, positionsWord] = this._font.encode(word, options.features);
        encoded = encoded.concat(encodedWord);
        positions = positions.concat(positionsWord);
        const space = {};
        const object = positions[positions.length - 1];
        for (let key in object) {
          const val = object[key];
          space[key] = val;
        }
        space.xAdvance += wordSpacing;
        positions[positions.length - 1] = space;
      }
    } else {
      [encoded, positions] = this._font.encode(text, options.features);
    }
    const scale = this._fontSize / 1e3;
    const commands = [];
    let last2 = 0;
    let hadOffset = false;
    const addSegment = (cur) => {
      if (last2 < cur) {
        const hex = encoded.slice(last2, cur).join("");
        const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
        commands.push(`<${hex}> ${number$2(-advance)}`);
      }
      return last2 = cur;
    };
    const flush = (i2) => {
      addSegment(i2);
      if (commands.length > 0) {
        this.addContent(`[${commands.join(" ")}] TJ`);
        return commands.length = 0;
      }
    };
    for (i = 0; i < positions.length; i++) {
      const pos = positions[i];
      if (pos.xOffset || pos.yOffset) {
        flush(i);
        this.addContent(`1 0 0 1 ${number$2(x + pos.xOffset * scale)} ${number$2(y + pos.yOffset * scale)} Tm`);
        flush(i + 1);
        hadOffset = true;
      } else {
        if (hadOffset) {
          this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);
          hadOffset = false;
        }
        if (pos.xAdvance - pos.advanceWidth !== 0) {
          addSegment(i + 1);
        }
      }
      x += pos.xAdvance * scale;
    }
    flush(i);
    this.addContent("ET");
    return this.restore();
  }
};
var MARKERS = [65472, 65473, 65474, 65475, 65477, 65478, 65479, 65480, 65481, 65482, 65483, 65484, 65485, 65486, 65487];
var COLOR_SPACE_MAP = {
  1: "DeviceGray",
  3: "DeviceRGB",
  4: "DeviceCMYK"
};
var JPEG = class {
  constructor(data, label) {
    let marker;
    this.data = data;
    this.label = label;
    if (this.data.readUInt16BE(0) !== 65496) {
      throw "SOI not found in JPEG";
    }
    this.orientation = import_jpeg_exif.default.fromBuffer(this.data).Orientation || 1;
    let pos = 2;
    while (pos < this.data.length) {
      marker = this.data.readUInt16BE(pos);
      pos += 2;
      if (MARKERS.includes(marker)) {
        break;
      }
      pos += this.data.readUInt16BE(pos);
    }
    if (!MARKERS.includes(marker)) {
      throw "Invalid JPEG.";
    }
    pos += 2;
    this.bits = this.data[pos++];
    this.height = this.data.readUInt16BE(pos);
    pos += 2;
    this.width = this.data.readUInt16BE(pos);
    pos += 2;
    const channels = this.data[pos++];
    this.colorSpace = COLOR_SPACE_MAP[channels];
    this.obj = null;
  }
  embed(document2) {
    if (this.obj) {
      return;
    }
    this.obj = document2.ref({
      Type: "XObject",
      Subtype: "Image",
      BitsPerComponent: this.bits,
      Width: this.width,
      Height: this.height,
      ColorSpace: this.colorSpace,
      Filter: "DCTDecode"
    });
    if (this.colorSpace === "DeviceCMYK") {
      this.obj.data["Decode"] = [1, 0, 1, 0, 1, 0, 1, 0];
    }
    this.obj.end(this.data);
    return this.data = null;
  }
};
var PNGImage = class {
  constructor(data, label) {
    this.label = label;
    this.image = new import_png_js.default(data);
    this.width = this.image.width;
    this.height = this.image.height;
    this.imgData = this.image.imgData;
    this.obj = null;
  }
  embed(document2) {
    let dataDecoded = false;
    this.document = document2;
    if (this.obj) {
      return;
    }
    const hasAlphaChannel = this.image.hasAlphaChannel;
    const isInterlaced = this.image.interlaceMethod === 1;
    this.obj = this.document.ref({
      Type: "XObject",
      Subtype: "Image",
      BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
      Width: this.width,
      Height: this.height,
      Filter: "FlateDecode"
    });
    if (!hasAlphaChannel) {
      const params = this.document.ref({
        Predictor: isInterlaced ? 1 : 15,
        Colors: this.image.colors,
        BitsPerComponent: this.image.bits,
        Columns: this.width
      });
      this.obj.data["DecodeParms"] = params;
      params.end();
    }
    if (this.image.palette.length === 0) {
      this.obj.data["ColorSpace"] = this.image.colorSpace;
    } else {
      const palette = this.document.ref();
      palette.end(Buffer.from(this.image.palette));
      this.obj.data["ColorSpace"] = ["Indexed", "DeviceRGB", this.image.palette.length / 3 - 1, palette];
    }
    if (this.image.transparency.grayscale != null) {
      const val = this.image.transparency.grayscale;
      this.obj.data["Mask"] = [val, val];
    } else if (this.image.transparency.rgb) {
      const {
        rgb
      } = this.image.transparency;
      const mask = [];
      for (let x of rgb) {
        mask.push(x, x);
      }
      this.obj.data["Mask"] = mask;
    } else if (this.image.transparency.indexed) {
      dataDecoded = true;
      return this.loadIndexedAlphaChannel();
    } else if (hasAlphaChannel) {
      dataDecoded = true;
      return this.splitAlphaChannel();
    }
    if (isInterlaced && !dataDecoded) {
      return this.decodeData();
    }
    this.finalize();
  }
  finalize() {
    if (this.alphaChannel) {
      const sMask = this.document.ref({
        Type: "XObject",
        Subtype: "Image",
        Height: this.height,
        Width: this.width,
        BitsPerComponent: 8,
        Filter: "FlateDecode",
        ColorSpace: "DeviceGray",
        Decode: [0, 1]
      });
      sMask.end(this.alphaChannel);
      this.obj.data["SMask"] = sMask;
    }
    this.obj.end(this.imgData);
    this.image = null;
    return this.imgData = null;
  }
  splitAlphaChannel() {
    return this.image.decodePixels((pixels) => {
      let a, p;
      const colorCount = this.image.colors;
      const pixelCount = this.width * this.height;
      const imgData = Buffer.alloc(pixelCount * colorCount);
      const alphaChannel = Buffer.alloc(pixelCount);
      let i = p = a = 0;
      const len = pixels.length;
      const skipByteCount = this.image.bits === 16 ? 1 : 0;
      while (i < len) {
        for (let colorIndex = 0; colorIndex < colorCount; colorIndex++) {
          imgData[p++] = pixels[i++];
          i += skipByteCount;
        }
        alphaChannel[a++] = pixels[i++];
        i += skipByteCount;
      }
      this.imgData = zlib.deflateSync(imgData);
      this.alphaChannel = zlib.deflateSync(alphaChannel);
      return this.finalize();
    });
  }
  loadIndexedAlphaChannel() {
    const transparency = this.image.transparency.indexed;
    return this.image.decodePixels((pixels) => {
      const alphaChannel = Buffer.alloc(this.width * this.height);
      let i = 0;
      for (let j = 0, end = pixels.length; j < end; j++) {
        alphaChannel[i++] = transparency[pixels[j]];
      }
      this.alphaChannel = zlib.deflateSync(alphaChannel);
      return this.finalize();
    });
  }
  decodeData() {
    this.image.decodePixels((pixels) => {
      this.imgData = zlib.deflateSync(pixels);
      this.finalize();
    });
  }
};
var PDFImage = class {
  static open(src, label) {
    let data;
    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      let match;
      if (match = /^data:.+?;base64,(.*)$/.exec(src)) {
        data = Buffer.from(match[1], "base64");
      } else {
        data = fs.readFileSync(src);
        if (!data) {
          return;
        }
      }
    }
    if (data[0] === 255 && data[1] === 216) {
      return new JPEG(data, label);
    } else if (data[0] === 137 && data.toString("ascii", 1, 4) === "PNG") {
      return new PNGImage(data, label);
    } else {
      throw new Error("Unknown image format.");
    }
  }
};
var ImagesMixin = {
  initImages() {
    this._imageRegistry = {};
    return this._imageCount = 0;
  },
  image(src, x, y) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let bh, bp, bw, image, ip, left, left1, rotateAngle, originX, originY;
    if (typeof x === "object") {
      options = x;
      x = null;
    }
    const ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;
    x = (left = x != null ? x : options.x) != null ? left : this.x;
    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;
    if (typeof src === "string") {
      image = this._imageRegistry[src];
    }
    if (!image) {
      if (src.width && src.height) {
        image = src;
      } else {
        image = this.openImage(src);
      }
    }
    if (!image.obj) {
      image.embed(this);
    }
    if (this.page.xobjects[image.label] == null) {
      this.page.xobjects[image.label] = image.obj;
    }
    let {
      width,
      height
    } = image;
    if (!ignoreOrientation && image.orientation > 4) {
      [width, height] = [height, width];
    }
    let w = options.width || width;
    let h = options.height || height;
    if (options.width && !options.height) {
      const wp = w / width;
      w = width * wp;
      h = height * wp;
    } else if (options.height && !options.width) {
      const hp = h / height;
      w = width * hp;
      h = height * hp;
    } else if (options.scale) {
      w = width * options.scale;
      h = height * options.scale;
    } else if (options.fit) {
      [bw, bh] = options.fit;
      bp = bw / bh;
      ip = width / height;
      if (ip > bp) {
        w = bw;
        h = bw / ip;
      } else {
        h = bh;
        w = bh * ip;
      }
    } else if (options.cover) {
      [bw, bh] = options.cover;
      bp = bw / bh;
      ip = width / height;
      if (ip > bp) {
        h = bh;
        w = bh * ip;
      } else {
        w = bw;
        h = bw / ip;
      }
    }
    if (options.fit || options.cover) {
      if (options.align === "center") {
        x = x + bw / 2 - w / 2;
      } else if (options.align === "right") {
        x = x + bw - w;
      }
      if (options.valign === "center") {
        y = y + bh / 2 - h / 2;
      } else if (options.valign === "bottom") {
        y = y + bh - h;
      }
    }
    if (!ignoreOrientation) {
      switch (image.orientation) {
        // No orientation (need to flip image, though, because of the default transform matrix on the document)
        default:
        case 1:
          h = -h;
          y -= h;
          rotateAngle = 0;
          break;
        // Flip Horizontal
        case 2:
          w = -w;
          h = -h;
          x -= w;
          y -= h;
          rotateAngle = 0;
          break;
        // Rotate 180 degrees
        case 3:
          originX = x;
          originY = y;
          h = -h;
          x -= w;
          rotateAngle = 180;
          break;
        // Flip vertical
        case 4:
          break;
        // Flip horizontally and rotate 270 degrees CW
        case 5:
          originX = x;
          originY = y;
          [w, h] = [h, w];
          y -= h;
          rotateAngle = 90;
          break;
        // Rotate 90 degrees CW
        case 6:
          originX = x;
          originY = y;
          [w, h] = [h, w];
          h = -h;
          rotateAngle = 90;
          break;
        // Flip horizontally and rotate 90 degrees CW
        case 7:
          originX = x;
          originY = y;
          [w, h] = [h, w];
          h = -h;
          w = -w;
          x -= w;
          rotateAngle = 90;
          break;
        // Rotate 270 degrees CW
        case 8:
          originX = x;
          originY = y;
          [w, h] = [h, w];
          h = -h;
          x -= w;
          y -= h;
          rotateAngle = -90;
          break;
      }
    } else {
      h = -h;
      y -= h;
      rotateAngle = 0;
    }
    if (options.link != null) {
      this.link(x, y, w, h, options.link);
    }
    if (options.goTo != null) {
      this.goTo(x, y, w, h, options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, "XYZ", x, y, null);
    }
    if (this.y === y) {
      this.y += h;
    }
    this.save();
    if (rotateAngle) {
      this.rotate(rotateAngle, {
        origin: [originX, originY]
      });
    }
    this.transform(w, 0, 0, h, x, y);
    this.addContent(`/${image.label} Do`);
    this.restore();
    return this;
  },
  openImage(src) {
    let image;
    if (typeof src === "string") {
      image = this._imageRegistry[src];
    }
    if (!image) {
      image = PDFImage.open(src, `I${++this._imageCount}`);
      if (typeof src === "string") {
        this._imageRegistry[src] = image;
      }
    }
    return image;
  }
};
var AnnotationsMixin = {
  annotate(x, y, w, h, options) {
    options.Type = "Annot";
    options.Rect = this._convertRect(x, y, w, h);
    options.Border = [0, 0, 0];
    if (options.Subtype === "Link" && typeof options.F === "undefined") {
      options.F = 1 << 2;
    }
    if (options.Subtype !== "Link") {
      if (options.C == null) {
        options.C = this._normalizeColor(options.color || [0, 0, 0]);
      }
    }
    delete options.color;
    if (typeof options.Dest === "string") {
      options.Dest = new String(options.Dest);
    }
    for (let key in options) {
      const val = options[key];
      options[key[0].toUpperCase() + key.slice(1)] = val;
    }
    const ref = this.ref(options);
    this.page.annotations.push(ref);
    ref.end();
    return this;
  },
  note(x, y, w, h, contents) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    options.Subtype = "Text";
    options.Contents = new String(contents);
    options.Name = "Comment";
    if (options.color == null) {
      options.color = [243, 223, 92];
    }
    return this.annotate(x, y, w, h, options);
  },
  goTo(x, y, w, h, name) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    options.Subtype = "Link";
    options.A = this.ref({
      S: "GoTo",
      D: new String(name)
    });
    options.A.end();
    return this.annotate(x, y, w, h, options);
  },
  link(x, y, w, h, url) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    options.Subtype = "Link";
    if (typeof url === "number") {
      const pages = this._root.data.Pages.data;
      if (url >= 0 && url < pages.Kids.length) {
        options.A = this.ref({
          S: "GoTo",
          D: [pages.Kids[url], "XYZ", null, null, null]
        });
        options.A.end();
      } else {
        throw new Error(`The document has no page ${url}`);
      }
    } else {
      options.A = this.ref({
        S: "URI",
        URI: new String(url)
      });
      options.A.end();
    }
    return this.annotate(x, y, w, h, options);
  },
  _markup(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    const [x1, y1, x2, y2] = this._convertRect(x, y, w, h);
    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  highlight(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "Highlight";
    if (options.color == null) {
      options.color = [241, 238, 148];
    }
    return this._markup(x, y, w, h, options);
  },
  underline(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "Underline";
    return this._markup(x, y, w, h, options);
  },
  strike(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "StrikeOut";
    return this._markup(x, y, w, h, options);
  },
  lineAnnotation(x1, y1, x2, y2) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "Line";
    options.Contents = new String();
    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
    return this.annotate(x1, y1, x2, y2, options);
  },
  rectAnnotation(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "Square";
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  ellipseAnnotation(x, y, w, h) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    options.Subtype = "Circle";
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  textAnnotation(x, y, w, h, text) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    options.Subtype = "FreeText";
    options.Contents = new String(text);
    options.DA = new String();
    return this.annotate(x, y, w, h, options);
  },
  fileAnnotation(x, y, w, h) {
    let file = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    const filespec = this.file(file.src, Object.assign({
      hidden: true
    }, file));
    options.Subtype = "FileAttachment";
    options.FS = filespec;
    if (options.Contents) {
      options.Contents = new String(options.Contents);
    } else if (filespec.data.Desc) {
      options.Contents = filespec.data.Desc;
    }
    return this.annotate(x, y, w, h, options);
  },
  _convertRect(x1, y1, w, h) {
    let y2 = y1;
    y1 += h;
    let x2 = x1 + w;
    const [m0, m1, m2, m3, m4, m5] = this._ctm;
    x1 = m0 * x1 + m2 * y1 + m4;
    y1 = m1 * x1 + m3 * y1 + m5;
    x2 = m0 * x2 + m2 * y2 + m4;
    y2 = m1 * x2 + m3 * y2 + m5;
    return [x1, y1, x2, y2];
  }
};
var PDFOutline = class _PDFOutline {
  constructor(document2, parent, title, dest) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      expanded: false
    };
    this.document = document2;
    this.options = options;
    this.outlineData = {};
    if (dest !== null) {
      this.outlineData["Dest"] = [dest.dictionary, "Fit"];
    }
    if (parent !== null) {
      this.outlineData["Parent"] = parent;
    }
    if (title !== null) {
      this.outlineData["Title"] = new String(title);
    }
    this.dictionary = this.document.ref(this.outlineData);
    this.children = [];
  }
  addItem(title) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      expanded: false
    };
    const result = new _PDFOutline(this.document, this.dictionary, title, this.document.page, options);
    this.children.push(result);
    return result;
  }
  endOutline() {
    if (this.children.length > 0) {
      if (this.options.expanded) {
        this.outlineData.Count = this.children.length;
      }
      const first2 = this.children[0], last2 = this.children[this.children.length - 1];
      this.outlineData.First = first2.dictionary;
      this.outlineData.Last = last2.dictionary;
      for (let i = 0, len = this.children.length; i < len; i++) {
        const child = this.children[i];
        if (i > 0) {
          child.outlineData.Prev = this.children[i - 1].dictionary;
        }
        if (i < this.children.length - 1) {
          child.outlineData.Next = this.children[i + 1].dictionary;
        }
        child.endOutline();
      }
    }
    return this.dictionary.end();
  }
};
var OutlineMixin = {
  initOutline() {
    return this.outline = new PDFOutline(this, null, null, null);
  },
  endOutline() {
    this.outline.endOutline();
    if (this.outline.children.length > 0) {
      this._root.data.Outlines = this.outline.dictionary;
      return this._root.data.PageMode = "UseOutlines";
    }
  }
};
var PDFStructureContent = class {
  constructor(pageRef, mcid) {
    this.refs = [{
      pageRef,
      mcid
    }];
  }
  push(structContent) {
    structContent.refs.forEach((ref) => this.refs.push(ref));
  }
};
var PDFStructureElement = class _PDFStructureElement {
  constructor(document2, type) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    this.document = document2;
    this._attached = false;
    this._ended = false;
    this._flushed = false;
    this.dictionary = document2.ref({
      // Type: "StructElem",
      S: type
    });
    const data = this.dictionary.data;
    if (Array.isArray(options) || this._isValidChild(options)) {
      children = options;
      options = {};
    }
    if (typeof options.title !== "undefined") {
      data.T = new String(options.title);
    }
    if (typeof options.lang !== "undefined") {
      data.Lang = new String(options.lang);
    }
    if (typeof options.alt !== "undefined") {
      data.Alt = new String(options.alt);
    }
    if (typeof options.expanded !== "undefined") {
      data.E = new String(options.expanded);
    }
    if (typeof options.actual !== "undefined") {
      data.ActualText = new String(options.actual);
    }
    this._children = [];
    if (children) {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.forEach((child) => this.add(child));
      this.end();
    }
  }
  add(child) {
    if (this._ended) {
      throw new Error(`Cannot add child to already-ended structure element`);
    }
    if (!this._isValidChild(child)) {
      throw new Error(`Invalid structure element child`);
    }
    if (child instanceof _PDFStructureElement) {
      child.setParent(this.dictionary);
      if (this._attached) {
        child.setAttached();
      }
    }
    if (child instanceof PDFStructureContent) {
      this._addContentToParentTree(child);
    }
    if (typeof child === "function" && this._attached) {
      child = this._contentForClosure(child);
    }
    this._children.push(child);
    return this;
  }
  _addContentToParentTree(content) {
    content.refs.forEach((_ref) => {
      let {
        pageRef,
        mcid
      } = _ref;
      const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);
      pageStructParents[mcid] = this.dictionary;
    });
  }
  setParent(parentRef) {
    if (this.dictionary.data.P) {
      throw new Error(`Structure element added to more than one parent`);
    }
    this.dictionary.data.P = parentRef;
    this._flush();
  }
  setAttached() {
    if (this._attached) {
      return;
    }
    this._children.forEach((child, index) => {
      if (child instanceof _PDFStructureElement) {
        child.setAttached();
      }
      if (typeof child === "function") {
        this._children[index] = this._contentForClosure(child);
      }
    });
    this._attached = true;
    this._flush();
  }
  end() {
    if (this._ended) {
      return;
    }
    this._children.filter((child) => child instanceof _PDFStructureElement).forEach((child) => child.end());
    this._ended = true;
    this._flush();
  }
  _isValidChild(child) {
    return child instanceof _PDFStructureElement || child instanceof PDFStructureContent || typeof child === "function";
  }
  _contentForClosure(closure) {
    const content = this.document.markStructureContent(this.dictionary.data.S);
    closure();
    this.document.endMarkedContent();
    this._addContentToParentTree(content);
    return content;
  }
  _isFlushable() {
    if (!this.dictionary.data.P || !this._ended) {
      return false;
    }
    return this._children.every((child) => {
      if (typeof child === "function") {
        return false;
      }
      if (child instanceof _PDFStructureElement) {
        return child._isFlushable();
      }
      return true;
    });
  }
  _flush() {
    if (this._flushed || !this._isFlushable()) {
      return;
    }
    this.dictionary.data.K = [];
    this._children.forEach((child) => this._flushChild(child));
    this.dictionary.end();
    this._children = [];
    this.dictionary.data.K = null;
    this._flushed = true;
  }
  _flushChild(child) {
    if (child instanceof _PDFStructureElement) {
      this.dictionary.data.K.push(child.dictionary);
    }
    if (child instanceof PDFStructureContent) {
      child.refs.forEach((_ref2) => {
        let {
          pageRef,
          mcid
        } = _ref2;
        if (!this.dictionary.data.Pg) {
          this.dictionary.data.Pg = pageRef;
        }
        if (this.dictionary.data.Pg === pageRef) {
          this.dictionary.data.K.push(mcid);
        } else {
          this.dictionary.data.K.push({
            Type: "MCR",
            Pg: pageRef,
            MCID: mcid
          });
        }
      });
    }
  }
};
var PDFNumberTree = class extends PDFTree {
  _compareKeys(a, b) {
    return parseInt(a) - parseInt(b);
  }
  _keysName() {
    return "Nums";
  }
  _dataForKey(k) {
    return parseInt(k);
  }
};
var MarkingsMixin = {
  initMarkings(options) {
    this.structChildren = [];
    if (options.tagged) {
      this.getMarkInfoDictionary().data.Marked = true;
      this.getStructTreeRoot();
    }
  },
  markContent(tag) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (tag === "Artifact" || options && options.mcid) {
      let toClose = 0;
      this.page.markings.forEach((marking) => {
        if (toClose || marking.structContent || marking.tag === "Artifact") {
          toClose++;
        }
      });
      while (toClose--) {
        this.endMarkedContent();
      }
    }
    if (!options) {
      this.page.markings.push({
        tag
      });
      this.addContent(`/${tag} BMC`);
      return this;
    }
    this.page.markings.push({
      tag,
      options
    });
    const dictionary = {};
    if (typeof options.mcid !== "undefined") {
      dictionary.MCID = options.mcid;
    }
    if (tag === "Artifact") {
      if (typeof options.type === "string") {
        dictionary.Type = options.type;
      }
      if (Array.isArray(options.bbox)) {
        dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];
      }
      if (Array.isArray(options.attached) && options.attached.every((val) => typeof val === "string")) {
        dictionary.Attached = options.attached;
      }
    }
    if (tag === "Span") {
      if (options.lang) {
        dictionary.Lang = new String(options.lang);
      }
      if (options.alt) {
        dictionary.Alt = new String(options.alt);
      }
      if (options.expanded) {
        dictionary.E = new String(options.expanded);
      }
      if (options.actual) {
        dictionary.ActualText = new String(options.actual);
      }
    }
    this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);
    return this;
  },
  markStructureContent(tag) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
    const mcid = pageStructParents.length;
    pageStructParents.push(null);
    this.markContent(tag, {
      ...options,
      mcid
    });
    const structContent = new PDFStructureContent(this.page.dictionary, mcid);
    this.page.markings.slice(-1)[0].structContent = structContent;
    return structContent;
  },
  endMarkedContent() {
    this.page.markings.pop();
    this.addContent("EMC");
    return this;
  },
  struct(type) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let children = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    return new PDFStructureElement(this, type, options, children);
  },
  addStructure(structElem) {
    const structTreeRoot = this.getStructTreeRoot();
    structElem.setParent(structTreeRoot);
    structElem.setAttached();
    this.structChildren.push(structElem);
    if (!structTreeRoot.data.K) {
      structTreeRoot.data.K = [];
    }
    structTreeRoot.data.K.push(structElem.dictionary);
    return this;
  },
  initPageMarkings(pageMarkings) {
    pageMarkings.forEach((marking) => {
      if (marking.structContent) {
        const structContent = marking.structContent;
        const newStructContent = this.markStructureContent(marking.tag, marking.options);
        structContent.push(newStructContent);
        this.page.markings.slice(-1)[0].structContent = structContent;
      } else {
        this.markContent(marking.tag, marking.options);
      }
    });
  },
  endPageMarkings(page) {
    const pageMarkings = page.markings;
    pageMarkings.forEach(() => page.write("EMC"));
    page.markings = [];
    return pageMarkings;
  },
  getMarkInfoDictionary() {
    if (!this._root.data.MarkInfo) {
      this._root.data.MarkInfo = this.ref({});
    }
    return this._root.data.MarkInfo;
  },
  getStructTreeRoot() {
    if (!this._root.data.StructTreeRoot) {
      this._root.data.StructTreeRoot = this.ref({
        Type: "StructTreeRoot",
        ParentTree: new PDFNumberTree(),
        ParentTreeNextKey: 0
      });
    }
    return this._root.data.StructTreeRoot;
  },
  getStructParentTree() {
    return this.getStructTreeRoot().data.ParentTree;
  },
  createStructParentTreeNextKey() {
    this.getMarkInfoDictionary();
    const structTreeRoot = this.getStructTreeRoot();
    const key = structTreeRoot.data.ParentTreeNextKey++;
    structTreeRoot.data.ParentTree.add(key, []);
    return key;
  },
  endMarkings() {
    const structTreeRoot = this._root.data.StructTreeRoot;
    if (structTreeRoot) {
      structTreeRoot.end();
      this.structChildren.forEach((structElem) => structElem.end());
    }
    if (this._root.data.MarkInfo) {
      this._root.data.MarkInfo.end();
    }
  }
};
var FIELD_FLAGS = {
  readOnly: 1,
  required: 2,
  noExport: 4,
  multiline: 4096,
  password: 8192,
  toggleToOffButton: 16384,
  radioButton: 32768,
  pushButton: 65536,
  combo: 131072,
  edit: 262144,
  sort: 524288,
  multiSelect: 2097152,
  noSpell: 4194304
};
var FIELD_JUSTIFY = {
  left: 0,
  center: 1,
  right: 2
};
var VALUE_MAP = {
  value: "V",
  defaultValue: "DV"
};
var FORMAT_SPECIAL = {
  zip: "0",
  zipPlus4: "1",
  zip4: "1",
  phone: "2",
  ssn: "3"
};
var FORMAT_DEFAULT = {
  number: {
    nDec: 0,
    sepComma: false,
    negStyle: "MinusBlack",
    currency: "",
    currencyPrepend: true
  },
  percent: {
    nDec: 0,
    sepComma: false
  }
};
var AcroFormMixin = {
  /**
   * Must call if adding AcroForms to a document. Must also call font() before
   * this method to set the default font.
   */
  initForm() {
    if (!this._font) {
      throw new Error("Must set a font before calling initForm method");
    }
    this._acroform = {
      fonts: {},
      defaultFont: this._font.name
    };
    this._acroform.fonts[this._font.id] = this._font.ref();
    let data = {
      Fields: [],
      NeedAppearances: true,
      DA: new String(`/${this._font.id} 0 Tf 0 g`),
      DR: {
        Font: {}
      }
    };
    data.DR.Font[this._font.id] = this._font.ref();
    const AcroForm = this.ref(data);
    this._root.data.AcroForm = AcroForm;
    return this;
  },
  /**
   * Called automatically by document.js
   */
  endAcroForm() {
    if (this._root.data.AcroForm) {
      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
        throw new Error("No fonts specified for PDF form");
      }
      let fontDict = this._root.data.AcroForm.data.DR.Font;
      Object.keys(this._acroform.fonts).forEach((name) => {
        fontDict[name] = this._acroform.fonts[name];
      });
      this._root.data.AcroForm.data.Fields.forEach((fieldRef) => {
        this._endChild(fieldRef);
      });
      this._root.data.AcroForm.end();
    }
    return this;
  },
  _endChild(ref) {
    if (Array.isArray(ref.data.Kids)) {
      ref.data.Kids.forEach((childRef) => {
        this._endChild(childRef);
      });
      ref.end();
    }
    return this;
  },
  /**
   * Creates and adds a form field to the document. Form fields are intermediate
   * nodes in a PDF form that are used to specify form name heirarchy and form
   * value defaults.
   * @param {string} name - field name (T attribute in field dictionary)
   * @param {object} options  - other attributes to include in field dictionary
   */
  formField(name) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let fieldDict = this._fieldDict(name, null, options);
    let fieldRef = this.ref(fieldDict);
    this._addToParent(fieldRef);
    return fieldRef;
  },
  /**
   * Creates and adds a Form Annotation to the document. Form annotations are
   * called Widget annotations internally within a PDF file.
   * @param {string} name - form field name (T attribute of widget annotation
   * dictionary)
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {object} options
   */
  formAnnotation(name, type, x, y, w, h) {
    let options = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : {};
    let fieldDict = this._fieldDict(name, type, options);
    fieldDict.Subtype = "Widget";
    if (fieldDict.F === void 0) {
      fieldDict.F = 4;
    }
    this.annotate(x, y, w, h, fieldDict);
    let annotRef = this.page.annotations[this.page.annotations.length - 1];
    return this._addToParent(annotRef);
  },
  formText(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "text", x, y, w, h, options);
  },
  formPushButton(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "pushButton", x, y, w, h, options);
  },
  formCombo(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "combo", x, y, w, h, options);
  },
  formList(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "list", x, y, w, h, options);
  },
  formRadioButton(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "radioButton", x, y, w, h, options);
  },
  formCheckbox(name, x, y, w, h) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    return this.formAnnotation(name, "checkbox", x, y, w, h, options);
  },
  _addToParent(fieldRef) {
    let parent = fieldRef.data.Parent;
    if (parent) {
      if (!parent.data.Kids) {
        parent.data.Kids = [];
      }
      parent.data.Kids.push(fieldRef);
    } else {
      this._root.data.AcroForm.data.Fields.push(fieldRef);
    }
    return this;
  },
  _fieldDict(name, type) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!this._acroform) {
      throw new Error("Call document.initForm() method before adding form elements to document");
    }
    let opts = Object.assign({}, options);
    if (type !== null) {
      opts = this._resolveType(type, options);
    }
    opts = this._resolveFlags(opts);
    opts = this._resolveJustify(opts);
    opts = this._resolveFont(opts);
    opts = this._resolveStrings(opts);
    opts = this._resolveColors(opts);
    opts = this._resolveFormat(opts);
    opts.T = new String(name);
    if (opts.parent) {
      opts.Parent = opts.parent;
      delete opts.parent;
    }
    return opts;
  },
  _resolveType(type, opts) {
    if (type === "text") {
      opts.FT = "Tx";
    } else if (type === "pushButton") {
      opts.FT = "Btn";
      opts.pushButton = true;
    } else if (type === "radioButton") {
      opts.FT = "Btn";
      opts.radioButton = true;
    } else if (type === "checkbox") {
      opts.FT = "Btn";
    } else if (type === "combo") {
      opts.FT = "Ch";
      opts.combo = true;
    } else if (type === "list") {
      opts.FT = "Ch";
    } else {
      throw new Error(`Invalid form annotation type '${type}'`);
    }
    return opts;
  },
  _resolveFormat(opts) {
    const f = opts.format;
    if (f && f.type) {
      let fnKeystroke;
      let fnFormat;
      let params = "";
      if (FORMAT_SPECIAL[f.type] !== void 0) {
        fnKeystroke = `AFSpecial_Keystroke`;
        fnFormat = `AFSpecial_Format`;
        params = FORMAT_SPECIAL[f.type];
      } else {
        let format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
        fnKeystroke = `AF${format}_Keystroke`;
        fnFormat = `AF${format}_Format`;
        if (f.type === "date") {
          fnKeystroke += "Ex";
          params = String(f.param);
        } else if (f.type === "time") {
          params = String(f.param);
        } else if (f.type === "number") {
          let p = Object.assign({}, FORMAT_DEFAULT.number, f);
          params = String([String(p.nDec), p.sepComma ? "0" : "1", '"' + p.negStyle + '"', "null", '"' + p.currency + '"', String(p.currencyPrepend)].join(","));
        } else if (f.type === "percent") {
          let p = Object.assign({}, FORMAT_DEFAULT.percent, f);
          params = String([String(p.nDec), p.sepComma ? "0" : "1"].join(","));
        }
      }
      opts.AA = opts.AA ? opts.AA : {};
      opts.AA.K = {
        S: "JavaScript",
        JS: new String(`${fnKeystroke}(${params});`)
      };
      opts.AA.F = {
        S: "JavaScript",
        JS: new String(`${fnFormat}(${params});`)
      };
    }
    delete opts.format;
    return opts;
  },
  _resolveColors(opts) {
    let color = this._normalizeColor(opts.backgroundColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BG = color;
    }
    color = this._normalizeColor(opts.borderColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BC = color;
    }
    delete opts.backgroundColor;
    delete opts.borderColor;
    return opts;
  },
  _resolveFlags(options) {
    let result = 0;
    Object.keys(options).forEach((key) => {
      if (FIELD_FLAGS[key]) {
        if (options[key]) {
          result |= FIELD_FLAGS[key];
        }
        delete options[key];
      }
    });
    if (result !== 0) {
      options.Ff = options.Ff ? options.Ff : 0;
      options.Ff |= result;
    }
    return options;
  },
  _resolveJustify(options) {
    let result = 0;
    if (options.align !== void 0) {
      if (typeof FIELD_JUSTIFY[options.align] === "number") {
        result = FIELD_JUSTIFY[options.align];
      }
      delete options.align;
    }
    if (result !== 0) {
      options.Q = result;
    }
    return options;
  },
  _resolveFont(options) {
    if (this._acroform.fonts[this._font.id] === null) {
      this._acroform.fonts[this._font.id] = this._font.ref();
    }
    if (this._acroform.defaultFont !== this._font.name) {
      options.DR = {
        Font: {}
      };
      const fontSize = options.fontSize || 0;
      options.DR.Font[this._font.id] = this._font.ref();
      options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);
    }
    return options;
  },
  _resolveStrings(options) {
    let select = [];
    function appendChoices(a) {
      if (Array.isArray(a)) {
        for (let idx = 0; idx < a.length; idx++) {
          if (typeof a[idx] === "string") {
            select.push(new String(a[idx]));
          } else {
            select.push(a[idx]);
          }
        }
      }
    }
    appendChoices(options.Opt);
    if (options.select) {
      appendChoices(options.select);
      delete options.select;
    }
    if (select.length) {
      options.Opt = select;
    }
    Object.keys(VALUE_MAP).forEach((key) => {
      if (options[key] !== void 0) {
        options[VALUE_MAP[key]] = options[key];
        delete options[key];
      }
    });
    ["V", "DV"].forEach((key) => {
      if (typeof options[key] === "string") {
        options[key] = new String(options[key]);
      }
    });
    if (options.MK && options.MK.CA) {
      options.MK.CA = new String(options.MK.CA);
    }
    if (options.label) {
      options.MK = options.MK ? options.MK : {};
      options.MK.CA = new String(options.label);
      delete options.label;
    }
    return options;
  }
};
var AttachmentsMixin = {
  /**
   * Embed contents of `src` in PDF
   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file
   * @param {object} options
   *  * options.name: filename to be shown in PDF, will use `src` if none set
   *  * options.type: filetype to be shown in PDF
   *  * options.description: description to be shown in PDF
   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations
   *  * options.creationDate: override creation date
   *  * options.modifiedDate: override modified date
   * @returns filespec reference
   */
  file(src) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    options.name = options.name || src;
    const refBody = {
      Type: "EmbeddedFile",
      Params: {}
    };
    let data;
    if (!src) {
      throw new Error("No src specified");
    }
    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      let match;
      if (match = /^data:(.*?);base64,(.*)$/.exec(src)) {
        if (match[1]) {
          refBody.Subtype = match[1].replace("/", "#2F");
        }
        data = Buffer.from(match[2], "base64");
      } else {
        data = fs.readFileSync(src);
        if (!data) {
          throw new Error(`Could not read contents of file at filepath ${src}`);
        }
        const {
          birthtime,
          ctime
        } = fs.statSync(src);
        refBody.Params.CreationDate = birthtime;
        refBody.Params.ModDate = ctime;
      }
    }
    if (options.creationDate instanceof Date) {
      refBody.Params.CreationDate = options.creationDate;
    }
    if (options.modifiedDate instanceof Date) {
      refBody.Params.ModDate = options.modifiedDate;
    }
    if (options.type) {
      refBody.Subtype = options.type.replace("/", "#2F");
    }
    const checksum = import_crypto_js.default.MD5(import_crypto_js.default.lib.WordArray.create(new Uint8Array(data)));
    refBody.Params.CheckSum = new String(checksum);
    refBody.Params.Size = data.byteLength;
    let ref;
    if (!this._fileRegistry) this._fileRegistry = {};
    let file = this._fileRegistry[options.name];
    if (file && isEqual(refBody, file)) {
      ref = file.ref;
    } else {
      ref = this.ref(refBody);
      ref.end(data);
      this._fileRegistry[options.name] = {
        ...refBody,
        ref
      };
    }
    const fileSpecBody = {
      Type: "Filespec",
      F: new String(options.name),
      EF: {
        F: ref
      },
      UF: new String(options.name)
    };
    if (options.description) {
      fileSpecBody.Desc = new String(options.description);
    }
    const filespec = this.ref(fileSpecBody);
    filespec.end();
    if (!options.hidden) {
      this.addNamedEmbeddedFile(options.name, filespec);
    }
    return filespec;
  }
};
function isEqual(a, b) {
  return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate.getTime() === b.Params.CreationDate.getTime() && a.Params.ModDate.getTime() === b.Params.ModDate.getTime();
}
var PDFA = {
  initPDFA(pSubset) {
    if (pSubset.charAt(pSubset.length - 3) === "-") {
      this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
      this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
    } else {
      this.subset_conformance = "B";
      this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
    }
  },
  endSubset() {
    this._addPdfaMetadata();
    this._addColorOutputIntent();
  },
  _addColorOutputIntent() {
    const iccProfile = fs.readFileSync(`${__dirname}/data/sRGB_IEC61966_2_1.icc`);
    const colorProfileRef = this.ref({
      Length: iccProfile.length,
      N: 3
    });
    colorProfileRef.write(iccProfile);
    colorProfileRef.end();
    const intentRef = this.ref({
      Type: "OutputIntent",
      S: "GTS_PDFA1",
      Info: new String("sRGB IEC61966-2.1"),
      OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
      DestOutputProfile: colorProfileRef
    });
    intentRef.end();
    this._root.data.OutputIntents = [intentRef];
  },
  _getPdfaid() {
    return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
  },
  _addPdfaMetadata() {
    this.appendXML(this._getPdfaid());
  }
};
var PDFUA = {
  initPDFUA() {
    this.subset = 1;
  },
  endSubset() {
    this._addPdfuaMetadata();
  },
  _addPdfuaMetadata() {
    this.appendXML(this._getPdfuaid());
  },
  _getPdfuaid() {
    return `
        <rdf:Description xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/" rdf:about="">
            <pdfuaid:part>${this.subset}</pdfuaid:part>
        </rdf:Description>
        `;
  }
};
var SubsetMixin = {
  _importSubset(subset) {
    Object.assign(this, subset);
  },
  initSubset(options) {
    switch (options.subset) {
      case "PDF/A-1":
      case "PDF/A-1a":
      case "PDF/A-1b":
      case "PDF/A-2":
      case "PDF/A-2a":
      case "PDF/A-2b":
      case "PDF/A-3":
      case "PDF/A-3a":
      case "PDF/A-3b":
        this._importSubset(PDFA);
        this.initPDFA(options.subset);
        break;
      case "PDF/UA":
        this._importSubset(PDFUA);
        this.initPDFUA();
        break;
    }
  }
};
var PDFMetadata = class {
  constructor() {
    this._metadata = `
        <?xpacket begin="\uFEFF" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
  }
  _closeTags() {
    this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
  }
  append(xml) {
    let newline = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this._metadata = this._metadata.concat(xml);
    if (newline) this._metadata = this._metadata.concat("\n");
  }
  getXML() {
    return this._metadata;
  }
  getLength() {
    return this._metadata.length;
  }
  end() {
    this._closeTags();
    this._metadata = this._metadata.trim();
  }
};
var MetadataMixin = {
  initMetadata() {
    this.metadata = new PDFMetadata();
  },
  appendXML(xml) {
    let newline = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this.metadata.append(xml, newline);
  },
  _addInfo() {
    this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);
    if (this.info.Title || this.info.Author || this.info.Subject) {
      this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);
      if (this.info.Title) {
        this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);
      }
      if (this.info.Author) {
        this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);
      }
      if (this.info.Subject) {
        this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);
      }
      this.appendXML(`
            </rdf:Description>
            `);
    }
    this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);
    if (this.info.Keywords) {
      this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);
    }
    this.appendXML(`
        </rdf:Description>
        `);
  },
  endMetadata() {
    this._addInfo();
    this.metadata.end();
    if (this.version != 1.3) {
      this.metadataRef = this.ref({
        length: this.metadata.getLength(),
        Type: "Metadata",
        Subtype: "XML"
      });
      this.metadataRef.compress = false;
      this.metadataRef.write(Buffer.from(this.metadata.getXML(), "utf-8"));
      this.metadataRef.end();
      this._root.data.Metadata = this.metadataRef;
    }
  }
};
var PDFDocument = class extends stream.Readable {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    super(options);
    this.options = options;
    switch (options.pdfVersion) {
      case "1.4":
        this.version = 1.4;
        break;
      case "1.5":
        this.version = 1.5;
        break;
      case "1.6":
        this.version = 1.6;
        break;
      case "1.7":
      case "1.7ext3":
        this.version = 1.7;
        break;
      default:
        this.version = 1.3;
        break;
    }
    this.compress = this.options.compress != null ? this.options.compress : true;
    this._pageBuffer = [];
    this._pageBufferStart = 0;
    this._offsets = [];
    this._waiting = 0;
    this._ended = false;
    this._offset = 0;
    const Pages = this.ref({
      Type: "Pages",
      Count: 0,
      Kids: []
    });
    const Names = this.ref({
      Dests: new PDFNameTree()
    });
    this._root = this.ref({
      Type: "Catalog",
      Pages,
      Names
    });
    if (this.options.lang) {
      this._root.data.Lang = new String(this.options.lang);
    }
    this.page = null;
    this.initMetadata();
    this.initColor();
    this.initVector();
    this.initFonts(options.font);
    this.initText();
    this.initImages();
    this.initOutline();
    this.initMarkings(options);
    this.initSubset(options);
    this.info = {
      Producer: "PDFKit",
      Creator: "PDFKit",
      CreationDate: /* @__PURE__ */ new Date()
    };
    if (this.options.info) {
      for (let key in this.options.info) {
        const val = this.options.info[key];
        this.info[key] = val;
      }
    }
    if (this.options.displayTitle) {
      this._root.data.ViewerPreferences = this.ref({
        DisplayDocTitle: true
      });
    }
    this._id = PDFSecurity.generateFileID(this.info);
    this._security = PDFSecurity.create(this, options);
    this._write(`%PDF-${this.version}`);
    this._write("%\xFF\xFF\xFF\xFF");
    if (this.options.autoFirstPage !== false) {
      this.addPage();
    }
  }
  addPage(options) {
    if (options == null) {
      ({
        options
      } = this);
    }
    if (!this.options.bufferPages) {
      this.flushPages();
    }
    this.page = new PDFPage(this, options);
    this._pageBuffer.push(this.page);
    const pages = this._root.data.Pages.data;
    pages.Kids.push(this.page.dictionary);
    pages.Count++;
    this.x = this.page.margins.left;
    this.y = this.page.margins.top;
    this._ctm = [1, 0, 0, 1, 0, 0];
    this.transform(1, 0, 0, -1, 0, this.page.height);
    this.emit("pageAdded");
    return this;
  }
  continueOnNewPage(options) {
    const pageMarkings = this.endPageMarkings(this.page);
    this.addPage(options);
    this.initPageMarkings(pageMarkings);
    return this;
  }
  bufferedPageRange() {
    return {
      start: this._pageBufferStart,
      count: this._pageBuffer.length
    };
  }
  switchToPage(n) {
    let page;
    if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
      throw new Error(`switchToPage(${n}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
    }
    return this.page = page;
  }
  flushPages() {
    const pages = this._pageBuffer;
    this._pageBuffer = [];
    this._pageBufferStart += pages.length;
    for (let page of pages) {
      this.endPageMarkings(page);
      page.end();
    }
  }
  addNamedDestination(name) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length === 0) {
      args = ["XYZ", null, null, null];
    }
    if (args[0] === "XYZ" && args[2] !== null) {
      args[2] = this.page.height - args[2];
    }
    args.unshift(this.page.dictionary);
    this._root.data.Names.data.Dests.add(name, args);
  }
  addNamedEmbeddedFile(name, ref) {
    if (!this._root.data.Names.data.EmbeddedFiles) {
      this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
        limits: false
      });
    }
    this._root.data.Names.data.EmbeddedFiles.add(name, ref);
  }
  addNamedJavaScript(name, js) {
    if (!this._root.data.Names.data.JavaScript) {
      this._root.data.Names.data.JavaScript = new PDFNameTree();
    }
    let data = {
      JS: new String(js),
      S: "JavaScript"
    };
    this._root.data.Names.data.JavaScript.add(name, data);
  }
  ref(data) {
    const ref = new PDFReference(this, this._offsets.length + 1, data);
    this._offsets.push(null);
    this._waiting++;
    return ref;
  }
  _read() {
  }
  // do nothing, but this method is required by node
  _write(data) {
    if (!Buffer.isBuffer(data)) {
      data = Buffer.from(data + "\n", "binary");
    }
    this.push(data);
    return this._offset += data.length;
  }
  addContent(data) {
    this.page.write(data);
    return this;
  }
  _refEnd(ref) {
    this._offsets[ref.id - 1] = ref.offset;
    if (--this._waiting === 0 && this._ended) {
      this._finalize();
      return this._ended = false;
    }
  }
  end() {
    this.flushPages();
    this._info = this.ref();
    for (let key in this.info) {
      let val = this.info[key];
      if (typeof val === "string") {
        val = new String(val);
      }
      let entry = this.ref(val);
      entry.end();
      this._info.data[key] = entry;
    }
    this._info.end();
    for (let name in this._fontFamilies) {
      const font = this._fontFamilies[name];
      font.finalize();
    }
    this.endOutline();
    this.endMarkings();
    if (this.subset) {
      this.endSubset();
    }
    this.endMetadata();
    this._root.end();
    this._root.data.Pages.end();
    this._root.data.Names.end();
    this.endAcroForm();
    if (this._root.data.ViewerPreferences) {
      this._root.data.ViewerPreferences.end();
    }
    if (this._security) {
      this._security.end();
    }
    if (this._waiting === 0) {
      return this._finalize();
    } else {
      return this._ended = true;
    }
  }
  _finalize() {
    const xRefOffset = this._offset;
    this._write("xref");
    this._write(`0 ${this._offsets.length + 1}`);
    this._write("0000000000 65535 f ");
    for (let offset of this._offsets) {
      offset = `0000000000${offset}`.slice(-10);
      this._write(offset + " 00000 n ");
    }
    const trailer = {
      Size: this._offsets.length + 1,
      Root: this._root,
      Info: this._info,
      ID: [this._id, this._id]
    };
    if (this._security) {
      trailer.Encrypt = this._security.dictionary;
    }
    this._write("trailer");
    this._write(PDFObject.convert(trailer));
    this._write("startxref");
    this._write(`${xRefOffset}`);
    this._write("%%EOF");
    return this.push(null);
  }
  toString() {
    return "[object PDFDocument]";
  }
};
var mixin = (methods) => {
  Object.assign(PDFDocument.prototype, methods);
};
mixin(MetadataMixin);
mixin(ColorMixin);
mixin(VectorMixin);
mixin(FontsMixin);
mixin(TextMixin);
mixin(ImagesMixin);
mixin(AnnotationsMixin);
mixin(OutlineMixin);
mixin(MarkingsMixin);
mixin(AcroFormMixin);
mixin(AttachmentsMixin);
mixin(SubsetMixin);
PDFDocument.LineWrapper = LineWrapper;
var pdfkit_es_default = PDFDocument;

// src/utils/generatePDF.ts
import { Buffer as Buffer2 } from "buffer";
import moment from "moment";
import path from "path";
var fontPath = path.join(__dirname, "..", "data", "Helvetica.afm");
async function generatePDF(data) {
  return new Promise((resolve, reject) => {
    try {
      if (!data || !data.company) {
        throw new Error("Invalid invoice data");
      }
      const doc = new pdfkit_es_default({ margin: 50 });
      doc.registerFont("Helvetica", fontPath);
      const buffers = [];
      doc.on("data", buffers.push.bind(buffers));
      doc.on("end", () => {
        const pdfBuffer = Buffer2.concat(buffers);
        resolve(pdfBuffer);
      });
      doc.on("error", (err) => {
        reject(err);
      });
      const formatCurrency = (amount) => {
        return new Intl.NumberFormat("en-US", {
          style: "currency",
          currency: "USD"
        }).format(amount);
      };
      if (data.company.logo) {
        try {
          doc.image(data.company.logo, 50, 45, { width: 100 });
        } catch (logoErr) {
          console.warn("Could not load company logo:", logoErr);
          doc.fontSize(20).text("___", 50, 45);
        }
      } else {
        doc.fontSize(20).text("___", 50, 45);
      }
      doc.fontSize(8).text("From:", 50, 130).fontSize(9).text(data.company.businessName || data.company.name, 50, 145).text(data.company.email, 50, 160).text(data.company.phoneNumber, 50, 175).text(data.company.contactAddress, 50, 190);
      doc.fontSize(8).text("Bill to:", 50, 220).fontSize(9).text(data.name, 50, 235).text(data.email, 50, 250).text(data.phone, 50, 265).text(data.address, 50, 280);
      const rightColumn = 400;
      doc.fontSize(12).text(
        Number(data.balanceDue) <= 0 ? "Receipt" : data.type,
        rightColumn,
        130
      ).fontSize(8).text(data.id, rightColumn, 145).text("Status", rightColumn, 165).fontSize(12).text(data.status, rightColumn, 180).fontSize(8).text("Date", rightColumn, 200).fontSize(9).text(moment(data.date).format("ll"), rightColumn, 215).fontSize(8).text("Due Date", rightColumn, 235).fontSize(9).text(moment(data.dueDate).format("ll"), rightColumn, 250).fontSize(8).text("Amount", rightColumn, 270).fontSize(12).text(formatCurrency(data.total), rightColumn, 285);
      const tableTop = 350;
      doc.fontSize(9);
      const tableHeaders = ["Item", "Quantity", "Price", "Discount(%)", "Amount"];
      const columnWidths = [200, 60, 100, 80, 100];
      let currentX = 50;
      tableHeaders.forEach((header, i) => {
        doc.text(header, currentX, tableTop);
        currentX += columnWidths[i];
      });
      let yPosition = tableTop + 25;
      data.items.forEach((item) => {
        const amount = item.quantity * item.unitPrice - item.quantity * item.unitPrice * item.discount / 100;
        currentX = 50;
        doc.text(item.itemName, currentX, yPosition);
        currentX += columnWidths[0];
        doc.text(item.quantity.toString(), currentX, yPosition);
        currentX += columnWidths[1];
        doc.text(formatCurrency(item.unitPrice), currentX, yPosition);
        currentX += columnWidths[2];
        doc.text(item.discount.toString(), currentX, yPosition);
        currentX += columnWidths[3];
        doc.text(formatCurrency(amount), currentX, yPosition);
        yPosition += 20;
      });
      const summaryX = 400;
      yPosition += 20;
      doc.fontSize(9).text("Invoice Summary", summaryX, yPosition);
      yPosition += 20;
      doc.text("Sub Total", summaryX, yPosition).text(formatCurrency(data.subTotal), summaryX + 100, yPosition);
      yPosition += 20;
      doc.text("VAT", summaryX, yPosition).text(formatCurrency(data.vat), summaryX + 100, yPosition);
      yPosition += 20;
      doc.text("Total", summaryX, yPosition).text(formatCurrency(data.total), summaryX + 100, yPosition);
      yPosition += 20;
      doc.text("Paid", summaryX, yPosition).text(
        formatCurrency(data.totalAmountReceived),
        summaryX + 100,
        yPosition
      );
      yPosition += 20;
      doc.text("Balance Due", summaryX, yPosition).text(formatCurrency(data.balanceDue), summaryX + 100, yPosition);
      yPosition += 40;
      doc.fontSize(9).text("Note", 50, yPosition).text(data.notes, 50, yPosition + 15);
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

// src/documents/email.ts
import moment2 from "moment";
function emailTemplate({
  dueDate,
  type,
  balanceDue,
  company,
  link,
  id
}) {
  return `
<!DOCTYPE html>
<html>
    <head>
       <style>
           html, body {
    margin: 0 auto;
    padding: 0;
}

.layout {
    background-color: #EEEEEE;
    font-family: "Roboto";
    width: 100%;
    color: #484b5b;
    padding: 20px 0;
}

.content {
    text-align: center;
    background-color: white;
    width: 75%;
    margin: 0 auto;
    padding: 25px;
}

.name {
    line-height: 20px;
    font-size: 24px;
    
}

.logo {
    width: 150px;
    margin: 0px auto;
}

hr {
  border: 0;
  clear:both;
  display:block;
  width: 96%;               
  background-color: #d1d1d1;
  height: 1px;
  margin-top: 20px;
}


.link-container {
  padding: 25px; 
  margin: 0 auto;
}

.invoice-link {
    padding: 18px 30px;
    background-color: #1a64db;
    width: 50%;
    margin: 0 auto;
    border-radius: 50px;
    border: none;
    color: white;
    font-size: 18px;
    text-decoration: none;
    
}

.address {
    text-align: center
}

.address p {
    line-height: 7px;
    font-size: 15px
}

.address h2 {
    font-size: 17px
}


.footer {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    
}

.footer-logo {
    width: 50px;
    margin: 20px auto;
    display: block
    
}

@media only screen and (max-width: 600px) {
  content {
    width: 100%;
  }

  invoice-link {
    width: 100%;
  }
}
       </style>
    </head>
    
    
    
    <body>
        <div class="layout">
        <div class="content">
            <img src=${company.logo} class="logo" />
            <h1 class="name">${company.businessName ? company.businessName : company.name}</h1>
            
              <hr>
              <div>
                  <p style="font-size: 18px">${Number(balanceDue) <= 0 ? "Thank you for your business" : type} ${Number(balanceDue) != 0 ? "for" : ""} <span style="font-weight: 700">${Number(balanceDue) <= 0 ? "" : balanceDue}</span> ${Number(balanceDue) <= 0 ? "" : `due by`} <span style="font-weight: 700">${Number(balanceDue) <= 0 ? "" : moment2(dueDate).format("MMM Do YYYY")}</span></p>
              </div>
              
              <div class="link-container">
                  <a href=${link} class="invoice-link" style="color: white">
                  ${Number(balanceDue) <= 0 ? "View Receipt" : `View ${type}`}
                  </a>
              </div>
              
              <p style="font-size: 14px; padding: 20px">#${id}</p>
              
              <div class="address">
                  <h2>${company.businessName}</h2>
                  <p>${company.phoneNumber}</p>
                  <p>${company.website ? company?.website : ""}</p>
                  
              </div>
        </div>
        
      <div class"footer">
          <a href="https://accountill.com">
          <img class="footer-logo" src="https://i.postimg.cc/hGZKzdkS/logo.png" alt="arc-invoice"/>
        </a>
      </div>
    <p style="text-align: center">Make beautiful invoice for free at accountill.com</p>
    </div>
    </body>
</html>`;
}

// src/controllers/pdfs.ts
var transporter = nodemailer2.createTransport({
  service: "gmail",
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  },
  tls: {
    rejectUnauthorized: false
  }
});
var sendPDF = async (req, res) => {
  const { email, company } = req.body;
  try {
    const pdfBuffer = await generatePDF(req.body);
    transporter.sendMail(
      {
        from: `Accountill <noreply@accountill.com>`,
        to: `${email}`,
        replyTo: `${company.email}`,
        subject: `Invoice from ${company.businessName ? company.businessName : company.name}`,
        text: `Invoice from ${company.businessName ? company.businessName : company.name}`,
        html: emailTemplate(req.body),
        attachments: [
          {
            filename: "invoice.pdf",
            content: pdfBuffer
          }
        ]
      },
      (mailErr) => {
        if (mailErr) {
          return res.status(500).send("Error sending email");
        }
        res.status(200).send("PDF invoice sent successfully");
      }
    );
  } catch (error) {
    console.error("PDF creation error:", error);
    res.status(500).send("Error creating PDF");
  }
};
var createPDF = async (req, res) => {
  console.log("Request Body:", req.body);
  try {
    const pdfBuffer = await generatePDF(req.body);
    fs2.writeFile(`${__dirname}/invoice.pdf`, pdfBuffer, (err) => {
      if (err) {
        console.error("Error writing PDF file:", err);
        return res.status(500).json({ message: "Error saving PDF" });
      }
    });
    res.status(200).json({ message: "PDF created successfully" });
    return;
  } catch (error) {
    console.error("PDF creation error:", error);
    res.status(500).json({
      message: error instanceof Error ? error.message : "Unknown error occurred"
    });
    return;
  }
};
var fetchPDF = async (req, res) => {
  res.sendFile(`${__dirname}/invoice.pdf`);
  return;
};

// src/routes/pdfs.ts
var router7 = import_express7.default.Router();
router7.post("/send-pdf", sendPDF);
router7.post("/create-pdf", createPDF);
router7.get("/fetch-pdf", fetchPDF);
var pdfs_default = router7;

// src/db/connectDB.ts
import mongoose12 from "mongoose";
var DB_URL = process.env.DB_URL;
async function mongoConnect() {
  if (!DB_URL) {
    throw new Error("DB URL is not defined in the environment variables.");
  }
  try {
    const mongooseOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      dbName: "accountil"
    };
    await mongoose12.connect(DB_URL, mongooseOptions);
    console.log("Connected to MongoDB successfully");
  } catch (error) {
    console.error("MongoDB connection error:", error);
    process.exit(1);
  }
}
mongoose12.connection.on("error", (err) => {
  console.error("MongoDB connection error:", err);
});
mongoose12.connection.on("disconnected", () => {
  console.log("MongoDB disconnected");
});
process.on("SIGINT", async () => {
  await mongoose12.connection.close();
  process.exit(0);
});

// src/index.ts
var app = (0, import_express8.default)();
dotenv2.config();
var PORT2 = process.env.PORT || 5e3;
app.use(import_express8.default.json({ limit: "30mb" }));
app.use(import_express8.default.urlencoded({ limit: "30mb", extended: true }));
app.use(cors());
mongoConnect();
app.use("/api/invoices", invoices_default);
app.use("/api/clients", clients_default);
app.use("/api/users", userRoutes_default);
app.use("/api/profiles", profile_default);
app.use("/api/inventory", inventory_default);
app.use("/api/expenses", expenses_default);
app.use("/api", pdfs_default);
app.get("/api/health", (req, res) => {
  res.sendStatus(200).json("Server is okay");
});
app.use(import_express8.default.static(path2.join(__dirname, "..", "..", "apps", "client", "dist")));
app.get("*", (req, res) => {
  res.sendFile(path2.join(__dirname, "..", "..", "client", "dist", "index.html"));
});
app.listen(PORT2, () => console.log(`Server running on port: ${PORT2}`));
/*! Bundled license information:

depd/index.js:
  (*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   *)

bytes/index.js:
  (*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   *)

content-type/index.js:
  (*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

statuses/index.js:
  (*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

toidentifier/index.js:
  (*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

http-errors/index.js:
  (*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

destroy/index.js:
  (*!
   * destroy
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

unpipe/index.js:
  (*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

raw-body/index.js:
  (*!
   * raw-body
   * Copyright(c) 2013-2014 Jonathan Ong
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

ee-first/index.js:
  (*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   *)

on-finished/index.js:
  (*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/lib/read.js:
  (*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

media-typer/index.js:
  (*!
   * media-typer
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

type-is/index.js:
  (*!
   * type-is
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/lib/types/json.js:
  (*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/lib/types/raw.js:
  (*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/lib/types/text.js:
  (*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/lib/types/urlencoded.js:
  (*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

body-parser/index.js:
  (*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

merge-descriptors/index.js:
  (*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

encodeurl/index.js:
  (*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

escape-html/index.js:
  (*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   *)

parseurl/index.js:
  (*!
   * parseurl
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

finalhandler/index.js:
  (*!
   * finalhandler
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/router/layer.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

methods/index.js:
  (*!
   * methods
   * Copyright(c) 2013-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/router/route.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/router/index.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/middleware/init.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/middleware/query.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/view.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

content-disposition/index.js:
  (*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

encodeurl/index.js:
  (*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

etag/index.js:
  (*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

fresh/index.js:
  (*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

range-parser/index.js:
  (*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

send/index.js:
  (*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

forwarded/index.js:
  (*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

proxy-addr/index.js:
  (*!
   * proxy-addr
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/utils.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/application.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

negotiator/index.js:
  (*!
   * negotiator
   * Copyright(c) 2012 Federico Romero
   * Copyright(c) 2012-2014 Isaac Z. Schlueter
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

accepts/index.js:
  (*!
   * accepts
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/request.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

vary/index.js:
  (*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/response.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

serve-static/index.js:
  (*!
   * serve-static
   * Copyright(c) 2010 Sencha Inc.
   * Copyright(c) 2011 TJ Holowaychuk
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/lib/express.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

express/index.js:
  (*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
//# sourceMappingURL=index.js.map